// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.ViewAssignedLoanBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the view_assigned_loan table.
 * @author sql2java
 */
public class ViewAssignedLoanManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbalo_nominal_total_left field.
     */
    public static final int ID_TBALO_NOMINAL_TOTAL_LEFT = 0;

    /**
     * Identify the tbc_local_currency_kurs field.
     */
    public static final int ID_TBC_LOCAL_CURRENCY_KURS = 1;

    /**
     * Identify the tbc_name field.
     */
    public static final int ID_TBC_NAME = 2;

    /**
     * Identify the tbc_currency_id field.
     */
    public static final int ID_TBC_CURRENCY_ID = 3;

    /**
     * Identify the tbalo_status field.
     */
    public static final int ID_TBALO_STATUS = 4;

    /**
     * Identify the tbalo_comments field.
     */
    public static final int ID_TBALO_COMMENTS = 5;

    /**
     * Identify the tbalo_monthly_payment field.
     */
    public static final int ID_TBALO_MONTHLY_PAYMENT = 6;

    /**
     * Identify the tbalo_nominal_total field.
     */
    public static final int ID_TBALO_NOMINAL_TOTAL = 7;

    /**
     * Identify the tbalo_tenor field.
     */
    public static final int ID_TBALO_TENOR = 8;

    /**
     * Identify the tbalo_interest field.
     */
    public static final int ID_TBALO_INTEREST = 9;

    /**
     * Identify the tbalo_nominal field.
     */
    public static final int ID_TBALO_NOMINAL = 10;

    /**
     * Identify the tbalo_end_date field.
     */
    public static final int ID_TBALO_END_DATE = 11;

    /**
     * Identify the tbalo_start_date field.
     */
    public static final int ID_TBALO_START_DATE = 12;

    /**
     * Identify the tbalo_updated_time field.
     */
    public static final int ID_TBALO_UPDATED_TIME = 13;

    /**
     * Identify the tbalo_created_time field.
     */
    public static final int ID_TBALO_CREATED_TIME = 14;

    /**
     * Identify the tbalo_name field.
     */
    public static final int ID_TBALO_NAME = 15;

    /**
     * Identify the tbc_id field.
     */
    public static final int ID_TBC_ID = 16;

    /**
     * Identify the tbalo_id field.
     */
    public static final int ID_TBALO_ID = 17;

    /**
     * Identify the tbe_name field.
     */
    public static final int ID_TBE_NAME = 18;

    /**
     * Identify the tbe_employee_id field.
     */
    public static final int ID_TBE_EMPLOYEE_ID = 19;

    /**
     * Identify the tbe_id field.
     */
    public static final int ID_TBE_ID = 20;

    /**
     * Contains all the full fields of the view_assigned_loan table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "view_assigned_loan.tbalo_nominal_total_left"
        ,"view_assigned_loan.tbc_local_currency_kurs"
        ,"view_assigned_loan.tbc_name"
        ,"view_assigned_loan.tbc_currency_id"
        ,"view_assigned_loan.tbalo_status"
        ,"view_assigned_loan.tbalo_comments"
        ,"view_assigned_loan.tbalo_monthly_payment"
        ,"view_assigned_loan.tbalo_nominal_total"
        ,"view_assigned_loan.tbalo_tenor"
        ,"view_assigned_loan.tbalo_interest"
        ,"view_assigned_loan.tbalo_nominal"
        ,"view_assigned_loan.tbalo_end_date"
        ,"view_assigned_loan.tbalo_start_date"
        ,"view_assigned_loan.tbalo_updated_time"
        ,"view_assigned_loan.tbalo_created_time"
        ,"view_assigned_loan.tbalo_name"
        ,"view_assigned_loan.tbc_id"
        ,"view_assigned_loan.tbalo_id"
        ,"view_assigned_loan.tbe_name"
        ,"view_assigned_loan.tbe_employee_id"
        ,"view_assigned_loan.tbe_id"
    };

    /**
     * Contains all the fields of the view_assigned_loan table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbalo_nominal_total_left"
        ,"tbc_local_currency_kurs"
        ,"tbc_name"
        ,"tbc_currency_id"
        ,"tbalo_status"
        ,"tbalo_comments"
        ,"tbalo_monthly_payment"
        ,"tbalo_nominal_total"
        ,"tbalo_tenor"
        ,"tbalo_interest"
        ,"tbalo_nominal"
        ,"tbalo_end_date"
        ,"tbalo_start_date"
        ,"tbalo_updated_time"
        ,"tbalo_created_time"
        ,"tbalo_name"
        ,"tbc_id"
        ,"tbalo_id"
        ,"tbe_name"
        ,"tbe_employee_id"
        ,"tbe_id"
    };

    /**
     * Field that contains the comma separated fields of the view_assigned_loan table.
     */
    public static final String ALL_FULL_FIELDS = "view_assigned_loan.tbalo_nominal_total_left"
                            + ",view_assigned_loan.tbc_local_currency_kurs"
                            + ",view_assigned_loan.tbc_name"
                            + ",view_assigned_loan.tbc_currency_id"
                            + ",view_assigned_loan.tbalo_status"
                            + ",view_assigned_loan.tbalo_comments"
                            + ",view_assigned_loan.tbalo_monthly_payment"
                            + ",view_assigned_loan.tbalo_nominal_total"
                            + ",view_assigned_loan.tbalo_tenor"
                            + ",view_assigned_loan.tbalo_interest"
                            + ",view_assigned_loan.tbalo_nominal"
                            + ",view_assigned_loan.tbalo_end_date"
                            + ",view_assigned_loan.tbalo_start_date"
                            + ",view_assigned_loan.tbalo_updated_time"
                            + ",view_assigned_loan.tbalo_created_time"
                            + ",view_assigned_loan.tbalo_name"
                            + ",view_assigned_loan.tbc_id"
                            + ",view_assigned_loan.tbalo_id"
                            + ",view_assigned_loan.tbe_name"
                            + ",view_assigned_loan.tbe_employee_id"
                            + ",view_assigned_loan.tbe_id";

    /**
     * Field that contains the comma separated fields of the view_assigned_loan table.
     */
    public static final String ALL_FIELDS = "tbalo_nominal_total_left"
                            + ",tbc_local_currency_kurs"
                            + ",tbc_name"
                            + ",tbc_currency_id"
                            + ",tbalo_status"
                            + ",tbalo_comments"
                            + ",tbalo_monthly_payment"
                            + ",tbalo_nominal_total"
                            + ",tbalo_tenor"
                            + ",tbalo_interest"
                            + ",tbalo_nominal"
                            + ",tbalo_end_date"
                            + ",tbalo_start_date"
                            + ",tbalo_updated_time"
                            + ",tbalo_created_time"
                            + ",tbalo_name"
                            + ",tbc_id"
                            + ",tbalo_id"
                            + ",tbe_name"
                            + ",tbe_employee_id"
                            + ",tbe_id";

    private static ViewAssignedLoanManager singleton = new ViewAssignedLoanManager();

    /**
     * Get the ViewAssignedLoanManager singleton.
     *
     * @return ViewAssignedLoanManager
     */
    public static ViewAssignedLoanManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new ViewAssignedLoanBean instance.
     *
     * @return the new ViewAssignedLoanBean
     */
    public ViewAssignedLoanBean createViewAssignedLoanBean()
    {
        return new ViewAssignedLoanBean();
    }




    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from view_assigned_loan.
     *
     * @return an array of ViewAssignedLoanManager bean
     * @throws DAOException
     */
    //5
    public ViewAssignedLoanBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from view_assigned_loan, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of ViewAssignedLoanManager bean
     * @throws DAOException
     */
    //6
    public ViewAssignedLoanBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ViewAssignedLoanBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ViewAssignedLoanBean table
     * @throws DAOException
     */
    //7
    public ViewAssignedLoanBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ViewAssignedLoanBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting ViewAssignedLoanBean table
     * @throws DAOException
     */
    //8
    public ViewAssignedLoanBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of ViewAssignedLoanBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting ViewAssignedLoanBean table
     * @throws DAOException
     */
    //9
    public ViewAssignedLoanBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_assigned_loan ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM view_assigned_loan ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the view_assigned_loan table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM view_assigned_loan " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ViewAssignedLoanBean bean into the database.
     *
     * @param bean the ViewAssignedLoanBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ViewAssignedLoanBean save(ViewAssignedLoanBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the ViewAssignedLoanBean bean into the database.
     *
     * @param bean the ViewAssignedLoanBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public ViewAssignedLoanBean insert(ViewAssignedLoanBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into view_assigned_loan (");

            if (bean.isTbaloNominalTotalLeftModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_nominal_total_left");
                _dirtyCount++;
            }

            if (bean.isTbcLocalCurrencyKursModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbc_local_currency_kurs");
                _dirtyCount++;
            }

            if (bean.isTbcNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbc_name");
                _dirtyCount++;
            }

            if (bean.isTbcCurrencyIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbc_currency_id");
                _dirtyCount++;
            }

            if (bean.isTbaloStatusModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_status");
                _dirtyCount++;
            }

            if (bean.isTbaloCommentsModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_comments");
                _dirtyCount++;
            }

            if (bean.isTbaloMonthlyPaymentModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_monthly_payment");
                _dirtyCount++;
            }

            if (bean.isTbaloNominalTotalModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_nominal_total");
                _dirtyCount++;
            }

            if (bean.isTbaloTenorModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_tenor");
                _dirtyCount++;
            }

            if (bean.isTbaloInterestModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_interest");
                _dirtyCount++;
            }

            if (bean.isTbaloNominalModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_nominal");
                _dirtyCount++;
            }

            if (bean.isTbaloEndDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_end_date");
                _dirtyCount++;
            }

            if (bean.isTbaloStartDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_start_date");
                _dirtyCount++;
            }

            if (bean.isTbaloUpdatedTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_updated_time");
                _dirtyCount++;
            }

            if (bean.isTbaloCreatedTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_created_time");
                _dirtyCount++;
            }

            if (bean.isTbaloNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_name");
                _dirtyCount++;
            }

            if (bean.isTbcIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbc_id");
                _dirtyCount++;
            }

            if (bean.isTbaloIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbalo_id");
                _dirtyCount++;
            }

            if (bean.isTbeNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_name");
                _dirtyCount++;
            }

            if (bean.isTbeEmployeeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_employee_id");
                _dirtyCount++;
            }

            if (bean.isTbeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the ViewAssignedLoanBean bean record in the database according to the changes.
     *
     * @param bean the ViewAssignedLoanBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ViewAssignedLoanBean update(ViewAssignedLoanBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();


            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE view_assigned_loan SET ");
            boolean useComma=false;

            if (bean.isTbaloNominalTotalLeftModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_nominal_total_left=?");
            }

            if (bean.isTbcLocalCurrencyKursModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbc_local_currency_kurs=?");
            }

            if (bean.isTbcNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbc_name=?");
            }

            if (bean.isTbcCurrencyIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbc_currency_id=?");
            }

            if (bean.isTbaloStatusModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_status=?");
            }

            if (bean.isTbaloCommentsModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_comments=?");
            }

            if (bean.isTbaloMonthlyPaymentModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_monthly_payment=?");
            }

            if (bean.isTbaloNominalTotalModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_nominal_total=?");
            }

            if (bean.isTbaloTenorModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_tenor=?");
            }

            if (bean.isTbaloInterestModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_interest=?");
            }

            if (bean.isTbaloNominalModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_nominal=?");
            }

            if (bean.isTbaloEndDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_end_date=?");
            }

            if (bean.isTbaloStartDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_start_date=?");
            }

            if (bean.isTbaloUpdatedTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_updated_time=?");
            }

            if (bean.isTbaloCreatedTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_created_time=?");
            }

            if (bean.isTbaloNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_name=?");
            }

            if (bean.isTbcIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbc_id=?");
            }

            if (bean.isTbaloIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbalo_id=?");
            }

            if (bean.isTbeNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_name=?");
            }

            if (bean.isTbeEmployeeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_employee_id=?");
            }

            if (bean.isTbeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id=?");
            }
            sql.append("");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of ViewAssignedLoanBean beans into the database.
     *
     * @param beans the ViewAssignedLoanBean bean table to be saved
     * @return the saved ViewAssignedLoanBean array.
     * @throws DAOException
     */
    //15
    public ViewAssignedLoanBean[] save(ViewAssignedLoanBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of ViewAssignedLoanBean beans into the database.
     *
     * @param beans the ViewAssignedLoanBean bean table to be inserted
     * @return the saved ViewAssignedLoanBean array.
     * @throws DAOException
     */
    //16
    public ViewAssignedLoanBean[] insert(ViewAssignedLoanBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of ViewAssignedLoanBean beans into the database.
     *
     * @param beans the ViewAssignedLoanBean bean table to be inserted
     * @return the saved ViewAssignedLoanBean array.
     * @throws DAOException
     */
    //17
    public ViewAssignedLoanBean[] update(ViewAssignedLoanBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique ViewAssignedLoanBean bean from a template one giving a c
     *
     * @param bean the ViewAssignedLoanBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public ViewAssignedLoanBean loadUniqueUsingTemplate(ViewAssignedLoanBean bean) throws DAOException
    {
         ViewAssignedLoanBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of ViewAssignedLoanBean from a template one.
     *
     * @param bean the ViewAssignedLoanBean template to look for
     * @return all the ViewAssignedLoanBean matching the template
     * @throws DAOException
     */
    //19
    public ViewAssignedLoanBean[] loadUsingTemplate(ViewAssignedLoanBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of ViewAssignedLoanBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewAssignedLoanBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the ViewAssignedLoanBean matching the template
     * @throws DAOException
     */
    //20
    public ViewAssignedLoanBean[] loadUsingTemplate(ViewAssignedLoanBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of ViewAssignedLoanBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewAssignedLoanBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the ViewAssignedLoanBean matching the template
     * @throws DAOException
     */
    //20
    public ViewAssignedLoanBean[] loadUsingTemplate(ViewAssignedLoanBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_assigned_loan ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a ViewAssignedLoanBean template.
     *
     * @param bean the ViewAssignedLoanBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(ViewAssignedLoanBean bean) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM view_assigned_loan ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table view_assigned_loan.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table view_assigned_loan with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM view_assigned_loan " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table view_assigned_loan with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific ViewAssignedLoanBean bean
     *
     * @param bean the ViewAssignedLoanBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(ViewAssignedLoanBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific ViewAssignedLoanBean bean , given the start row and number of rows.
     *
     * @param bean the ViewAssignedLoanBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewAssignedLoanBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific ViewAssignedLoanBean bean given the start row and number of rows and the search type
     *
     * @param bean the ViewAssignedLoanBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewAssignedLoanBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM view_assigned_loan");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, ViewAssignedLoanBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbaloNominalTotalLeftModified()) {
                _dirtyCount ++;
                if (bean.getTbaloNominalTotalLeft() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_nominal_total_left IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_nominal_total_left = ?");
                }
            }
            if (bean.isTbcLocalCurrencyKursModified()) {
                _dirtyCount ++;
                if (bean.getTbcLocalCurrencyKurs() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_local_currency_kurs IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_local_currency_kurs = ?");
                }
            }
            if (bean.isTbcNameModified()) {
                _dirtyCount ++;
                if (bean.getTbcName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcCurrencyIdModified()) {
                _dirtyCount ++;
                if (bean.getTbcCurrencyId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_currency_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_currency_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaloStatusModified()) {
                _dirtyCount ++;
                if (bean.getTbaloStatus() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_status IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_status = ?");
                }
            }
            if (bean.isTbaloCommentsModified()) {
                _dirtyCount ++;
                if (bean.getTbaloComments() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_comments IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_comments ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaloMonthlyPaymentModified()) {
                _dirtyCount ++;
                if (bean.getTbaloMonthlyPayment() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_monthly_payment IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_monthly_payment = ?");
                }
            }
            if (bean.isTbaloNominalTotalModified()) {
                _dirtyCount ++;
                if (bean.getTbaloNominalTotal() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_nominal_total IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_nominal_total = ?");
                }
            }
            if (bean.isTbaloTenorModified()) {
                _dirtyCount ++;
                if (bean.getTbaloTenor() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_tenor IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_tenor = ?");
                }
            }
            if (bean.isTbaloInterestModified()) {
                _dirtyCount ++;
                if (bean.getTbaloInterest() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_interest IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_interest = ?");
                }
            }
            if (bean.isTbaloNominalModified()) {
                _dirtyCount ++;
                if (bean.getTbaloNominal() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_nominal IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_nominal = ?");
                }
            }
            if (bean.isTbaloEndDateModified()) {
                _dirtyCount ++;
                if (bean.getTbaloEndDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_end_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_end_date ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaloStartDateModified()) {
                _dirtyCount ++;
                if (bean.getTbaloStartDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_start_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_start_date ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaloUpdatedTimeModified()) {
                _dirtyCount ++;
                if (bean.getTbaloUpdatedTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_updated_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_updated_time = ?");
                }
            }
            if (bean.isTbaloCreatedTimeModified()) {
                _dirtyCount ++;
                if (bean.getTbaloCreatedTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_created_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_created_time = ?");
                }
            }
            if (bean.isTbaloNameModified()) {
                _dirtyCount ++;
                if (bean.getTbaloName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcIdModified()) {
                _dirtyCount ++;
                if (bean.getTbcId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_id = ?");
                }
            }
            if (bean.isTbaloIdModified()) {
                _dirtyCount ++;
                if (bean.getTbaloId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbalo_id = ?");
                }
            }
            if (bean.isTbeNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeEmployeeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeEmployeeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_employee_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_employee_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, ViewAssignedLoanBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbaloNominalTotalLeftModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloNominalTotalLeft() + "]");
                if (bean.getTbaloNominalTotalLeft() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbaloNominalTotalLeft()); }
            }
            if (bean.isTbcLocalCurrencyKursModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcLocalCurrencyKurs() + "]");
                if (bean.getTbcLocalCurrencyKurs() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbcLocalCurrencyKurs()); }
            }
            if (bean.isTbcNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcName() + "]");
                        if (bean.getTbcName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcName() + "]");
                        if (bean.getTbcName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcCurrencyIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcCurrencyId() + "]");
                        if (bean.getTbcCurrencyId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcCurrencyId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcCurrencyId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcCurrencyId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcCurrencyId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcCurrencyId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcCurrencyId() + "]");
                        if (bean.getTbcCurrencyId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcCurrencyId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaloStatusModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloStatus() + "]");
                if (bean.getTbaloStatus() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbaloStatus()); }
            }
            if (bean.isTbaloCommentsModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloComments() + "]");
                        if (bean.getTbaloComments() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaloComments()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaloComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaloComments() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaloComments());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaloComments() + "]");
                        if (bean.getTbaloComments() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaloComments() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaloMonthlyPaymentModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloMonthlyPayment() + "]");
                if (bean.getTbaloMonthlyPayment() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbaloMonthlyPayment()); }
            }
            if (bean.isTbaloNominalTotalModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloNominalTotal() + "]");
                if (bean.getTbaloNominalTotal() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbaloNominalTotal()); }
            }
            if (bean.isTbaloTenorModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloTenor() + "]");
                if (bean.getTbaloTenor() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbaloTenor()); }
            }
            if (bean.isTbaloInterestModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloInterest() + "]");
                if (bean.getTbaloInterest() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbaloInterest()); }
            }
            if (bean.isTbaloNominalModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloNominal() + "]");
                if (bean.getTbaloNominal() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbaloNominal()); }
            }
            if (bean.isTbaloEndDateModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloEndDate() + "]");
                        if (bean.getTbaloEndDate() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaloEndDate()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaloEndDate() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaloEndDate() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloEndDate() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaloEndDate());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaloEndDate() + "]");
                        if (bean.getTbaloEndDate() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaloEndDate() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaloStartDateModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloStartDate() + "]");
                        if (bean.getTbaloStartDate() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaloStartDate()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaloStartDate() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaloStartDate() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloStartDate() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaloStartDate());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaloStartDate() + "]");
                        if (bean.getTbaloStartDate() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaloStartDate() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaloUpdatedTimeModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloUpdatedTime() + "]");
                if (bean.getTbaloUpdatedTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbaloUpdatedTime()); }
            }
            if (bean.isTbaloCreatedTimeModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloCreatedTime() + "]");
                if (bean.getTbaloCreatedTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbaloCreatedTime()); }
            }
            if (bean.isTbaloNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloName() + "]");
                        if (bean.getTbaloName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaloName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaloName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaloName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaloName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaloName() + "]");
                        if (bean.getTbaloName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaloName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcId() + "]");
                if (bean.getTbcId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbcId()); }
            }
            if (bean.isTbaloIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaloId() + "]");
                if (bean.getTbaloId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbaloId()); }
            }
            if (bean.isTbeNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "]");
                        if (bean.getTbeName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "]");
                        if (bean.getTbeName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeEmployeeIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmployeeId() + "]");
                        if (bean.getTbeEmployeeId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmployeeId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmployeeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmployeeId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmployeeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmployeeId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmployeeId() + "]");
                        if (bean.getTbeEmployeeId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmployeeId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeId() + "]");
                if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of ViewAssignedLoanBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting ViewAssignedLoanBean table
     * @throws DAOException
     */
    //28
    public ViewAssignedLoanBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (ViewAssignedLoanBean[])v.toArray(new ViewAssignedLoanBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the view_assigned_loan on a ViewAssignedLoanBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewAssignedLoanBean bean
     * @throws DAOException
     */
    //29
    public ViewAssignedLoanBean decodeRow(ResultSet rs) throws DAOException
    {
        ViewAssignedLoanBean bean = this.createViewAssignedLoanBean();
        try
        {
            bean.setTbaloNominalTotalLeft(Manager.getDouble(rs, 1));
            bean.setTbcLocalCurrencyKurs(Manager.getDouble(rs, 2));
            bean.setTbcName(rs.getString(3));
            bean.setTbcCurrencyId(rs.getString(4));
            bean.setTbaloStatus(Manager.getInteger(rs, 5));
            bean.setTbaloComments(rs.getString(6));
            bean.setTbaloMonthlyPayment(Manager.getDouble(rs, 7));
            bean.setTbaloNominalTotal(Manager.getDouble(rs, 8));
            bean.setTbaloTenor(Manager.getInteger(rs, 9));
            bean.setTbaloInterest(Manager.getDouble(rs, 10));
            bean.setTbaloNominal(Manager.getDouble(rs, 11));
            bean.setTbaloEndDate(rs.getString(12));
            bean.setTbaloStartDate(rs.getString(13));
            bean.setTbaloUpdatedTime(rs.getTimestamp(14));
            bean.setTbaloCreatedTime(rs.getTimestamp(15));
            bean.setTbaloName(rs.getString(16));
            bean.setTbcId(Manager.getInteger(rs, 17));
            bean.setTbaloId(Manager.getInteger(rs, 18));
            bean.setTbeName(rs.getString(19));
            bean.setTbeEmployeeId(rs.getString(20));
            bean.setTbeId(Manager.getInteger(rs, 21));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public ViewAssignedLoanBean toBean(ViewAssignedLoanBeanModel beanModel, ViewAssignedLoanBean bean)
    {
		if (beanModel.getTbaloNominalTotalLeft() != null)
			bean.setTbaloNominalTotalLeft(beanModel.getTbaloNominalTotalLeft());

		if (bean.getTbaloNominalTotalLeft() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloNominalTotalLeft().getClass().getName()))
			bean.setTbaloNominalTotalLeft(beanModel.getTbaloNominalTotalLeft());
		
		if (beanModel.getTbcLocalCurrencyKurs() != null)
			bean.setTbcLocalCurrencyKurs(beanModel.getTbcLocalCurrencyKurs());

		if (bean.getTbcLocalCurrencyKurs() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcLocalCurrencyKurs().getClass().getName()))
			bean.setTbcLocalCurrencyKurs(beanModel.getTbcLocalCurrencyKurs());
		
		if (beanModel.getTbcName() != null)
			bean.setTbcName(beanModel.getTbcName());

		if (bean.getTbcName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcName().getClass().getName()))
			bean.setTbcName(beanModel.getTbcName());
		
		if (beanModel.getTbcCurrencyId() != null)
			bean.setTbcCurrencyId(beanModel.getTbcCurrencyId());

		if (bean.getTbcCurrencyId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcCurrencyId().getClass().getName()))
			bean.setTbcCurrencyId(beanModel.getTbcCurrencyId());
		
		if (beanModel.getTbaloStatus() != null)
			bean.setTbaloStatus(beanModel.getTbaloStatus());

		if (bean.getTbaloStatus() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloStatus().getClass().getName()))
			bean.setTbaloStatus(beanModel.getTbaloStatus());
		
		if (beanModel.getTbaloComments() != null)
			bean.setTbaloComments(beanModel.getTbaloComments());

		if (bean.getTbaloComments() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloComments().getClass().getName()))
			bean.setTbaloComments(beanModel.getTbaloComments());
		
		if (beanModel.getTbaloMonthlyPayment() != null)
			bean.setTbaloMonthlyPayment(beanModel.getTbaloMonthlyPayment());

		if (bean.getTbaloMonthlyPayment() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloMonthlyPayment().getClass().getName()))
			bean.setTbaloMonthlyPayment(beanModel.getTbaloMonthlyPayment());
		
		if (beanModel.getTbaloNominalTotal() != null)
			bean.setTbaloNominalTotal(beanModel.getTbaloNominalTotal());

		if (bean.getTbaloNominalTotal() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloNominalTotal().getClass().getName()))
			bean.setTbaloNominalTotal(beanModel.getTbaloNominalTotal());
		
		if (beanModel.getTbaloTenor() != null)
			bean.setTbaloTenor(beanModel.getTbaloTenor());

		if (bean.getTbaloTenor() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloTenor().getClass().getName()))
			bean.setTbaloTenor(beanModel.getTbaloTenor());
		
		if (beanModel.getTbaloInterest() != null)
			bean.setTbaloInterest(beanModel.getTbaloInterest());

		if (bean.getTbaloInterest() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloInterest().getClass().getName()))
			bean.setTbaloInterest(beanModel.getTbaloInterest());
		
		if (beanModel.getTbaloNominal() != null)
			bean.setTbaloNominal(beanModel.getTbaloNominal());

		if (bean.getTbaloNominal() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloNominal().getClass().getName()))
			bean.setTbaloNominal(beanModel.getTbaloNominal());
		
		if (beanModel.getTbaloEndDate() != null)
			bean.setTbaloEndDate(beanModel.getTbaloEndDate());

		if (bean.getTbaloEndDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloEndDate().getClass().getName()))
			bean.setTbaloEndDate(beanModel.getTbaloEndDate());
		
		if (beanModel.getTbaloStartDate() != null)
			bean.setTbaloStartDate(beanModel.getTbaloStartDate());

		if (bean.getTbaloStartDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloStartDate().getClass().getName()))
			bean.setTbaloStartDate(beanModel.getTbaloStartDate());
		
		if (beanModel.getTbaloUpdatedTime() != null)
			bean.setTbaloUpdatedTime(beanModel.getTbaloUpdatedTime());

		if (bean.getTbaloUpdatedTime() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloUpdatedTime().getClass().getName()))
			bean.setTbaloUpdatedTime(beanModel.getTbaloUpdatedTime());
		
		if (beanModel.getTbaloCreatedTime() != null)
			bean.setTbaloCreatedTime(beanModel.getTbaloCreatedTime());

		if (bean.getTbaloCreatedTime() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloCreatedTime().getClass().getName()))
			bean.setTbaloCreatedTime(beanModel.getTbaloCreatedTime());
		
		if (beanModel.getTbaloName() != null)
			bean.setTbaloName(beanModel.getTbaloName());

		if (bean.getTbaloName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloName().getClass().getName()))
			bean.setTbaloName(beanModel.getTbaloName());
		
		if (beanModel.getTbcId() != null)
			bean.setTbcId(beanModel.getTbcId());

		if (bean.getTbcId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcId().getClass().getName()))
			bean.setTbcId(beanModel.getTbcId());
		
		if (beanModel.getTbaloId() != null)
			bean.setTbaloId(beanModel.getTbaloId());

		if (bean.getTbaloId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaloId().getClass().getName()))
			bean.setTbaloId(beanModel.getTbaloId());
		
		if (beanModel.getTbeName() != null)
			bean.setTbeName(beanModel.getTbeName());

		if (bean.getTbeName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeName().getClass().getName()))
			bean.setTbeName(beanModel.getTbeName());
		
		if (beanModel.getTbeEmployeeId() != null)
			bean.setTbeEmployeeId(beanModel.getTbeEmployeeId());

		if (bean.getTbeEmployeeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeEmployeeId().getClass().getName()))
			bean.setTbeEmployeeId(beanModel.getTbeEmployeeId());
		
		if (beanModel.getTbeId() != null)
			bean.setTbeId(beanModel.getTbeId());

		if (bean.getTbeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeId().getClass().getName()))
			bean.setTbeId(beanModel.getTbeId());
		
        return bean;
    }
	
    //29AA
    public ViewAssignedLoanBean[] toBeans(ViewAssignedLoanBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	ViewAssignedLoanBean beans[] = new ViewAssignedLoanBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public ViewAssignedLoanBeanModel toBeanModel(ViewAssignedLoanBean bean)
    {
    	ViewAssignedLoanBeanModel beanModel = new ViewAssignedLoanBeanModel();
		beanModel.setTbaloNominalTotalLeft(bean.getTbaloNominalTotalLeft());
		beanModel.setTbcLocalCurrencyKurs(bean.getTbcLocalCurrencyKurs());
		beanModel.setTbcName(bean.getTbcName());
		beanModel.setTbcCurrencyId(bean.getTbcCurrencyId());
		beanModel.setTbaloStatus(bean.getTbaloStatus());
		beanModel.setTbaloComments(bean.getTbaloComments());
		beanModel.setTbaloMonthlyPayment(bean.getTbaloMonthlyPayment());
		beanModel.setTbaloNominalTotal(bean.getTbaloNominalTotal());
		beanModel.setTbaloTenor(bean.getTbaloTenor());
		beanModel.setTbaloInterest(bean.getTbaloInterest());
		beanModel.setTbaloNominal(bean.getTbaloNominal());
		beanModel.setTbaloEndDate(bean.getTbaloEndDate());
		beanModel.setTbaloStartDate(bean.getTbaloStartDate());
		beanModel.setTbaloUpdatedTime(bean.getTbaloUpdatedTime());
		beanModel.setTbaloCreatedTime(bean.getTbaloCreatedTime());
		beanModel.setTbaloName(bean.getTbaloName());
		beanModel.setTbcId(bean.getTbcId());
		beanModel.setTbaloId(bean.getTbaloId());
		beanModel.setTbeName(bean.getTbeName());
		beanModel.setTbeEmployeeId(bean.getTbeEmployeeId());
		beanModel.setTbeId(bean.getTbeId());
		return beanModel;
    }
    
    //29CC
    public ViewAssignedLoanBeanModel[] toBeanModels(ViewAssignedLoanBean beans[])
    {
    	int beansCount = beans.length;
    	ViewAssignedLoanBeanModel beanModels[] = new ViewAssignedLoanBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the view_assigned_loan table on a ViewAssignedLoanBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting ViewAssignedLoanBean bean
     * @throws DAOException
     */
    //30
    public ViewAssignedLoanBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        ViewAssignedLoanBean bean = this.createViewAssignedLoanBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBALO_NOMINAL_TOTAL_LEFT:
                        ++pos;
                        bean.setTbaloNominalTotalLeft(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBC_LOCAL_CURRENCY_KURS:
                        ++pos;
                        bean.setTbcLocalCurrencyKurs(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBC_NAME:
                        ++pos;
                        bean.setTbcName(rs.getString(pos));
                        break;
                    case ID_TBC_CURRENCY_ID:
                        ++pos;
                        bean.setTbcCurrencyId(rs.getString(pos));
                        break;
                    case ID_TBALO_STATUS:
                        ++pos;
                        bean.setTbaloStatus(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBALO_COMMENTS:
                        ++pos;
                        bean.setTbaloComments(rs.getString(pos));
                        break;
                    case ID_TBALO_MONTHLY_PAYMENT:
                        ++pos;
                        bean.setTbaloMonthlyPayment(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBALO_NOMINAL_TOTAL:
                        ++pos;
                        bean.setTbaloNominalTotal(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBALO_TENOR:
                        ++pos;
                        bean.setTbaloTenor(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBALO_INTEREST:
                        ++pos;
                        bean.setTbaloInterest(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBALO_NOMINAL:
                        ++pos;
                        bean.setTbaloNominal(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBALO_END_DATE:
                        ++pos;
                        bean.setTbaloEndDate(rs.getString(pos));
                        break;
                    case ID_TBALO_START_DATE:
                        ++pos;
                        bean.setTbaloStartDate(rs.getString(pos));
                        break;
                    case ID_TBALO_UPDATED_TIME:
                        ++pos;
                        bean.setTbaloUpdatedTime(rs.getTimestamp(pos));
                        break;
                    case ID_TBALO_CREATED_TIME:
                        ++pos;
                        bean.setTbaloCreatedTime(rs.getTimestamp(pos));
                        break;
                    case ID_TBALO_NAME:
                        ++pos;
                        bean.setTbaloName(rs.getString(pos));
                        break;
                    case ID_TBC_ID:
                        ++pos;
                        bean.setTbcId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBALO_ID:
                        ++pos;
                        bean.setTbaloId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_NAME:
                        ++pos;
                        bean.setTbeName(rs.getString(pos));
                        break;
                    case ID_TBE_EMPLOYEE_ID:
                        ++pos;
                        bean.setTbeEmployeeId(rs.getString(pos));
                        break;
                    case ID_TBE_ID:
                        ++pos;
                        bean.setTbeId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the view_assigned_loan on a ViewAssignedLoanBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewAssignedLoanBean bean
     * @throws DAOException
     */
    //31
    public ViewAssignedLoanBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        ViewAssignedLoanBean bean = this.createViewAssignedLoanBean();
        try
        {
            bean.setTbaloNominalTotalLeft(Manager.getDouble(rs, "tbalo_nominal_total_left"));
            bean.setTbcLocalCurrencyKurs(Manager.getDouble(rs, "tbc_local_currency_kurs"));
            bean.setTbcName(rs.getString("tbc_name"));
            bean.setTbcCurrencyId(rs.getString("tbc_currency_id"));
            bean.setTbaloStatus(Manager.getInteger(rs, "tbalo_status"));
            bean.setTbaloComments(rs.getString("tbalo_comments"));
            bean.setTbaloMonthlyPayment(Manager.getDouble(rs, "tbalo_monthly_payment"));
            bean.setTbaloNominalTotal(Manager.getDouble(rs, "tbalo_nominal_total"));
            bean.setTbaloTenor(Manager.getInteger(rs, "tbalo_tenor"));
            bean.setTbaloInterest(Manager.getDouble(rs, "tbalo_interest"));
            bean.setTbaloNominal(Manager.getDouble(rs, "tbalo_nominal"));
            bean.setTbaloEndDate(rs.getString("tbalo_end_date"));
            bean.setTbaloStartDate(rs.getString("tbalo_start_date"));
            bean.setTbaloUpdatedTime(rs.getTimestamp("tbalo_updated_time"));
            bean.setTbaloCreatedTime(rs.getTimestamp("tbalo_created_time"));
            bean.setTbaloName(rs.getString("tbalo_name"));
            bean.setTbcId(Manager.getInteger(rs, "tbc_id"));
            bean.setTbaloId(Manager.getInteger(rs, "tbalo_id"));
            bean.setTbeName(rs.getString("tbe_name"));
            bean.setTbeEmployeeId(rs.getString("tbe_employee_id"));
            bean.setTbeId(Manager.getInteger(rs, "tbe_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ViewAssignedLoanBean
     * @throws DAOException
     */
    //32
    public ViewAssignedLoanBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ViewAssignedLoanBean
     * @throws DAOException
     */
    //33
    public ViewAssignedLoanBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (ViewAssignedLoanBean[])v.toArray(new ViewAssignedLoanBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of ViewAssignedLoanBean
     * @throws DAOException
     */
    //34
    public ViewAssignedLoanBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private ViewAssignedLoanListener listener = null;

    /**
     * Registers a unique ViewAssignedLoanListener listener.
     */
    //35
    public void registerListener(ViewAssignedLoanListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the ViewAssignedLoanBean bean.
     *
     * @param bean the ViewAssignedLoanBean bean to be saved
     */
    //36
    private void beforeInsert(ViewAssignedLoanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the ViewAssignedLoanBean bean.
     *
     * @param bean the ViewAssignedLoanBean bean to be saved
     */
    //37
    private void afterInsert(ViewAssignedLoanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the ViewAssignedLoanBean bean.
     *
     * @param bean the ViewAssignedLoanBean bean to be updated
     */
    //38
    private void beforeUpdate(ViewAssignedLoanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the ViewAssignedLoanBean bean.
     *
     * @param bean the ViewAssignedLoanBean bean to be updated
     */
    //39
    private void afterUpdate(ViewAssignedLoanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the ViewAssignedLoanBean bean.
     *
     * @param bean the ViewAssignedLoanBean bean to be deleted
     */
    private void beforeDelete(ViewAssignedLoanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the ViewAssignedLoanBean bean.
     *
     * @param bean the ViewAssignedLoanBean bean to be deleted
     */
    private void afterDelete(ViewAssignedLoanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
