// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbDependentsBean is a mapping of tb_dependents Table.
 * @author sql2java
*/
public class TbDependentsBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -3432561154144494692L;
	
    private String tbdRelationship;

    private boolean tbdRelationshipIsModified = false;
    private boolean tbdRelationshipIsInitialized = false;

    private Integer tbdDependentsType;

    private boolean tbdDependentsTypeIsModified = false;
    private boolean tbdDependentsTypeIsInitialized = false;

    private java.sql.Timestamp tbdDob;

    private boolean tbdDobIsModified = false;
    private boolean tbdDobIsInitialized = false;

    private String tbdName;

    private boolean tbdNameIsModified = false;
    private boolean tbdNameIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private Integer tbdId;

    private boolean tbdIdIsModified = false;
    private boolean tbdIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbDependentsBean is via the createTbDependentsBean method in TbDependentsManager or
     * via the factory class TbDependentsFactory create method
     */
    protected TbDependentsBean()
    {
    }

    /**
     * Getter method for tbdRelationship.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_dependents.tbd_relationship</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbdRelationship
     */
    public String getTbdRelationship()
    {
        return tbdRelationship;
    }

    /**
     * Setter method for tbdRelationship.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbdRelationship
     */
    public void setTbdRelationship(String newVal)
    {
        if ((newVal != null && tbdRelationship != null && (newVal.compareTo(tbdRelationship) == 0)) ||
            (newVal == null && tbdRelationship == null && tbdRelationshipIsInitialized)) {
            return;
        }
        tbdRelationship = newVal;
        tbdRelationshipIsModified = true;
        tbdRelationshipIsInitialized = true;
    }

    /**
     * Determines if the tbdRelationship has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbdRelationshipModified()
    {
        return tbdRelationshipIsModified;
    }

    /**
     * Determines if the tbdRelationship has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbdRelationshipInitialized()
    {
        return tbdRelationshipIsInitialized;
    }

    /**
     * Getter method for tbdDependentsType.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_dependents.tbd_dependents_type</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbdDependentsType
     */
    public Integer getTbdDependentsType()
    {
        return tbdDependentsType;
    }

    /**
     * Setter method for tbdDependentsType.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbdDependentsType
     */
    public void setTbdDependentsType(Integer newVal)
    {
        if ((newVal != null && tbdDependentsType != null && (newVal.compareTo(tbdDependentsType) == 0)) ||
            (newVal == null && tbdDependentsType == null && tbdDependentsTypeIsInitialized)) {
            return;
        }
        tbdDependentsType = newVal;
        tbdDependentsTypeIsModified = true;
        tbdDependentsTypeIsInitialized = true;
    }

    /**
     * Setter method for tbdDependentsType.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbdDependentsType
     */
    public void setTbdDependentsType(int newVal)
    {
        setTbdDependentsType(new Integer(newVal));
    }

    /**
     * Determines if the tbdDependentsType has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbdDependentsTypeModified()
    {
        return tbdDependentsTypeIsModified;
    }

    /**
     * Determines if the tbdDependentsType has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbdDependentsTypeInitialized()
    {
        return tbdDependentsTypeIsInitialized;
    }

    /**
     * Getter method for tbdDob.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_dependents.tbd_dob</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbdDob
     */
    public java.sql.Timestamp getTbdDob()
    {
        return tbdDob;
    }

    /**
     * Setter method for tbdDob.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbdDob
     */
    public void setTbdDob(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbdDob != null && (newVal.compareTo(tbdDob) == 0)) ||
            (newVal == null && tbdDob == null && tbdDobIsInitialized)) {
            return;
        }
        tbdDob = newVal;
        tbdDobIsModified = true;
        tbdDobIsInitialized = true;
    }

    /**
     * Setter method for tbdDob.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbdDob
     */
    public void setTbdDob(long newVal)
    {
        setTbdDob(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbdDob has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbdDobModified()
    {
        return tbdDobIsModified;
    }

    /**
     * Determines if the tbdDob has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbdDobInitialized()
    {
        return tbdDobIsInitialized;
    }

    /**
     * Getter method for tbdName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_dependents.tbd_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbdName
     */
    public String getTbdName()
    {
        return tbdName;
    }

    /**
     * Setter method for tbdName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbdName
     */
    public void setTbdName(String newVal)
    {
        if ((newVal != null && tbdName != null && (newVal.compareTo(tbdName) == 0)) ||
            (newVal == null && tbdName == null && tbdNameIsInitialized)) {
            return;
        }
        tbdName = newVal;
        tbdNameIsModified = true;
        tbdNameIsInitialized = true;
    }

    /**
     * Determines if the tbdName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbdNameModified()
    {
        return tbdNameIsModified;
    }

    /**
     * Determines if the tbdName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbdNameInitialized()
    {
        return tbdNameIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_dependents.tbe_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Getter method for tbdId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_dependents.tbd_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbdId
     */
    public Integer getTbdId()
    {
        return tbdId;
    }

    /**
     * Setter method for tbdId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbdId
     */
    public void setTbdId(Integer newVal)
    {
        if ((newVal != null && tbdId != null && (newVal.compareTo(tbdId) == 0)) ||
            (newVal == null && tbdId == null && tbdIdIsInitialized)) {
            return;
        }
        tbdId = newVal;
        tbdIdIsModified = true;
        tbdIdIsInitialized = true;
    }

    /**
     * Setter method for tbdId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbdId
     */
    public void setTbdId(int newVal)
    {
        setTbdId(new Integer(newVal));
    }

    /**
     * Determines if the tbdId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbdIdModified()
    {
        return tbdIdIsModified;
    }

    /**
     * Determines if the tbdId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbdIdInitialized()
    {
        return tbdIdIsInitialized;
    }

    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbdRelationshipIsModified 		|| tbdDependentsTypeIsModified  		|| tbdDobIsModified  		|| tbdNameIsModified  		|| tbeIdIsModified  		|| tbdIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbdRelationshipIsModified = false;
        tbdDependentsTypeIsModified = false;
        tbdDobIsModified = false;
        tbdNameIsModified = false;
        tbeIdIsModified = false;
        tbdIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbDependentsBean bean)
    {
        setTbdRelationship(bean.getTbdRelationship());
        setTbdDependentsType(bean.getTbdDependentsType());
        setTbdDob(bean.getTbdDob());
        setTbdName(bean.getTbdName());
        setTbeId(bean.getTbeId());
        setTbdId(bean.getTbdId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbd_relationship", getTbdRelationship() == null ? "" : getTbdRelationship().toString());
        dictionnary.put("tbd_dependents_type", getTbdDependentsType() == null ? "" : getTbdDependentsType().toString());
        dictionnary.put("tbd_dob", getTbdDob() == null ? "" : getTbdDob().toString());
        dictionnary.put("tbd_name", getTbdName() == null ? "" : getTbdName().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        dictionnary.put("tbd_id", getTbdId() == null ? "" : getTbdId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbd_id", getTbdId() == null ? "" : getTbdId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbd_relationship".equalsIgnoreCase(column) || "tbdRelationship".equalsIgnoreCase(column)) {
            return getTbdRelationship() == null ? "" : getTbdRelationship().toString();
        } else if ("tbd_dependents_type".equalsIgnoreCase(column) || "tbdDependentsType".equalsIgnoreCase(column)) {
            return getTbdDependentsType() == null ? "" : getTbdDependentsType().toString();
        } else if ("tbd_dob".equalsIgnoreCase(column) || "tbdDob".equalsIgnoreCase(column)) {
            return getTbdDob() == null ? "" : getTbdDob().toString();
        } else if ("tbd_name".equalsIgnoreCase(column) || "tbdName".equalsIgnoreCase(column)) {
            return getTbdName() == null ? "" : getTbdName().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        } else if ("tbd_id".equalsIgnoreCase(column) || "tbdId".equalsIgnoreCase(column)) {
            return getTbdId() == null ? "" : getTbdId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbDependentsBean)) {
            return false;
        }

		TbDependentsBean obj = (TbDependentsBean) object;
		return new EqualsBuilder()
            .append(getTbdRelationship(), obj.getTbdRelationship())
            .append(getTbdDependentsType(), obj.getTbdDependentsType())
            .append(getTbdDob(), obj.getTbdDob())
            .append(getTbdName(), obj.getTbdName())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbdId(), obj.getTbdId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbdRelationship())
            .append(getTbdDependentsType())
            .append(getTbdDob())
            .append(getTbdName())
            .append(getTbeId())
            .append(getTbdId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbd_relationship", getTbdRelationship())
            .append("tbd_dependents_type", getTbdDependentsType())
            .append("tbd_dob", getTbdDob())
            .append("tbd_name", getTbdName())
            .append("tbe_id", getTbeId())
            .append("tbd_id", getTbdId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbDependentsBean obj = (TbDependentsBean) object;
        return new CompareToBuilder()
            .append(getTbdRelationship(), obj.getTbdRelationship())
            .append(getTbdDependentsType(), obj.getTbdDependentsType())
            .append(getTbdDob(), obj.getTbdDob())
            .append(getTbdName(), obj.getTbdName())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbdId(), obj.getTbdId())
            .toComparison();
   }
}
