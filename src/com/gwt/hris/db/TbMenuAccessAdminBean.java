// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbMenuAccessAdminBean is a mapping of tb_menu_access_admin Table.
 * @author sql2java
*/
public class TbMenuAccessAdminBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -1579052871032156008L;
	
    private Integer tbmaaApprove;

    private boolean tbmaaApproveIsModified = false;
    private boolean tbmaaApproveIsInitialized = false;

    private Integer tbmaaView;

    private boolean tbmaaViewIsModified = false;
    private boolean tbmaaViewIsInitialized = false;

    private Integer tbmaaDelete;

    private boolean tbmaaDeleteIsModified = false;
    private boolean tbmaaDeleteIsInitialized = false;

    private Integer tbmaaUpdate;

    private boolean tbmaaUpdateIsModified = false;
    private boolean tbmaaUpdateIsInitialized = false;

    private Integer tbmaaInsert;

    private boolean tbmaaInsertIsModified = false;
    private boolean tbmaaInsertIsInitialized = false;

    private Integer tbmaaEnabled;

    private boolean tbmaaEnabledIsModified = false;
    private boolean tbmaaEnabledIsInitialized = false;

    private Integer tbaugId;

    private boolean tbaugIdIsModified = false;
    private boolean tbaugIdIsInitialized = false;

    private Integer tbmId;

    private boolean tbmIdIsModified = false;
    private boolean tbmIdIsInitialized = false;

    private Integer tbmaaId;

    private boolean tbmaaIdIsModified = false;
    private boolean tbmaaIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbMenuAccessAdminBean is via the createTbMenuAccessAdminBean method in TbMenuAccessAdminManager or
     * via the factory class TbMenuAccessAdminFactory create method
     */
    protected TbMenuAccessAdminBean()
    {
    }

    /**
     * Getter method for tbmaaApprove.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_menu_access_admin.tbmaa_approve</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaApprove
     */
    public Integer getTbmaaApprove()
    {
        return tbmaaApprove;
    }

    /**
     * Setter method for tbmaaApprove.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaApprove
     */
    public void setTbmaaApprove(Integer newVal)
    {
        if ((newVal != null && tbmaaApprove != null && (newVal.compareTo(tbmaaApprove) == 0)) ||
            (newVal == null && tbmaaApprove == null && tbmaaApproveIsInitialized)) {
            return;
        }
        tbmaaApprove = newVal;
        tbmaaApproveIsModified = true;
        tbmaaApproveIsInitialized = true;
    }

    /**
     * Setter method for tbmaaApprove.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaApprove
     */
    public void setTbmaaApprove(int newVal)
    {
        setTbmaaApprove(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaApprove has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaApproveModified()
    {
        return tbmaaApproveIsModified;
    }

    /**
     * Determines if the tbmaaApprove has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaApproveInitialized()
    {
        return tbmaaApproveIsInitialized;
    }

    /**
     * Getter method for tbmaaView.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_menu_access_admin.tbmaa_view</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaView
     */
    public Integer getTbmaaView()
    {
        return tbmaaView;
    }

    /**
     * Setter method for tbmaaView.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaView
     */
    public void setTbmaaView(Integer newVal)
    {
        if ((newVal != null && tbmaaView != null && (newVal.compareTo(tbmaaView) == 0)) ||
            (newVal == null && tbmaaView == null && tbmaaViewIsInitialized)) {
            return;
        }
        tbmaaView = newVal;
        tbmaaViewIsModified = true;
        tbmaaViewIsInitialized = true;
    }

    /**
     * Setter method for tbmaaView.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaView
     */
    public void setTbmaaView(int newVal)
    {
        setTbmaaView(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaView has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaViewModified()
    {
        return tbmaaViewIsModified;
    }

    /**
     * Determines if the tbmaaView has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaViewInitialized()
    {
        return tbmaaViewIsInitialized;
    }

    /**
     * Getter method for tbmaaDelete.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_menu_access_admin.tbmaa_delete</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaDelete
     */
    public Integer getTbmaaDelete()
    {
        return tbmaaDelete;
    }

    /**
     * Setter method for tbmaaDelete.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaDelete
     */
    public void setTbmaaDelete(Integer newVal)
    {
        if ((newVal != null && tbmaaDelete != null && (newVal.compareTo(tbmaaDelete) == 0)) ||
            (newVal == null && tbmaaDelete == null && tbmaaDeleteIsInitialized)) {
            return;
        }
        tbmaaDelete = newVal;
        tbmaaDeleteIsModified = true;
        tbmaaDeleteIsInitialized = true;
    }

    /**
     * Setter method for tbmaaDelete.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaDelete
     */
    public void setTbmaaDelete(int newVal)
    {
        setTbmaaDelete(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaDelete has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaDeleteModified()
    {
        return tbmaaDeleteIsModified;
    }

    /**
     * Determines if the tbmaaDelete has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaDeleteInitialized()
    {
        return tbmaaDeleteIsInitialized;
    }

    /**
     * Getter method for tbmaaUpdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_menu_access_admin.tbmaa_update</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaUpdate
     */
    public Integer getTbmaaUpdate()
    {
        return tbmaaUpdate;
    }

    /**
     * Setter method for tbmaaUpdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaUpdate
     */
    public void setTbmaaUpdate(Integer newVal)
    {
        if ((newVal != null && tbmaaUpdate != null && (newVal.compareTo(tbmaaUpdate) == 0)) ||
            (newVal == null && tbmaaUpdate == null && tbmaaUpdateIsInitialized)) {
            return;
        }
        tbmaaUpdate = newVal;
        tbmaaUpdateIsModified = true;
        tbmaaUpdateIsInitialized = true;
    }

    /**
     * Setter method for tbmaaUpdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaUpdate
     */
    public void setTbmaaUpdate(int newVal)
    {
        setTbmaaUpdate(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaUpdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaUpdateModified()
    {
        return tbmaaUpdateIsModified;
    }

    /**
     * Determines if the tbmaaUpdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaUpdateInitialized()
    {
        return tbmaaUpdateIsInitialized;
    }

    /**
     * Getter method for tbmaaInsert.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_menu_access_admin.tbmaa_insert</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaInsert
     */
    public Integer getTbmaaInsert()
    {
        return tbmaaInsert;
    }

    /**
     * Setter method for tbmaaInsert.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaInsert
     */
    public void setTbmaaInsert(Integer newVal)
    {
        if ((newVal != null && tbmaaInsert != null && (newVal.compareTo(tbmaaInsert) == 0)) ||
            (newVal == null && tbmaaInsert == null && tbmaaInsertIsInitialized)) {
            return;
        }
        tbmaaInsert = newVal;
        tbmaaInsertIsModified = true;
        tbmaaInsertIsInitialized = true;
    }

    /**
     * Setter method for tbmaaInsert.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaInsert
     */
    public void setTbmaaInsert(int newVal)
    {
        setTbmaaInsert(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaInsert has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaInsertModified()
    {
        return tbmaaInsertIsModified;
    }

    /**
     * Determines if the tbmaaInsert has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaInsertInitialized()
    {
        return tbmaaInsertIsInitialized;
    }

    /**
     * Getter method for tbmaaEnabled.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_menu_access_admin.tbmaa_enabled</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaEnabled
     */
    public Integer getTbmaaEnabled()
    {
        return tbmaaEnabled;
    }

    /**
     * Setter method for tbmaaEnabled.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaEnabled
     */
    public void setTbmaaEnabled(Integer newVal)
    {
        if ((newVal != null && tbmaaEnabled != null && (newVal.compareTo(tbmaaEnabled) == 0)) ||
            (newVal == null && tbmaaEnabled == null && tbmaaEnabledIsInitialized)) {
            return;
        }
        tbmaaEnabled = newVal;
        tbmaaEnabledIsModified = true;
        tbmaaEnabledIsInitialized = true;
    }

    /**
     * Setter method for tbmaaEnabled.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaEnabled
     */
    public void setTbmaaEnabled(int newVal)
    {
        setTbmaaEnabled(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaEnabled has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaEnabledModified()
    {
        return tbmaaEnabledIsModified;
    }

    /**
     * Determines if the tbmaaEnabled has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaEnabledInitialized()
    {
        return tbmaaEnabledIsInitialized;
    }

    /**
     * Getter method for tbaugId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_menu_access_admin.tbaug_id</li>
     * <li> foreign key: tb_admin_user_groups.tbaug_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaugId
     */
    public Integer getTbaugId()
    {
        return tbaugId;
    }

    /**
     * Setter method for tbaugId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaugId
     */
    public void setTbaugId(Integer newVal)
    {
        if ((newVal != null && tbaugId != null && (newVal.compareTo(tbaugId) == 0)) ||
            (newVal == null && tbaugId == null && tbaugIdIsInitialized)) {
            return;
        }
        tbaugId = newVal;
        tbaugIdIsModified = true;
        tbaugIdIsInitialized = true;
    }

    /**
     * Setter method for tbaugId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaugId
     */
    public void setTbaugId(int newVal)
    {
        setTbaugId(new Integer(newVal));
    }

    /**
     * Determines if the tbaugId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaugIdModified()
    {
        return tbaugIdIsModified;
    }

    /**
     * Determines if the tbaugId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaugIdInitialized()
    {
        return tbaugIdIsInitialized;
    }

    /**
     * Getter method for tbmId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_menu_access_admin.tbm_id</li>
     * <li> foreign key: tb_menu.tbm_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmId
     */
    public Integer getTbmId()
    {
        return tbmId;
    }

    /**
     * Setter method for tbmId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmId
     */
    public void setTbmId(Integer newVal)
    {
        if ((newVal != null && tbmId != null && (newVal.compareTo(tbmId) == 0)) ||
            (newVal == null && tbmId == null && tbmIdIsInitialized)) {
            return;
        }
        tbmId = newVal;
        tbmIdIsModified = true;
        tbmIdIsInitialized = true;
    }

    /**
     * Setter method for tbmId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmId
     */
    public void setTbmId(int newVal)
    {
        setTbmId(new Integer(newVal));
    }

    /**
     * Determines if the tbmId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmIdModified()
    {
        return tbmIdIsModified;
    }

    /**
     * Determines if the tbmId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmIdInitialized()
    {
        return tbmIdIsInitialized;
    }

    /**
     * Getter method for tbmaaId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_menu_access_admin.tbmaa_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaId
     */
    public Integer getTbmaaId()
    {
        return tbmaaId;
    }

    /**
     * Setter method for tbmaaId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaId
     */
    public void setTbmaaId(Integer newVal)
    {
        if ((newVal != null && tbmaaId != null && (newVal.compareTo(tbmaaId) == 0)) ||
            (newVal == null && tbmaaId == null && tbmaaIdIsInitialized)) {
            return;
        }
        tbmaaId = newVal;
        tbmaaIdIsModified = true;
        tbmaaIdIsInitialized = true;
    }

    /**
     * Setter method for tbmaaId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaId
     */
    public void setTbmaaId(int newVal)
    {
        setTbmaaId(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaIdModified()
    {
        return tbmaaIdIsModified;
    }

    /**
     * Determines if the tbmaaId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaIdInitialized()
    {
        return tbmaaIdIsInitialized;
    }

    /** The TbMenu referenced by this bean. */
    private TbMenuBean referencedTbMenu;
    /** Getter method for TbMenuBean. */
    public TbMenuBean getTbMenuBean() {
        return this.referencedTbMenu;
    }
    /** Setter method for TbMenuBean. */
    public void setTbMenuBean(TbMenuBean reference) {
        this.referencedTbMenu = reference;
    }
    
    /** The TbAdminUserGroups referenced by this bean. */
    private TbAdminUserGroupsBean referencedTbAdminUserGroups;
    /** Getter method for TbAdminUserGroupsBean. */
    public TbAdminUserGroupsBean getTbAdminUserGroupsBean() {
        return this.referencedTbAdminUserGroups;
    }
    /** Setter method for TbAdminUserGroupsBean. */
    public void setTbAdminUserGroupsBean(TbAdminUserGroupsBean reference) {
        this.referencedTbAdminUserGroups = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbmaaApproveIsModified 		|| tbmaaViewIsModified  		|| tbmaaDeleteIsModified  		|| tbmaaUpdateIsModified  		|| tbmaaInsertIsModified  		|| tbmaaEnabledIsModified  		|| tbaugIdIsModified  		|| tbmIdIsModified  		|| tbmaaIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbmaaApproveIsModified = false;
        tbmaaViewIsModified = false;
        tbmaaDeleteIsModified = false;
        tbmaaUpdateIsModified = false;
        tbmaaInsertIsModified = false;
        tbmaaEnabledIsModified = false;
        tbaugIdIsModified = false;
        tbmIdIsModified = false;
        tbmaaIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbMenuAccessAdminBean bean)
    {
        setTbmaaApprove(bean.getTbmaaApprove());
        setTbmaaView(bean.getTbmaaView());
        setTbmaaDelete(bean.getTbmaaDelete());
        setTbmaaUpdate(bean.getTbmaaUpdate());
        setTbmaaInsert(bean.getTbmaaInsert());
        setTbmaaEnabled(bean.getTbmaaEnabled());
        setTbaugId(bean.getTbaugId());
        setTbmId(bean.getTbmId());
        setTbmaaId(bean.getTbmaaId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbmaa_approve", getTbmaaApprove() == null ? "" : getTbmaaApprove().toString());
        dictionnary.put("tbmaa_view", getTbmaaView() == null ? "" : getTbmaaView().toString());
        dictionnary.put("tbmaa_delete", getTbmaaDelete() == null ? "" : getTbmaaDelete().toString());
        dictionnary.put("tbmaa_update", getTbmaaUpdate() == null ? "" : getTbmaaUpdate().toString());
        dictionnary.put("tbmaa_insert", getTbmaaInsert() == null ? "" : getTbmaaInsert().toString());
        dictionnary.put("tbmaa_enabled", getTbmaaEnabled() == null ? "" : getTbmaaEnabled().toString());
        dictionnary.put("tbaug_id", getTbaugId() == null ? "" : getTbaugId().toString());
        dictionnary.put("tbm_id", getTbmId() == null ? "" : getTbmId().toString());
        dictionnary.put("tbmaa_id", getTbmaaId() == null ? "" : getTbmaaId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbmaa_id", getTbmaaId() == null ? "" : getTbmaaId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbmaa_approve".equalsIgnoreCase(column) || "tbmaaApprove".equalsIgnoreCase(column)) {
            return getTbmaaApprove() == null ? "" : getTbmaaApprove().toString();
        } else if ("tbmaa_view".equalsIgnoreCase(column) || "tbmaaView".equalsIgnoreCase(column)) {
            return getTbmaaView() == null ? "" : getTbmaaView().toString();
        } else if ("tbmaa_delete".equalsIgnoreCase(column) || "tbmaaDelete".equalsIgnoreCase(column)) {
            return getTbmaaDelete() == null ? "" : getTbmaaDelete().toString();
        } else if ("tbmaa_update".equalsIgnoreCase(column) || "tbmaaUpdate".equalsIgnoreCase(column)) {
            return getTbmaaUpdate() == null ? "" : getTbmaaUpdate().toString();
        } else if ("tbmaa_insert".equalsIgnoreCase(column) || "tbmaaInsert".equalsIgnoreCase(column)) {
            return getTbmaaInsert() == null ? "" : getTbmaaInsert().toString();
        } else if ("tbmaa_enabled".equalsIgnoreCase(column) || "tbmaaEnabled".equalsIgnoreCase(column)) {
            return getTbmaaEnabled() == null ? "" : getTbmaaEnabled().toString();
        } else if ("tbaug_id".equalsIgnoreCase(column) || "tbaugId".equalsIgnoreCase(column)) {
            return getTbaugId() == null ? "" : getTbaugId().toString();
        } else if ("tbm_id".equalsIgnoreCase(column) || "tbmId".equalsIgnoreCase(column)) {
            return getTbmId() == null ? "" : getTbmId().toString();
        } else if ("tbmaa_id".equalsIgnoreCase(column) || "tbmaaId".equalsIgnoreCase(column)) {
            return getTbmaaId() == null ? "" : getTbmaaId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbMenuAccessAdminBean)) {
            return false;
        }

		TbMenuAccessAdminBean obj = (TbMenuAccessAdminBean) object;
		return new EqualsBuilder()
            .append(getTbmaaApprove(), obj.getTbmaaApprove())
            .append(getTbmaaView(), obj.getTbmaaView())
            .append(getTbmaaDelete(), obj.getTbmaaDelete())
            .append(getTbmaaUpdate(), obj.getTbmaaUpdate())
            .append(getTbmaaInsert(), obj.getTbmaaInsert())
            .append(getTbmaaEnabled(), obj.getTbmaaEnabled())
            .append(getTbaugId(), obj.getTbaugId())
            .append(getTbmId(), obj.getTbmId())
            .append(getTbmaaId(), obj.getTbmaaId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbmaaApprove())
            .append(getTbmaaView())
            .append(getTbmaaDelete())
            .append(getTbmaaUpdate())
            .append(getTbmaaInsert())
            .append(getTbmaaEnabled())
            .append(getTbaugId())
            .append(getTbmId())
            .append(getTbmaaId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbmaa_approve", getTbmaaApprove())
            .append("tbmaa_view", getTbmaaView())
            .append("tbmaa_delete", getTbmaaDelete())
            .append("tbmaa_update", getTbmaaUpdate())
            .append("tbmaa_insert", getTbmaaInsert())
            .append("tbmaa_enabled", getTbmaaEnabled())
            .append("tbaug_id", getTbaugId())
            .append("tbm_id", getTbmId())
            .append("tbmaa_id", getTbmaaId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbMenuAccessAdminBean obj = (TbMenuAccessAdminBean) object;
        return new CompareToBuilder()
            .append(getTbmaaApprove(), obj.getTbmaaApprove())
            .append(getTbmaaView(), obj.getTbmaaView())
            .append(getTbmaaDelete(), obj.getTbmaaDelete())
            .append(getTbmaaUpdate(), obj.getTbmaaUpdate())
            .append(getTbmaaInsert(), obj.getTbmaaInsert())
            .append(getTbmaaEnabled(), obj.getTbmaaEnabled())
            .append(getTbaugId(), obj.getTbaugId())
            .append(getTbmId(), obj.getTbmId())
            .append(getTbmaaId(), obj.getTbmaaId())
            .toComparison();
   }
}
