// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.TbPphBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the tb_pph table.
 * @author sql2java
 */
public class TbPphManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbpph_dummy field.
     */
    public static final int ID_TBPPH_DUMMY = 0;

    /**
     * Identify the tbpph_periode field.
     */
    public static final int ID_TBPPH_PERIODE = 1;

    /**
     * Identify the tbpph_total_take_home_pay_kurs field.
     */
    public static final int ID_TBPPH_TOTAL_TAKE_HOME_PAY_KURS = 2;

    /**
     * Identify the tbc_id field.
     */
    public static final int ID_TBC_ID = 3;

    /**
     * Identify the tbpph_total_take_home_pay field.
     */
    public static final int ID_TBPPH_TOTAL_TAKE_HOME_PAY = 4;

    /**
     * Identify the tbpph_loan field.
     */
    public static final int ID_TBPPH_LOAN = 5;

    /**
     * Identify the tbpph_take_home_pay_utk_pend_irreguler field.
     */
    public static final int ID_TBPPH_TAKE_HOME_PAY_UTK_PEND_IRREGULER = 6;

    /**
     * Identify the tbpph_pajak_komisi field.
     */
    public static final int ID_TBPPH_PAJAK_KOMISI = 7;

    /**
     * Identify the tbpph_pajak_tot_sethn_utk_kary_tdk_ber_npwp field.
     */
    public static final int ID_TBPPH_PAJAK_TOT_SETHN_UTK_KARY_TDK_BER_NPWP = 8;

    /**
     * Identify the tbpph_pajak_tot_sethn_utk_kary_ber_npwp field.
     */
    public static final int ID_TBPPH_PAJAK_TOT_SETHN_UTK_KARY_BER_NPWP = 9;

    /**
     * Identify the tbpph_pend_disetahunkan_plus_komisi field.
     */
    public static final int ID_TBPPH_PEND_DISETAHUNKAN_PLUS_KOMISI = 10;

    /**
     * Identify the tbpph_pajak_sdh_disetor_utk_pend_tdk_ttp_ytd field.
     */
    public static final int ID_TBPPH_PAJAK_SDH_DISETOR_UTK_PEND_TDK_TTP_YTD = 11;

    /**
     * Identify the tbpph_pendapatan_tidak_tetap_ytd field.
     */
    public static final int ID_TBPPH_PENDAPATAN_TIDAK_TETAP_YTD = 12;

    /**
     * Identify the tbpph_pendapatan_tidak_tetap field.
     */
    public static final int ID_TBPPH_PENDAPATAN_TIDAK_TETAP = 13;

    /**
     * Identify the tbpph_take_home_pay field.
     */
    public static final int ID_TBPPH_TAKE_HOME_PAY = 14;

    /**
     * Identify the tbpph_pajak_bln_ini field.
     */
    public static final int ID_TBPPH_PAJAK_BLN_INI = 15;

    /**
     * Identify the tbpph_pajak_terutang_smp_bln_ini field.
     */
    public static final int ID_TBPPH_PAJAK_TERUTANG_SMP_BLN_INI = 16;

    /**
     * Identify the tbpph_pajak_setahun_utk_kary_tdk_ber_npwp field.
     */
    public static final int ID_TBPPH_PAJAK_SETAHUN_UTK_KARY_TDK_BER_NPWP = 17;

    /**
     * Identify the tbpph_pajak_setahun_utk_kary_ber_npwp field.
     */
    public static final int ID_TBPPH_PAJAK_SETAHUN_UTK_KARY_BER_NPWP = 18;

    /**
     * Identify the tbpph_pendapatan_kena_pajak field.
     */
    public static final int ID_TBPPH_PENDAPATAN_KENA_PAJAK = 19;

    /**
     * Identify the tbpph_pendapatan_disetahunkan field.
     */
    public static final int ID_TBPPH_PENDAPATAN_DISETAHUNKAN = 20;

    /**
     * Identify the tbpph_faktor_pengali_utk_disetahunkan field.
     */
    public static final int ID_TBPPH_FAKTOR_PENGALI_UTK_DISETAHUNKAN = 21;

    /**
     * Identify the tbpph_pajak_disetor_ytd_smp_bln_lalu field.
     */
    public static final int ID_TBPPH_PAJAK_DISETOR_YTD_SMP_BLN_LALU = 22;

    /**
     * Identify the tbpph_pend_ytd_sblm_pajak_smp_bln_lalu field.
     */
    public static final int ID_TBPPH_PEND_YTD_SBLM_PAJAK_SMP_BLN_LALU = 23;

    /**
     * Identify the tbpph_pend_sbln_sblm_pajak field.
     */
    public static final int ID_TBPPH_PEND_SBLN_SBLM_PAJAK = 24;

    /**
     * Identify the tbpph_biaya_jabatan field.
     */
    public static final int ID_TBPPH_BIAYA_JABATAN = 25;

    /**
     * Identify the tbpph_iuran_jht_jamsostek field.
     */
    public static final int ID_TBPPH_IURAN_JHT_JAMSOSTEK = 26;

    /**
     * Identify the tbpph_total_gross field.
     */
    public static final int ID_TBPPH_TOTAL_GROSS = 27;

    /**
     * Identify the tbpph_tunjangan_jamsostek_jkkjkm field.
     */
    public static final int ID_TBPPH_TUNJANGAN_JAMSOSTEK_JKKJKM = 28;

    /**
     * Identify the tbpph_tunjangan_tetap field.
     */
    public static final int ID_TBPPH_TUNJANGAN_TETAP = 29;

    /**
     * Identify the tbpph_gaji_pokok_gross field.
     */
    public static final int ID_TBPPH_GAJI_POKOK_GROSS = 30;

    /**
     * Identify the tbpph_npwp_awal_tahun field.
     */
    public static final int ID_TBPPH_NPWP_AWAL_TAHUN = 31;

    /**
     * Identify the tbpph_jkkjkm field.
     */
    public static final int ID_TBPPH_JKKJKM = 32;

    /**
     * Identify the tbpph_salary field.
     */
    public static final int ID_TBPPH_SALARY = 33;

    /**
     * Identify the tbpph_ptkp field.
     */
    public static final int ID_TBPPH_PTKP = 34;

    /**
     * Identify the tbpph_date field.
     */
    public static final int ID_TBPPH_DATE = 35;

    /**
     * Identify the tbe_id field.
     */
    public static final int ID_TBE_ID = 36;

    /**
     * Identify the tbpph_id field.
     */
    public static final int ID_TBPPH_ID = 37;

    /**
     * Contains all the full fields of the tb_pph table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "tb_pph.tbpph_dummy"
        ,"tb_pph.tbpph_periode"
        ,"tb_pph.tbpph_total_take_home_pay_kurs"
        ,"tb_pph.tbc_id"
        ,"tb_pph.tbpph_total_take_home_pay"
        ,"tb_pph.tbpph_loan"
        ,"tb_pph.tbpph_take_home_pay_utk_pend_irreguler"
        ,"tb_pph.tbpph_pajak_komisi"
        ,"tb_pph.tbpph_pajak_tot_sethn_utk_kary_tdk_ber_npwp"
        ,"tb_pph.tbpph_pajak_tot_sethn_utk_kary_ber_npwp"
        ,"tb_pph.tbpph_pend_disetahunkan_plus_komisi"
        ,"tb_pph.tbpph_pajak_sdh_disetor_utk_pend_tdk_ttp_ytd"
        ,"tb_pph.tbpph_pendapatan_tidak_tetap_ytd"
        ,"tb_pph.tbpph_pendapatan_tidak_tetap"
        ,"tb_pph.tbpph_take_home_pay"
        ,"tb_pph.tbpph_pajak_bln_ini"
        ,"tb_pph.tbpph_pajak_terutang_smp_bln_ini"
        ,"tb_pph.tbpph_pajak_setahun_utk_kary_tdk_ber_npwp"
        ,"tb_pph.tbpph_pajak_setahun_utk_kary_ber_npwp"
        ,"tb_pph.tbpph_pendapatan_kena_pajak"
        ,"tb_pph.tbpph_pendapatan_disetahunkan"
        ,"tb_pph.tbpph_faktor_pengali_utk_disetahunkan"
        ,"tb_pph.tbpph_pajak_disetor_ytd_smp_bln_lalu"
        ,"tb_pph.tbpph_pend_ytd_sblm_pajak_smp_bln_lalu"
        ,"tb_pph.tbpph_pend_sbln_sblm_pajak"
        ,"tb_pph.tbpph_biaya_jabatan"
        ,"tb_pph.tbpph_iuran_jht_jamsostek"
        ,"tb_pph.tbpph_total_gross"
        ,"tb_pph.tbpph_tunjangan_jamsostek_jkkjkm"
        ,"tb_pph.tbpph_tunjangan_tetap"
        ,"tb_pph.tbpph_gaji_pokok_gross"
        ,"tb_pph.tbpph_npwp_awal_tahun"
        ,"tb_pph.tbpph_jkkjkm"
        ,"tb_pph.tbpph_salary"
        ,"tb_pph.tbpph_ptkp"
        ,"tb_pph.tbpph_date"
        ,"tb_pph.tbe_id"
        ,"tb_pph.tbpph_id"
    };

    /**
     * Contains all the fields of the tb_pph table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbpph_dummy"
        ,"tbpph_periode"
        ,"tbpph_total_take_home_pay_kurs"
        ,"tbc_id"
        ,"tbpph_total_take_home_pay"
        ,"tbpph_loan"
        ,"tbpph_take_home_pay_utk_pend_irreguler"
        ,"tbpph_pajak_komisi"
        ,"tbpph_pajak_tot_sethn_utk_kary_tdk_ber_npwp"
        ,"tbpph_pajak_tot_sethn_utk_kary_ber_npwp"
        ,"tbpph_pend_disetahunkan_plus_komisi"
        ,"tbpph_pajak_sdh_disetor_utk_pend_tdk_ttp_ytd"
        ,"tbpph_pendapatan_tidak_tetap_ytd"
        ,"tbpph_pendapatan_tidak_tetap"
        ,"tbpph_take_home_pay"
        ,"tbpph_pajak_bln_ini"
        ,"tbpph_pajak_terutang_smp_bln_ini"
        ,"tbpph_pajak_setahun_utk_kary_tdk_ber_npwp"
        ,"tbpph_pajak_setahun_utk_kary_ber_npwp"
        ,"tbpph_pendapatan_kena_pajak"
        ,"tbpph_pendapatan_disetahunkan"
        ,"tbpph_faktor_pengali_utk_disetahunkan"
        ,"tbpph_pajak_disetor_ytd_smp_bln_lalu"
        ,"tbpph_pend_ytd_sblm_pajak_smp_bln_lalu"
        ,"tbpph_pend_sbln_sblm_pajak"
        ,"tbpph_biaya_jabatan"
        ,"tbpph_iuran_jht_jamsostek"
        ,"tbpph_total_gross"
        ,"tbpph_tunjangan_jamsostek_jkkjkm"
        ,"tbpph_tunjangan_tetap"
        ,"tbpph_gaji_pokok_gross"
        ,"tbpph_npwp_awal_tahun"
        ,"tbpph_jkkjkm"
        ,"tbpph_salary"
        ,"tbpph_ptkp"
        ,"tbpph_date"
        ,"tbe_id"
        ,"tbpph_id"
    };

    /**
     * Field that contains the comma separated fields of the tb_pph table.
     */
    public static final String ALL_FULL_FIELDS = "tb_pph.tbpph_dummy"
                            + ",tb_pph.tbpph_periode"
                            + ",tb_pph.tbpph_total_take_home_pay_kurs"
                            + ",tb_pph.tbc_id"
                            + ",tb_pph.tbpph_total_take_home_pay"
                            + ",tb_pph.tbpph_loan"
                            + ",tb_pph.tbpph_take_home_pay_utk_pend_irreguler"
                            + ",tb_pph.tbpph_pajak_komisi"
                            + ",tb_pph.tbpph_pajak_tot_sethn_utk_kary_tdk_ber_npwp"
                            + ",tb_pph.tbpph_pajak_tot_sethn_utk_kary_ber_npwp"
                            + ",tb_pph.tbpph_pend_disetahunkan_plus_komisi"
                            + ",tb_pph.tbpph_pajak_sdh_disetor_utk_pend_tdk_ttp_ytd"
                            + ",tb_pph.tbpph_pendapatan_tidak_tetap_ytd"
                            + ",tb_pph.tbpph_pendapatan_tidak_tetap"
                            + ",tb_pph.tbpph_take_home_pay"
                            + ",tb_pph.tbpph_pajak_bln_ini"
                            + ",tb_pph.tbpph_pajak_terutang_smp_bln_ini"
                            + ",tb_pph.tbpph_pajak_setahun_utk_kary_tdk_ber_npwp"
                            + ",tb_pph.tbpph_pajak_setahun_utk_kary_ber_npwp"
                            + ",tb_pph.tbpph_pendapatan_kena_pajak"
                            + ",tb_pph.tbpph_pendapatan_disetahunkan"
                            + ",tb_pph.tbpph_faktor_pengali_utk_disetahunkan"
                            + ",tb_pph.tbpph_pajak_disetor_ytd_smp_bln_lalu"
                            + ",tb_pph.tbpph_pend_ytd_sblm_pajak_smp_bln_lalu"
                            + ",tb_pph.tbpph_pend_sbln_sblm_pajak"
                            + ",tb_pph.tbpph_biaya_jabatan"
                            + ",tb_pph.tbpph_iuran_jht_jamsostek"
                            + ",tb_pph.tbpph_total_gross"
                            + ",tb_pph.tbpph_tunjangan_jamsostek_jkkjkm"
                            + ",tb_pph.tbpph_tunjangan_tetap"
                            + ",tb_pph.tbpph_gaji_pokok_gross"
                            + ",tb_pph.tbpph_npwp_awal_tahun"
                            + ",tb_pph.tbpph_jkkjkm"
                            + ",tb_pph.tbpph_salary"
                            + ",tb_pph.tbpph_ptkp"
                            + ",tb_pph.tbpph_date"
                            + ",tb_pph.tbe_id"
                            + ",tb_pph.tbpph_id";

    /**
     * Field that contains the comma separated fields of the tb_pph table.
     */
    public static final String ALL_FIELDS = "tbpph_dummy"
                            + ",tbpph_periode"
                            + ",tbpph_total_take_home_pay_kurs"
                            + ",tbc_id"
                            + ",tbpph_total_take_home_pay"
                            + ",tbpph_loan"
                            + ",tbpph_take_home_pay_utk_pend_irreguler"
                            + ",tbpph_pajak_komisi"
                            + ",tbpph_pajak_tot_sethn_utk_kary_tdk_ber_npwp"
                            + ",tbpph_pajak_tot_sethn_utk_kary_ber_npwp"
                            + ",tbpph_pend_disetahunkan_plus_komisi"
                            + ",tbpph_pajak_sdh_disetor_utk_pend_tdk_ttp_ytd"
                            + ",tbpph_pendapatan_tidak_tetap_ytd"
                            + ",tbpph_pendapatan_tidak_tetap"
                            + ",tbpph_take_home_pay"
                            + ",tbpph_pajak_bln_ini"
                            + ",tbpph_pajak_terutang_smp_bln_ini"
                            + ",tbpph_pajak_setahun_utk_kary_tdk_ber_npwp"
                            + ",tbpph_pajak_setahun_utk_kary_ber_npwp"
                            + ",tbpph_pendapatan_kena_pajak"
                            + ",tbpph_pendapatan_disetahunkan"
                            + ",tbpph_faktor_pengali_utk_disetahunkan"
                            + ",tbpph_pajak_disetor_ytd_smp_bln_lalu"
                            + ",tbpph_pend_ytd_sblm_pajak_smp_bln_lalu"
                            + ",tbpph_pend_sbln_sblm_pajak"
                            + ",tbpph_biaya_jabatan"
                            + ",tbpph_iuran_jht_jamsostek"
                            + ",tbpph_total_gross"
                            + ",tbpph_tunjangan_jamsostek_jkkjkm"
                            + ",tbpph_tunjangan_tetap"
                            + ",tbpph_gaji_pokok_gross"
                            + ",tbpph_npwp_awal_tahun"
                            + ",tbpph_jkkjkm"
                            + ",tbpph_salary"
                            + ",tbpph_ptkp"
                            + ",tbpph_date"
                            + ",tbe_id"
                            + ",tbpph_id";

    private static TbPphManager singleton = new TbPphManager();

    /**
     * Get the TbPphManager singleton.
     *
     * @return TbPphManager
     */
    public static TbPphManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new TbPphBean instance.
     *
     * @return the new TbPphBean
     */
    public TbPphBean createTbPphBean()
    {
        return new TbPphBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////
	
    /**
     * Loads a TbPphBean from the tb_pph using its key fields.
     *
     * @param tbpphId Integer - PK# 1
     * @return a unique TbPphBean
     * @throws DAOException
     */
    //1
    public TbPphBean loadByPrimaryKey(Integer tbpphId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("SELECT " + ALL_FIELDS + " FROM tb_pph WHERE tbpph_id=?");
            log.debug("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbpphId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbpphId); }
            TbPphBean pReturn[] = this.loadByPreparedStatement(ps);
            if (pReturn.length < 1) {
                // throw new ObjectRetrievalException();
				return null;
            } else {
                return pReturn[0];
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
		
	//1WS
    //public TbPphBean loadByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return fromBeanWsToBean(Util.getInstance().getDAOServiceV1().tbXLoadByPrimaryKey(id));
    //}
    
    //2WS
    //public int deleteByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return Util.getInstance().getDAOServiceV1().tbXDeleteByPrimaryKey(id);
    //}

    /**
     * Deletes rows according to its keys.
     *
     * @param tbpphId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer tbpphId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_pph WHERE tbpph_id=?");
            log.debug("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbpphId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbpphId); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the TbPphPotonganBean object from the tb_pph.tbpph_id field.
     *
     * @param bean the TbPphBean
     * @return the associated TbPphPotonganBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbPphPotonganBean[] getTbPphPotonganBeans(TbPphBean bean) throws DAOException
    {
        TbPphPotonganBean other = TbPphPotonganManager.getInstance().createTbPphPotonganBean();
        other.setTbpphId(bean.getTbpphId());
        return TbPphPotonganManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbPphBean object to the TbPphPotonganBean object.
     *
     * @param bean the TbPphBean object to use
     * @param beanToSet the TbPphPotonganBean object to associate to the TbPphBean
     * @return the associated TbPphPotonganBean bean
     */
    //4.1 SET IMPORTED
    public TbPphBean setTbPphPotonganBean(TbPphBean bean,TbPphPotonganBean beanToSet)
    {
        bean.setTbpphId(beanToSet.getTbpphId());
        return bean;
    }

    /**
     * Retrieves the TbPphTambahanBean object from the tb_pph.tbpph_id field.
     *
     * @param bean the TbPphBean
     * @return the associated TbPphTambahanBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbPphTambahanBean[] getTbPphTambahanBeans(TbPphBean bean) throws DAOException
    {
        TbPphTambahanBean other = TbPphTambahanManager.getInstance().createTbPphTambahanBean();
        other.setTbpphId(bean.getTbpphId());
        return TbPphTambahanManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbPphBean object to the TbPphTambahanBean object.
     *
     * @param bean the TbPphBean object to use
     * @param beanToSet the TbPphTambahanBean object to associate to the TbPphBean
     * @return the associated TbPphTambahanBean bean
     */
    //4.1 SET IMPORTED
    public TbPphBean setTbPphTambahanBean(TbPphBean bean,TbPphTambahanBean beanToSet)
    {
        bean.setTbpphId(beanToSet.getTbpphId());
        return bean;
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the TbEmployeeBean object from the tb_pph.tbe_id field.
     *
     * @param bean the TbPphBean
     * @return the associated TbEmployeeBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbEmployeeBean getTbEmployeeBean(TbPphBean bean) throws DAOException
    {
        TbEmployeeBean other = TbEmployeeManager.getInstance().createTbEmployeeBean();
        other.setTbeId(bean.getTbeId()); 
        bean.setTbEmployeeBean(TbEmployeeManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbEmployeeBean();
    }

    /**
     * Associates the TbPphBean object to the TbEmployeeBean object.
     *
     * @param bean the TbPphBean object to use
     * @param beanToSet the TbEmployeeBean object to associate to the TbPphBean
     * @return the associated TbEmployeeBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbEmployeeBean addTbEmployeeBean(TbEmployeeBean beanToSet, TbPphBean bean) throws Exception
    {
        beanToSet.setTbeId(bean.getTbeId());
        return TbEmployeeManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbPphBean object to the TbEmployeeBean object.
     *
     * @param bean the TbPphBean object to use
     * @param beanToSet the TbEmployeeBean object to associate to the TbPphBean
     * @return the associated TbEmployeeBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbEmployeeBean setTbEmployeeBean(TbPphBean bean, TbEmployeeBean beanToSet) throws Exception
    {
        bean.setTbeId(beanToSet.getTbeId());
        return TbEmployeeManager.getInstance().save(beanToSet);
    }

    /**
     * Retrieves the TbCurrencyBean object from the tb_pph.tbc_id field.
     *
     * @param bean the TbPphBean
     * @return the associated TbCurrencyBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbCurrencyBean getTbCurrencyBean(TbPphBean bean) throws DAOException
    {
        TbCurrencyBean other = TbCurrencyManager.getInstance().createTbCurrencyBean();
        other.setTbcId(bean.getTbcId()); 
        bean.setTbCurrencyBean(TbCurrencyManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbCurrencyBean();
    }

    /**
     * Associates the TbPphBean object to the TbCurrencyBean object.
     *
     * @param bean the TbPphBean object to use
     * @param beanToSet the TbCurrencyBean object to associate to the TbPphBean
     * @return the associated TbCurrencyBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbCurrencyBean addTbCurrencyBean(TbCurrencyBean beanToSet, TbPphBean bean) throws Exception
    {
        beanToSet.setTbcId(bean.getTbcId());
        return TbCurrencyManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbPphBean object to the TbCurrencyBean object.
     *
     * @param bean the TbPphBean object to use
     * @param beanToSet the TbCurrencyBean object to associate to the TbPphBean
     * @return the associated TbCurrencyBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbCurrencyBean setTbCurrencyBean(TbPphBean bean, TbCurrencyBean beanToSet) throws Exception
    {
        bean.setTbcId(beanToSet.getTbcId());
        return TbCurrencyManager.getInstance().save(beanToSet);
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from tb_pph.
     *
     * @return an array of TbPphManager bean
     * @throws DAOException
     */
    //5
    public TbPphBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from tb_pph, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of TbPphManager bean
     * @throws DAOException
     */
    //6
    public TbPphBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TbPphBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TbPphBean table
     * @throws DAOException
     */
    //7
    public TbPphBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TbPphBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting TbPphBean table
     * @throws DAOException
     */
    //8
    public TbPphBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of TbPphBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting TbPphBean table
     * @throws DAOException
     */
    //9
    public TbPphBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_pph ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM tb_pph ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the tb_pph table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_pph " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the TbPphBean bean into the database.
     *
     * @param bean the TbPphBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public TbPphBean save(TbPphBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the TbPphBean bean into the database.
     *
     * @param bean the TbPphBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public TbPphBean insert(TbPphBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into tb_pph (");

            if (bean.isTbpphDummyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_dummy");
                _dirtyCount++;
            }

            if (bean.isTbpphPeriodeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_periode");
                _dirtyCount++;
            }

            if (bean.isTbpphTotalTakeHomePayKursModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_total_take_home_pay_kurs");
                _dirtyCount++;
            }

            if (bean.isTbcIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbc_id");
                _dirtyCount++;
            }

            if (bean.isTbpphTotalTakeHomePayModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_total_take_home_pay");
                _dirtyCount++;
            }

            if (bean.isTbpphLoanModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_loan");
                _dirtyCount++;
            }

            if (bean.isTbpphTakeHomePayUtkPendIrregulerModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_take_home_pay_utk_pend_irreguler");
                _dirtyCount++;
            }

            if (bean.isTbpphPajakKomisiModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pajak_komisi");
                _dirtyCount++;
            }

            if (bean.isTbpphPajakTotSethnUtkKaryTdkBerNpwpModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pajak_tot_sethn_utk_kary_tdk_ber_npwp");
                _dirtyCount++;
            }

            if (bean.isTbpphPajakTotSethnUtkKaryBerNpwpModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pajak_tot_sethn_utk_kary_ber_npwp");
                _dirtyCount++;
            }

            if (bean.isTbpphPendDisetahunkanPlusKomisiModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pend_disetahunkan_plus_komisi");
                _dirtyCount++;
            }

            if (bean.isTbpphPajakSdhDisetorUtkPendTdkTtpYtdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pajak_sdh_disetor_utk_pend_tdk_ttp_ytd");
                _dirtyCount++;
            }

            if (bean.isTbpphPendapatanTidakTetapYtdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pendapatan_tidak_tetap_ytd");
                _dirtyCount++;
            }

            if (bean.isTbpphPendapatanTidakTetapModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pendapatan_tidak_tetap");
                _dirtyCount++;
            }

            if (bean.isTbpphTakeHomePayModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_take_home_pay");
                _dirtyCount++;
            }

            if (bean.isTbpphPajakBlnIniModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pajak_bln_ini");
                _dirtyCount++;
            }

            if (bean.isTbpphPajakTerutangSmpBlnIniModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pajak_terutang_smp_bln_ini");
                _dirtyCount++;
            }

            if (bean.isTbpphPajakSetahunUtkKaryTdkBerNpwpModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pajak_setahun_utk_kary_tdk_ber_npwp");
                _dirtyCount++;
            }

            if (bean.isTbpphPajakSetahunUtkKaryBerNpwpModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pajak_setahun_utk_kary_ber_npwp");
                _dirtyCount++;
            }

            if (bean.isTbpphPendapatanKenaPajakModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pendapatan_kena_pajak");
                _dirtyCount++;
            }

            if (bean.isTbpphPendapatanDisetahunkanModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pendapatan_disetahunkan");
                _dirtyCount++;
            }

            if (bean.isTbpphFaktorPengaliUtkDisetahunkanModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_faktor_pengali_utk_disetahunkan");
                _dirtyCount++;
            }

            if (bean.isTbpphPajakDisetorYtdSmpBlnLaluModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pajak_disetor_ytd_smp_bln_lalu");
                _dirtyCount++;
            }

            if (bean.isTbpphPendYtdSblmPajakSmpBlnLaluModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pend_ytd_sblm_pajak_smp_bln_lalu");
                _dirtyCount++;
            }

            if (bean.isTbpphPendSblnSblmPajakModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_pend_sbln_sblm_pajak");
                _dirtyCount++;
            }

            if (bean.isTbpphBiayaJabatanModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_biaya_jabatan");
                _dirtyCount++;
            }

            if (bean.isTbpphIuranJhtJamsostekModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_iuran_jht_jamsostek");
                _dirtyCount++;
            }

            if (bean.isTbpphTotalGrossModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_total_gross");
                _dirtyCount++;
            }

            if (bean.isTbpphTunjanganJamsostekJkkjkmModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_tunjangan_jamsostek_jkkjkm");
                _dirtyCount++;
            }

            if (bean.isTbpphTunjanganTetapModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_tunjangan_tetap");
                _dirtyCount++;
            }

            if (bean.isTbpphGajiPokokGrossModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_gaji_pokok_gross");
                _dirtyCount++;
            }

            if (bean.isTbpphNpwpAwalTahunModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_npwp_awal_tahun");
                _dirtyCount++;
            }

            if (bean.isTbpphJkkjkmModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_jkkjkm");
                _dirtyCount++;
            }

            if (bean.isTbpphSalaryModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_salary");
                _dirtyCount++;
            }

            if (bean.isTbpphPtkpModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_ptkp");
                _dirtyCount++;
            }

            if (bean.isTbpphDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_date");
                _dirtyCount++;
            }

            if (bean.isTbeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id");
                _dirtyCount++;
            }

            if (bean.isTbpphIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpph_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();
            if (!bean.isTbpphIdModified())
            {
                ResultSet rs = ps.getGeneratedKeys();
                try {
                    if(rs.next()) {
                        bean.setTbpphId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve auto generated key!");
                    }
                } finally {
                    this.getManager().close(rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the TbPphBean bean record in the database according to the changes.
     *
     * @param bean the TbPphBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public TbPphBean update(TbPphBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE tb_pph SET ");
            boolean useComma=false;

            if (bean.isTbpphDummyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_dummy=?");
            }

            if (bean.isTbpphPeriodeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_periode=?");
            }

            if (bean.isTbpphTotalTakeHomePayKursModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_total_take_home_pay_kurs=?");
            }

            if (bean.isTbcIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbc_id=?");
            }

            if (bean.isTbpphTotalTakeHomePayModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_total_take_home_pay=?");
            }

            if (bean.isTbpphLoanModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_loan=?");
            }

            if (bean.isTbpphTakeHomePayUtkPendIrregulerModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_take_home_pay_utk_pend_irreguler=?");
            }

            if (bean.isTbpphPajakKomisiModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pajak_komisi=?");
            }

            if (bean.isTbpphPajakTotSethnUtkKaryTdkBerNpwpModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pajak_tot_sethn_utk_kary_tdk_ber_npwp=?");
            }

            if (bean.isTbpphPajakTotSethnUtkKaryBerNpwpModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pajak_tot_sethn_utk_kary_ber_npwp=?");
            }

            if (bean.isTbpphPendDisetahunkanPlusKomisiModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pend_disetahunkan_plus_komisi=?");
            }

            if (bean.isTbpphPajakSdhDisetorUtkPendTdkTtpYtdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pajak_sdh_disetor_utk_pend_tdk_ttp_ytd=?");
            }

            if (bean.isTbpphPendapatanTidakTetapYtdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pendapatan_tidak_tetap_ytd=?");
            }

            if (bean.isTbpphPendapatanTidakTetapModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pendapatan_tidak_tetap=?");
            }

            if (bean.isTbpphTakeHomePayModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_take_home_pay=?");
            }

            if (bean.isTbpphPajakBlnIniModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pajak_bln_ini=?");
            }

            if (bean.isTbpphPajakTerutangSmpBlnIniModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pajak_terutang_smp_bln_ini=?");
            }

            if (bean.isTbpphPajakSetahunUtkKaryTdkBerNpwpModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pajak_setahun_utk_kary_tdk_ber_npwp=?");
            }

            if (bean.isTbpphPajakSetahunUtkKaryBerNpwpModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pajak_setahun_utk_kary_ber_npwp=?");
            }

            if (bean.isTbpphPendapatanKenaPajakModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pendapatan_kena_pajak=?");
            }

            if (bean.isTbpphPendapatanDisetahunkanModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pendapatan_disetahunkan=?");
            }

            if (bean.isTbpphFaktorPengaliUtkDisetahunkanModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_faktor_pengali_utk_disetahunkan=?");
            }

            if (bean.isTbpphPajakDisetorYtdSmpBlnLaluModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pajak_disetor_ytd_smp_bln_lalu=?");
            }

            if (bean.isTbpphPendYtdSblmPajakSmpBlnLaluModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pend_ytd_sblm_pajak_smp_bln_lalu=?");
            }

            if (bean.isTbpphPendSblnSblmPajakModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_pend_sbln_sblm_pajak=?");
            }

            if (bean.isTbpphBiayaJabatanModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_biaya_jabatan=?");
            }

            if (bean.isTbpphIuranJhtJamsostekModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_iuran_jht_jamsostek=?");
            }

            if (bean.isTbpphTotalGrossModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_total_gross=?");
            }

            if (bean.isTbpphTunjanganJamsostekJkkjkmModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_tunjangan_jamsostek_jkkjkm=?");
            }

            if (bean.isTbpphTunjanganTetapModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_tunjangan_tetap=?");
            }

            if (bean.isTbpphGajiPokokGrossModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_gaji_pokok_gross=?");
            }

            if (bean.isTbpphNpwpAwalTahunModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_npwp_awal_tahun=?");
            }

            if (bean.isTbpphJkkjkmModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_jkkjkm=?");
            }

            if (bean.isTbpphSalaryModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_salary=?");
            }

            if (bean.isTbpphPtkpModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_ptkp=?");
            }

            if (bean.isTbpphDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_date=?");
            }

            if (bean.isTbeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id=?");
            }

            if (bean.isTbpphIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpph_id=?");
            }
            sql.append(" WHERE ");
            sql.append("tbpph_id=?");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getTbpphId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpphId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of TbPphBean beans into the database.
     *
     * @param beans the TbPphBean bean table to be saved
     * @return the saved TbPphBean array.
     * @throws DAOException
     */
    //15
    public TbPphBean[] save(TbPphBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of TbPphBean beans into the database.
     *
     * @param beans the TbPphBean bean table to be inserted
     * @return the saved TbPphBean array.
     * @throws DAOException
     */
    //16
    public TbPphBean[] insert(TbPphBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of TbPphBean beans into the database.
     *
     * @param beans the TbPphBean bean table to be inserted
     * @return the saved TbPphBean array.
     * @throws DAOException
     */
    //17
    public TbPphBean[] update(TbPphBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique TbPphBean bean from a template one giving a c
     *
     * @param bean the TbPphBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public TbPphBean loadUniqueUsingTemplate(TbPphBean bean) throws DAOException
    {
         TbPphBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of TbPphBean from a template one.
     *
     * @param bean the TbPphBean template to look for
     * @return all the TbPphBean matching the template
     * @throws DAOException
     */
    //19
    public TbPphBean[] loadUsingTemplate(TbPphBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of TbPphBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbPphBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the TbPphBean matching the template
     * @throws DAOException
     */
    //20
    public TbPphBean[] loadUsingTemplate(TbPphBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of TbPphBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbPphBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the TbPphBean matching the template
     * @throws DAOException
     */
    //20
    public TbPphBean[] loadUsingTemplate(TbPphBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_pph ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a TbPphBean template.
     *
     * @param bean the TbPphBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(TbPphBean bean) throws DAOException
    {
        if (bean.isTbpphIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getTbpphId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM tb_pph ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

    /**
     * Retrieves an array of TbPphBean using the tbpph_fk_1 index.
     *
     * @param tbeId the tbe_id column's value filter.
     * @return an array of TbPphBean
     * @throws DAOException
     */
    public TbPphBean[] loadBytbpph_fk_1(Integer tbeId) throws DAOException
    {
        TbPphBean bean = this.createTbPphBean();
        bean.setTbeId(tbeId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbpph_fk_1 index.
     *
     * @param tbeId the tbe_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbpph_fk_1(Integer tbeId) throws DAOException
    {
        TbPphBean bean = this.createTbPphBean();
        bean.setTbeId(tbeId);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an array of TbPphBean using the tbpph_fk_2 index.
     *
     * @param tbcId the tbc_id column's value filter.
     * @return an array of TbPphBean
     * @throws DAOException
     */
    public TbPphBean[] loadBytbpph_fk_2(Integer tbcId) throws DAOException
    {
        TbPphBean bean = this.createTbPphBean();
        bean.setTbcId(tbcId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbpph_fk_2 index.
     *
     * @param tbcId the tbc_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbpph_fk_2(Integer tbcId) throws DAOException
    {
        TbPphBean bean = this.createTbPphBean();
        bean.setTbcId(tbcId);
        return deleteUsingTemplate(bean);
    }
    


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table tb_pph.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table tb_pph with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM tb_pph " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table tb_pph with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific TbPphBean bean
     *
     * @param bean the TbPphBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(TbPphBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific TbPphBean bean , given the start row and number of rows.
     *
     * @param bean the TbPphBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbPphBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific TbPphBean bean given the start row and number of rows and the search type
     *
     * @param bean the TbPphBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbPphBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM tb_pph");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, TbPphBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbpphDummyModified()) {
                _dirtyCount ++;
                if (bean.getTbpphDummy() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_dummy IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_dummy = ?");
                }
            }
            if (bean.isTbpphPeriodeModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPeriode() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_periode IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_periode ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpphTotalTakeHomePayKursModified()) {
                _dirtyCount ++;
                if (bean.getTbpphTotalTakeHomePayKurs() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_total_take_home_pay_kurs IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_total_take_home_pay_kurs = ?");
                }
            }
            if (bean.isTbcIdModified()) {
                _dirtyCount ++;
                if (bean.getTbcId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_id = ?");
                }
            }
            if (bean.isTbpphTotalTakeHomePayModified()) {
                _dirtyCount ++;
                if (bean.getTbpphTotalTakeHomePay() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_total_take_home_pay IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_total_take_home_pay = ?");
                }
            }
            if (bean.isTbpphLoanModified()) {
                _dirtyCount ++;
                if (bean.getTbpphLoan() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_loan IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_loan = ?");
                }
            }
            if (bean.isTbpphTakeHomePayUtkPendIrregulerModified()) {
                _dirtyCount ++;
                if (bean.getTbpphTakeHomePayUtkPendIrreguler() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_take_home_pay_utk_pend_irreguler IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_take_home_pay_utk_pend_irreguler = ?");
                }
            }
            if (bean.isTbpphPajakKomisiModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPajakKomisi() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_komisi IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_komisi = ?");
                }
            }
            if (bean.isTbpphPajakTotSethnUtkKaryTdkBerNpwpModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPajakTotSethnUtkKaryTdkBerNpwp() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_tot_sethn_utk_kary_tdk_ber_npwp IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_tot_sethn_utk_kary_tdk_ber_npwp = ?");
                }
            }
            if (bean.isTbpphPajakTotSethnUtkKaryBerNpwpModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPajakTotSethnUtkKaryBerNpwp() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_tot_sethn_utk_kary_ber_npwp IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_tot_sethn_utk_kary_ber_npwp = ?");
                }
            }
            if (bean.isTbpphPendDisetahunkanPlusKomisiModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPendDisetahunkanPlusKomisi() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pend_disetahunkan_plus_komisi IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pend_disetahunkan_plus_komisi = ?");
                }
            }
            if (bean.isTbpphPajakSdhDisetorUtkPendTdkTtpYtdModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_sdh_disetor_utk_pend_tdk_ttp_ytd IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_sdh_disetor_utk_pend_tdk_ttp_ytd = ?");
                }
            }
            if (bean.isTbpphPendapatanTidakTetapYtdModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPendapatanTidakTetapYtd() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pendapatan_tidak_tetap_ytd IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pendapatan_tidak_tetap_ytd = ?");
                }
            }
            if (bean.isTbpphPendapatanTidakTetapModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPendapatanTidakTetap() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pendapatan_tidak_tetap IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pendapatan_tidak_tetap = ?");
                }
            }
            if (bean.isTbpphTakeHomePayModified()) {
                _dirtyCount ++;
                if (bean.getTbpphTakeHomePay() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_take_home_pay IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_take_home_pay = ?");
                }
            }
            if (bean.isTbpphPajakBlnIniModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPajakBlnIni() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_bln_ini IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_bln_ini = ?");
                }
            }
            if (bean.isTbpphPajakTerutangSmpBlnIniModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPajakTerutangSmpBlnIni() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_terutang_smp_bln_ini IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_terutang_smp_bln_ini = ?");
                }
            }
            if (bean.isTbpphPajakSetahunUtkKaryTdkBerNpwpModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPajakSetahunUtkKaryTdkBerNpwp() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_setahun_utk_kary_tdk_ber_npwp IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_setahun_utk_kary_tdk_ber_npwp = ?");
                }
            }
            if (bean.isTbpphPajakSetahunUtkKaryBerNpwpModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPajakSetahunUtkKaryBerNpwp() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_setahun_utk_kary_ber_npwp IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_setahun_utk_kary_ber_npwp = ?");
                }
            }
            if (bean.isTbpphPendapatanKenaPajakModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPendapatanKenaPajak() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pendapatan_kena_pajak IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pendapatan_kena_pajak = ?");
                }
            }
            if (bean.isTbpphPendapatanDisetahunkanModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPendapatanDisetahunkan() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pendapatan_disetahunkan IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pendapatan_disetahunkan = ?");
                }
            }
            if (bean.isTbpphFaktorPengaliUtkDisetahunkanModified()) {
                _dirtyCount ++;
                if (bean.getTbpphFaktorPengaliUtkDisetahunkan() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_faktor_pengali_utk_disetahunkan IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_faktor_pengali_utk_disetahunkan = ?");
                }
            }
            if (bean.isTbpphPajakDisetorYtdSmpBlnLaluModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPajakDisetorYtdSmpBlnLalu() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_disetor_ytd_smp_bln_lalu IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pajak_disetor_ytd_smp_bln_lalu = ?");
                }
            }
            if (bean.isTbpphPendYtdSblmPajakSmpBlnLaluModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPendYtdSblmPajakSmpBlnLalu() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pend_ytd_sblm_pajak_smp_bln_lalu IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pend_ytd_sblm_pajak_smp_bln_lalu = ?");
                }
            }
            if (bean.isTbpphPendSblnSblmPajakModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPendSblnSblmPajak() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pend_sbln_sblm_pajak IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_pend_sbln_sblm_pajak = ?");
                }
            }
            if (bean.isTbpphBiayaJabatanModified()) {
                _dirtyCount ++;
                if (bean.getTbpphBiayaJabatan() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_biaya_jabatan IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_biaya_jabatan = ?");
                }
            }
            if (bean.isTbpphIuranJhtJamsostekModified()) {
                _dirtyCount ++;
                if (bean.getTbpphIuranJhtJamsostek() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_iuran_jht_jamsostek IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_iuran_jht_jamsostek = ?");
                }
            }
            if (bean.isTbpphTotalGrossModified()) {
                _dirtyCount ++;
                if (bean.getTbpphTotalGross() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_total_gross IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_total_gross = ?");
                }
            }
            if (bean.isTbpphTunjanganJamsostekJkkjkmModified()) {
                _dirtyCount ++;
                if (bean.getTbpphTunjanganJamsostekJkkjkm() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_tunjangan_jamsostek_jkkjkm IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_tunjangan_jamsostek_jkkjkm = ?");
                }
            }
            if (bean.isTbpphTunjanganTetapModified()) {
                _dirtyCount ++;
                if (bean.getTbpphTunjanganTetap() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_tunjangan_tetap IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_tunjangan_tetap = ?");
                }
            }
            if (bean.isTbpphGajiPokokGrossModified()) {
                _dirtyCount ++;
                if (bean.getTbpphGajiPokokGross() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_gaji_pokok_gross IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_gaji_pokok_gross = ?");
                }
            }
            if (bean.isTbpphNpwpAwalTahunModified()) {
                _dirtyCount ++;
                if (bean.getTbpphNpwpAwalTahun() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_npwp_awal_tahun IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_npwp_awal_tahun = ?");
                }
            }
            if (bean.isTbpphJkkjkmModified()) {
                _dirtyCount ++;
                if (bean.getTbpphJkkjkm() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_jkkjkm IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_jkkjkm = ?");
                }
            }
            if (bean.isTbpphSalaryModified()) {
                _dirtyCount ++;
                if (bean.getTbpphSalary() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_salary IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_salary = ?");
                }
            }
            if (bean.isTbpphPtkpModified()) {
                _dirtyCount ++;
                if (bean.getTbpphPtkp() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_ptkp IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_ptkp = ?");
                }
            }
            if (bean.isTbpphDateModified()) {
                _dirtyCount ++;
                if (bean.getTbpphDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_date = ?");
                }
            }
            if (bean.isTbeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id = ?");
                }
            }
            if (bean.isTbpphIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpphId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpph_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, TbPphBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbpphDummyModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphDummy() + "]");
                if (bean.getTbpphDummy() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpphDummy()); }
            }
            if (bean.isTbpphPeriodeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPeriode() + "]");
                        if (bean.getTbpphPeriode() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpphPeriode()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpphPeriode() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpphPeriode() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPeriode() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpphPeriode());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpphPeriode() + "]");
                        if (bean.getTbpphPeriode() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpphPeriode() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpphTotalTakeHomePayKursModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphTotalTakeHomePayKurs() + "]");
                if (bean.getTbpphTotalTakeHomePayKurs() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphTotalTakeHomePayKurs()); }
            }
            if (bean.isTbcIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcId() + "]");
                if (bean.getTbcId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbcId()); }
            }
            if (bean.isTbpphTotalTakeHomePayModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphTotalTakeHomePay() + "]");
                if (bean.getTbpphTotalTakeHomePay() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphTotalTakeHomePay()); }
            }
            if (bean.isTbpphLoanModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphLoan() + "]");
                if (bean.getTbpphLoan() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphLoan()); }
            }
            if (bean.isTbpphTakeHomePayUtkPendIrregulerModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphTakeHomePayUtkPendIrreguler() + "]");
                if (bean.getTbpphTakeHomePayUtkPendIrreguler() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphTakeHomePayUtkPendIrreguler()); }
            }
            if (bean.isTbpphPajakKomisiModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPajakKomisi() + "]");
                if (bean.getTbpphPajakKomisi() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPajakKomisi()); }
            }
            if (bean.isTbpphPajakTotSethnUtkKaryTdkBerNpwpModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPajakTotSethnUtkKaryTdkBerNpwp() + "]");
                if (bean.getTbpphPajakTotSethnUtkKaryTdkBerNpwp() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPajakTotSethnUtkKaryTdkBerNpwp()); }
            }
            if (bean.isTbpphPajakTotSethnUtkKaryBerNpwpModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPajakTotSethnUtkKaryBerNpwp() + "]");
                if (bean.getTbpphPajakTotSethnUtkKaryBerNpwp() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPajakTotSethnUtkKaryBerNpwp()); }
            }
            if (bean.isTbpphPendDisetahunkanPlusKomisiModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPendDisetahunkanPlusKomisi() + "]");
                if (bean.getTbpphPendDisetahunkanPlusKomisi() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPendDisetahunkanPlusKomisi()); }
            }
            if (bean.isTbpphPajakSdhDisetorUtkPendTdkTtpYtdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd() + "]");
                if (bean.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd()); }
            }
            if (bean.isTbpphPendapatanTidakTetapYtdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPendapatanTidakTetapYtd() + "]");
                if (bean.getTbpphPendapatanTidakTetapYtd() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPendapatanTidakTetapYtd()); }
            }
            if (bean.isTbpphPendapatanTidakTetapModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPendapatanTidakTetap() + "]");
                if (bean.getTbpphPendapatanTidakTetap() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPendapatanTidakTetap()); }
            }
            if (bean.isTbpphTakeHomePayModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphTakeHomePay() + "]");
                if (bean.getTbpphTakeHomePay() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphTakeHomePay()); }
            }
            if (bean.isTbpphPajakBlnIniModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPajakBlnIni() + "]");
                if (bean.getTbpphPajakBlnIni() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPajakBlnIni()); }
            }
            if (bean.isTbpphPajakTerutangSmpBlnIniModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPajakTerutangSmpBlnIni() + "]");
                if (bean.getTbpphPajakTerutangSmpBlnIni() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPajakTerutangSmpBlnIni()); }
            }
            if (bean.isTbpphPajakSetahunUtkKaryTdkBerNpwpModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPajakSetahunUtkKaryTdkBerNpwp() + "]");
                if (bean.getTbpphPajakSetahunUtkKaryTdkBerNpwp() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPajakSetahunUtkKaryTdkBerNpwp()); }
            }
            if (bean.isTbpphPajakSetahunUtkKaryBerNpwpModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPajakSetahunUtkKaryBerNpwp() + "]");
                if (bean.getTbpphPajakSetahunUtkKaryBerNpwp() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPajakSetahunUtkKaryBerNpwp()); }
            }
            if (bean.isTbpphPendapatanKenaPajakModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPendapatanKenaPajak() + "]");
                if (bean.getTbpphPendapatanKenaPajak() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPendapatanKenaPajak()); }
            }
            if (bean.isTbpphPendapatanDisetahunkanModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPendapatanDisetahunkan() + "]");
                if (bean.getTbpphPendapatanDisetahunkan() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPendapatanDisetahunkan()); }
            }
            if (bean.isTbpphFaktorPengaliUtkDisetahunkanModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphFaktorPengaliUtkDisetahunkan() + "]");
                if (bean.getTbpphFaktorPengaliUtkDisetahunkan() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphFaktorPengaliUtkDisetahunkan()); }
            }
            if (bean.isTbpphPajakDisetorYtdSmpBlnLaluModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPajakDisetorYtdSmpBlnLalu() + "]");
                if (bean.getTbpphPajakDisetorYtdSmpBlnLalu() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPajakDisetorYtdSmpBlnLalu()); }
            }
            if (bean.isTbpphPendYtdSblmPajakSmpBlnLaluModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPendYtdSblmPajakSmpBlnLalu() + "]");
                if (bean.getTbpphPendYtdSblmPajakSmpBlnLalu() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPendYtdSblmPajakSmpBlnLalu()); }
            }
            if (bean.isTbpphPendSblnSblmPajakModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPendSblnSblmPajak() + "]");
                if (bean.getTbpphPendSblnSblmPajak() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPendSblnSblmPajak()); }
            }
            if (bean.isTbpphBiayaJabatanModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphBiayaJabatan() + "]");
                if (bean.getTbpphBiayaJabatan() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphBiayaJabatan()); }
            }
            if (bean.isTbpphIuranJhtJamsostekModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphIuranJhtJamsostek() + "]");
                if (bean.getTbpphIuranJhtJamsostek() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphIuranJhtJamsostek()); }
            }
            if (bean.isTbpphTotalGrossModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphTotalGross() + "]");
                if (bean.getTbpphTotalGross() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphTotalGross()); }
            }
            if (bean.isTbpphTunjanganJamsostekJkkjkmModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphTunjanganJamsostekJkkjkm() + "]");
                if (bean.getTbpphTunjanganJamsostekJkkjkm() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphTunjanganJamsostekJkkjkm()); }
            }
            if (bean.isTbpphTunjanganTetapModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphTunjanganTetap() + "]");
                if (bean.getTbpphTunjanganTetap() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphTunjanganTetap()); }
            }
            if (bean.isTbpphGajiPokokGrossModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphGajiPokokGross() + "]");
                if (bean.getTbpphGajiPokokGross() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphGajiPokokGross()); }
            }
            if (bean.isTbpphNpwpAwalTahunModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphNpwpAwalTahun() + "]");
                if (bean.getTbpphNpwpAwalTahun() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpphNpwpAwalTahun()); }
            }
            if (bean.isTbpphJkkjkmModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphJkkjkm() + "]");
                if (bean.getTbpphJkkjkm() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphJkkjkm()); }
            }
            if (bean.isTbpphSalaryModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphSalary() + "]");
                if (bean.getTbpphSalary() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphSalary()); }
            }
            if (bean.isTbpphPtkpModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphPtkp() + "]");
                if (bean.getTbpphPtkp() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpphPtkp()); }
            }
            if (bean.isTbpphDateModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphDate() + "]");
                if (bean.getTbpphDate() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbpphDate()); }
            }
            if (bean.isTbeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeId() + "]");
                if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            }
            if (bean.isTbpphIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpphId() + "]");
                if (bean.getTbpphId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpphId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of TbPphBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting TbPphBean table
     * @throws DAOException
     */
    //28
    public TbPphBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (TbPphBean[])v.toArray(new TbPphBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the tb_pph on a TbPphBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbPphBean bean
     * @throws DAOException
     */
    //29
    public TbPphBean decodeRow(ResultSet rs) throws DAOException
    {
        TbPphBean bean = this.createTbPphBean();
        try
        {
            bean.setTbpphDummy(Manager.getInteger(rs, 1));
            bean.setTbpphPeriode(rs.getString(2));
            bean.setTbpphTotalTakeHomePayKurs(Manager.getDouble(rs, 3));
            bean.setTbcId(Manager.getInteger(rs, 4));
            bean.setTbpphTotalTakeHomePay(Manager.getDouble(rs, 5));
            bean.setTbpphLoan(Manager.getDouble(rs, 6));
            bean.setTbpphTakeHomePayUtkPendIrreguler(Manager.getDouble(rs, 7));
            bean.setTbpphPajakKomisi(Manager.getDouble(rs, 8));
            bean.setTbpphPajakTotSethnUtkKaryTdkBerNpwp(Manager.getDouble(rs, 9));
            bean.setTbpphPajakTotSethnUtkKaryBerNpwp(Manager.getDouble(rs, 10));
            bean.setTbpphPendDisetahunkanPlusKomisi(Manager.getDouble(rs, 11));
            bean.setTbpphPajakSdhDisetorUtkPendTdkTtpYtd(Manager.getDouble(rs, 12));
            bean.setTbpphPendapatanTidakTetapYtd(Manager.getDouble(rs, 13));
            bean.setTbpphPendapatanTidakTetap(Manager.getDouble(rs, 14));
            bean.setTbpphTakeHomePay(Manager.getDouble(rs, 15));
            bean.setTbpphPajakBlnIni(Manager.getDouble(rs, 16));
            bean.setTbpphPajakTerutangSmpBlnIni(Manager.getDouble(rs, 17));
            bean.setTbpphPajakSetahunUtkKaryTdkBerNpwp(Manager.getDouble(rs, 18));
            bean.setTbpphPajakSetahunUtkKaryBerNpwp(Manager.getDouble(rs, 19));
            bean.setTbpphPendapatanKenaPajak(Manager.getDouble(rs, 20));
            bean.setTbpphPendapatanDisetahunkan(Manager.getDouble(rs, 21));
            bean.setTbpphFaktorPengaliUtkDisetahunkan(Manager.getDouble(rs, 22));
            bean.setTbpphPajakDisetorYtdSmpBlnLalu(Manager.getDouble(rs, 23));
            bean.setTbpphPendYtdSblmPajakSmpBlnLalu(Manager.getDouble(rs, 24));
            bean.setTbpphPendSblnSblmPajak(Manager.getDouble(rs, 25));
            bean.setTbpphBiayaJabatan(Manager.getDouble(rs, 26));
            bean.setTbpphIuranJhtJamsostek(Manager.getDouble(rs, 27));
            bean.setTbpphTotalGross(Manager.getDouble(rs, 28));
            bean.setTbpphTunjanganJamsostekJkkjkm(Manager.getDouble(rs, 29));
            bean.setTbpphTunjanganTetap(Manager.getDouble(rs, 30));
            bean.setTbpphGajiPokokGross(Manager.getDouble(rs, 31));
            bean.setTbpphNpwpAwalTahun(Manager.getInteger(rs, 32));
            bean.setTbpphJkkjkm(Manager.getDouble(rs, 33));
            bean.setTbpphSalary(Manager.getDouble(rs, 34));
            bean.setTbpphPtkp(Manager.getDouble(rs, 35));
            bean.setTbpphDate(rs.getTimestamp(36));
            bean.setTbeId(Manager.getInteger(rs, 37));
            bean.setTbpphId(Manager.getInteger(rs, 38));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public TbPphBean toBean(TbPphBeanModel beanModel, TbPphBean bean)
    {
		if (beanModel.getTbpphDummy() != null)
			bean.setTbpphDummy(beanModel.getTbpphDummy());

		if (bean.getTbpphDummy() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphDummy().getClass().getName()))
			bean.setTbpphDummy(beanModel.getTbpphDummy());
		
		if (beanModel.getTbpphPeriode() != null)
			bean.setTbpphPeriode(beanModel.getTbpphPeriode());

		if (bean.getTbpphPeriode() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPeriode().getClass().getName()))
			bean.setTbpphPeriode(beanModel.getTbpphPeriode());
		
		if (beanModel.getTbpphTotalTakeHomePayKurs() != null)
			bean.setTbpphTotalTakeHomePayKurs(beanModel.getTbpphTotalTakeHomePayKurs());

		if (bean.getTbpphTotalTakeHomePayKurs() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphTotalTakeHomePayKurs().getClass().getName()))
			bean.setTbpphTotalTakeHomePayKurs(beanModel.getTbpphTotalTakeHomePayKurs());
		
		if (beanModel.getTbcId() != null)
			bean.setTbcId(beanModel.getTbcId());

		if (bean.getTbcId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcId().getClass().getName()))
			bean.setTbcId(beanModel.getTbcId());
		
		if (beanModel.getTbpphTotalTakeHomePay() != null)
			bean.setTbpphTotalTakeHomePay(beanModel.getTbpphTotalTakeHomePay());

		if (bean.getTbpphTotalTakeHomePay() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphTotalTakeHomePay().getClass().getName()))
			bean.setTbpphTotalTakeHomePay(beanModel.getTbpphTotalTakeHomePay());
		
		if (beanModel.getTbpphLoan() != null)
			bean.setTbpphLoan(beanModel.getTbpphLoan());

		if (bean.getTbpphLoan() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphLoan().getClass().getName()))
			bean.setTbpphLoan(beanModel.getTbpphLoan());
		
		if (beanModel.getTbpphTakeHomePayUtkPendIrreguler() != null)
			bean.setTbpphTakeHomePayUtkPendIrreguler(beanModel.getTbpphTakeHomePayUtkPendIrreguler());

		if (bean.getTbpphTakeHomePayUtkPendIrreguler() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphTakeHomePayUtkPendIrreguler().getClass().getName()))
			bean.setTbpphTakeHomePayUtkPendIrreguler(beanModel.getTbpphTakeHomePayUtkPendIrreguler());
		
		if (beanModel.getTbpphPajakKomisi() != null)
			bean.setTbpphPajakKomisi(beanModel.getTbpphPajakKomisi());

		if (bean.getTbpphPajakKomisi() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPajakKomisi().getClass().getName()))
			bean.setTbpphPajakKomisi(beanModel.getTbpphPajakKomisi());
		
		if (beanModel.getTbpphPajakTotSethnUtkKaryTdkBerNpwp() != null)
			bean.setTbpphPajakTotSethnUtkKaryTdkBerNpwp(beanModel.getTbpphPajakTotSethnUtkKaryTdkBerNpwp());

		if (bean.getTbpphPajakTotSethnUtkKaryTdkBerNpwp() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPajakTotSethnUtkKaryTdkBerNpwp().getClass().getName()))
			bean.setTbpphPajakTotSethnUtkKaryTdkBerNpwp(beanModel.getTbpphPajakTotSethnUtkKaryTdkBerNpwp());
		
		if (beanModel.getTbpphPajakTotSethnUtkKaryBerNpwp() != null)
			bean.setTbpphPajakTotSethnUtkKaryBerNpwp(beanModel.getTbpphPajakTotSethnUtkKaryBerNpwp());

		if (bean.getTbpphPajakTotSethnUtkKaryBerNpwp() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPajakTotSethnUtkKaryBerNpwp().getClass().getName()))
			bean.setTbpphPajakTotSethnUtkKaryBerNpwp(beanModel.getTbpphPajakTotSethnUtkKaryBerNpwp());
		
		if (beanModel.getTbpphPendDisetahunkanPlusKomisi() != null)
			bean.setTbpphPendDisetahunkanPlusKomisi(beanModel.getTbpphPendDisetahunkanPlusKomisi());

		if (bean.getTbpphPendDisetahunkanPlusKomisi() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPendDisetahunkanPlusKomisi().getClass().getName()))
			bean.setTbpphPendDisetahunkanPlusKomisi(beanModel.getTbpphPendDisetahunkanPlusKomisi());
		
		if (beanModel.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd() != null)
			bean.setTbpphPajakSdhDisetorUtkPendTdkTtpYtd(beanModel.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd());

		if (bean.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd().getClass().getName()))
			bean.setTbpphPajakSdhDisetorUtkPendTdkTtpYtd(beanModel.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd());
		
		if (beanModel.getTbpphPendapatanTidakTetapYtd() != null)
			bean.setTbpphPendapatanTidakTetapYtd(beanModel.getTbpphPendapatanTidakTetapYtd());

		if (bean.getTbpphPendapatanTidakTetapYtd() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPendapatanTidakTetapYtd().getClass().getName()))
			bean.setTbpphPendapatanTidakTetapYtd(beanModel.getTbpphPendapatanTidakTetapYtd());
		
		if (beanModel.getTbpphPendapatanTidakTetap() != null)
			bean.setTbpphPendapatanTidakTetap(beanModel.getTbpphPendapatanTidakTetap());

		if (bean.getTbpphPendapatanTidakTetap() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPendapatanTidakTetap().getClass().getName()))
			bean.setTbpphPendapatanTidakTetap(beanModel.getTbpphPendapatanTidakTetap());
		
		if (beanModel.getTbpphTakeHomePay() != null)
			bean.setTbpphTakeHomePay(beanModel.getTbpphTakeHomePay());

		if (bean.getTbpphTakeHomePay() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphTakeHomePay().getClass().getName()))
			bean.setTbpphTakeHomePay(beanModel.getTbpphTakeHomePay());
		
		if (beanModel.getTbpphPajakBlnIni() != null)
			bean.setTbpphPajakBlnIni(beanModel.getTbpphPajakBlnIni());

		if (bean.getTbpphPajakBlnIni() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPajakBlnIni().getClass().getName()))
			bean.setTbpphPajakBlnIni(beanModel.getTbpphPajakBlnIni());
		
		if (beanModel.getTbpphPajakTerutangSmpBlnIni() != null)
			bean.setTbpphPajakTerutangSmpBlnIni(beanModel.getTbpphPajakTerutangSmpBlnIni());

		if (bean.getTbpphPajakTerutangSmpBlnIni() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPajakTerutangSmpBlnIni().getClass().getName()))
			bean.setTbpphPajakTerutangSmpBlnIni(beanModel.getTbpphPajakTerutangSmpBlnIni());
		
		if (beanModel.getTbpphPajakSetahunUtkKaryTdkBerNpwp() != null)
			bean.setTbpphPajakSetahunUtkKaryTdkBerNpwp(beanModel.getTbpphPajakSetahunUtkKaryTdkBerNpwp());

		if (bean.getTbpphPajakSetahunUtkKaryTdkBerNpwp() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPajakSetahunUtkKaryTdkBerNpwp().getClass().getName()))
			bean.setTbpphPajakSetahunUtkKaryTdkBerNpwp(beanModel.getTbpphPajakSetahunUtkKaryTdkBerNpwp());
		
		if (beanModel.getTbpphPajakSetahunUtkKaryBerNpwp() != null)
			bean.setTbpphPajakSetahunUtkKaryBerNpwp(beanModel.getTbpphPajakSetahunUtkKaryBerNpwp());

		if (bean.getTbpphPajakSetahunUtkKaryBerNpwp() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPajakSetahunUtkKaryBerNpwp().getClass().getName()))
			bean.setTbpphPajakSetahunUtkKaryBerNpwp(beanModel.getTbpphPajakSetahunUtkKaryBerNpwp());
		
		if (beanModel.getTbpphPendapatanKenaPajak() != null)
			bean.setTbpphPendapatanKenaPajak(beanModel.getTbpphPendapatanKenaPajak());

		if (bean.getTbpphPendapatanKenaPajak() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPendapatanKenaPajak().getClass().getName()))
			bean.setTbpphPendapatanKenaPajak(beanModel.getTbpphPendapatanKenaPajak());
		
		if (beanModel.getTbpphPendapatanDisetahunkan() != null)
			bean.setTbpphPendapatanDisetahunkan(beanModel.getTbpphPendapatanDisetahunkan());

		if (bean.getTbpphPendapatanDisetahunkan() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPendapatanDisetahunkan().getClass().getName()))
			bean.setTbpphPendapatanDisetahunkan(beanModel.getTbpphPendapatanDisetahunkan());
		
		if (beanModel.getTbpphFaktorPengaliUtkDisetahunkan() != null)
			bean.setTbpphFaktorPengaliUtkDisetahunkan(beanModel.getTbpphFaktorPengaliUtkDisetahunkan());

		if (bean.getTbpphFaktorPengaliUtkDisetahunkan() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphFaktorPengaliUtkDisetahunkan().getClass().getName()))
			bean.setTbpphFaktorPengaliUtkDisetahunkan(beanModel.getTbpphFaktorPengaliUtkDisetahunkan());
		
		if (beanModel.getTbpphPajakDisetorYtdSmpBlnLalu() != null)
			bean.setTbpphPajakDisetorYtdSmpBlnLalu(beanModel.getTbpphPajakDisetorYtdSmpBlnLalu());

		if (bean.getTbpphPajakDisetorYtdSmpBlnLalu() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPajakDisetorYtdSmpBlnLalu().getClass().getName()))
			bean.setTbpphPajakDisetorYtdSmpBlnLalu(beanModel.getTbpphPajakDisetorYtdSmpBlnLalu());
		
		if (beanModel.getTbpphPendYtdSblmPajakSmpBlnLalu() != null)
			bean.setTbpphPendYtdSblmPajakSmpBlnLalu(beanModel.getTbpphPendYtdSblmPajakSmpBlnLalu());

		if (bean.getTbpphPendYtdSblmPajakSmpBlnLalu() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPendYtdSblmPajakSmpBlnLalu().getClass().getName()))
			bean.setTbpphPendYtdSblmPajakSmpBlnLalu(beanModel.getTbpphPendYtdSblmPajakSmpBlnLalu());
		
		if (beanModel.getTbpphPendSblnSblmPajak() != null)
			bean.setTbpphPendSblnSblmPajak(beanModel.getTbpphPendSblnSblmPajak());

		if (bean.getTbpphPendSblnSblmPajak() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPendSblnSblmPajak().getClass().getName()))
			bean.setTbpphPendSblnSblmPajak(beanModel.getTbpphPendSblnSblmPajak());
		
		if (beanModel.getTbpphBiayaJabatan() != null)
			bean.setTbpphBiayaJabatan(beanModel.getTbpphBiayaJabatan());

		if (bean.getTbpphBiayaJabatan() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphBiayaJabatan().getClass().getName()))
			bean.setTbpphBiayaJabatan(beanModel.getTbpphBiayaJabatan());
		
		if (beanModel.getTbpphIuranJhtJamsostek() != null)
			bean.setTbpphIuranJhtJamsostek(beanModel.getTbpphIuranJhtJamsostek());

		if (bean.getTbpphIuranJhtJamsostek() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphIuranJhtJamsostek().getClass().getName()))
			bean.setTbpphIuranJhtJamsostek(beanModel.getTbpphIuranJhtJamsostek());
		
		if (beanModel.getTbpphTotalGross() != null)
			bean.setTbpphTotalGross(beanModel.getTbpphTotalGross());

		if (bean.getTbpphTotalGross() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphTotalGross().getClass().getName()))
			bean.setTbpphTotalGross(beanModel.getTbpphTotalGross());
		
		if (beanModel.getTbpphTunjanganJamsostekJkkjkm() != null)
			bean.setTbpphTunjanganJamsostekJkkjkm(beanModel.getTbpphTunjanganJamsostekJkkjkm());

		if (bean.getTbpphTunjanganJamsostekJkkjkm() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphTunjanganJamsostekJkkjkm().getClass().getName()))
			bean.setTbpphTunjanganJamsostekJkkjkm(beanModel.getTbpphTunjanganJamsostekJkkjkm());
		
		if (beanModel.getTbpphTunjanganTetap() != null)
			bean.setTbpphTunjanganTetap(beanModel.getTbpphTunjanganTetap());

		if (bean.getTbpphTunjanganTetap() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphTunjanganTetap().getClass().getName()))
			bean.setTbpphTunjanganTetap(beanModel.getTbpphTunjanganTetap());
		
		if (beanModel.getTbpphGajiPokokGross() != null)
			bean.setTbpphGajiPokokGross(beanModel.getTbpphGajiPokokGross());

		if (bean.getTbpphGajiPokokGross() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphGajiPokokGross().getClass().getName()))
			bean.setTbpphGajiPokokGross(beanModel.getTbpphGajiPokokGross());
		
		if (beanModel.getTbpphNpwpAwalTahun() != null)
			bean.setTbpphNpwpAwalTahun(beanModel.getTbpphNpwpAwalTahun());

		if (bean.getTbpphNpwpAwalTahun() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphNpwpAwalTahun().getClass().getName()))
			bean.setTbpphNpwpAwalTahun(beanModel.getTbpphNpwpAwalTahun());
		
		if (beanModel.getTbpphJkkjkm() != null)
			bean.setTbpphJkkjkm(beanModel.getTbpphJkkjkm());

		if (bean.getTbpphJkkjkm() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphJkkjkm().getClass().getName()))
			bean.setTbpphJkkjkm(beanModel.getTbpphJkkjkm());
		
		if (beanModel.getTbpphSalary() != null)
			bean.setTbpphSalary(beanModel.getTbpphSalary());

		if (bean.getTbpphSalary() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphSalary().getClass().getName()))
			bean.setTbpphSalary(beanModel.getTbpphSalary());
		
		if (beanModel.getTbpphPtkp() != null)
			bean.setTbpphPtkp(beanModel.getTbpphPtkp());

		if (bean.getTbpphPtkp() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphPtkp().getClass().getName()))
			bean.setTbpphPtkp(beanModel.getTbpphPtkp());
		
		if (beanModel.getTbpphDate() != null)
			bean.setTbpphDate(beanModel.getTbpphDate());

		if (bean.getTbpphDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphDate().getClass().getName()))
			bean.setTbpphDate(beanModel.getTbpphDate());
		
		if (beanModel.getTbeId() != null)
			bean.setTbeId(beanModel.getTbeId());

		if (bean.getTbeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeId().getClass().getName()))
			bean.setTbeId(beanModel.getTbeId());
		
		if (beanModel.getTbpphId() != null)
			bean.setTbpphId(beanModel.getTbpphId());

		if (bean.getTbpphId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpphId().getClass().getName()))
			bean.setTbpphId(beanModel.getTbpphId());
		
        return bean;
    }
	
    //29AA
    public TbPphBean[] toBeans(TbPphBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	TbPphBean beans[] = new TbPphBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public TbPphBeanModel toBeanModel(TbPphBean bean)
    {
    	TbPphBeanModel beanModel = new TbPphBeanModel();
		beanModel.setTbpphDummy(bean.getTbpphDummy());
		beanModel.setTbpphPeriode(bean.getTbpphPeriode());
		beanModel.setTbpphTotalTakeHomePayKurs(bean.getTbpphTotalTakeHomePayKurs());
		beanModel.setTbcId(bean.getTbcId());
		beanModel.setTbpphTotalTakeHomePay(bean.getTbpphTotalTakeHomePay());
		beanModel.setTbpphLoan(bean.getTbpphLoan());
		beanModel.setTbpphTakeHomePayUtkPendIrreguler(bean.getTbpphTakeHomePayUtkPendIrreguler());
		beanModel.setTbpphPajakKomisi(bean.getTbpphPajakKomisi());
		beanModel.setTbpphPajakTotSethnUtkKaryTdkBerNpwp(bean.getTbpphPajakTotSethnUtkKaryTdkBerNpwp());
		beanModel.setTbpphPajakTotSethnUtkKaryBerNpwp(bean.getTbpphPajakTotSethnUtkKaryBerNpwp());
		beanModel.setTbpphPendDisetahunkanPlusKomisi(bean.getTbpphPendDisetahunkanPlusKomisi());
		beanModel.setTbpphPajakSdhDisetorUtkPendTdkTtpYtd(bean.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd());
		beanModel.setTbpphPendapatanTidakTetapYtd(bean.getTbpphPendapatanTidakTetapYtd());
		beanModel.setTbpphPendapatanTidakTetap(bean.getTbpphPendapatanTidakTetap());
		beanModel.setTbpphTakeHomePay(bean.getTbpphTakeHomePay());
		beanModel.setTbpphPajakBlnIni(bean.getTbpphPajakBlnIni());
		beanModel.setTbpphPajakTerutangSmpBlnIni(bean.getTbpphPajakTerutangSmpBlnIni());
		beanModel.setTbpphPajakSetahunUtkKaryTdkBerNpwp(bean.getTbpphPajakSetahunUtkKaryTdkBerNpwp());
		beanModel.setTbpphPajakSetahunUtkKaryBerNpwp(bean.getTbpphPajakSetahunUtkKaryBerNpwp());
		beanModel.setTbpphPendapatanKenaPajak(bean.getTbpphPendapatanKenaPajak());
		beanModel.setTbpphPendapatanDisetahunkan(bean.getTbpphPendapatanDisetahunkan());
		beanModel.setTbpphFaktorPengaliUtkDisetahunkan(bean.getTbpphFaktorPengaliUtkDisetahunkan());
		beanModel.setTbpphPajakDisetorYtdSmpBlnLalu(bean.getTbpphPajakDisetorYtdSmpBlnLalu());
		beanModel.setTbpphPendYtdSblmPajakSmpBlnLalu(bean.getTbpphPendYtdSblmPajakSmpBlnLalu());
		beanModel.setTbpphPendSblnSblmPajak(bean.getTbpphPendSblnSblmPajak());
		beanModel.setTbpphBiayaJabatan(bean.getTbpphBiayaJabatan());
		beanModel.setTbpphIuranJhtJamsostek(bean.getTbpphIuranJhtJamsostek());
		beanModel.setTbpphTotalGross(bean.getTbpphTotalGross());
		beanModel.setTbpphTunjanganJamsostekJkkjkm(bean.getTbpphTunjanganJamsostekJkkjkm());
		beanModel.setTbpphTunjanganTetap(bean.getTbpphTunjanganTetap());
		beanModel.setTbpphGajiPokokGross(bean.getTbpphGajiPokokGross());
		beanModel.setTbpphNpwpAwalTahun(bean.getTbpphNpwpAwalTahun());
		beanModel.setTbpphJkkjkm(bean.getTbpphJkkjkm());
		beanModel.setTbpphSalary(bean.getTbpphSalary());
		beanModel.setTbpphPtkp(bean.getTbpphPtkp());
		beanModel.setTbpphDate(bean.getTbpphDate());
		beanModel.setTbeId(bean.getTbeId());
		beanModel.setTbpphId(bean.getTbpphId());
		return beanModel;
    }
    
    //29CC
    public TbPphBeanModel[] toBeanModels(TbPphBean beans[])
    {
    	int beansCount = beans.length;
    	TbPphBeanModel beanModels[] = new TbPphBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the tb_pph table on a TbPphBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting TbPphBean bean
     * @throws DAOException
     */
    //30
    public TbPphBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        TbPphBean bean = this.createTbPphBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBPPH_DUMMY:
                        ++pos;
                        bean.setTbpphDummy(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBPPH_PERIODE:
                        ++pos;
                        bean.setTbpphPeriode(rs.getString(pos));
                        break;
                    case ID_TBPPH_TOTAL_TAKE_HOME_PAY_KURS:
                        ++pos;
                        bean.setTbpphTotalTakeHomePayKurs(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBC_ID:
                        ++pos;
                        bean.setTbcId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBPPH_TOTAL_TAKE_HOME_PAY:
                        ++pos;
                        bean.setTbpphTotalTakeHomePay(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_LOAN:
                        ++pos;
                        bean.setTbpphLoan(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_TAKE_HOME_PAY_UTK_PEND_IRREGULER:
                        ++pos;
                        bean.setTbpphTakeHomePayUtkPendIrreguler(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PAJAK_KOMISI:
                        ++pos;
                        bean.setTbpphPajakKomisi(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PAJAK_TOT_SETHN_UTK_KARY_TDK_BER_NPWP:
                        ++pos;
                        bean.setTbpphPajakTotSethnUtkKaryTdkBerNpwp(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PAJAK_TOT_SETHN_UTK_KARY_BER_NPWP:
                        ++pos;
                        bean.setTbpphPajakTotSethnUtkKaryBerNpwp(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PEND_DISETAHUNKAN_PLUS_KOMISI:
                        ++pos;
                        bean.setTbpphPendDisetahunkanPlusKomisi(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PAJAK_SDH_DISETOR_UTK_PEND_TDK_TTP_YTD:
                        ++pos;
                        bean.setTbpphPajakSdhDisetorUtkPendTdkTtpYtd(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PENDAPATAN_TIDAK_TETAP_YTD:
                        ++pos;
                        bean.setTbpphPendapatanTidakTetapYtd(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PENDAPATAN_TIDAK_TETAP:
                        ++pos;
                        bean.setTbpphPendapatanTidakTetap(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_TAKE_HOME_PAY:
                        ++pos;
                        bean.setTbpphTakeHomePay(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PAJAK_BLN_INI:
                        ++pos;
                        bean.setTbpphPajakBlnIni(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PAJAK_TERUTANG_SMP_BLN_INI:
                        ++pos;
                        bean.setTbpphPajakTerutangSmpBlnIni(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PAJAK_SETAHUN_UTK_KARY_TDK_BER_NPWP:
                        ++pos;
                        bean.setTbpphPajakSetahunUtkKaryTdkBerNpwp(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PAJAK_SETAHUN_UTK_KARY_BER_NPWP:
                        ++pos;
                        bean.setTbpphPajakSetahunUtkKaryBerNpwp(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PENDAPATAN_KENA_PAJAK:
                        ++pos;
                        bean.setTbpphPendapatanKenaPajak(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PENDAPATAN_DISETAHUNKAN:
                        ++pos;
                        bean.setTbpphPendapatanDisetahunkan(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_FAKTOR_PENGALI_UTK_DISETAHUNKAN:
                        ++pos;
                        bean.setTbpphFaktorPengaliUtkDisetahunkan(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PAJAK_DISETOR_YTD_SMP_BLN_LALU:
                        ++pos;
                        bean.setTbpphPajakDisetorYtdSmpBlnLalu(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PEND_YTD_SBLM_PAJAK_SMP_BLN_LALU:
                        ++pos;
                        bean.setTbpphPendYtdSblmPajakSmpBlnLalu(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PEND_SBLN_SBLM_PAJAK:
                        ++pos;
                        bean.setTbpphPendSblnSblmPajak(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_BIAYA_JABATAN:
                        ++pos;
                        bean.setTbpphBiayaJabatan(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_IURAN_JHT_JAMSOSTEK:
                        ++pos;
                        bean.setTbpphIuranJhtJamsostek(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_TOTAL_GROSS:
                        ++pos;
                        bean.setTbpphTotalGross(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_TUNJANGAN_JAMSOSTEK_JKKJKM:
                        ++pos;
                        bean.setTbpphTunjanganJamsostekJkkjkm(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_TUNJANGAN_TETAP:
                        ++pos;
                        bean.setTbpphTunjanganTetap(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_GAJI_POKOK_GROSS:
                        ++pos;
                        bean.setTbpphGajiPokokGross(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_NPWP_AWAL_TAHUN:
                        ++pos;
                        bean.setTbpphNpwpAwalTahun(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBPPH_JKKJKM:
                        ++pos;
                        bean.setTbpphJkkjkm(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_SALARY:
                        ++pos;
                        bean.setTbpphSalary(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_PTKP:
                        ++pos;
                        bean.setTbpphPtkp(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPPH_DATE:
                        ++pos;
                        bean.setTbpphDate(rs.getTimestamp(pos));
                        break;
                    case ID_TBE_ID:
                        ++pos;
                        bean.setTbeId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBPPH_ID:
                        ++pos;
                        bean.setTbpphId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the tb_pph on a TbPphBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbPphBean bean
     * @throws DAOException
     */
    //31
    public TbPphBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        TbPphBean bean = this.createTbPphBean();
        try
        {
            bean.setTbpphDummy(Manager.getInteger(rs, "tbpph_dummy"));
            bean.setTbpphPeriode(rs.getString("tbpph_periode"));
            bean.setTbpphTotalTakeHomePayKurs(Manager.getDouble(rs, "tbpph_total_take_home_pay_kurs"));
            bean.setTbcId(Manager.getInteger(rs, "tbc_id"));
            bean.setTbpphTotalTakeHomePay(Manager.getDouble(rs, "tbpph_total_take_home_pay"));
            bean.setTbpphLoan(Manager.getDouble(rs, "tbpph_loan"));
            bean.setTbpphTakeHomePayUtkPendIrreguler(Manager.getDouble(rs, "tbpph_take_home_pay_utk_pend_irreguler"));
            bean.setTbpphPajakKomisi(Manager.getDouble(rs, "tbpph_pajak_komisi"));
            bean.setTbpphPajakTotSethnUtkKaryTdkBerNpwp(Manager.getDouble(rs, "tbpph_pajak_tot_sethn_utk_kary_tdk_ber_npwp"));
            bean.setTbpphPajakTotSethnUtkKaryBerNpwp(Manager.getDouble(rs, "tbpph_pajak_tot_sethn_utk_kary_ber_npwp"));
            bean.setTbpphPendDisetahunkanPlusKomisi(Manager.getDouble(rs, "tbpph_pend_disetahunkan_plus_komisi"));
            bean.setTbpphPajakSdhDisetorUtkPendTdkTtpYtd(Manager.getDouble(rs, "tbpph_pajak_sdh_disetor_utk_pend_tdk_ttp_ytd"));
            bean.setTbpphPendapatanTidakTetapYtd(Manager.getDouble(rs, "tbpph_pendapatan_tidak_tetap_ytd"));
            bean.setTbpphPendapatanTidakTetap(Manager.getDouble(rs, "tbpph_pendapatan_tidak_tetap"));
            bean.setTbpphTakeHomePay(Manager.getDouble(rs, "tbpph_take_home_pay"));
            bean.setTbpphPajakBlnIni(Manager.getDouble(rs, "tbpph_pajak_bln_ini"));
            bean.setTbpphPajakTerutangSmpBlnIni(Manager.getDouble(rs, "tbpph_pajak_terutang_smp_bln_ini"));
            bean.setTbpphPajakSetahunUtkKaryTdkBerNpwp(Manager.getDouble(rs, "tbpph_pajak_setahun_utk_kary_tdk_ber_npwp"));
            bean.setTbpphPajakSetahunUtkKaryBerNpwp(Manager.getDouble(rs, "tbpph_pajak_setahun_utk_kary_ber_npwp"));
            bean.setTbpphPendapatanKenaPajak(Manager.getDouble(rs, "tbpph_pendapatan_kena_pajak"));
            bean.setTbpphPendapatanDisetahunkan(Manager.getDouble(rs, "tbpph_pendapatan_disetahunkan"));
            bean.setTbpphFaktorPengaliUtkDisetahunkan(Manager.getDouble(rs, "tbpph_faktor_pengali_utk_disetahunkan"));
            bean.setTbpphPajakDisetorYtdSmpBlnLalu(Manager.getDouble(rs, "tbpph_pajak_disetor_ytd_smp_bln_lalu"));
            bean.setTbpphPendYtdSblmPajakSmpBlnLalu(Manager.getDouble(rs, "tbpph_pend_ytd_sblm_pajak_smp_bln_lalu"));
            bean.setTbpphPendSblnSblmPajak(Manager.getDouble(rs, "tbpph_pend_sbln_sblm_pajak"));
            bean.setTbpphBiayaJabatan(Manager.getDouble(rs, "tbpph_biaya_jabatan"));
            bean.setTbpphIuranJhtJamsostek(Manager.getDouble(rs, "tbpph_iuran_jht_jamsostek"));
            bean.setTbpphTotalGross(Manager.getDouble(rs, "tbpph_total_gross"));
            bean.setTbpphTunjanganJamsostekJkkjkm(Manager.getDouble(rs, "tbpph_tunjangan_jamsostek_jkkjkm"));
            bean.setTbpphTunjanganTetap(Manager.getDouble(rs, "tbpph_tunjangan_tetap"));
            bean.setTbpphGajiPokokGross(Manager.getDouble(rs, "tbpph_gaji_pokok_gross"));
            bean.setTbpphNpwpAwalTahun(Manager.getInteger(rs, "tbpph_npwp_awal_tahun"));
            bean.setTbpphJkkjkm(Manager.getDouble(rs, "tbpph_jkkjkm"));
            bean.setTbpphSalary(Manager.getDouble(rs, "tbpph_salary"));
            bean.setTbpphPtkp(Manager.getDouble(rs, "tbpph_ptkp"));
            bean.setTbpphDate(rs.getTimestamp("tbpph_date"));
            bean.setTbeId(Manager.getInteger(rs, "tbe_id"));
            bean.setTbpphId(Manager.getInteger(rs, "tbpph_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TbPphBean
     * @throws DAOException
     */
    //32
    public TbPphBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TbPphBean
     * @throws DAOException
     */
    //33
    public TbPphBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (TbPphBean[])v.toArray(new TbPphBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of TbPphBean
     * @throws DAOException
     */
    //34
    public TbPphBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private TbPphListener listener = null;

    /**
     * Registers a unique TbPphListener listener.
     */
    //35
    public void registerListener(TbPphListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the TbPphBean bean.
     *
     * @param bean the TbPphBean bean to be saved
     */
    //36
    private void beforeInsert(TbPphBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the TbPphBean bean.
     *
     * @param bean the TbPphBean bean to be saved
     */
    //37
    private void afterInsert(TbPphBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the TbPphBean bean.
     *
     * @param bean the TbPphBean bean to be updated
     */
    //38
    private void beforeUpdate(TbPphBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the TbPphBean bean.
     *
     * @param bean the TbPphBean bean to be updated
     */
    //39
    private void afterUpdate(TbPphBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the TbPphBean bean.
     *
     * @param bean the TbPphBean bean to be deleted
     */
    private void beforeDelete(TbPphBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the TbPphBean bean.
     *
     * @param bean the TbPphBean bean to be deleted
     */
    private void afterDelete(TbPphBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
