// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewEmployeeSalaryBean is a mapping of view_employee_salary Table.
 * @author sql2java
*/
public class ViewEmployeeSalaryBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 4994539755735979829L;
	
    private Double tbpcOvertime;

    private boolean tbpcOvertimeIsModified = false;
    private boolean tbpcOvertimeIsInitialized = false;

    private Double tbpcLate;

    private boolean tbpcLateIsModified = false;
    private boolean tbpcLateIsInitialized = false;

    private Double tbpcStep;

    private boolean tbpcStepIsModified = false;
    private boolean tbpcStepIsInitialized = false;

    private Double tbpcMax;

    private boolean tbpcMaxIsModified = false;
    private boolean tbpcMaxIsInitialized = false;

    private Double tbpcMin;

    private boolean tbpcMinIsModified = false;
    private boolean tbpcMinIsInitialized = false;

    private Integer tbpcId;

    private boolean tbpcIdIsModified = false;
    private boolean tbpcIdIsInitialized = false;

    private String tbpName;

    private boolean tbpNameIsModified = false;
    private boolean tbpNameIsInitialized = false;

    private String tbpPaygradeId;

    private boolean tbpPaygradeIdIsModified = false;
    private boolean tbpPaygradeIdIsInitialized = false;

    private Integer tbpId;

    private boolean tbpIdIsModified = false;
    private boolean tbpIdIsInitialized = false;

    private Double tbcLocalCurrencyKurs;

    private boolean tbcLocalCurrencyKursIsModified = false;
    private boolean tbcLocalCurrencyKursIsInitialized = false;

    private String tbcName;

    private boolean tbcNameIsModified = false;
    private boolean tbcNameIsInitialized = false;

    private String tbcCurrencyId;

    private boolean tbcCurrencyIdIsModified = false;
    private boolean tbcCurrencyIdIsInitialized = false;

    private Integer tbcId;

    private boolean tbcIdIsModified = false;
    private boolean tbcIdIsInitialized = false;

    private String tbesCurrencyName;

    private boolean tbesCurrencyNameIsModified = false;
    private boolean tbesCurrencyNameIsInitialized = false;

    private Integer tbesPayFrequency;

    private boolean tbesPayFrequencyIsModified = false;
    private boolean tbesPayFrequencyIsInitialized = false;

    private Double tbesCogs;

    private boolean tbesCogsIsModified = false;
    private boolean tbesCogsIsInitialized = false;

    private Double tbesBasicSalary;

    private boolean tbesBasicSalaryIsModified = false;
    private boolean tbesBasicSalaryIsInitialized = false;

    private Integer tbesId;

    private boolean tbesIdIsModified = false;
    private boolean tbesIdIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewEmployeeSalaryBean is via the createViewEmployeeSalaryBean method in ViewEmployeeSalaryManager or
     * via the factory class ViewEmployeeSalaryFactory create method
     */
    protected ViewEmployeeSalaryBean()
    {
    }

    /**
     * Getter method for tbpcOvertime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbpc_overtime</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpcOvertime
     */
    public Double getTbpcOvertime()
    {
        return tbpcOvertime;
    }

    /**
     * Setter method for tbpcOvertime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpcOvertime
     */
    public void setTbpcOvertime(Double newVal)
    {
        if ((newVal != null && tbpcOvertime != null && (newVal.compareTo(tbpcOvertime) == 0)) ||
            (newVal == null && tbpcOvertime == null && tbpcOvertimeIsInitialized)) {
            return;
        }
        tbpcOvertime = newVal;
        tbpcOvertimeIsModified = true;
        tbpcOvertimeIsInitialized = true;
    }

    /**
     * Setter method for tbpcOvertime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpcOvertime
     */
    public void setTbpcOvertime(double newVal)
    {
        setTbpcOvertime(new Double(newVal));
    }

    /**
     * Determines if the tbpcOvertime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpcOvertimeModified()
    {
        return tbpcOvertimeIsModified;
    }

    /**
     * Determines if the tbpcOvertime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpcOvertimeInitialized()
    {
        return tbpcOvertimeIsInitialized;
    }

    /**
     * Getter method for tbpcLate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbpc_late</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpcLate
     */
    public Double getTbpcLate()
    {
        return tbpcLate;
    }

    /**
     * Setter method for tbpcLate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpcLate
     */
    public void setTbpcLate(Double newVal)
    {
        if ((newVal != null && tbpcLate != null && (newVal.compareTo(tbpcLate) == 0)) ||
            (newVal == null && tbpcLate == null && tbpcLateIsInitialized)) {
            return;
        }
        tbpcLate = newVal;
        tbpcLateIsModified = true;
        tbpcLateIsInitialized = true;
    }

    /**
     * Setter method for tbpcLate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpcLate
     */
    public void setTbpcLate(double newVal)
    {
        setTbpcLate(new Double(newVal));
    }

    /**
     * Determines if the tbpcLate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpcLateModified()
    {
        return tbpcLateIsModified;
    }

    /**
     * Determines if the tbpcLate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpcLateInitialized()
    {
        return tbpcLateIsInitialized;
    }

    /**
     * Getter method for tbpcStep.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbpc_step</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpcStep
     */
    public Double getTbpcStep()
    {
        return tbpcStep;
    }

    /**
     * Setter method for tbpcStep.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpcStep
     */
    public void setTbpcStep(Double newVal)
    {
        if ((newVal != null && tbpcStep != null && (newVal.compareTo(tbpcStep) == 0)) ||
            (newVal == null && tbpcStep == null && tbpcStepIsInitialized)) {
            return;
        }
        tbpcStep = newVal;
        tbpcStepIsModified = true;
        tbpcStepIsInitialized = true;
    }

    /**
     * Setter method for tbpcStep.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpcStep
     */
    public void setTbpcStep(double newVal)
    {
        setTbpcStep(new Double(newVal));
    }

    /**
     * Determines if the tbpcStep has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpcStepModified()
    {
        return tbpcStepIsModified;
    }

    /**
     * Determines if the tbpcStep has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpcStepInitialized()
    {
        return tbpcStepIsInitialized;
    }

    /**
     * Getter method for tbpcMax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbpc_max</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpcMax
     */
    public Double getTbpcMax()
    {
        return tbpcMax;
    }

    /**
     * Setter method for tbpcMax.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpcMax
     */
    public void setTbpcMax(Double newVal)
    {
        if ((newVal != null && tbpcMax != null && (newVal.compareTo(tbpcMax) == 0)) ||
            (newVal == null && tbpcMax == null && tbpcMaxIsInitialized)) {
            return;
        }
        tbpcMax = newVal;
        tbpcMaxIsModified = true;
        tbpcMaxIsInitialized = true;
    }

    /**
     * Setter method for tbpcMax.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpcMax
     */
    public void setTbpcMax(double newVal)
    {
        setTbpcMax(new Double(newVal));
    }

    /**
     * Determines if the tbpcMax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpcMaxModified()
    {
        return tbpcMaxIsModified;
    }

    /**
     * Determines if the tbpcMax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpcMaxInitialized()
    {
        return tbpcMaxIsInitialized;
    }

    /**
     * Getter method for tbpcMin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbpc_min</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpcMin
     */
    public Double getTbpcMin()
    {
        return tbpcMin;
    }

    /**
     * Setter method for tbpcMin.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpcMin
     */
    public void setTbpcMin(Double newVal)
    {
        if ((newVal != null && tbpcMin != null && (newVal.compareTo(tbpcMin) == 0)) ||
            (newVal == null && tbpcMin == null && tbpcMinIsInitialized)) {
            return;
        }
        tbpcMin = newVal;
        tbpcMinIsModified = true;
        tbpcMinIsInitialized = true;
    }

    /**
     * Setter method for tbpcMin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpcMin
     */
    public void setTbpcMin(double newVal)
    {
        setTbpcMin(new Double(newVal));
    }

    /**
     * Determines if the tbpcMin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpcMinModified()
    {
        return tbpcMinIsModified;
    }

    /**
     * Determines if the tbpcMin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpcMinInitialized()
    {
        return tbpcMinIsInitialized;
    }

    /**
     * Getter method for tbpcId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbpc_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpcId
     */
    public Integer getTbpcId()
    {
        return tbpcId;
    }

    /**
     * Setter method for tbpcId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpcId
     */
    public void setTbpcId(Integer newVal)
    {
        if ((newVal != null && tbpcId != null && (newVal.compareTo(tbpcId) == 0)) ||
            (newVal == null && tbpcId == null && tbpcIdIsInitialized)) {
            return;
        }
        tbpcId = newVal;
        tbpcIdIsModified = true;
        tbpcIdIsInitialized = true;
    }

    /**
     * Setter method for tbpcId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpcId
     */
    public void setTbpcId(int newVal)
    {
        setTbpcId(new Integer(newVal));
    }

    /**
     * Determines if the tbpcId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpcIdModified()
    {
        return tbpcIdIsModified;
    }

    /**
     * Determines if the tbpcId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpcIdInitialized()
    {
        return tbpcIdIsInitialized;
    }

    /**
     * Getter method for tbpName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbp_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpName
     */
    public String getTbpName()
    {
        return tbpName;
    }

    /**
     * Setter method for tbpName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpName
     */
    public void setTbpName(String newVal)
    {
        if ((newVal != null && tbpName != null && (newVal.compareTo(tbpName) == 0)) ||
            (newVal == null && tbpName == null && tbpNameIsInitialized)) {
            return;
        }
        tbpName = newVal;
        tbpNameIsModified = true;
        tbpNameIsInitialized = true;
    }

    /**
     * Determines if the tbpName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpNameModified()
    {
        return tbpNameIsModified;
    }

    /**
     * Determines if the tbpName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpNameInitialized()
    {
        return tbpNameIsInitialized;
    }

    /**
     * Getter method for tbpPaygradeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbp_paygrade_id</li>
     * <li>comments: NAME+ID</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpPaygradeId
     */
    public String getTbpPaygradeId()
    {
        return tbpPaygradeId;
    }

    /**
     * Setter method for tbpPaygradeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpPaygradeId
     */
    public void setTbpPaygradeId(String newVal)
    {
        if ((newVal != null && tbpPaygradeId != null && (newVal.compareTo(tbpPaygradeId) == 0)) ||
            (newVal == null && tbpPaygradeId == null && tbpPaygradeIdIsInitialized)) {
            return;
        }
        tbpPaygradeId = newVal;
        tbpPaygradeIdIsModified = true;
        tbpPaygradeIdIsInitialized = true;
    }

    /**
     * Determines if the tbpPaygradeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpPaygradeIdModified()
    {
        return tbpPaygradeIdIsModified;
    }

    /**
     * Determines if the tbpPaygradeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpPaygradeIdInitialized()
    {
        return tbpPaygradeIdIsInitialized;
    }

    /**
     * Getter method for tbpId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpId
     */
    public Integer getTbpId()
    {
        return tbpId;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(Integer newVal)
    {
        if ((newVal != null && tbpId != null && (newVal.compareTo(tbpId) == 0)) ||
            (newVal == null && tbpId == null && tbpIdIsInitialized)) {
            return;
        }
        tbpId = newVal;
        tbpIdIsModified = true;
        tbpIdIsInitialized = true;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(int newVal)
    {
        setTbpId(new Integer(newVal));
    }

    /**
     * Determines if the tbpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpIdModified()
    {
        return tbpIdIsModified;
    }

    /**
     * Determines if the tbpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpIdInitialized()
    {
        return tbpIdIsInitialized;
    }

    /**
     * Getter method for tbcLocalCurrencyKurs.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbc_local_currency_kurs</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbcLocalCurrencyKurs
     */
    public Double getTbcLocalCurrencyKurs()
    {
        return tbcLocalCurrencyKurs;
    }

    /**
     * Setter method for tbcLocalCurrencyKurs.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcLocalCurrencyKurs
     */
    public void setTbcLocalCurrencyKurs(Double newVal)
    {
        if ((newVal != null && tbcLocalCurrencyKurs != null && (newVal.compareTo(tbcLocalCurrencyKurs) == 0)) ||
            (newVal == null && tbcLocalCurrencyKurs == null && tbcLocalCurrencyKursIsInitialized)) {
            return;
        }
        tbcLocalCurrencyKurs = newVal;
        tbcLocalCurrencyKursIsModified = true;
        tbcLocalCurrencyKursIsInitialized = true;
    }

    /**
     * Setter method for tbcLocalCurrencyKurs.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbcLocalCurrencyKurs
     */
    public void setTbcLocalCurrencyKurs(double newVal)
    {
        setTbcLocalCurrencyKurs(new Double(newVal));
    }

    /**
     * Determines if the tbcLocalCurrencyKurs has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcLocalCurrencyKursModified()
    {
        return tbcLocalCurrencyKursIsModified;
    }

    /**
     * Determines if the tbcLocalCurrencyKurs has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcLocalCurrencyKursInitialized()
    {
        return tbcLocalCurrencyKursIsInitialized;
    }

    /**
     * Getter method for tbcName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbc_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcName
     */
    public String getTbcName()
    {
        return tbcName;
    }

    /**
     * Setter method for tbcName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcName
     */
    public void setTbcName(String newVal)
    {
        if ((newVal != null && tbcName != null && (newVal.compareTo(tbcName) == 0)) ||
            (newVal == null && tbcName == null && tbcNameIsInitialized)) {
            return;
        }
        tbcName = newVal;
        tbcNameIsModified = true;
        tbcNameIsInitialized = true;
    }

    /**
     * Determines if the tbcName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcNameModified()
    {
        return tbcNameIsModified;
    }

    /**
     * Determines if the tbcName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcNameInitialized()
    {
        return tbcNameIsInitialized;
    }

    /**
     * Getter method for tbcCurrencyId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbc_currency_id</li>
     * <li>comments: NAME+ID</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcCurrencyId
     */
    public String getTbcCurrencyId()
    {
        return tbcCurrencyId;
    }

    /**
     * Setter method for tbcCurrencyId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcCurrencyId
     */
    public void setTbcCurrencyId(String newVal)
    {
        if ((newVal != null && tbcCurrencyId != null && (newVal.compareTo(tbcCurrencyId) == 0)) ||
            (newVal == null && tbcCurrencyId == null && tbcCurrencyIdIsInitialized)) {
            return;
        }
        tbcCurrencyId = newVal;
        tbcCurrencyIdIsModified = true;
        tbcCurrencyIdIsInitialized = true;
    }

    /**
     * Determines if the tbcCurrencyId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcCurrencyIdModified()
    {
        return tbcCurrencyIdIsModified;
    }

    /**
     * Determines if the tbcCurrencyId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcCurrencyIdInitialized()
    {
        return tbcCurrencyIdIsInitialized;
    }

    /**
     * Getter method for tbcId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbc_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbcId
     */
    public Integer getTbcId()
    {
        return tbcId;
    }

    /**
     * Setter method for tbcId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcId
     */
    public void setTbcId(Integer newVal)
    {
        if ((newVal != null && tbcId != null && (newVal.compareTo(tbcId) == 0)) ||
            (newVal == null && tbcId == null && tbcIdIsInitialized)) {
            return;
        }
        tbcId = newVal;
        tbcIdIsModified = true;
        tbcIdIsInitialized = true;
    }

    /**
     * Setter method for tbcId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbcId
     */
    public void setTbcId(int newVal)
    {
        setTbcId(new Integer(newVal));
    }

    /**
     * Determines if the tbcId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcIdModified()
    {
        return tbcIdIsModified;
    }

    /**
     * Determines if the tbcId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcIdInitialized()
    {
        return tbcIdIsInitialized;
    }

    /**
     * Getter method for tbesCurrencyName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbes_currency_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbesCurrencyName
     */
    public String getTbesCurrencyName()
    {
        return tbesCurrencyName;
    }

    /**
     * Setter method for tbesCurrencyName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesCurrencyName
     */
    public void setTbesCurrencyName(String newVal)
    {
        if ((newVal != null && tbesCurrencyName != null && (newVal.compareTo(tbesCurrencyName) == 0)) ||
            (newVal == null && tbesCurrencyName == null && tbesCurrencyNameIsInitialized)) {
            return;
        }
        tbesCurrencyName = newVal;
        tbesCurrencyNameIsModified = true;
        tbesCurrencyNameIsInitialized = true;
    }

    /**
     * Determines if the tbesCurrencyName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesCurrencyNameModified()
    {
        return tbesCurrencyNameIsModified;
    }

    /**
     * Determines if the tbesCurrencyName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesCurrencyNameInitialized()
    {
        return tbesCurrencyNameIsInitialized;
    }

    /**
     * Getter method for tbesPayFrequency.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbes_pay_frequency</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbesPayFrequency
     */
    public Integer getTbesPayFrequency()
    {
        return tbesPayFrequency;
    }

    /**
     * Setter method for tbesPayFrequency.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesPayFrequency
     */
    public void setTbesPayFrequency(Integer newVal)
    {
        if ((newVal != null && tbesPayFrequency != null && (newVal.compareTo(tbesPayFrequency) == 0)) ||
            (newVal == null && tbesPayFrequency == null && tbesPayFrequencyIsInitialized)) {
            return;
        }
        tbesPayFrequency = newVal;
        tbesPayFrequencyIsModified = true;
        tbesPayFrequencyIsInitialized = true;
    }

    /**
     * Setter method for tbesPayFrequency.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesPayFrequency
     */
    public void setTbesPayFrequency(int newVal)
    {
        setTbesPayFrequency(new Integer(newVal));
    }

    /**
     * Determines if the tbesPayFrequency has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesPayFrequencyModified()
    {
        return tbesPayFrequencyIsModified;
    }

    /**
     * Determines if the tbesPayFrequency has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesPayFrequencyInitialized()
    {
        return tbesPayFrequencyIsInitialized;
    }

    /**
     * Getter method for tbesCogs.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbes_cogs</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbesCogs
     */
    public Double getTbesCogs()
    {
        return tbesCogs;
    }

    /**
     * Setter method for tbesCogs.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesCogs
     */
    public void setTbesCogs(Double newVal)
    {
        if ((newVal != null && tbesCogs != null && (newVal.compareTo(tbesCogs) == 0)) ||
            (newVal == null && tbesCogs == null && tbesCogsIsInitialized)) {
            return;
        }
        tbesCogs = newVal;
        tbesCogsIsModified = true;
        tbesCogsIsInitialized = true;
    }

    /**
     * Setter method for tbesCogs.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesCogs
     */
    public void setTbesCogs(double newVal)
    {
        setTbesCogs(new Double(newVal));
    }

    /**
     * Determines if the tbesCogs has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesCogsModified()
    {
        return tbesCogsIsModified;
    }

    /**
     * Determines if the tbesCogs has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesCogsInitialized()
    {
        return tbesCogsIsInitialized;
    }

    /**
     * Getter method for tbesBasicSalary.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbes_basic_salary</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbesBasicSalary
     */
    public Double getTbesBasicSalary()
    {
        return tbesBasicSalary;
    }

    /**
     * Setter method for tbesBasicSalary.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesBasicSalary
     */
    public void setTbesBasicSalary(Double newVal)
    {
        if ((newVal != null && tbesBasicSalary != null && (newVal.compareTo(tbesBasicSalary) == 0)) ||
            (newVal == null && tbesBasicSalary == null && tbesBasicSalaryIsInitialized)) {
            return;
        }
        tbesBasicSalary = newVal;
        tbesBasicSalaryIsModified = true;
        tbesBasicSalaryIsInitialized = true;
    }

    /**
     * Setter method for tbesBasicSalary.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesBasicSalary
     */
    public void setTbesBasicSalary(double newVal)
    {
        setTbesBasicSalary(new Double(newVal));
    }

    /**
     * Determines if the tbesBasicSalary has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesBasicSalaryModified()
    {
        return tbesBasicSalaryIsModified;
    }

    /**
     * Determines if the tbesBasicSalary has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesBasicSalaryInitialized()
    {
        return tbesBasicSalaryIsInitialized;
    }

    /**
     * Getter method for tbesId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbes_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbesId
     */
    public Integer getTbesId()
    {
        return tbesId;
    }

    /**
     * Setter method for tbesId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesId
     */
    public void setTbesId(Integer newVal)
    {
        if ((newVal != null && tbesId != null && (newVal.compareTo(tbesId) == 0)) ||
            (newVal == null && tbesId == null && tbesIdIsInitialized)) {
            return;
        }
        tbesId = newVal;
        tbesIdIsModified = true;
        tbesIdIsInitialized = true;
    }

    /**
     * Setter method for tbesId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesId
     */
    public void setTbesId(int newVal)
    {
        setTbesId(new Integer(newVal));
    }

    /**
     * Determines if the tbesId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesIdModified()
    {
        return tbesIdIsModified;
    }

    /**
     * Determines if the tbesId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesIdInitialized()
    {
        return tbesIdIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_salary.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbpcOvertimeIsModified 		|| tbpcLateIsModified  		|| tbpcStepIsModified  		|| tbpcMaxIsModified  		|| tbpcMinIsModified  		|| tbpcIdIsModified  		|| tbpNameIsModified  		|| tbpPaygradeIdIsModified  		|| tbpIdIsModified  		|| tbcLocalCurrencyKursIsModified  		|| tbcNameIsModified  		|| tbcCurrencyIdIsModified  		|| tbcIdIsModified  		|| tbesCurrencyNameIsModified  		|| tbesPayFrequencyIsModified  		|| tbesCogsIsModified  		|| tbesBasicSalaryIsModified  		|| tbesIdIsModified  		|| tbeNameIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbpcOvertimeIsModified = false;
        tbpcLateIsModified = false;
        tbpcStepIsModified = false;
        tbpcMaxIsModified = false;
        tbpcMinIsModified = false;
        tbpcIdIsModified = false;
        tbpNameIsModified = false;
        tbpPaygradeIdIsModified = false;
        tbpIdIsModified = false;
        tbcLocalCurrencyKursIsModified = false;
        tbcNameIsModified = false;
        tbcCurrencyIdIsModified = false;
        tbcIdIsModified = false;
        tbesCurrencyNameIsModified = false;
        tbesPayFrequencyIsModified = false;
        tbesCogsIsModified = false;
        tbesBasicSalaryIsModified = false;
        tbesIdIsModified = false;
        tbeNameIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewEmployeeSalaryBean bean)
    {
        setTbpcOvertime(bean.getTbpcOvertime());
        setTbpcLate(bean.getTbpcLate());
        setTbpcStep(bean.getTbpcStep());
        setTbpcMax(bean.getTbpcMax());
        setTbpcMin(bean.getTbpcMin());
        setTbpcId(bean.getTbpcId());
        setTbpName(bean.getTbpName());
        setTbpPaygradeId(bean.getTbpPaygradeId());
        setTbpId(bean.getTbpId());
        setTbcLocalCurrencyKurs(bean.getTbcLocalCurrencyKurs());
        setTbcName(bean.getTbcName());
        setTbcCurrencyId(bean.getTbcCurrencyId());
        setTbcId(bean.getTbcId());
        setTbesCurrencyName(bean.getTbesCurrencyName());
        setTbesPayFrequency(bean.getTbesPayFrequency());
        setTbesCogs(bean.getTbesCogs());
        setTbesBasicSalary(bean.getTbesBasicSalary());
        setTbesId(bean.getTbesId());
        setTbeName(bean.getTbeName());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbpc_overtime", getTbpcOvertime() == null ? "" : getTbpcOvertime().toString());
        dictionnary.put("tbpc_late", getTbpcLate() == null ? "" : getTbpcLate().toString());
        dictionnary.put("tbpc_step", getTbpcStep() == null ? "" : getTbpcStep().toString());
        dictionnary.put("tbpc_max", getTbpcMax() == null ? "" : getTbpcMax().toString());
        dictionnary.put("tbpc_min", getTbpcMin() == null ? "" : getTbpcMin().toString());
        dictionnary.put("tbpc_id", getTbpcId() == null ? "" : getTbpcId().toString());
        dictionnary.put("tbp_name", getTbpName() == null ? "" : getTbpName().toString());
        dictionnary.put("tbp_paygrade_id", getTbpPaygradeId() == null ? "" : getTbpPaygradeId().toString());
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        dictionnary.put("tbc_local_currency_kurs", getTbcLocalCurrencyKurs() == null ? "" : getTbcLocalCurrencyKurs().toString());
        dictionnary.put("tbc_name", getTbcName() == null ? "" : getTbcName().toString());
        dictionnary.put("tbc_currency_id", getTbcCurrencyId() == null ? "" : getTbcCurrencyId().toString());
        dictionnary.put("tbc_id", getTbcId() == null ? "" : getTbcId().toString());
        dictionnary.put("tbes_currency_name", getTbesCurrencyName() == null ? "" : getTbesCurrencyName().toString());
        dictionnary.put("tbes_pay_frequency", getTbesPayFrequency() == null ? "" : getTbesPayFrequency().toString());
        dictionnary.put("tbes_cogs", getTbesCogs() == null ? "" : getTbesCogs().toString());
        dictionnary.put("tbes_basic_salary", getTbesBasicSalary() == null ? "" : getTbesBasicSalary().toString());
        dictionnary.put("tbes_id", getTbesId() == null ? "" : getTbesId().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbpc_overtime".equalsIgnoreCase(column) || "tbpcOvertime".equalsIgnoreCase(column)) {
            return getTbpcOvertime() == null ? "" : getTbpcOvertime().toString();
        } else if ("tbpc_late".equalsIgnoreCase(column) || "tbpcLate".equalsIgnoreCase(column)) {
            return getTbpcLate() == null ? "" : getTbpcLate().toString();
        } else if ("tbpc_step".equalsIgnoreCase(column) || "tbpcStep".equalsIgnoreCase(column)) {
            return getTbpcStep() == null ? "" : getTbpcStep().toString();
        } else if ("tbpc_max".equalsIgnoreCase(column) || "tbpcMax".equalsIgnoreCase(column)) {
            return getTbpcMax() == null ? "" : getTbpcMax().toString();
        } else if ("tbpc_min".equalsIgnoreCase(column) || "tbpcMin".equalsIgnoreCase(column)) {
            return getTbpcMin() == null ? "" : getTbpcMin().toString();
        } else if ("tbpc_id".equalsIgnoreCase(column) || "tbpcId".equalsIgnoreCase(column)) {
            return getTbpcId() == null ? "" : getTbpcId().toString();
        } else if ("tbp_name".equalsIgnoreCase(column) || "tbpName".equalsIgnoreCase(column)) {
            return getTbpName() == null ? "" : getTbpName().toString();
        } else if ("tbp_paygrade_id".equalsIgnoreCase(column) || "tbpPaygradeId".equalsIgnoreCase(column)) {
            return getTbpPaygradeId() == null ? "" : getTbpPaygradeId().toString();
        } else if ("tbp_id".equalsIgnoreCase(column) || "tbpId".equalsIgnoreCase(column)) {
            return getTbpId() == null ? "" : getTbpId().toString();
        } else if ("tbc_local_currency_kurs".equalsIgnoreCase(column) || "tbcLocalCurrencyKurs".equalsIgnoreCase(column)) {
            return getTbcLocalCurrencyKurs() == null ? "" : getTbcLocalCurrencyKurs().toString();
        } else if ("tbc_name".equalsIgnoreCase(column) || "tbcName".equalsIgnoreCase(column)) {
            return getTbcName() == null ? "" : getTbcName().toString();
        } else if ("tbc_currency_id".equalsIgnoreCase(column) || "tbcCurrencyId".equalsIgnoreCase(column)) {
            return getTbcCurrencyId() == null ? "" : getTbcCurrencyId().toString();
        } else if ("tbc_id".equalsIgnoreCase(column) || "tbcId".equalsIgnoreCase(column)) {
            return getTbcId() == null ? "" : getTbcId().toString();
        } else if ("tbes_currency_name".equalsIgnoreCase(column) || "tbesCurrencyName".equalsIgnoreCase(column)) {
            return getTbesCurrencyName() == null ? "" : getTbesCurrencyName().toString();
        } else if ("tbes_pay_frequency".equalsIgnoreCase(column) || "tbesPayFrequency".equalsIgnoreCase(column)) {
            return getTbesPayFrequency() == null ? "" : getTbesPayFrequency().toString();
        } else if ("tbes_cogs".equalsIgnoreCase(column) || "tbesCogs".equalsIgnoreCase(column)) {
            return getTbesCogs() == null ? "" : getTbesCogs().toString();
        } else if ("tbes_basic_salary".equalsIgnoreCase(column) || "tbesBasicSalary".equalsIgnoreCase(column)) {
            return getTbesBasicSalary() == null ? "" : getTbesBasicSalary().toString();
        } else if ("tbes_id".equalsIgnoreCase(column) || "tbesId".equalsIgnoreCase(column)) {
            return getTbesId() == null ? "" : getTbesId().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewEmployeeSalaryBean)) {
            return false;
        }

		ViewEmployeeSalaryBean obj = (ViewEmployeeSalaryBean) object;
		return new EqualsBuilder()
            .append(getTbpcOvertime(), obj.getTbpcOvertime())
            .append(getTbpcLate(), obj.getTbpcLate())
            .append(getTbpcStep(), obj.getTbpcStep())
            .append(getTbpcMax(), obj.getTbpcMax())
            .append(getTbpcMin(), obj.getTbpcMin())
            .append(getTbpcId(), obj.getTbpcId())
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpPaygradeId(), obj.getTbpPaygradeId())
            .append(getTbpId(), obj.getTbpId())
            .append(getTbcLocalCurrencyKurs(), obj.getTbcLocalCurrencyKurs())
            .append(getTbcName(), obj.getTbcName())
            .append(getTbcCurrencyId(), obj.getTbcCurrencyId())
            .append(getTbcId(), obj.getTbcId())
            .append(getTbesCurrencyName(), obj.getTbesCurrencyName())
            .append(getTbesPayFrequency(), obj.getTbesPayFrequency())
            .append(getTbesCogs(), obj.getTbesCogs())
            .append(getTbesBasicSalary(), obj.getTbesBasicSalary())
            .append(getTbesId(), obj.getTbesId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbpcOvertime())
            .append(getTbpcLate())
            .append(getTbpcStep())
            .append(getTbpcMax())
            .append(getTbpcMin())
            .append(getTbpcId())
            .append(getTbpName())
            .append(getTbpPaygradeId())
            .append(getTbpId())
            .append(getTbcLocalCurrencyKurs())
            .append(getTbcName())
            .append(getTbcCurrencyId())
            .append(getTbcId())
            .append(getTbesCurrencyName())
            .append(getTbesPayFrequency())
            .append(getTbesCogs())
            .append(getTbesBasicSalary())
            .append(getTbesId())
            .append(getTbeName())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbpc_overtime", getTbpcOvertime())
            .append("tbpc_late", getTbpcLate())
            .append("tbpc_step", getTbpcStep())
            .append("tbpc_max", getTbpcMax())
            .append("tbpc_min", getTbpcMin())
            .append("tbpc_id", getTbpcId())
            .append("tbp_name", getTbpName())
            .append("tbp_paygrade_id", getTbpPaygradeId())
            .append("tbp_id", getTbpId())
            .append("tbc_local_currency_kurs", getTbcLocalCurrencyKurs())
            .append("tbc_name", getTbcName())
            .append("tbc_currency_id", getTbcCurrencyId())
            .append("tbc_id", getTbcId())
            .append("tbes_currency_name", getTbesCurrencyName())
            .append("tbes_pay_frequency", getTbesPayFrequency())
            .append("tbes_cogs", getTbesCogs())
            .append("tbes_basic_salary", getTbesBasicSalary())
            .append("tbes_id", getTbesId())
            .append("tbe_name", getTbeName())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewEmployeeSalaryBean obj = (ViewEmployeeSalaryBean) object;
        return new CompareToBuilder()
            .append(getTbpcOvertime(), obj.getTbpcOvertime())
            .append(getTbpcLate(), obj.getTbpcLate())
            .append(getTbpcStep(), obj.getTbpcStep())
            .append(getTbpcMax(), obj.getTbpcMax())
            .append(getTbpcMin(), obj.getTbpcMin())
            .append(getTbpcId(), obj.getTbpcId())
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpPaygradeId(), obj.getTbpPaygradeId())
            .append(getTbpId(), obj.getTbpId())
            .append(getTbcLocalCurrencyKurs(), obj.getTbcLocalCurrencyKurs())
            .append(getTbcName(), obj.getTbcName())
            .append(getTbcCurrencyId(), obj.getTbcCurrencyId())
            .append(getTbcId(), obj.getTbcId())
            .append(getTbesCurrencyName(), obj.getTbesCurrencyName())
            .append(getTbesPayFrequency(), obj.getTbesPayFrequency())
            .append(getTbesCogs(), obj.getTbesCogs())
            .append(getTbesBasicSalary(), obj.getTbesBasicSalary())
            .append(getTbesId(), obj.getTbesId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
