// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the ViewEmployeeReportToBean objects.
 * @author sql2java
 */
public class ViewEmployeeReportToComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ViewEmployeeReportToComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewEmployeeReportToComparator(ViewEmployeeReportToManager.ID_TBE_NAME_SPV, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewEmployeeReportToManager.ID_TBE_NAME_SPV
     *   <li>ViewEmployeeReportToManager.ID_TBE_EMPLOYEE_ID_SPV
     *   <li>ViewEmployeeReportToManager.ID_TBE_ID_SPV
     *   <li>ViewEmployeeReportToManager.ID_TBE_NAME
     *   <li>ViewEmployeeReportToManager.ID_TBE_EMPLOYEE_ID
     *   <li>ViewEmployeeReportToManager.ID_TBE_ID
     *   <li>ViewEmployeeReportToManager.ID_TBRT_REPORTING_METHOD
     *   <li>ViewEmployeeReportToManager.ID_TBRT_SPV
     *   <li>ViewEmployeeReportToManager.ID_TBRT_ID
     * </ul>
     */
    public ViewEmployeeReportToComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ViewEmployeeReportToComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewEmployeeReportToComparator(ViewEmployeeReportToManager.ID_TBE_NAME_SPV, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewEmployeeReportToManager.ID_TBE_NAME_SPV
     *   <li>ViewEmployeeReportToManager.ID_TBE_EMPLOYEE_ID_SPV
     *   <li>ViewEmployeeReportToManager.ID_TBE_ID_SPV
     *   <li>ViewEmployeeReportToManager.ID_TBE_NAME
     *   <li>ViewEmployeeReportToManager.ID_TBE_EMPLOYEE_ID
     *   <li>ViewEmployeeReportToManager.ID_TBE_ID
     *   <li>ViewEmployeeReportToManager.ID_TBRT_REPORTING_METHOD
     *   <li>ViewEmployeeReportToManager.ID_TBRT_SPV
     *   <li>ViewEmployeeReportToManager.ID_TBRT_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ViewEmployeeReportToComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ViewEmployeeReportToBean b1 = (ViewEmployeeReportToBean)pObj1;
        ViewEmployeeReportToBean b2 = (ViewEmployeeReportToBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ViewEmployeeReportToManager.ID_TBE_NAME_SPV:
                if (b1.getTbeNameSpv() == null && b2.getTbeNameSpv() != null) {
                    iReturn = -1;
                } else if (b1.getTbeNameSpv() == null && b2.getTbeNameSpv() == null) {
                    iReturn = 0;
                } else if (b1.getTbeNameSpv() != null && b2.getTbeNameSpv() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeNameSpv().compareTo(b2.getTbeNameSpv());
                }
                break;
            case ViewEmployeeReportToManager.ID_TBE_EMPLOYEE_ID_SPV:
                if (b1.getTbeEmployeeIdSpv() == null && b2.getTbeEmployeeIdSpv() != null) {
                    iReturn = -1;
                } else if (b1.getTbeEmployeeIdSpv() == null && b2.getTbeEmployeeIdSpv() == null) {
                    iReturn = 0;
                } else if (b1.getTbeEmployeeIdSpv() != null && b2.getTbeEmployeeIdSpv() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeEmployeeIdSpv().compareTo(b2.getTbeEmployeeIdSpv());
                }
                break;
            case ViewEmployeeReportToManager.ID_TBE_ID_SPV:
                if (b1.getTbeIdSpv() == null && b2.getTbeIdSpv() != null) {
                    iReturn = -1;
                } else if (b1.getTbeIdSpv() == null && b2.getTbeIdSpv() == null) {
                    iReturn = 0;
                } else if (b1.getTbeIdSpv() != null && b2.getTbeIdSpv() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeIdSpv().compareTo(b2.getTbeIdSpv());
                }
                break;
            case ViewEmployeeReportToManager.ID_TBE_NAME:
                if (b1.getTbeName() == null && b2.getTbeName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeName() == null && b2.getTbeName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeName() != null && b2.getTbeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeName().compareTo(b2.getTbeName());
                }
                break;
            case ViewEmployeeReportToManager.ID_TBE_EMPLOYEE_ID:
                if (b1.getTbeEmployeeId() == null && b2.getTbeEmployeeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeEmployeeId() == null && b2.getTbeEmployeeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeEmployeeId() != null && b2.getTbeEmployeeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeEmployeeId().compareTo(b2.getTbeEmployeeId());
                }
                break;
            case ViewEmployeeReportToManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            case ViewEmployeeReportToManager.ID_TBRT_REPORTING_METHOD:
                if (b1.getTbrtReportingMethod() == null && b2.getTbrtReportingMethod() != null) {
                    iReturn = -1;
                } else if (b1.getTbrtReportingMethod() == null && b2.getTbrtReportingMethod() == null) {
                    iReturn = 0;
                } else if (b1.getTbrtReportingMethod() != null && b2.getTbrtReportingMethod() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbrtReportingMethod().compareTo(b2.getTbrtReportingMethod());
                }
                break;
            case ViewEmployeeReportToManager.ID_TBRT_SPV:
                if (b1.getTbrtSpv() == null && b2.getTbrtSpv() != null) {
                    iReturn = -1;
                } else if (b1.getTbrtSpv() == null && b2.getTbrtSpv() == null) {
                    iReturn = 0;
                } else if (b1.getTbrtSpv() != null && b2.getTbrtSpv() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbrtSpv().compareTo(b2.getTbrtSpv());
                }
                break;
            case ViewEmployeeReportToManager.ID_TBRT_ID:
                if (b1.getTbrtId() == null && b2.getTbrtId() != null) {
                    iReturn = -1;
                } else if (b1.getTbrtId() == null && b2.getTbrtId() == null) {
                    iReturn = 0;
                } else if (b1.getTbrtId() != null && b2.getTbrtId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbrtId().compareTo(b2.getTbrtId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
