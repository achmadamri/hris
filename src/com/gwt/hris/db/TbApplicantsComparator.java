// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbApplicantsBean objects.
 * @author sql2java
 */
public class TbApplicantsComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbApplicantsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbApplicantsComparator(TbApplicantsManager.ID_TBV_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbApplicantsManager.ID_TBV_ID
     *   <li>TbApplicantsManager.ID_TBA_STATUS
     *   <li>TbApplicantsManager.ID_TBA_RESUME_FILE_NAME_EXISTING
     *   <li>TbApplicantsManager.ID_TBA_RESUME_FILE_NAME
     *   <li>TbApplicantsManager.ID_TBA_DATE
     *   <li>TbApplicantsManager.ID_TBA_COMMENTS
     *   <li>TbApplicantsManager.ID_TBA_MOBILE
     *   <li>TbApplicantsManager.ID_TBA_PHONE
     *   <li>TbApplicantsManager.ID_TBA_EMAIL
     *   <li>TbApplicantsManager.ID_TBA_NAME
     *   <li>TbApplicantsManager.ID_TBA_NICK_NAME
     *   <li>TbApplicantsManager.ID_TBA_LAST_NAME
     *   <li>TbApplicantsManager.ID_TBA_MIDDLE_NAME
     *   <li>TbApplicantsManager.ID_TBA_FIRST_NAME
     *   <li>TbApplicantsManager.ID_TBA_APPLICANTS_ID
     *   <li>TbApplicantsManager.ID_TBA_ID
     * </ul>
     */
    public TbApplicantsComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbApplicantsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbApplicantsComparator(TbApplicantsManager.ID_TBV_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbApplicantsManager.ID_TBV_ID
     *   <li>TbApplicantsManager.ID_TBA_STATUS
     *   <li>TbApplicantsManager.ID_TBA_RESUME_FILE_NAME_EXISTING
     *   <li>TbApplicantsManager.ID_TBA_RESUME_FILE_NAME
     *   <li>TbApplicantsManager.ID_TBA_DATE
     *   <li>TbApplicantsManager.ID_TBA_COMMENTS
     *   <li>TbApplicantsManager.ID_TBA_MOBILE
     *   <li>TbApplicantsManager.ID_TBA_PHONE
     *   <li>TbApplicantsManager.ID_TBA_EMAIL
     *   <li>TbApplicantsManager.ID_TBA_NAME
     *   <li>TbApplicantsManager.ID_TBA_NICK_NAME
     *   <li>TbApplicantsManager.ID_TBA_LAST_NAME
     *   <li>TbApplicantsManager.ID_TBA_MIDDLE_NAME
     *   <li>TbApplicantsManager.ID_TBA_FIRST_NAME
     *   <li>TbApplicantsManager.ID_TBA_APPLICANTS_ID
     *   <li>TbApplicantsManager.ID_TBA_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbApplicantsComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbApplicantsBean b1 = (TbApplicantsBean)pObj1;
        TbApplicantsBean b2 = (TbApplicantsBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbApplicantsManager.ID_TBV_ID:
                if (b1.getTbvId() == null && b2.getTbvId() != null) {
                    iReturn = -1;
                } else if (b1.getTbvId() == null && b2.getTbvId() == null) {
                    iReturn = 0;
                } else if (b1.getTbvId() != null && b2.getTbvId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbvId().compareTo(b2.getTbvId());
                }
                break;
            case TbApplicantsManager.ID_TBA_STATUS:
                if (b1.getTbaStatus() == null && b2.getTbaStatus() != null) {
                    iReturn = -1;
                } else if (b1.getTbaStatus() == null && b2.getTbaStatus() == null) {
                    iReturn = 0;
                } else if (b1.getTbaStatus() != null && b2.getTbaStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaStatus().compareTo(b2.getTbaStatus());
                }
                break;
            case TbApplicantsManager.ID_TBA_RESUME_FILE_NAME_EXISTING:
                if (b1.getTbaResumeFileNameExisting() == null && b2.getTbaResumeFileNameExisting() != null) {
                    iReturn = -1;
                } else if (b1.getTbaResumeFileNameExisting() == null && b2.getTbaResumeFileNameExisting() == null) {
                    iReturn = 0;
                } else if (b1.getTbaResumeFileNameExisting() != null && b2.getTbaResumeFileNameExisting() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaResumeFileNameExisting().compareTo(b2.getTbaResumeFileNameExisting());
                }
                break;
            case TbApplicantsManager.ID_TBA_RESUME_FILE_NAME:
                if (b1.getTbaResumeFileName() == null && b2.getTbaResumeFileName() != null) {
                    iReturn = -1;
                } else if (b1.getTbaResumeFileName() == null && b2.getTbaResumeFileName() == null) {
                    iReturn = 0;
                } else if (b1.getTbaResumeFileName() != null && b2.getTbaResumeFileName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaResumeFileName().compareTo(b2.getTbaResumeFileName());
                }
                break;
            case TbApplicantsManager.ID_TBA_DATE:
                if (b1.getTbaDate() == null && b2.getTbaDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbaDate() == null && b2.getTbaDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbaDate() != null && b2.getTbaDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaDate().compareTo(b2.getTbaDate());
                }
                break;
            case TbApplicantsManager.ID_TBA_COMMENTS:
                if (b1.getTbaComments() == null && b2.getTbaComments() != null) {
                    iReturn = -1;
                } else if (b1.getTbaComments() == null && b2.getTbaComments() == null) {
                    iReturn = 0;
                } else if (b1.getTbaComments() != null && b2.getTbaComments() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaComments().compareTo(b2.getTbaComments());
                }
                break;
            case TbApplicantsManager.ID_TBA_MOBILE:
                if (b1.getTbaMobile() == null && b2.getTbaMobile() != null) {
                    iReturn = -1;
                } else if (b1.getTbaMobile() == null && b2.getTbaMobile() == null) {
                    iReturn = 0;
                } else if (b1.getTbaMobile() != null && b2.getTbaMobile() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaMobile().compareTo(b2.getTbaMobile());
                }
                break;
            case TbApplicantsManager.ID_TBA_PHONE:
                if (b1.getTbaPhone() == null && b2.getTbaPhone() != null) {
                    iReturn = -1;
                } else if (b1.getTbaPhone() == null && b2.getTbaPhone() == null) {
                    iReturn = 0;
                } else if (b1.getTbaPhone() != null && b2.getTbaPhone() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaPhone().compareTo(b2.getTbaPhone());
                }
                break;
            case TbApplicantsManager.ID_TBA_EMAIL:
                if (b1.getTbaEmail() == null && b2.getTbaEmail() != null) {
                    iReturn = -1;
                } else if (b1.getTbaEmail() == null && b2.getTbaEmail() == null) {
                    iReturn = 0;
                } else if (b1.getTbaEmail() != null && b2.getTbaEmail() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaEmail().compareTo(b2.getTbaEmail());
                }
                break;
            case TbApplicantsManager.ID_TBA_NAME:
                if (b1.getTbaName() == null && b2.getTbaName() != null) {
                    iReturn = -1;
                } else if (b1.getTbaName() == null && b2.getTbaName() == null) {
                    iReturn = 0;
                } else if (b1.getTbaName() != null && b2.getTbaName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaName().compareTo(b2.getTbaName());
                }
                break;
            case TbApplicantsManager.ID_TBA_NICK_NAME:
                if (b1.getTbaNickName() == null && b2.getTbaNickName() != null) {
                    iReturn = -1;
                } else if (b1.getTbaNickName() == null && b2.getTbaNickName() == null) {
                    iReturn = 0;
                } else if (b1.getTbaNickName() != null && b2.getTbaNickName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaNickName().compareTo(b2.getTbaNickName());
                }
                break;
            case TbApplicantsManager.ID_TBA_LAST_NAME:
                if (b1.getTbaLastName() == null && b2.getTbaLastName() != null) {
                    iReturn = -1;
                } else if (b1.getTbaLastName() == null && b2.getTbaLastName() == null) {
                    iReturn = 0;
                } else if (b1.getTbaLastName() != null && b2.getTbaLastName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaLastName().compareTo(b2.getTbaLastName());
                }
                break;
            case TbApplicantsManager.ID_TBA_MIDDLE_NAME:
                if (b1.getTbaMiddleName() == null && b2.getTbaMiddleName() != null) {
                    iReturn = -1;
                } else if (b1.getTbaMiddleName() == null && b2.getTbaMiddleName() == null) {
                    iReturn = 0;
                } else if (b1.getTbaMiddleName() != null && b2.getTbaMiddleName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaMiddleName().compareTo(b2.getTbaMiddleName());
                }
                break;
            case TbApplicantsManager.ID_TBA_FIRST_NAME:
                if (b1.getTbaFirstName() == null && b2.getTbaFirstName() != null) {
                    iReturn = -1;
                } else if (b1.getTbaFirstName() == null && b2.getTbaFirstName() == null) {
                    iReturn = 0;
                } else if (b1.getTbaFirstName() != null && b2.getTbaFirstName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaFirstName().compareTo(b2.getTbaFirstName());
                }
                break;
            case TbApplicantsManager.ID_TBA_APPLICANTS_ID:
                if (b1.getTbaApplicantsId() == null && b2.getTbaApplicantsId() != null) {
                    iReturn = -1;
                } else if (b1.getTbaApplicantsId() == null && b2.getTbaApplicantsId() == null) {
                    iReturn = 0;
                } else if (b1.getTbaApplicantsId() != null && b2.getTbaApplicantsId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaApplicantsId().compareTo(b2.getTbaApplicantsId());
                }
                break;
            case TbApplicantsManager.ID_TBA_ID:
                if (b1.getTbaId() == null && b2.getTbaId() != null) {
                    iReturn = -1;
                } else if (b1.getTbaId() == null && b2.getTbaId() == null) {
                    iReturn = 0;
                } else if (b1.getTbaId() != null && b2.getTbaId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaId().compareTo(b2.getTbaId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
