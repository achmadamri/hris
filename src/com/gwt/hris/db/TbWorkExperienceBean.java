// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbWorkExperienceBean is a mapping of tb_work_experience Table.
 * @author sql2java
*/
public class TbWorkExperienceBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -7515628594502863897L;
	
    private Integer tbweInternal;

    private boolean tbweInternalIsModified = false;
    private boolean tbweInternalIsInitialized = false;

    private java.sql.Timestamp tbweEndDate;

    private boolean tbweEndDateIsModified = false;
    private boolean tbweEndDateIsInitialized = false;

    private java.sql.Timestamp tbweStartDate;

    private boolean tbweStartDateIsModified = false;
    private boolean tbweStartDateIsInitialized = false;

    private String tbweComments;

    private boolean tbweCommentsIsModified = false;
    private boolean tbweCommentsIsInitialized = false;

    private String tbweJobTitle;

    private boolean tbweJobTitleIsModified = false;
    private boolean tbweJobTitleIsInitialized = false;

    private String tbweEmployer;

    private boolean tbweEmployerIsModified = false;
    private boolean tbweEmployerIsInitialized = false;

    private String tbweWorkExperienceId;

    private boolean tbweWorkExperienceIdIsModified = false;
    private boolean tbweWorkExperienceIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private Integer tbweId;

    private boolean tbweIdIsModified = false;
    private boolean tbweIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbWorkExperienceBean is via the createTbWorkExperienceBean method in TbWorkExperienceManager or
     * via the factory class TbWorkExperienceFactory create method
     */
    protected TbWorkExperienceBean()
    {
    }

    /**
     * Getter method for tbweInternal.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_work_experience.tbwe_internal</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbweInternal
     */
    public Integer getTbweInternal()
    {
        return tbweInternal;
    }

    /**
     * Setter method for tbweInternal.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbweInternal
     */
    public void setTbweInternal(Integer newVal)
    {
        if ((newVal != null && tbweInternal != null && (newVal.compareTo(tbweInternal) == 0)) ||
            (newVal == null && tbweInternal == null && tbweInternalIsInitialized)) {
            return;
        }
        tbweInternal = newVal;
        tbweInternalIsModified = true;
        tbweInternalIsInitialized = true;
    }

    /**
     * Setter method for tbweInternal.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbweInternal
     */
    public void setTbweInternal(int newVal)
    {
        setTbweInternal(new Integer(newVal));
    }

    /**
     * Determines if the tbweInternal has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbweInternalModified()
    {
        return tbweInternalIsModified;
    }

    /**
     * Determines if the tbweInternal has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbweInternalInitialized()
    {
        return tbweInternalIsInitialized;
    }

    /**
     * Getter method for tbweEndDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_work_experience.tbwe_end_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbweEndDate
     */
    public java.sql.Timestamp getTbweEndDate()
    {
        return tbweEndDate;
    }

    /**
     * Setter method for tbweEndDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbweEndDate
     */
    public void setTbweEndDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbweEndDate != null && (newVal.compareTo(tbweEndDate) == 0)) ||
            (newVal == null && tbweEndDate == null && tbweEndDateIsInitialized)) {
            return;
        }
        tbweEndDate = newVal;
        tbweEndDateIsModified = true;
        tbweEndDateIsInitialized = true;
    }

    /**
     * Setter method for tbweEndDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbweEndDate
     */
    public void setTbweEndDate(long newVal)
    {
        setTbweEndDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbweEndDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbweEndDateModified()
    {
        return tbweEndDateIsModified;
    }

    /**
     * Determines if the tbweEndDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbweEndDateInitialized()
    {
        return tbweEndDateIsInitialized;
    }

    /**
     * Getter method for tbweStartDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_work_experience.tbwe_start_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbweStartDate
     */
    public java.sql.Timestamp getTbweStartDate()
    {
        return tbweStartDate;
    }

    /**
     * Setter method for tbweStartDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbweStartDate
     */
    public void setTbweStartDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbweStartDate != null && (newVal.compareTo(tbweStartDate) == 0)) ||
            (newVal == null && tbweStartDate == null && tbweStartDateIsInitialized)) {
            return;
        }
        tbweStartDate = newVal;
        tbweStartDateIsModified = true;
        tbweStartDateIsInitialized = true;
    }

    /**
     * Setter method for tbweStartDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbweStartDate
     */
    public void setTbweStartDate(long newVal)
    {
        setTbweStartDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbweStartDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbweStartDateModified()
    {
        return tbweStartDateIsModified;
    }

    /**
     * Determines if the tbweStartDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbweStartDateInitialized()
    {
        return tbweStartDateIsInitialized;
    }

    /**
     * Getter method for tbweComments.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_work_experience.tbwe_comments</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbweComments
     */
    public String getTbweComments()
    {
        return tbweComments;
    }

    /**
     * Setter method for tbweComments.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbweComments
     */
    public void setTbweComments(String newVal)
    {
        if ((newVal != null && tbweComments != null && (newVal.compareTo(tbweComments) == 0)) ||
            (newVal == null && tbweComments == null && tbweCommentsIsInitialized)) {
            return;
        }
        tbweComments = newVal;
        tbweCommentsIsModified = true;
        tbweCommentsIsInitialized = true;
    }

    /**
     * Determines if the tbweComments has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbweCommentsModified()
    {
        return tbweCommentsIsModified;
    }

    /**
     * Determines if the tbweComments has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbweCommentsInitialized()
    {
        return tbweCommentsIsInitialized;
    }

    /**
     * Getter method for tbweJobTitle.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_work_experience.tbwe_job_title</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbweJobTitle
     */
    public String getTbweJobTitle()
    {
        return tbweJobTitle;
    }

    /**
     * Setter method for tbweJobTitle.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbweJobTitle
     */
    public void setTbweJobTitle(String newVal)
    {
        if ((newVal != null && tbweJobTitle != null && (newVal.compareTo(tbweJobTitle) == 0)) ||
            (newVal == null && tbweJobTitle == null && tbweJobTitleIsInitialized)) {
            return;
        }
        tbweJobTitle = newVal;
        tbweJobTitleIsModified = true;
        tbweJobTitleIsInitialized = true;
    }

    /**
     * Determines if the tbweJobTitle has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbweJobTitleModified()
    {
        return tbweJobTitleIsModified;
    }

    /**
     * Determines if the tbweJobTitle has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbweJobTitleInitialized()
    {
        return tbweJobTitleIsInitialized;
    }

    /**
     * Getter method for tbweEmployer.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_work_experience.tbwe_employer</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbweEmployer
     */
    public String getTbweEmployer()
    {
        return tbweEmployer;
    }

    /**
     * Setter method for tbweEmployer.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbweEmployer
     */
    public void setTbweEmployer(String newVal)
    {
        if ((newVal != null && tbweEmployer != null && (newVal.compareTo(tbweEmployer) == 0)) ||
            (newVal == null && tbweEmployer == null && tbweEmployerIsInitialized)) {
            return;
        }
        tbweEmployer = newVal;
        tbweEmployerIsModified = true;
        tbweEmployerIsInitialized = true;
    }

    /**
     * Determines if the tbweEmployer has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbweEmployerModified()
    {
        return tbweEmployerIsModified;
    }

    /**
     * Determines if the tbweEmployer has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbweEmployerInitialized()
    {
        return tbweEmployerIsInitialized;
    }

    /**
     * Getter method for tbweWorkExperienceId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_work_experience.tbwe_work_experience_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbweWorkExperienceId
     */
    public String getTbweWorkExperienceId()
    {
        return tbweWorkExperienceId;
    }

    /**
     * Setter method for tbweWorkExperienceId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbweWorkExperienceId
     */
    public void setTbweWorkExperienceId(String newVal)
    {
        if ((newVal != null && tbweWorkExperienceId != null && (newVal.compareTo(tbweWorkExperienceId) == 0)) ||
            (newVal == null && tbweWorkExperienceId == null && tbweWorkExperienceIdIsInitialized)) {
            return;
        }
        tbweWorkExperienceId = newVal;
        tbweWorkExperienceIdIsModified = true;
        tbweWorkExperienceIdIsInitialized = true;
    }

    /**
     * Determines if the tbweWorkExperienceId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbweWorkExperienceIdModified()
    {
        return tbweWorkExperienceIdIsModified;
    }

    /**
     * Determines if the tbweWorkExperienceId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbweWorkExperienceIdInitialized()
    {
        return tbweWorkExperienceIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_work_experience.tbe_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Getter method for tbweId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_work_experience.tbwe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbweId
     */
    public Integer getTbweId()
    {
        return tbweId;
    }

    /**
     * Setter method for tbweId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbweId
     */
    public void setTbweId(Integer newVal)
    {
        if ((newVal != null && tbweId != null && (newVal.compareTo(tbweId) == 0)) ||
            (newVal == null && tbweId == null && tbweIdIsInitialized)) {
            return;
        }
        tbweId = newVal;
        tbweIdIsModified = true;
        tbweIdIsInitialized = true;
    }

    /**
     * Setter method for tbweId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbweId
     */
    public void setTbweId(int newVal)
    {
        setTbweId(new Integer(newVal));
    }

    /**
     * Determines if the tbweId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbweIdModified()
    {
        return tbweIdIsModified;
    }

    /**
     * Determines if the tbweId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbweIdInitialized()
    {
        return tbweIdIsInitialized;
    }

    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbweInternalIsModified 		|| tbweEndDateIsModified  		|| tbweStartDateIsModified  		|| tbweCommentsIsModified  		|| tbweJobTitleIsModified  		|| tbweEmployerIsModified  		|| tbweWorkExperienceIdIsModified  		|| tbeIdIsModified  		|| tbweIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbweInternalIsModified = false;
        tbweEndDateIsModified = false;
        tbweStartDateIsModified = false;
        tbweCommentsIsModified = false;
        tbweJobTitleIsModified = false;
        tbweEmployerIsModified = false;
        tbweWorkExperienceIdIsModified = false;
        tbeIdIsModified = false;
        tbweIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbWorkExperienceBean bean)
    {
        setTbweInternal(bean.getTbweInternal());
        setTbweEndDate(bean.getTbweEndDate());
        setTbweStartDate(bean.getTbweStartDate());
        setTbweComments(bean.getTbweComments());
        setTbweJobTitle(bean.getTbweJobTitle());
        setTbweEmployer(bean.getTbweEmployer());
        setTbweWorkExperienceId(bean.getTbweWorkExperienceId());
        setTbeId(bean.getTbeId());
        setTbweId(bean.getTbweId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbwe_internal", getTbweInternal() == null ? "" : getTbweInternal().toString());
        dictionnary.put("tbwe_end_date", getTbweEndDate() == null ? "" : getTbweEndDate().toString());
        dictionnary.put("tbwe_start_date", getTbweStartDate() == null ? "" : getTbweStartDate().toString());
        dictionnary.put("tbwe_comments", getTbweComments() == null ? "" : getTbweComments().toString());
        dictionnary.put("tbwe_job_title", getTbweJobTitle() == null ? "" : getTbweJobTitle().toString());
        dictionnary.put("tbwe_employer", getTbweEmployer() == null ? "" : getTbweEmployer().toString());
        dictionnary.put("tbwe_work_experience_id", getTbweWorkExperienceId() == null ? "" : getTbweWorkExperienceId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        dictionnary.put("tbwe_id", getTbweId() == null ? "" : getTbweId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbwe_id", getTbweId() == null ? "" : getTbweId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbwe_internal".equalsIgnoreCase(column) || "tbweInternal".equalsIgnoreCase(column)) {
            return getTbweInternal() == null ? "" : getTbweInternal().toString();
        } else if ("tbwe_end_date".equalsIgnoreCase(column) || "tbweEndDate".equalsIgnoreCase(column)) {
            return getTbweEndDate() == null ? "" : getTbweEndDate().toString();
        } else if ("tbwe_start_date".equalsIgnoreCase(column) || "tbweStartDate".equalsIgnoreCase(column)) {
            return getTbweStartDate() == null ? "" : getTbweStartDate().toString();
        } else if ("tbwe_comments".equalsIgnoreCase(column) || "tbweComments".equalsIgnoreCase(column)) {
            return getTbweComments() == null ? "" : getTbweComments().toString();
        } else if ("tbwe_job_title".equalsIgnoreCase(column) || "tbweJobTitle".equalsIgnoreCase(column)) {
            return getTbweJobTitle() == null ? "" : getTbweJobTitle().toString();
        } else if ("tbwe_employer".equalsIgnoreCase(column) || "tbweEmployer".equalsIgnoreCase(column)) {
            return getTbweEmployer() == null ? "" : getTbweEmployer().toString();
        } else if ("tbwe_work_experience_id".equalsIgnoreCase(column) || "tbweWorkExperienceId".equalsIgnoreCase(column)) {
            return getTbweWorkExperienceId() == null ? "" : getTbweWorkExperienceId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        } else if ("tbwe_id".equalsIgnoreCase(column) || "tbweId".equalsIgnoreCase(column)) {
            return getTbweId() == null ? "" : getTbweId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbWorkExperienceBean)) {
            return false;
        }

		TbWorkExperienceBean obj = (TbWorkExperienceBean) object;
		return new EqualsBuilder()
            .append(getTbweInternal(), obj.getTbweInternal())
            .append(getTbweEndDate(), obj.getTbweEndDate())
            .append(getTbweStartDate(), obj.getTbweStartDate())
            .append(getTbweComments(), obj.getTbweComments())
            .append(getTbweJobTitle(), obj.getTbweJobTitle())
            .append(getTbweEmployer(), obj.getTbweEmployer())
            .append(getTbweWorkExperienceId(), obj.getTbweWorkExperienceId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbweId(), obj.getTbweId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbweInternal())
            .append(getTbweEndDate())
            .append(getTbweStartDate())
            .append(getTbweComments())
            .append(getTbweJobTitle())
            .append(getTbweEmployer())
            .append(getTbweWorkExperienceId())
            .append(getTbeId())
            .append(getTbweId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbwe_internal", getTbweInternal())
            .append("tbwe_end_date", getTbweEndDate())
            .append("tbwe_start_date", getTbweStartDate())
            .append("tbwe_comments", getTbweComments())
            .append("tbwe_job_title", getTbweJobTitle())
            .append("tbwe_employer", getTbweEmployer())
            .append("tbwe_work_experience_id", getTbweWorkExperienceId())
            .append("tbe_id", getTbeId())
            .append("tbwe_id", getTbweId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbWorkExperienceBean obj = (TbWorkExperienceBean) object;
        return new CompareToBuilder()
            .append(getTbweInternal(), obj.getTbweInternal())
            .append(getTbweEndDate(), obj.getTbweEndDate())
            .append(getTbweStartDate(), obj.getTbweStartDate())
            .append(getTbweComments(), obj.getTbweComments())
            .append(getTbweJobTitle(), obj.getTbweJobTitle())
            .append(getTbweEmployer(), obj.getTbweEmployer())
            .append(getTbweWorkExperienceId(), obj.getTbweWorkExperienceId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbweId(), obj.getTbweId())
            .toComparison();
   }
}
