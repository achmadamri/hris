// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbImmigrationBean objects.
 * @author sql2java
 */
public class TbImmigrationComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbImmigrationComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbImmigrationComparator(TbImmigrationManager.ID_TBI_COMMENTS, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbImmigrationManager.ID_TBI_COMMENTS
     *   <li>TbImmigrationManager.ID_TBI_EXPIRY_DATE
     *   <li>TbImmigrationManager.ID_TBI_ISSUED_DATE
     *   <li>TbImmigrationManager.ID_TBN_ID
     *   <li>TbImmigrationManager.ID_TBI_L9_REVIEW_DATE
     *   <li>TbImmigrationManager.ID_TBI_L9_STATUS
     *   <li>TbImmigrationManager.ID_TBI_IMMIGRATION_NO
     *   <li>TbImmigrationManager.ID_TBI_IMMIGRATION_TYPE
     *   <li>TbImmigrationManager.ID_TBE_ID
     * </ul>
     */
    public TbImmigrationComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbImmigrationComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbImmigrationComparator(TbImmigrationManager.ID_TBI_COMMENTS, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbImmigrationManager.ID_TBI_COMMENTS
     *   <li>TbImmigrationManager.ID_TBI_EXPIRY_DATE
     *   <li>TbImmigrationManager.ID_TBI_ISSUED_DATE
     *   <li>TbImmigrationManager.ID_TBN_ID
     *   <li>TbImmigrationManager.ID_TBI_L9_REVIEW_DATE
     *   <li>TbImmigrationManager.ID_TBI_L9_STATUS
     *   <li>TbImmigrationManager.ID_TBI_IMMIGRATION_NO
     *   <li>TbImmigrationManager.ID_TBI_IMMIGRATION_TYPE
     *   <li>TbImmigrationManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbImmigrationComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbImmigrationBean b1 = (TbImmigrationBean)pObj1;
        TbImmigrationBean b2 = (TbImmigrationBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbImmigrationManager.ID_TBI_COMMENTS:
                if (b1.getTbiComments() == null && b2.getTbiComments() != null) {
                    iReturn = -1;
                } else if (b1.getTbiComments() == null && b2.getTbiComments() == null) {
                    iReturn = 0;
                } else if (b1.getTbiComments() != null && b2.getTbiComments() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbiComments().compareTo(b2.getTbiComments());
                }
                break;
            case TbImmigrationManager.ID_TBI_EXPIRY_DATE:
                if (b1.getTbiExpiryDate() == null && b2.getTbiExpiryDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbiExpiryDate() == null && b2.getTbiExpiryDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbiExpiryDate() != null && b2.getTbiExpiryDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbiExpiryDate().compareTo(b2.getTbiExpiryDate());
                }
                break;
            case TbImmigrationManager.ID_TBI_ISSUED_DATE:
                if (b1.getTbiIssuedDate() == null && b2.getTbiIssuedDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbiIssuedDate() == null && b2.getTbiIssuedDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbiIssuedDate() != null && b2.getTbiIssuedDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbiIssuedDate().compareTo(b2.getTbiIssuedDate());
                }
                break;
            case TbImmigrationManager.ID_TBN_ID:
                if (b1.getTbnId() == null && b2.getTbnId() != null) {
                    iReturn = -1;
                } else if (b1.getTbnId() == null && b2.getTbnId() == null) {
                    iReturn = 0;
                } else if (b1.getTbnId() != null && b2.getTbnId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbnId().compareTo(b2.getTbnId());
                }
                break;
            case TbImmigrationManager.ID_TBI_L9_REVIEW_DATE:
                if (b1.getTbiL9ReviewDate() == null && b2.getTbiL9ReviewDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbiL9ReviewDate() == null && b2.getTbiL9ReviewDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbiL9ReviewDate() != null && b2.getTbiL9ReviewDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbiL9ReviewDate().compareTo(b2.getTbiL9ReviewDate());
                }
                break;
            case TbImmigrationManager.ID_TBI_L9_STATUS:
                if (b1.getTbiL9Status() == null && b2.getTbiL9Status() != null) {
                    iReturn = -1;
                } else if (b1.getTbiL9Status() == null && b2.getTbiL9Status() == null) {
                    iReturn = 0;
                } else if (b1.getTbiL9Status() != null && b2.getTbiL9Status() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbiL9Status().compareTo(b2.getTbiL9Status());
                }
                break;
            case TbImmigrationManager.ID_TBI_IMMIGRATION_NO:
                if (b1.getTbiImmigrationNo() == null && b2.getTbiImmigrationNo() != null) {
                    iReturn = -1;
                } else if (b1.getTbiImmigrationNo() == null && b2.getTbiImmigrationNo() == null) {
                    iReturn = 0;
                } else if (b1.getTbiImmigrationNo() != null && b2.getTbiImmigrationNo() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbiImmigrationNo().compareTo(b2.getTbiImmigrationNo());
                }
                break;
            case TbImmigrationManager.ID_TBI_IMMIGRATION_TYPE:
                if (b1.getTbiImmigrationType() == null && b2.getTbiImmigrationType() != null) {
                    iReturn = -1;
                } else if (b1.getTbiImmigrationType() == null && b2.getTbiImmigrationType() == null) {
                    iReturn = 0;
                } else if (b1.getTbiImmigrationType() != null && b2.getTbiImmigrationType() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbiImmigrationType().compareTo(b2.getTbiImmigrationType());
                }
                break;
            case TbImmigrationManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
