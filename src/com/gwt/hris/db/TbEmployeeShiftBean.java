// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbEmployeeShiftBean is a mapping of tb_employee_shift Table.
 * @author sql2java
*/
public class TbEmployeeShiftBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 4357522861028486474L;
	
    private String tbesDate;

    private boolean tbesDateIsModified = false;
    private boolean tbesDateIsInitialized = false;

    private Integer tbsId;

    private boolean tbsIdIsModified = false;
    private boolean tbsIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private Integer tbesId;

    private boolean tbesIdIsModified = false;
    private boolean tbesIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbEmployeeShiftBean is via the createTbEmployeeShiftBean method in TbEmployeeShiftManager or
     * via the factory class TbEmployeeShiftFactory create method
     */
    protected TbEmployeeShiftBean()
    {
    }

    /**
     * Getter method for tbesDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_shift.tbes_date</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbesDate
     */
    public String getTbesDate()
    {
        return tbesDate;
    }

    /**
     * Setter method for tbesDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesDate
     */
    public void setTbesDate(String newVal)
    {
        if ((newVal != null && tbesDate != null && (newVal.compareTo(tbesDate) == 0)) ||
            (newVal == null && tbesDate == null && tbesDateIsInitialized)) {
            return;
        }
        tbesDate = newVal;
        tbesDateIsModified = true;
        tbesDateIsInitialized = true;
    }

    /**
     * Determines if the tbesDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesDateModified()
    {
        return tbesDateIsModified;
    }

    /**
     * Determines if the tbesDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesDateInitialized()
    {
        return tbesDateIsInitialized;
    }

    /**
     * Getter method for tbsId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_shift.tbs_id</li>
     * <li> foreign key: tb_shift.tbs_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbsId
     */
    public Integer getTbsId()
    {
        return tbsId;
    }

    /**
     * Setter method for tbsId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsId
     */
    public void setTbsId(Integer newVal)
    {
        if ((newVal != null && tbsId != null && (newVal.compareTo(tbsId) == 0)) ||
            (newVal == null && tbsId == null && tbsIdIsInitialized)) {
            return;
        }
        tbsId = newVal;
        tbsIdIsModified = true;
        tbsIdIsInitialized = true;
    }

    /**
     * Setter method for tbsId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbsId
     */
    public void setTbsId(int newVal)
    {
        setTbsId(new Integer(newVal));
    }

    /**
     * Determines if the tbsId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsIdModified()
    {
        return tbsIdIsModified;
    }

    /**
     * Determines if the tbsId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsIdInitialized()
    {
        return tbsIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_shift.tbe_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Getter method for tbesId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_shift.tbes_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbesId
     */
    public Integer getTbesId()
    {
        return tbesId;
    }

    /**
     * Setter method for tbesId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesId
     */
    public void setTbesId(Integer newVal)
    {
        if ((newVal != null && tbesId != null && (newVal.compareTo(tbesId) == 0)) ||
            (newVal == null && tbesId == null && tbesIdIsInitialized)) {
            return;
        }
        tbesId = newVal;
        tbesIdIsModified = true;
        tbesIdIsInitialized = true;
    }

    /**
     * Setter method for tbesId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesId
     */
    public void setTbesId(int newVal)
    {
        setTbesId(new Integer(newVal));
    }

    /**
     * Determines if the tbesId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesIdModified()
    {
        return tbesIdIsModified;
    }

    /**
     * Determines if the tbesId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesIdInitialized()
    {
        return tbesIdIsInitialized;
    }

    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /** The TbShift referenced by this bean. */
    private TbShiftBean referencedTbShift;
    /** Getter method for TbShiftBean. */
    public TbShiftBean getTbShiftBean() {
        return this.referencedTbShift;
    }
    /** Setter method for TbShiftBean. */
    public void setTbShiftBean(TbShiftBean reference) {
        this.referencedTbShift = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbesDateIsModified 		|| tbsIdIsModified  		|| tbeIdIsModified  		|| tbesIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbesDateIsModified = false;
        tbsIdIsModified = false;
        tbeIdIsModified = false;
        tbesIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbEmployeeShiftBean bean)
    {
        setTbesDate(bean.getTbesDate());
        setTbsId(bean.getTbsId());
        setTbeId(bean.getTbeId());
        setTbesId(bean.getTbesId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbes_date", getTbesDate() == null ? "" : getTbesDate().toString());
        dictionnary.put("tbs_id", getTbsId() == null ? "" : getTbsId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        dictionnary.put("tbes_id", getTbesId() == null ? "" : getTbesId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbes_id", getTbesId() == null ? "" : getTbesId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbes_date".equalsIgnoreCase(column) || "tbesDate".equalsIgnoreCase(column)) {
            return getTbesDate() == null ? "" : getTbesDate().toString();
        } else if ("tbs_id".equalsIgnoreCase(column) || "tbsId".equalsIgnoreCase(column)) {
            return getTbsId() == null ? "" : getTbsId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        } else if ("tbes_id".equalsIgnoreCase(column) || "tbesId".equalsIgnoreCase(column)) {
            return getTbesId() == null ? "" : getTbesId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbEmployeeShiftBean)) {
            return false;
        }

		TbEmployeeShiftBean obj = (TbEmployeeShiftBean) object;
		return new EqualsBuilder()
            .append(getTbesDate(), obj.getTbesDate())
            .append(getTbsId(), obj.getTbsId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbesId(), obj.getTbesId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbesDate())
            .append(getTbsId())
            .append(getTbeId())
            .append(getTbesId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbes_date", getTbesDate())
            .append("tbs_id", getTbsId())
            .append("tbe_id", getTbeId())
            .append("tbes_id", getTbesId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbEmployeeShiftBean obj = (TbEmployeeShiftBean) object;
        return new CompareToBuilder()
            .append(getTbesDate(), obj.getTbesDate())
            .append(getTbsId(), obj.getTbsId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbesId(), obj.getTbesId())
            .toComparison();
   }
}
