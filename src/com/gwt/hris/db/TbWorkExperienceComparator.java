// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbWorkExperienceBean objects.
 * @author sql2java
 */
public class TbWorkExperienceComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbWorkExperienceComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbWorkExperienceComparator(TbWorkExperienceManager.ID_TBWE_INTERNAL, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbWorkExperienceManager.ID_TBWE_INTERNAL
     *   <li>TbWorkExperienceManager.ID_TBWE_END_DATE
     *   <li>TbWorkExperienceManager.ID_TBWE_START_DATE
     *   <li>TbWorkExperienceManager.ID_TBWE_COMMENTS
     *   <li>TbWorkExperienceManager.ID_TBWE_JOB_TITLE
     *   <li>TbWorkExperienceManager.ID_TBWE_EMPLOYER
     *   <li>TbWorkExperienceManager.ID_TBWE_WORK_EXPERIENCE_ID
     *   <li>TbWorkExperienceManager.ID_TBE_ID
     *   <li>TbWorkExperienceManager.ID_TBWE_ID
     * </ul>
     */
    public TbWorkExperienceComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbWorkExperienceComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbWorkExperienceComparator(TbWorkExperienceManager.ID_TBWE_INTERNAL, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbWorkExperienceManager.ID_TBWE_INTERNAL
     *   <li>TbWorkExperienceManager.ID_TBWE_END_DATE
     *   <li>TbWorkExperienceManager.ID_TBWE_START_DATE
     *   <li>TbWorkExperienceManager.ID_TBWE_COMMENTS
     *   <li>TbWorkExperienceManager.ID_TBWE_JOB_TITLE
     *   <li>TbWorkExperienceManager.ID_TBWE_EMPLOYER
     *   <li>TbWorkExperienceManager.ID_TBWE_WORK_EXPERIENCE_ID
     *   <li>TbWorkExperienceManager.ID_TBE_ID
     *   <li>TbWorkExperienceManager.ID_TBWE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbWorkExperienceComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbWorkExperienceBean b1 = (TbWorkExperienceBean)pObj1;
        TbWorkExperienceBean b2 = (TbWorkExperienceBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbWorkExperienceManager.ID_TBWE_INTERNAL:
                if (b1.getTbweInternal() == null && b2.getTbweInternal() != null) {
                    iReturn = -1;
                } else if (b1.getTbweInternal() == null && b2.getTbweInternal() == null) {
                    iReturn = 0;
                } else if (b1.getTbweInternal() != null && b2.getTbweInternal() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbweInternal().compareTo(b2.getTbweInternal());
                }
                break;
            case TbWorkExperienceManager.ID_TBWE_END_DATE:
                if (b1.getTbweEndDate() == null && b2.getTbweEndDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbweEndDate() == null && b2.getTbweEndDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbweEndDate() != null && b2.getTbweEndDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbweEndDate().compareTo(b2.getTbweEndDate());
                }
                break;
            case TbWorkExperienceManager.ID_TBWE_START_DATE:
                if (b1.getTbweStartDate() == null && b2.getTbweStartDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbweStartDate() == null && b2.getTbweStartDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbweStartDate() != null && b2.getTbweStartDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbweStartDate().compareTo(b2.getTbweStartDate());
                }
                break;
            case TbWorkExperienceManager.ID_TBWE_COMMENTS:
                if (b1.getTbweComments() == null && b2.getTbweComments() != null) {
                    iReturn = -1;
                } else if (b1.getTbweComments() == null && b2.getTbweComments() == null) {
                    iReturn = 0;
                } else if (b1.getTbweComments() != null && b2.getTbweComments() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbweComments().compareTo(b2.getTbweComments());
                }
                break;
            case TbWorkExperienceManager.ID_TBWE_JOB_TITLE:
                if (b1.getTbweJobTitle() == null && b2.getTbweJobTitle() != null) {
                    iReturn = -1;
                } else if (b1.getTbweJobTitle() == null && b2.getTbweJobTitle() == null) {
                    iReturn = 0;
                } else if (b1.getTbweJobTitle() != null && b2.getTbweJobTitle() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbweJobTitle().compareTo(b2.getTbweJobTitle());
                }
                break;
            case TbWorkExperienceManager.ID_TBWE_EMPLOYER:
                if (b1.getTbweEmployer() == null && b2.getTbweEmployer() != null) {
                    iReturn = -1;
                } else if (b1.getTbweEmployer() == null && b2.getTbweEmployer() == null) {
                    iReturn = 0;
                } else if (b1.getTbweEmployer() != null && b2.getTbweEmployer() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbweEmployer().compareTo(b2.getTbweEmployer());
                }
                break;
            case TbWorkExperienceManager.ID_TBWE_WORK_EXPERIENCE_ID:
                if (b1.getTbweWorkExperienceId() == null && b2.getTbweWorkExperienceId() != null) {
                    iReturn = -1;
                } else if (b1.getTbweWorkExperienceId() == null && b2.getTbweWorkExperienceId() == null) {
                    iReturn = 0;
                } else if (b1.getTbweWorkExperienceId() != null && b2.getTbweWorkExperienceId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbweWorkExperienceId().compareTo(b2.getTbweWorkExperienceId());
                }
                break;
            case TbWorkExperienceManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            case TbWorkExperienceManager.ID_TBWE_ID:
                if (b1.getTbweId() == null && b2.getTbweId() != null) {
                    iReturn = -1;
                } else if (b1.getTbweId() == null && b2.getTbweId() == null) {
                    iReturn = 0;
                } else if (b1.getTbweId() != null && b2.getTbweId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbweId().compareTo(b2.getTbweId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
