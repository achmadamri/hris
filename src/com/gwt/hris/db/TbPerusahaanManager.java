// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.TbPerusahaanBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the tb_perusahaan table.
 * @author sql2java
 */
public class TbPerusahaanManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbp_local_currency_id field.
     */
    public static final int ID_TBP_LOCAL_CURRENCY_ID = 0;

    /**
     * Identify the tbp_jkm field.
     */
    public static final int ID_TBP_JKM = 1;

    /**
     * Identify the tbp_jkk field.
     */
    public static final int ID_TBP_JKK = 2;

    /**
     * Identify the tbp_comments field.
     */
    public static final int ID_TBP_COMMENTS = 3;

    /**
     * Identify the tbp_zip_code field.
     */
    public static final int ID_TBP_ZIP_CODE = 4;

    /**
     * Identify the tbp_province field.
     */
    public static final int ID_TBP_PROVINCE = 5;

    /**
     * Identify the tbp_city field.
     */
    public static final int ID_TBP_CITY = 6;

    /**
     * Identify the tbp_address1 field.
     */
    public static final int ID_TBP_ADDRESS1 = 7;

    /**
     * Identify the fk_tbn_id field.
     */
    public static final int ID_FK_TBN_ID = 8;

    /**
     * Identify the tbp_fax field.
     */
    public static final int ID_TBP_FAX = 9;

    /**
     * Identify the tbp_phone field.
     */
    public static final int ID_TBP_PHONE = 10;

    /**
     * Identify the tbp_tax_id field.
     */
    public static final int ID_TBP_TAX_ID = 11;

    /**
     * Identify the tbp_name field.
     */
    public static final int ID_TBP_NAME = 12;

    /**
     * Identify the tbp_perusahaan_id field.
     */
    public static final int ID_TBP_PERUSAHAAN_ID = 13;

    /**
     * Identify the tbp_id field.
     */
    public static final int ID_TBP_ID = 14;

    /**
     * Contains all the full fields of the tb_perusahaan table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "tb_perusahaan.tbp_local_currency_id"
        ,"tb_perusahaan.tbp_jkm"
        ,"tb_perusahaan.tbp_jkk"
        ,"tb_perusahaan.tbp_comments"
        ,"tb_perusahaan.tbp_zip_code"
        ,"tb_perusahaan.tbp_province"
        ,"tb_perusahaan.tbp_city"
        ,"tb_perusahaan.tbp_address1"
        ,"tb_perusahaan.fk_tbn_id"
        ,"tb_perusahaan.tbp_fax"
        ,"tb_perusahaan.tbp_phone"
        ,"tb_perusahaan.tbp_tax_id"
        ,"tb_perusahaan.tbp_name"
        ,"tb_perusahaan.tbp_perusahaan_id"
        ,"tb_perusahaan.tbp_id"
    };

    /**
     * Contains all the fields of the tb_perusahaan table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbp_local_currency_id"
        ,"tbp_jkm"
        ,"tbp_jkk"
        ,"tbp_comments"
        ,"tbp_zip_code"
        ,"tbp_province"
        ,"tbp_city"
        ,"tbp_address1"
        ,"fk_tbn_id"
        ,"tbp_fax"
        ,"tbp_phone"
        ,"tbp_tax_id"
        ,"tbp_name"
        ,"tbp_perusahaan_id"
        ,"tbp_id"
    };

    /**
     * Field that contains the comma separated fields of the tb_perusahaan table.
     */
    public static final String ALL_FULL_FIELDS = "tb_perusahaan.tbp_local_currency_id"
                            + ",tb_perusahaan.tbp_jkm"
                            + ",tb_perusahaan.tbp_jkk"
                            + ",tb_perusahaan.tbp_comments"
                            + ",tb_perusahaan.tbp_zip_code"
                            + ",tb_perusahaan.tbp_province"
                            + ",tb_perusahaan.tbp_city"
                            + ",tb_perusahaan.tbp_address1"
                            + ",tb_perusahaan.fk_tbn_id"
                            + ",tb_perusahaan.tbp_fax"
                            + ",tb_perusahaan.tbp_phone"
                            + ",tb_perusahaan.tbp_tax_id"
                            + ",tb_perusahaan.tbp_name"
                            + ",tb_perusahaan.tbp_perusahaan_id"
                            + ",tb_perusahaan.tbp_id";

    /**
     * Field that contains the comma separated fields of the tb_perusahaan table.
     */
    public static final String ALL_FIELDS = "tbp_local_currency_id"
                            + ",tbp_jkm"
                            + ",tbp_jkk"
                            + ",tbp_comments"
                            + ",tbp_zip_code"
                            + ",tbp_province"
                            + ",tbp_city"
                            + ",tbp_address1"
                            + ",fk_tbn_id"
                            + ",tbp_fax"
                            + ",tbp_phone"
                            + ",tbp_tax_id"
                            + ",tbp_name"
                            + ",tbp_perusahaan_id"
                            + ",tbp_id";

    private static TbPerusahaanManager singleton = new TbPerusahaanManager();

    /**
     * Get the TbPerusahaanManager singleton.
     *
     * @return TbPerusahaanManager
     */
    public static TbPerusahaanManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new TbPerusahaanBean instance.
     *
     * @return the new TbPerusahaanBean
     */
    public TbPerusahaanBean createTbPerusahaanBean()
    {
        return new TbPerusahaanBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////
	
    /**
     * Loads a TbPerusahaanBean from the tb_perusahaan using its key fields.
     *
     * @param tbpId Integer - PK# 1
     * @return a unique TbPerusahaanBean
     * @throws DAOException
     */
    //1
    public TbPerusahaanBean loadByPrimaryKey(Integer tbpId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("SELECT " + ALL_FIELDS + " FROM tb_perusahaan WHERE tbp_id=?");
            log.debug("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbpId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbpId); }
            TbPerusahaanBean pReturn[] = this.loadByPreparedStatement(ps);
            if (pReturn.length < 1) {
                // throw new ObjectRetrievalException();
				return null;
            } else {
                return pReturn[0];
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
		
	//1WS
    //public TbPerusahaanBean loadByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return fromBeanWsToBean(Util.getInstance().getDAOServiceV1().tbXLoadByPrimaryKey(id));
    //}
    
    //2WS
    //public int deleteByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return Util.getInstance().getDAOServiceV1().tbXDeleteByPrimaryKey(id);
    //}

    /**
     * Deletes rows according to its keys.
     *
     * @param tbpId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer tbpId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_perusahaan WHERE tbp_id=?");
            log.debug("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbpId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbpId); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the TbJobBean object from the tb_perusahaan.tbp_id field.
     *
     * @param bean the TbPerusahaanBean
     * @return the associated TbJobBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbJobBean[] getTbJobBeans(TbPerusahaanBean bean) throws DAOException
    {
        TbJobBean other = TbJobManager.getInstance().createTbJobBean();
        other.setTbpId(bean.getTbpId());
        return TbJobManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbPerusahaanBean object to the TbJobBean object.
     *
     * @param bean the TbPerusahaanBean object to use
     * @param beanToSet the TbJobBean object to associate to the TbPerusahaanBean
     * @return the associated TbJobBean bean
     */
    //4.1 SET IMPORTED
    public TbPerusahaanBean setTbJobBean(TbPerusahaanBean bean,TbJobBean beanToSet)
    {
        bean.setTbpId(beanToSet.getTbpId());
        return bean;
    }

    /**
     * Retrieves the TbLocationBean object from the tb_perusahaan.tbp_id field.
     *
     * @param bean the TbPerusahaanBean
     * @return the associated TbLocationBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbLocationBean[] getTbLocationBeans(TbPerusahaanBean bean) throws DAOException
    {
        TbLocationBean other = TbLocationManager.getInstance().createTbLocationBean();
        other.setTbpId(bean.getTbpId());
        return TbLocationManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbPerusahaanBean object to the TbLocationBean object.
     *
     * @param bean the TbPerusahaanBean object to use
     * @param beanToSet the TbLocationBean object to associate to the TbPerusahaanBean
     * @return the associated TbLocationBean bean
     */
    //4.1 SET IMPORTED
    public TbPerusahaanBean setTbLocationBean(TbPerusahaanBean bean,TbLocationBean beanToSet)
    {
        bean.setTbpId(beanToSet.getTbpId());
        return bean;
    }

    /**
     * Retrieves the TbOrganizationBean object from the tb_perusahaan.tbp_id field.
     *
     * @param bean the TbPerusahaanBean
     * @return the associated TbOrganizationBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbOrganizationBean[] getTbOrganizationBeans(TbPerusahaanBean bean) throws DAOException
    {
        TbOrganizationBean other = TbOrganizationManager.getInstance().createTbOrganizationBean();
        other.setTbpId(bean.getTbpId());
        return TbOrganizationManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbPerusahaanBean object to the TbOrganizationBean object.
     *
     * @param bean the TbPerusahaanBean object to use
     * @param beanToSet the TbOrganizationBean object to associate to the TbPerusahaanBean
     * @return the associated TbOrganizationBean bean
     */
    //4.1 SET IMPORTED
    public TbPerusahaanBean setTbOrganizationBean(TbPerusahaanBean bean,TbOrganizationBean beanToSet)
    {
        bean.setTbpId(beanToSet.getTbpId());
        return bean;
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the TbNegaraBean object from the tb_perusahaan.fk_tbn_id field.
     *
     * @param bean the TbPerusahaanBean
     * @return the associated TbNegaraBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbNegaraBean getTbNegaraBean(TbPerusahaanBean bean) throws DAOException
    {
        TbNegaraBean other = TbNegaraManager.getInstance().createTbNegaraBean();
        other.setTbnId(bean.getFkTbnId()); 
        bean.setTbNegaraBean(TbNegaraManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbNegaraBean();
    }

    /**
     * Associates the TbPerusahaanBean object to the TbNegaraBean object.
     *
     * @param bean the TbPerusahaanBean object to use
     * @param beanToSet the TbNegaraBean object to associate to the TbPerusahaanBean
     * @return the associated TbNegaraBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbNegaraBean addTbNegaraBean(TbNegaraBean beanToSet, TbPerusahaanBean bean) throws Exception
    {
        beanToSet.setTbnId(bean.getFkTbnId());
        return TbNegaraManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbPerusahaanBean object to the TbNegaraBean object.
     *
     * @param bean the TbPerusahaanBean object to use
     * @param beanToSet the TbNegaraBean object to associate to the TbPerusahaanBean
     * @return the associated TbNegaraBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbNegaraBean setTbNegaraBean(TbPerusahaanBean bean, TbNegaraBean beanToSet) throws Exception
    {
        bean.setFkTbnId(beanToSet.getTbnId());
        return TbNegaraManager.getInstance().save(beanToSet);
    }

    /**
     * Retrieves the TbCurrencyBean object from the tb_perusahaan.tbp_local_currency_id field.
     *
     * @param bean the TbPerusahaanBean
     * @return the associated TbCurrencyBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbCurrencyBean getTbCurrencyBean(TbPerusahaanBean bean) throws DAOException
    {
        TbCurrencyBean other = TbCurrencyManager.getInstance().createTbCurrencyBean();
        other.setTbcId(bean.getTbpLocalCurrencyId()); 
        bean.setTbCurrencyBean(TbCurrencyManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbCurrencyBean();
    }

    /**
     * Associates the TbPerusahaanBean object to the TbCurrencyBean object.
     *
     * @param bean the TbPerusahaanBean object to use
     * @param beanToSet the TbCurrencyBean object to associate to the TbPerusahaanBean
     * @return the associated TbCurrencyBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbCurrencyBean addTbCurrencyBean(TbCurrencyBean beanToSet, TbPerusahaanBean bean) throws Exception
    {
        beanToSet.setTbcId(bean.getTbpLocalCurrencyId());
        return TbCurrencyManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbPerusahaanBean object to the TbCurrencyBean object.
     *
     * @param bean the TbPerusahaanBean object to use
     * @param beanToSet the TbCurrencyBean object to associate to the TbPerusahaanBean
     * @return the associated TbCurrencyBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbCurrencyBean setTbCurrencyBean(TbPerusahaanBean bean, TbCurrencyBean beanToSet) throws Exception
    {
        bean.setTbpLocalCurrencyId(beanToSet.getTbcId());
        return TbCurrencyManager.getInstance().save(beanToSet);
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from tb_perusahaan.
     *
     * @return an array of TbPerusahaanManager bean
     * @throws DAOException
     */
    //5
    public TbPerusahaanBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from tb_perusahaan, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of TbPerusahaanManager bean
     * @throws DAOException
     */
    //6
    public TbPerusahaanBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TbPerusahaanBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TbPerusahaanBean table
     * @throws DAOException
     */
    //7
    public TbPerusahaanBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TbPerusahaanBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting TbPerusahaanBean table
     * @throws DAOException
     */
    //8
    public TbPerusahaanBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of TbPerusahaanBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting TbPerusahaanBean table
     * @throws DAOException
     */
    //9
    public TbPerusahaanBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_perusahaan ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM tb_perusahaan ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the tb_perusahaan table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_perusahaan " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the TbPerusahaanBean bean into the database.
     *
     * @param bean the TbPerusahaanBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public TbPerusahaanBean save(TbPerusahaanBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the TbPerusahaanBean bean into the database.
     *
     * @param bean the TbPerusahaanBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public TbPerusahaanBean insert(TbPerusahaanBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into tb_perusahaan (");

            if (bean.isTbpLocalCurrencyIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_local_currency_id");
                _dirtyCount++;
            }

            if (bean.isTbpJkmModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_jkm");
                _dirtyCount++;
            }

            if (bean.isTbpJkkModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_jkk");
                _dirtyCount++;
            }

            if (bean.isTbpCommentsModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_comments");
                _dirtyCount++;
            }

            if (bean.isTbpZipCodeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_zip_code");
                _dirtyCount++;
            }

            if (bean.isTbpProvinceModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_province");
                _dirtyCount++;
            }

            if (bean.isTbpCityModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_city");
                _dirtyCount++;
            }

            if (bean.isTbpAddress1Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_address1");
                _dirtyCount++;
            }

            if (bean.isFkTbnIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("fk_tbn_id");
                _dirtyCount++;
            }

            if (bean.isTbpFaxModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_fax");
                _dirtyCount++;
            }

            if (bean.isTbpPhoneModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_phone");
                _dirtyCount++;
            }

            if (bean.isTbpTaxIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_tax_id");
                _dirtyCount++;
            }

            if (bean.isTbpNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_name");
                _dirtyCount++;
            }

            if (bean.isTbpPerusahaanIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_perusahaan_id");
                _dirtyCount++;
            }

            if (bean.isTbpIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();
            if (!bean.isTbpIdModified())
            {
                ResultSet rs = ps.getGeneratedKeys();
                try {
                    if(rs.next()) {
                        bean.setTbpId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve auto generated key!");
                    }
                } finally {
                    this.getManager().close(rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the TbPerusahaanBean bean record in the database according to the changes.
     *
     * @param bean the TbPerusahaanBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public TbPerusahaanBean update(TbPerusahaanBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE tb_perusahaan SET ");
            boolean useComma=false;

            if (bean.isTbpLocalCurrencyIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_local_currency_id=?");
            }

            if (bean.isTbpJkmModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_jkm=?");
            }

            if (bean.isTbpJkkModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_jkk=?");
            }

            if (bean.isTbpCommentsModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_comments=?");
            }

            if (bean.isTbpZipCodeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_zip_code=?");
            }

            if (bean.isTbpProvinceModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_province=?");
            }

            if (bean.isTbpCityModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_city=?");
            }

            if (bean.isTbpAddress1Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_address1=?");
            }

            if (bean.isFkTbnIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("fk_tbn_id=?");
            }

            if (bean.isTbpFaxModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_fax=?");
            }

            if (bean.isTbpPhoneModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_phone=?");
            }

            if (bean.isTbpTaxIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_tax_id=?");
            }

            if (bean.isTbpNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_name=?");
            }

            if (bean.isTbpPerusahaanIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_perusahaan_id=?");
            }

            if (bean.isTbpIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_id=?");
            }
            sql.append(" WHERE ");
            sql.append("tbp_id=?");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getTbpId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of TbPerusahaanBean beans into the database.
     *
     * @param beans the TbPerusahaanBean bean table to be saved
     * @return the saved TbPerusahaanBean array.
     * @throws DAOException
     */
    //15
    public TbPerusahaanBean[] save(TbPerusahaanBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of TbPerusahaanBean beans into the database.
     *
     * @param beans the TbPerusahaanBean bean table to be inserted
     * @return the saved TbPerusahaanBean array.
     * @throws DAOException
     */
    //16
    public TbPerusahaanBean[] insert(TbPerusahaanBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of TbPerusahaanBean beans into the database.
     *
     * @param beans the TbPerusahaanBean bean table to be inserted
     * @return the saved TbPerusahaanBean array.
     * @throws DAOException
     */
    //17
    public TbPerusahaanBean[] update(TbPerusahaanBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique TbPerusahaanBean bean from a template one giving a c
     *
     * @param bean the TbPerusahaanBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public TbPerusahaanBean loadUniqueUsingTemplate(TbPerusahaanBean bean) throws DAOException
    {
         TbPerusahaanBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of TbPerusahaanBean from a template one.
     *
     * @param bean the TbPerusahaanBean template to look for
     * @return all the TbPerusahaanBean matching the template
     * @throws DAOException
     */
    //19
    public TbPerusahaanBean[] loadUsingTemplate(TbPerusahaanBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of TbPerusahaanBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbPerusahaanBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the TbPerusahaanBean matching the template
     * @throws DAOException
     */
    //20
    public TbPerusahaanBean[] loadUsingTemplate(TbPerusahaanBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of TbPerusahaanBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbPerusahaanBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the TbPerusahaanBean matching the template
     * @throws DAOException
     */
    //20
    public TbPerusahaanBean[] loadUsingTemplate(TbPerusahaanBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_perusahaan ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a TbPerusahaanBean template.
     *
     * @param bean the TbPerusahaanBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(TbPerusahaanBean bean) throws DAOException
    {
        if (bean.isTbpIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getTbpId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM tb_perusahaan ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

    /**
     * Retrieves an array of TbPerusahaanBean using the tbp_fk_1 index.
     *
     * @param fkTbnId the fk_tbn_id column's value filter.
     * @return an array of TbPerusahaanBean
     * @throws DAOException
     */
    public TbPerusahaanBean[] loadBytbp_fk_1(Integer fkTbnId) throws DAOException
    {
        TbPerusahaanBean bean = this.createTbPerusahaanBean();
        bean.setFkTbnId(fkTbnId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbp_fk_1 index.
     *
     * @param fkTbnId the fk_tbn_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbp_fk_1(Integer fkTbnId) throws DAOException
    {
        TbPerusahaanBean bean = this.createTbPerusahaanBean();
        bean.setFkTbnId(fkTbnId);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an array of TbPerusahaanBean using the tbp_fk_2 index.
     *
     * @param tbpLocalCurrencyId the tbp_local_currency_id column's value filter.
     * @return an array of TbPerusahaanBean
     * @throws DAOException
     */
    public TbPerusahaanBean[] loadBytbp_fk_2(Integer tbpLocalCurrencyId) throws DAOException
    {
        TbPerusahaanBean bean = this.createTbPerusahaanBean();
        bean.setTbpLocalCurrencyId(tbpLocalCurrencyId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbp_fk_2 index.
     *
     * @param tbpLocalCurrencyId the tbp_local_currency_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbp_fk_2(Integer tbpLocalCurrencyId) throws DAOException
    {
        TbPerusahaanBean bean = this.createTbPerusahaanBean();
        bean.setTbpLocalCurrencyId(tbpLocalCurrencyId);
        return deleteUsingTemplate(bean);
    }
    


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table tb_perusahaan.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table tb_perusahaan with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM tb_perusahaan " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table tb_perusahaan with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific TbPerusahaanBean bean
     *
     * @param bean the TbPerusahaanBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(TbPerusahaanBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific TbPerusahaanBean bean , given the start row and number of rows.
     *
     * @param bean the TbPerusahaanBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbPerusahaanBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific TbPerusahaanBean bean given the start row and number of rows and the search type
     *
     * @param bean the TbPerusahaanBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbPerusahaanBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM tb_perusahaan");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, TbPerusahaanBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbpLocalCurrencyIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpLocalCurrencyId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_local_currency_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_local_currency_id = ?");
                }
            }
            if (bean.isTbpJkmModified()) {
                _dirtyCount ++;
                if (bean.getTbpJkm() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_jkm IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_jkm = ?");
                }
            }
            if (bean.isTbpJkkModified()) {
                _dirtyCount ++;
                if (bean.getTbpJkk() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_jkk IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_jkk = ?");
                }
            }
            if (bean.isTbpCommentsModified()) {
                _dirtyCount ++;
                if (bean.getTbpComments() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_comments IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_comments ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpZipCodeModified()) {
                _dirtyCount ++;
                if (bean.getTbpZipCode() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_zip_code IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_zip_code ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpProvinceModified()) {
                _dirtyCount ++;
                if (bean.getTbpProvince() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_province IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_province ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpCityModified()) {
                _dirtyCount ++;
                if (bean.getTbpCity() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_city IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_city ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpAddress1Modified()) {
                _dirtyCount ++;
                if (bean.getTbpAddress1() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_address1 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_address1 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isFkTbnIdModified()) {
                _dirtyCount ++;
                if (bean.getFkTbnId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("fk_tbn_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("fk_tbn_id = ?");
                }
            }
            if (bean.isTbpFaxModified()) {
                _dirtyCount ++;
                if (bean.getTbpFax() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_fax IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_fax ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpPhoneModified()) {
                _dirtyCount ++;
                if (bean.getTbpPhone() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_phone IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_phone ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpTaxIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpTaxId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_tax_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_tax_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpNameModified()) {
                _dirtyCount ++;
                if (bean.getTbpName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpPerusahaanIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpPerusahaanId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_perusahaan_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_perusahaan_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, TbPerusahaanBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbpLocalCurrencyIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpLocalCurrencyId() + "]");
                if (bean.getTbpLocalCurrencyId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpLocalCurrencyId()); }
            }
            if (bean.isTbpJkmModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpJkm() + "]");
                if (bean.getTbpJkm() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpJkm()); }
            }
            if (bean.isTbpJkkModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpJkk() + "]");
                if (bean.getTbpJkk() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpJkk()); }
            }
            if (bean.isTbpCommentsModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpComments() + "]");
                        if (bean.getTbpComments() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpComments()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpComments() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpComments());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpComments() + "]");
                        if (bean.getTbpComments() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpComments() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpZipCodeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpZipCode() + "]");
                        if (bean.getTbpZipCode() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpZipCode()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpZipCode() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpZipCode() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpZipCode() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpZipCode());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpZipCode() + "]");
                        if (bean.getTbpZipCode() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpZipCode() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpProvinceModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpProvince() + "]");
                        if (bean.getTbpProvince() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpProvince()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpProvince() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpProvince() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpProvince() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpProvince());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpProvince() + "]");
                        if (bean.getTbpProvince() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpProvince() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpCityModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpCity() + "]");
                        if (bean.getTbpCity() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpCity()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpCity() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpCity() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpCity() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpCity());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpCity() + "]");
                        if (bean.getTbpCity() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpCity() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpAddress1Modified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpAddress1() + "]");
                        if (bean.getTbpAddress1() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpAddress1()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpAddress1() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpAddress1() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpAddress1() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpAddress1());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpAddress1() + "]");
                        if (bean.getTbpAddress1() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpAddress1() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isFkTbnIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getFkTbnId() + "]");
                if (bean.getFkTbnId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFkTbnId()); }
            }
            if (bean.isTbpFaxModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpFax() + "]");
                        if (bean.getTbpFax() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpFax()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpFax() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpFax() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpFax() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpFax());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpFax() + "]");
                        if (bean.getTbpFax() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpFax() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpPhoneModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpPhone() + "]");
                        if (bean.getTbpPhone() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpPhone()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpPhone() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpPhone());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpPhone() + "]");
                        if (bean.getTbpPhone() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpPhone() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpTaxIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpTaxId() + "]");
                        if (bean.getTbpTaxId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpTaxId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpTaxId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpTaxId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpTaxId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpTaxId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpTaxId() + "]");
                        if (bean.getTbpTaxId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpTaxId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpName() + "]");
                        if (bean.getTbpName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpName() + "]");
                        if (bean.getTbpName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpPerusahaanIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpPerusahaanId() + "]");
                        if (bean.getTbpPerusahaanId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpPerusahaanId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpPerusahaanId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpPerusahaanId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpPerusahaanId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpPerusahaanId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpPerusahaanId() + "]");
                        if (bean.getTbpPerusahaanId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpPerusahaanId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpId() + "]");
                if (bean.getTbpId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of TbPerusahaanBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting TbPerusahaanBean table
     * @throws DAOException
     */
    //28
    public TbPerusahaanBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (TbPerusahaanBean[])v.toArray(new TbPerusahaanBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the tb_perusahaan on a TbPerusahaanBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbPerusahaanBean bean
     * @throws DAOException
     */
    //29
    public TbPerusahaanBean decodeRow(ResultSet rs) throws DAOException
    {
        TbPerusahaanBean bean = this.createTbPerusahaanBean();
        try
        {
            bean.setTbpLocalCurrencyId(Manager.getInteger(rs, 1));
            bean.setTbpJkm(Manager.getDouble(rs, 2));
            bean.setTbpJkk(Manager.getDouble(rs, 3));
            bean.setTbpComments(rs.getString(4));
            bean.setTbpZipCode(rs.getString(5));
            bean.setTbpProvince(rs.getString(6));
            bean.setTbpCity(rs.getString(7));
            bean.setTbpAddress1(rs.getString(8));
            bean.setFkTbnId(Manager.getInteger(rs, 9));
            bean.setTbpFax(rs.getString(10));
            bean.setTbpPhone(rs.getString(11));
            bean.setTbpTaxId(rs.getString(12));
            bean.setTbpName(rs.getString(13));
            bean.setTbpPerusahaanId(rs.getString(14));
            bean.setTbpId(Manager.getInteger(rs, 15));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public TbPerusahaanBean toBean(TbPerusahaanBeanModel beanModel, TbPerusahaanBean bean)
    {
		if (beanModel.getTbpLocalCurrencyId() != null)
			bean.setTbpLocalCurrencyId(beanModel.getTbpLocalCurrencyId());

		if (bean.getTbpLocalCurrencyId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpLocalCurrencyId().getClass().getName()))
			bean.setTbpLocalCurrencyId(beanModel.getTbpLocalCurrencyId());
		
		if (beanModel.getTbpJkm() != null)
			bean.setTbpJkm(beanModel.getTbpJkm());

		if (bean.getTbpJkm() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpJkm().getClass().getName()))
			bean.setTbpJkm(beanModel.getTbpJkm());
		
		if (beanModel.getTbpJkk() != null)
			bean.setTbpJkk(beanModel.getTbpJkk());

		if (bean.getTbpJkk() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpJkk().getClass().getName()))
			bean.setTbpJkk(beanModel.getTbpJkk());
		
		if (beanModel.getTbpComments() != null)
			bean.setTbpComments(beanModel.getTbpComments());

		if (bean.getTbpComments() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpComments().getClass().getName()))
			bean.setTbpComments(beanModel.getTbpComments());
		
		if (beanModel.getTbpZipCode() != null)
			bean.setTbpZipCode(beanModel.getTbpZipCode());

		if (bean.getTbpZipCode() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpZipCode().getClass().getName()))
			bean.setTbpZipCode(beanModel.getTbpZipCode());
		
		if (beanModel.getTbpProvince() != null)
			bean.setTbpProvince(beanModel.getTbpProvince());

		if (bean.getTbpProvince() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpProvince().getClass().getName()))
			bean.setTbpProvince(beanModel.getTbpProvince());
		
		if (beanModel.getTbpCity() != null)
			bean.setTbpCity(beanModel.getTbpCity());

		if (bean.getTbpCity() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpCity().getClass().getName()))
			bean.setTbpCity(beanModel.getTbpCity());
		
		if (beanModel.getTbpAddress1() != null)
			bean.setTbpAddress1(beanModel.getTbpAddress1());

		if (bean.getTbpAddress1() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpAddress1().getClass().getName()))
			bean.setTbpAddress1(beanModel.getTbpAddress1());
		
		if (beanModel.getFkTbnId() != null)
			bean.setFkTbnId(beanModel.getFkTbnId());

		if (bean.getFkTbnId() != null)
		if ("java.sql.Timestamp".equals(bean.getFkTbnId().getClass().getName()))
			bean.setFkTbnId(beanModel.getFkTbnId());
		
		if (beanModel.getTbpFax() != null)
			bean.setTbpFax(beanModel.getTbpFax());

		if (bean.getTbpFax() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpFax().getClass().getName()))
			bean.setTbpFax(beanModel.getTbpFax());
		
		if (beanModel.getTbpPhone() != null)
			bean.setTbpPhone(beanModel.getTbpPhone());

		if (bean.getTbpPhone() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpPhone().getClass().getName()))
			bean.setTbpPhone(beanModel.getTbpPhone());
		
		if (beanModel.getTbpTaxId() != null)
			bean.setTbpTaxId(beanModel.getTbpTaxId());

		if (bean.getTbpTaxId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpTaxId().getClass().getName()))
			bean.setTbpTaxId(beanModel.getTbpTaxId());
		
		if (beanModel.getTbpName() != null)
			bean.setTbpName(beanModel.getTbpName());

		if (bean.getTbpName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpName().getClass().getName()))
			bean.setTbpName(beanModel.getTbpName());
		
		if (beanModel.getTbpPerusahaanId() != null)
			bean.setTbpPerusahaanId(beanModel.getTbpPerusahaanId());

		if (bean.getTbpPerusahaanId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpPerusahaanId().getClass().getName()))
			bean.setTbpPerusahaanId(beanModel.getTbpPerusahaanId());
		
		if (beanModel.getTbpId() != null)
			bean.setTbpId(beanModel.getTbpId());

		if (bean.getTbpId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpId().getClass().getName()))
			bean.setTbpId(beanModel.getTbpId());
		
        return bean;
    }
	
    //29AA
    public TbPerusahaanBean[] toBeans(TbPerusahaanBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	TbPerusahaanBean beans[] = new TbPerusahaanBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public TbPerusahaanBeanModel toBeanModel(TbPerusahaanBean bean)
    {
    	TbPerusahaanBeanModel beanModel = new TbPerusahaanBeanModel();
		beanModel.setTbpLocalCurrencyId(bean.getTbpLocalCurrencyId());
		beanModel.setTbpJkm(bean.getTbpJkm());
		beanModel.setTbpJkk(bean.getTbpJkk());
		beanModel.setTbpComments(bean.getTbpComments());
		beanModel.setTbpZipCode(bean.getTbpZipCode());
		beanModel.setTbpProvince(bean.getTbpProvince());
		beanModel.setTbpCity(bean.getTbpCity());
		beanModel.setTbpAddress1(bean.getTbpAddress1());
		beanModel.setFkTbnId(bean.getFkTbnId());
		beanModel.setTbpFax(bean.getTbpFax());
		beanModel.setTbpPhone(bean.getTbpPhone());
		beanModel.setTbpTaxId(bean.getTbpTaxId());
		beanModel.setTbpName(bean.getTbpName());
		beanModel.setTbpPerusahaanId(bean.getTbpPerusahaanId());
		beanModel.setTbpId(bean.getTbpId());
		return beanModel;
    }
    
    //29CC
    public TbPerusahaanBeanModel[] toBeanModels(TbPerusahaanBean beans[])
    {
    	int beansCount = beans.length;
    	TbPerusahaanBeanModel beanModels[] = new TbPerusahaanBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the tb_perusahaan table on a TbPerusahaanBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting TbPerusahaanBean bean
     * @throws DAOException
     */
    //30
    public TbPerusahaanBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        TbPerusahaanBean bean = this.createTbPerusahaanBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBP_LOCAL_CURRENCY_ID:
                        ++pos;
                        bean.setTbpLocalCurrencyId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBP_JKM:
                        ++pos;
                        bean.setTbpJkm(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBP_JKK:
                        ++pos;
                        bean.setTbpJkk(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBP_COMMENTS:
                        ++pos;
                        bean.setTbpComments(rs.getString(pos));
                        break;
                    case ID_TBP_ZIP_CODE:
                        ++pos;
                        bean.setTbpZipCode(rs.getString(pos));
                        break;
                    case ID_TBP_PROVINCE:
                        ++pos;
                        bean.setTbpProvince(rs.getString(pos));
                        break;
                    case ID_TBP_CITY:
                        ++pos;
                        bean.setTbpCity(rs.getString(pos));
                        break;
                    case ID_TBP_ADDRESS1:
                        ++pos;
                        bean.setTbpAddress1(rs.getString(pos));
                        break;
                    case ID_FK_TBN_ID:
                        ++pos;
                        bean.setFkTbnId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBP_FAX:
                        ++pos;
                        bean.setTbpFax(rs.getString(pos));
                        break;
                    case ID_TBP_PHONE:
                        ++pos;
                        bean.setTbpPhone(rs.getString(pos));
                        break;
                    case ID_TBP_TAX_ID:
                        ++pos;
                        bean.setTbpTaxId(rs.getString(pos));
                        break;
                    case ID_TBP_NAME:
                        ++pos;
                        bean.setTbpName(rs.getString(pos));
                        break;
                    case ID_TBP_PERUSAHAAN_ID:
                        ++pos;
                        bean.setTbpPerusahaanId(rs.getString(pos));
                        break;
                    case ID_TBP_ID:
                        ++pos;
                        bean.setTbpId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the tb_perusahaan on a TbPerusahaanBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbPerusahaanBean bean
     * @throws DAOException
     */
    //31
    public TbPerusahaanBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        TbPerusahaanBean bean = this.createTbPerusahaanBean();
        try
        {
            bean.setTbpLocalCurrencyId(Manager.getInteger(rs, "tbp_local_currency_id"));
            bean.setTbpJkm(Manager.getDouble(rs, "tbp_jkm"));
            bean.setTbpJkk(Manager.getDouble(rs, "tbp_jkk"));
            bean.setTbpComments(rs.getString("tbp_comments"));
            bean.setTbpZipCode(rs.getString("tbp_zip_code"));
            bean.setTbpProvince(rs.getString("tbp_province"));
            bean.setTbpCity(rs.getString("tbp_city"));
            bean.setTbpAddress1(rs.getString("tbp_address1"));
            bean.setFkTbnId(Manager.getInteger(rs, "fk_tbn_id"));
            bean.setTbpFax(rs.getString("tbp_fax"));
            bean.setTbpPhone(rs.getString("tbp_phone"));
            bean.setTbpTaxId(rs.getString("tbp_tax_id"));
            bean.setTbpName(rs.getString("tbp_name"));
            bean.setTbpPerusahaanId(rs.getString("tbp_perusahaan_id"));
            bean.setTbpId(Manager.getInteger(rs, "tbp_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TbPerusahaanBean
     * @throws DAOException
     */
    //32
    public TbPerusahaanBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TbPerusahaanBean
     * @throws DAOException
     */
    //33
    public TbPerusahaanBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (TbPerusahaanBean[])v.toArray(new TbPerusahaanBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of TbPerusahaanBean
     * @throws DAOException
     */
    //34
    public TbPerusahaanBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private TbPerusahaanListener listener = null;

    /**
     * Registers a unique TbPerusahaanListener listener.
     */
    //35
    public void registerListener(TbPerusahaanListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the TbPerusahaanBean bean.
     *
     * @param bean the TbPerusahaanBean bean to be saved
     */
    //36
    private void beforeInsert(TbPerusahaanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the TbPerusahaanBean bean.
     *
     * @param bean the TbPerusahaanBean bean to be saved
     */
    //37
    private void afterInsert(TbPerusahaanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the TbPerusahaanBean bean.
     *
     * @param bean the TbPerusahaanBean bean to be updated
     */
    //38
    private void beforeUpdate(TbPerusahaanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the TbPerusahaanBean bean.
     *
     * @param bean the TbPerusahaanBean bean to be updated
     */
    //39
    private void afterUpdate(TbPerusahaanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the TbPerusahaanBean bean.
     *
     * @param bean the TbPerusahaanBean bean to be deleted
     */
    private void beforeDelete(TbPerusahaanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the TbPerusahaanBean bean.
     *
     * @param bean the TbPerusahaanBean bean to be deleted
     */
    private void afterDelete(TbPerusahaanBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
