// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbNotificationBean objects.
 * @author sql2java
 */
public class TbNotificationComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbNotificationComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbNotificationComparator(TbNotificationManager.ID_TBN_READ_DATE, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbNotificationManager.ID_TBN_READ_DATE
     *   <li>TbNotificationManager.ID_TBN_SENT_DATE
     *   <li>TbNotificationManager.ID_TBN_CREATE_DATE
     *   <li>TbNotificationManager.ID_TBN_DATA
     *   <li>TbNotificationManager.ID_TBE_ID_TO
     *   <li>TbNotificationManager.ID_TBE_ID_FROM
     *   <li>TbNotificationManager.ID_TBNU_ID
     *   <li>TbNotificationManager.ID_TBNT_ID
     *   <li>TbNotificationManager.ID_TBNC_ID
     *   <li>TbNotificationManager.ID_TBN_ID
     * </ul>
     */
    public TbNotificationComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbNotificationComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbNotificationComparator(TbNotificationManager.ID_TBN_READ_DATE, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbNotificationManager.ID_TBN_READ_DATE
     *   <li>TbNotificationManager.ID_TBN_SENT_DATE
     *   <li>TbNotificationManager.ID_TBN_CREATE_DATE
     *   <li>TbNotificationManager.ID_TBN_DATA
     *   <li>TbNotificationManager.ID_TBE_ID_TO
     *   <li>TbNotificationManager.ID_TBE_ID_FROM
     *   <li>TbNotificationManager.ID_TBNU_ID
     *   <li>TbNotificationManager.ID_TBNT_ID
     *   <li>TbNotificationManager.ID_TBNC_ID
     *   <li>TbNotificationManager.ID_TBN_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbNotificationComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbNotificationBean b1 = (TbNotificationBean)pObj1;
        TbNotificationBean b2 = (TbNotificationBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbNotificationManager.ID_TBN_READ_DATE:
                if (b1.getTbnReadDate() == null && b2.getTbnReadDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbnReadDate() == null && b2.getTbnReadDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbnReadDate() != null && b2.getTbnReadDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbnReadDate().compareTo(b2.getTbnReadDate());
                }
                break;
            case TbNotificationManager.ID_TBN_SENT_DATE:
                if (b1.getTbnSentDate() == null && b2.getTbnSentDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbnSentDate() == null && b2.getTbnSentDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbnSentDate() != null && b2.getTbnSentDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbnSentDate().compareTo(b2.getTbnSentDate());
                }
                break;
            case TbNotificationManager.ID_TBN_CREATE_DATE:
                if (b1.getTbnCreateDate() == null && b2.getTbnCreateDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbnCreateDate() == null && b2.getTbnCreateDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbnCreateDate() != null && b2.getTbnCreateDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbnCreateDate().compareTo(b2.getTbnCreateDate());
                }
                break;
            case TbNotificationManager.ID_TBN_DATA:
                if (b1.getTbnData() == null && b2.getTbnData() != null) {
                    iReturn = -1;
                } else if (b1.getTbnData() == null && b2.getTbnData() == null) {
                    iReturn = 0;
                } else if (b1.getTbnData() != null && b2.getTbnData() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbnData().compareTo(b2.getTbnData());
                }
                break;
            case TbNotificationManager.ID_TBE_ID_TO:
                if (b1.getTbeIdTo() == null && b2.getTbeIdTo() != null) {
                    iReturn = -1;
                } else if (b1.getTbeIdTo() == null && b2.getTbeIdTo() == null) {
                    iReturn = 0;
                } else if (b1.getTbeIdTo() != null && b2.getTbeIdTo() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeIdTo().compareTo(b2.getTbeIdTo());
                }
                break;
            case TbNotificationManager.ID_TBE_ID_FROM:
                if (b1.getTbeIdFrom() == null && b2.getTbeIdFrom() != null) {
                    iReturn = -1;
                } else if (b1.getTbeIdFrom() == null && b2.getTbeIdFrom() == null) {
                    iReturn = 0;
                } else if (b1.getTbeIdFrom() != null && b2.getTbeIdFrom() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeIdFrom().compareTo(b2.getTbeIdFrom());
                }
                break;
            case TbNotificationManager.ID_TBNU_ID:
                if (b1.getTbnuId() == null && b2.getTbnuId() != null) {
                    iReturn = -1;
                } else if (b1.getTbnuId() == null && b2.getTbnuId() == null) {
                    iReturn = 0;
                } else if (b1.getTbnuId() != null && b2.getTbnuId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbnuId().compareTo(b2.getTbnuId());
                }
                break;
            case TbNotificationManager.ID_TBNT_ID:
                if (b1.getTbntId() == null && b2.getTbntId() != null) {
                    iReturn = -1;
                } else if (b1.getTbntId() == null && b2.getTbntId() == null) {
                    iReturn = 0;
                } else if (b1.getTbntId() != null && b2.getTbntId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbntId().compareTo(b2.getTbntId());
                }
                break;
            case TbNotificationManager.ID_TBNC_ID:
                if (b1.getTbncId() == null && b2.getTbncId() != null) {
                    iReturn = -1;
                } else if (b1.getTbncId() == null && b2.getTbncId() == null) {
                    iReturn = 0;
                } else if (b1.getTbncId() != null && b2.getTbncId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbncId().compareTo(b2.getTbncId());
                }
                break;
            case TbNotificationManager.ID_TBN_ID:
                if (b1.getTbnId() == null && b2.getTbnId() != null) {
                    iReturn = -1;
                } else if (b1.getTbnId() == null && b2.getTbnId() == null) {
                    iReturn = 0;
                } else if (b1.getTbnId() != null && b2.getTbnId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbnId().compareTo(b2.getTbnId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
