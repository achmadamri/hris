// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the ViewEmployeeRenumerationBean objects.
 * @author sql2java
 */
public class ViewEmployeeRenumerationComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ViewEmployeeRenumerationComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewEmployeeRenumerationComparator(ViewEmployeeRenumerationManager.ID_TBC_LOCAL_CURRENCY_KURS, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewEmployeeRenumerationManager.ID_TBC_LOCAL_CURRENCY_KURS
     *   <li>ViewEmployeeRenumerationManager.ID_TBC_NAME
     *   <li>ViewEmployeeRenumerationManager.ID_TBC_CURRENCY_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBC_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBR_NOMINAL
     *   <li>ViewEmployeeRenumerationManager.ID_TBR_NAME
     *   <li>ViewEmployeeRenumerationManager.ID_TBR_RENUMERATION_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBR_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBJT_NAME
     *   <li>ViewEmployeeRenumerationManager.ID_TBJT_JOB_TITLE_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBJT_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBE_NAME
     *   <li>ViewEmployeeRenumerationManager.ID_TBE_ID
     * </ul>
     */
    public ViewEmployeeRenumerationComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ViewEmployeeRenumerationComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewEmployeeRenumerationComparator(ViewEmployeeRenumerationManager.ID_TBC_LOCAL_CURRENCY_KURS, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewEmployeeRenumerationManager.ID_TBC_LOCAL_CURRENCY_KURS
     *   <li>ViewEmployeeRenumerationManager.ID_TBC_NAME
     *   <li>ViewEmployeeRenumerationManager.ID_TBC_CURRENCY_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBC_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBR_NOMINAL
     *   <li>ViewEmployeeRenumerationManager.ID_TBR_NAME
     *   <li>ViewEmployeeRenumerationManager.ID_TBR_RENUMERATION_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBR_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBJT_NAME
     *   <li>ViewEmployeeRenumerationManager.ID_TBJT_JOB_TITLE_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBJT_ID
     *   <li>ViewEmployeeRenumerationManager.ID_TBE_NAME
     *   <li>ViewEmployeeRenumerationManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ViewEmployeeRenumerationComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ViewEmployeeRenumerationBean b1 = (ViewEmployeeRenumerationBean)pObj1;
        ViewEmployeeRenumerationBean b2 = (ViewEmployeeRenumerationBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ViewEmployeeRenumerationManager.ID_TBC_LOCAL_CURRENCY_KURS:
                if (b1.getTbcLocalCurrencyKurs() == null && b2.getTbcLocalCurrencyKurs() != null) {
                    iReturn = -1;
                } else if (b1.getTbcLocalCurrencyKurs() == null && b2.getTbcLocalCurrencyKurs() == null) {
                    iReturn = 0;
                } else if (b1.getTbcLocalCurrencyKurs() != null && b2.getTbcLocalCurrencyKurs() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcLocalCurrencyKurs().compareTo(b2.getTbcLocalCurrencyKurs());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBC_NAME:
                if (b1.getTbcName() == null && b2.getTbcName() != null) {
                    iReturn = -1;
                } else if (b1.getTbcName() == null && b2.getTbcName() == null) {
                    iReturn = 0;
                } else if (b1.getTbcName() != null && b2.getTbcName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcName().compareTo(b2.getTbcName());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBC_CURRENCY_ID:
                if (b1.getTbcCurrencyId() == null && b2.getTbcCurrencyId() != null) {
                    iReturn = -1;
                } else if (b1.getTbcCurrencyId() == null && b2.getTbcCurrencyId() == null) {
                    iReturn = 0;
                } else if (b1.getTbcCurrencyId() != null && b2.getTbcCurrencyId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcCurrencyId().compareTo(b2.getTbcCurrencyId());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBC_ID:
                if (b1.getTbcId() == null && b2.getTbcId() != null) {
                    iReturn = -1;
                } else if (b1.getTbcId() == null && b2.getTbcId() == null) {
                    iReturn = 0;
                } else if (b1.getTbcId() != null && b2.getTbcId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcId().compareTo(b2.getTbcId());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBR_NOMINAL:
                if (b1.getTbrNominal() == null && b2.getTbrNominal() != null) {
                    iReturn = -1;
                } else if (b1.getTbrNominal() == null && b2.getTbrNominal() == null) {
                    iReturn = 0;
                } else if (b1.getTbrNominal() != null && b2.getTbrNominal() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbrNominal().compareTo(b2.getTbrNominal());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBR_NAME:
                if (b1.getTbrName() == null && b2.getTbrName() != null) {
                    iReturn = -1;
                } else if (b1.getTbrName() == null && b2.getTbrName() == null) {
                    iReturn = 0;
                } else if (b1.getTbrName() != null && b2.getTbrName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbrName().compareTo(b2.getTbrName());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBR_RENUMERATION_ID:
                if (b1.getTbrRenumerationId() == null && b2.getTbrRenumerationId() != null) {
                    iReturn = -1;
                } else if (b1.getTbrRenumerationId() == null && b2.getTbrRenumerationId() == null) {
                    iReturn = 0;
                } else if (b1.getTbrRenumerationId() != null && b2.getTbrRenumerationId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbrRenumerationId().compareTo(b2.getTbrRenumerationId());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBR_ID:
                if (b1.getTbrId() == null && b2.getTbrId() != null) {
                    iReturn = -1;
                } else if (b1.getTbrId() == null && b2.getTbrId() == null) {
                    iReturn = 0;
                } else if (b1.getTbrId() != null && b2.getTbrId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbrId().compareTo(b2.getTbrId());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBJT_NAME:
                if (b1.getTbjtName() == null && b2.getTbjtName() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtName() == null && b2.getTbjtName() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtName() != null && b2.getTbjtName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtName().compareTo(b2.getTbjtName());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBJT_JOB_TITLE_ID:
                if (b1.getTbjtJobTitleId() == null && b2.getTbjtJobTitleId() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtJobTitleId() == null && b2.getTbjtJobTitleId() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtJobTitleId() != null && b2.getTbjtJobTitleId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtJobTitleId().compareTo(b2.getTbjtJobTitleId());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBJT_ID:
                if (b1.getTbjtId() == null && b2.getTbjtId() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtId() == null && b2.getTbjtId() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtId() != null && b2.getTbjtId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtId().compareTo(b2.getTbjtId());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBE_NAME:
                if (b1.getTbeName() == null && b2.getTbeName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeName() == null && b2.getTbeName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeName() != null && b2.getTbeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeName().compareTo(b2.getTbeName());
                }
                break;
            case ViewEmployeeRenumerationManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
