// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbEthnicRacesBean is a mapping of tb_ethnic_races Table.
 * @author sql2java
*/
public class TbEthnicRacesBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 7485064946440713757L;
	
    private String tberName;

    private boolean tberNameIsModified = false;
    private boolean tberNameIsInitialized = false;

    private String tberEthnicRacesId;

    private boolean tberEthnicRacesIdIsModified = false;
    private boolean tberEthnicRacesIdIsInitialized = false;

    private Integer tberId;

    private boolean tberIdIsModified = false;
    private boolean tberIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbEthnicRacesBean is via the createTbEthnicRacesBean method in TbEthnicRacesManager or
     * via the factory class TbEthnicRacesFactory create method
     */
    protected TbEthnicRacesBean()
    {
    }

    /**
     * Getter method for tberName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_ethnic_races.tber_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tberName
     */
    public String getTberName()
    {
        return tberName;
    }

    /**
     * Setter method for tberName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tberName
     */
    public void setTberName(String newVal)
    {
        if ((newVal != null && tberName != null && (newVal.compareTo(tberName) == 0)) ||
            (newVal == null && tberName == null && tberNameIsInitialized)) {
            return;
        }
        tberName = newVal;
        tberNameIsModified = true;
        tberNameIsInitialized = true;
    }

    /**
     * Determines if the tberName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTberNameModified()
    {
        return tberNameIsModified;
    }

    /**
     * Determines if the tberName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTberNameInitialized()
    {
        return tberNameIsInitialized;
    }

    /**
     * Getter method for tberEthnicRacesId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_ethnic_races.tber_ethnic_races_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tberEthnicRacesId
     */
    public String getTberEthnicRacesId()
    {
        return tberEthnicRacesId;
    }

    /**
     * Setter method for tberEthnicRacesId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tberEthnicRacesId
     */
    public void setTberEthnicRacesId(String newVal)
    {
        if ((newVal != null && tberEthnicRacesId != null && (newVal.compareTo(tberEthnicRacesId) == 0)) ||
            (newVal == null && tberEthnicRacesId == null && tberEthnicRacesIdIsInitialized)) {
            return;
        }
        tberEthnicRacesId = newVal;
        tberEthnicRacesIdIsModified = true;
        tberEthnicRacesIdIsInitialized = true;
    }

    /**
     * Determines if the tberEthnicRacesId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTberEthnicRacesIdModified()
    {
        return tberEthnicRacesIdIsModified;
    }

    /**
     * Determines if the tberEthnicRacesId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTberEthnicRacesIdInitialized()
    {
        return tberEthnicRacesIdIsInitialized;
    }

    /**
     * Getter method for tberId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_ethnic_races.tber_id</li>
     * <li> imported key: tb_employee.tber_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tberId
     */
    public Integer getTberId()
    {
        return tberId;
    }

    /**
     * Setter method for tberId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tberId
     */
    public void setTberId(Integer newVal)
    {
        if ((newVal != null && tberId != null && (newVal.compareTo(tberId) == 0)) ||
            (newVal == null && tberId == null && tberIdIsInitialized)) {
            return;
        }
        tberId = newVal;
        tberIdIsModified = true;
        tberIdIsInitialized = true;
    }

    /**
     * Setter method for tberId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tberId
     */
    public void setTberId(int newVal)
    {
        setTberId(new Integer(newVal));
    }

    /**
     * Determines if the tberId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTberIdModified()
    {
        return tberIdIsModified;
    }

    /**
     * Determines if the tberId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTberIdInitialized()
    {
        return tberIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tberNameIsModified 		|| tberEthnicRacesIdIsModified  		|| tberIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tberNameIsModified = false;
        tberEthnicRacesIdIsModified = false;
        tberIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbEthnicRacesBean bean)
    {
        setTberName(bean.getTberName());
        setTberEthnicRacesId(bean.getTberEthnicRacesId());
        setTberId(bean.getTberId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tber_name", getTberName() == null ? "" : getTberName().toString());
        dictionnary.put("tber_ethnic_races_id", getTberEthnicRacesId() == null ? "" : getTberEthnicRacesId().toString());
        dictionnary.put("tber_id", getTberId() == null ? "" : getTberId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tber_id", getTberId() == null ? "" : getTberId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tber_name".equalsIgnoreCase(column) || "tberName".equalsIgnoreCase(column)) {
            return getTberName() == null ? "" : getTberName().toString();
        } else if ("tber_ethnic_races_id".equalsIgnoreCase(column) || "tberEthnicRacesId".equalsIgnoreCase(column)) {
            return getTberEthnicRacesId() == null ? "" : getTberEthnicRacesId().toString();
        } else if ("tber_id".equalsIgnoreCase(column) || "tberId".equalsIgnoreCase(column)) {
            return getTberId() == null ? "" : getTberId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbEthnicRacesBean)) {
            return false;
        }

		TbEthnicRacesBean obj = (TbEthnicRacesBean) object;
		return new EqualsBuilder()
            .append(getTberName(), obj.getTberName())
            .append(getTberEthnicRacesId(), obj.getTberEthnicRacesId())
            .append(getTberId(), obj.getTberId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTberName())
            .append(getTberEthnicRacesId())
            .append(getTberId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tber_name", getTberName())
            .append("tber_ethnic_races_id", getTberEthnicRacesId())
            .append("tber_id", getTberId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbEthnicRacesBean obj = (TbEthnicRacesBean) object;
        return new CompareToBuilder()
            .append(getTberName(), obj.getTberName())
            .append(getTberEthnicRacesId(), obj.getTberEthnicRacesId())
            .append(getTberId(), obj.getTberId())
            .toComparison();
   }
}
