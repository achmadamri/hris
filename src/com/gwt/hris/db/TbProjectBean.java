// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbProjectBean is a mapping of tb_project Table.
 * @author sql2java
*/
public class TbProjectBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -7834137041856610575L;
	
    private Integer tbcId;

    private boolean tbcIdIsModified = false;
    private boolean tbcIdIsInitialized = false;

    private String tbpDescription;

    private boolean tbpDescriptionIsModified = false;
    private boolean tbpDescriptionIsInitialized = false;

    private String tbpName;

    private boolean tbpNameIsModified = false;
    private boolean tbpNameIsInitialized = false;

    private String tbpProjectId;

    private boolean tbpProjectIdIsModified = false;
    private boolean tbpProjectIdIsInitialized = false;

    private Integer tbpId;

    private boolean tbpIdIsModified = false;
    private boolean tbpIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbProjectBean is via the createTbProjectBean method in TbProjectManager or
     * via the factory class TbProjectFactory create method
     */
    protected TbProjectBean()
    {
    }

    /**
     * Getter method for tbcId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_project.tbc_id</li>
     * <li> foreign key: tb_customer.tbc_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbcId
     */
    public Integer getTbcId()
    {
        return tbcId;
    }

    /**
     * Setter method for tbcId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcId
     */
    public void setTbcId(Integer newVal)
    {
        if ((newVal != null && tbcId != null && (newVal.compareTo(tbcId) == 0)) ||
            (newVal == null && tbcId == null && tbcIdIsInitialized)) {
            return;
        }
        tbcId = newVal;
        tbcIdIsModified = true;
        tbcIdIsInitialized = true;
    }

    /**
     * Setter method for tbcId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbcId
     */
    public void setTbcId(int newVal)
    {
        setTbcId(new Integer(newVal));
    }

    /**
     * Determines if the tbcId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcIdModified()
    {
        return tbcIdIsModified;
    }

    /**
     * Determines if the tbcId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcIdInitialized()
    {
        return tbcIdIsInitialized;
    }

    /**
     * Getter method for tbpDescription.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_project.tbp_description</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpDescription
     */
    public String getTbpDescription()
    {
        return tbpDescription;
    }

    /**
     * Setter method for tbpDescription.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpDescription
     */
    public void setTbpDescription(String newVal)
    {
        if ((newVal != null && tbpDescription != null && (newVal.compareTo(tbpDescription) == 0)) ||
            (newVal == null && tbpDescription == null && tbpDescriptionIsInitialized)) {
            return;
        }
        tbpDescription = newVal;
        tbpDescriptionIsModified = true;
        tbpDescriptionIsInitialized = true;
    }

    /**
     * Determines if the tbpDescription has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpDescriptionModified()
    {
        return tbpDescriptionIsModified;
    }

    /**
     * Determines if the tbpDescription has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpDescriptionInitialized()
    {
        return tbpDescriptionIsInitialized;
    }

    /**
     * Getter method for tbpName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_project.tbp_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpName
     */
    public String getTbpName()
    {
        return tbpName;
    }

    /**
     * Setter method for tbpName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpName
     */
    public void setTbpName(String newVal)
    {
        if ((newVal != null && tbpName != null && (newVal.compareTo(tbpName) == 0)) ||
            (newVal == null && tbpName == null && tbpNameIsInitialized)) {
            return;
        }
        tbpName = newVal;
        tbpNameIsModified = true;
        tbpNameIsInitialized = true;
    }

    /**
     * Determines if the tbpName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpNameModified()
    {
        return tbpNameIsModified;
    }

    /**
     * Determines if the tbpName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpNameInitialized()
    {
        return tbpNameIsInitialized;
    }

    /**
     * Getter method for tbpProjectId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_project.tbp_project_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpProjectId
     */
    public String getTbpProjectId()
    {
        return tbpProjectId;
    }

    /**
     * Setter method for tbpProjectId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpProjectId
     */
    public void setTbpProjectId(String newVal)
    {
        if ((newVal != null && tbpProjectId != null && (newVal.compareTo(tbpProjectId) == 0)) ||
            (newVal == null && tbpProjectId == null && tbpProjectIdIsInitialized)) {
            return;
        }
        tbpProjectId = newVal;
        tbpProjectIdIsModified = true;
        tbpProjectIdIsInitialized = true;
    }

    /**
     * Determines if the tbpProjectId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpProjectIdModified()
    {
        return tbpProjectIdIsModified;
    }

    /**
     * Determines if the tbpProjectId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpProjectIdInitialized()
    {
        return tbpProjectIdIsInitialized;
    }

    /**
     * Getter method for tbpId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_project.tbp_id</li>
     * <li> imported key: tb_project_employee.tbp_id</li>
     * <li> imported key: tb_timesheet.tbp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpId
     */
    public Integer getTbpId()
    {
        return tbpId;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(Integer newVal)
    {
        if ((newVal != null && tbpId != null && (newVal.compareTo(tbpId) == 0)) ||
            (newVal == null && tbpId == null && tbpIdIsInitialized)) {
            return;
        }
        tbpId = newVal;
        tbpIdIsModified = true;
        tbpIdIsInitialized = true;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(int newVal)
    {
        setTbpId(new Integer(newVal));
    }

    /**
     * Determines if the tbpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpIdModified()
    {
        return tbpIdIsModified;
    }

    /**
     * Determines if the tbpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpIdInitialized()
    {
        return tbpIdIsInitialized;
    }

    /** The TbCustomer referenced by this bean. */
    private TbCustomerBean referencedTbCustomer;
    /** Getter method for TbCustomerBean. */
    public TbCustomerBean getTbCustomerBean() {
        return this.referencedTbCustomer;
    }
    /** Setter method for TbCustomerBean. */
    public void setTbCustomerBean(TbCustomerBean reference) {
        this.referencedTbCustomer = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbcIdIsModified 		|| tbpDescriptionIsModified  		|| tbpNameIsModified  		|| tbpProjectIdIsModified  		|| tbpIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbcIdIsModified = false;
        tbpDescriptionIsModified = false;
        tbpNameIsModified = false;
        tbpProjectIdIsModified = false;
        tbpIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbProjectBean bean)
    {
        setTbcId(bean.getTbcId());
        setTbpDescription(bean.getTbpDescription());
        setTbpName(bean.getTbpName());
        setTbpProjectId(bean.getTbpProjectId());
        setTbpId(bean.getTbpId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbc_id", getTbcId() == null ? "" : getTbcId().toString());
        dictionnary.put("tbp_description", getTbpDescription() == null ? "" : getTbpDescription().toString());
        dictionnary.put("tbp_name", getTbpName() == null ? "" : getTbpName().toString());
        dictionnary.put("tbp_project_id", getTbpProjectId() == null ? "" : getTbpProjectId().toString());
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbc_id".equalsIgnoreCase(column) || "tbcId".equalsIgnoreCase(column)) {
            return getTbcId() == null ? "" : getTbcId().toString();
        } else if ("tbp_description".equalsIgnoreCase(column) || "tbpDescription".equalsIgnoreCase(column)) {
            return getTbpDescription() == null ? "" : getTbpDescription().toString();
        } else if ("tbp_name".equalsIgnoreCase(column) || "tbpName".equalsIgnoreCase(column)) {
            return getTbpName() == null ? "" : getTbpName().toString();
        } else if ("tbp_project_id".equalsIgnoreCase(column) || "tbpProjectId".equalsIgnoreCase(column)) {
            return getTbpProjectId() == null ? "" : getTbpProjectId().toString();
        } else if ("tbp_id".equalsIgnoreCase(column) || "tbpId".equalsIgnoreCase(column)) {
            return getTbpId() == null ? "" : getTbpId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbProjectBean)) {
            return false;
        }

		TbProjectBean obj = (TbProjectBean) object;
		return new EqualsBuilder()
            .append(getTbcId(), obj.getTbcId())
            .append(getTbpDescription(), obj.getTbpDescription())
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpProjectId(), obj.getTbpProjectId())
            .append(getTbpId(), obj.getTbpId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbcId())
            .append(getTbpDescription())
            .append(getTbpName())
            .append(getTbpProjectId())
            .append(getTbpId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbc_id", getTbcId())
            .append("tbp_description", getTbpDescription())
            .append("tbp_name", getTbpName())
            .append("tbp_project_id", getTbpProjectId())
            .append("tbp_id", getTbpId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbProjectBean obj = (TbProjectBean) object;
        return new CompareToBuilder()
            .append(getTbcId(), obj.getTbcId())
            .append(getTbpDescription(), obj.getTbpDescription())
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpProjectId(), obj.getTbpProjectId())
            .append(getTbpId(), obj.getTbpId())
            .toComparison();
   }
}
