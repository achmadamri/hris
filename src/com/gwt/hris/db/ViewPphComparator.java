// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the ViewPphBean objects.
 * @author sql2java
 */
public class ViewPphComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ViewPphComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewPphComparator(ViewPphManager.ID_TBPPH_PAJAK_KOMISI, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewPphManager.ID_TBPPH_PAJAK_KOMISI
     *   <li>ViewPphManager.ID_TBE_TAX_NO
     *   <li>ViewPphManager.ID_TBE_EMPLOYEE_ID
     *   <li>ViewPphManager.ID_TBPPH_PERIODE
     *   <li>ViewPphManager.ID_TBPTKP_STATUS
     *   <li>ViewPphManager.ID_TBO_NAMA
     *   <li>ViewPphManager.ID_TBES_NAME
     *   <li>ViewPphManager.ID_TBJT_NAME
     *   <li>ViewPphManager.ID_TBJ_JOINED_DATE
     *   <li>ViewPphManager.ID_TBPPH_TOTAL_TAKE_HOME_PAY
     *   <li>ViewPphManager.ID_TBPPH_LOAN
     *   <li>ViewPphManager.ID_TBPPH_PENDAPATAN_TIDAK_TETAP
     *   <li>ViewPphManager.ID_TBPPH_PAJAK_BLN_INI
     *   <li>ViewPphManager.ID_TBPPH_IURAN_JHT_JAMSOSTEK
     *   <li>ViewPphManager.ID_TBPPH_TOTAL_GROSS
     *   <li>ViewPphManager.ID_TBPPH_TUNJANGAN_JAMSOSTEK_JKKJKM
     *   <li>ViewPphManager.ID_TBPPH_TUNJANGAN_TETAP
     *   <li>ViewPphManager.ID_TBPPH_GAJI_POKOK_GROSS
     *   <li>ViewPphManager.ID_TBPPH_DATE
     *   <li>ViewPphManager.ID_TBPPH_ID
     *   <li>ViewPphManager.ID_TBE_NAME
     *   <li>ViewPphManager.ID_TBE_ID
     * </ul>
     */
    public ViewPphComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ViewPphComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewPphComparator(ViewPphManager.ID_TBPPH_PAJAK_KOMISI, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewPphManager.ID_TBPPH_PAJAK_KOMISI
     *   <li>ViewPphManager.ID_TBE_TAX_NO
     *   <li>ViewPphManager.ID_TBE_EMPLOYEE_ID
     *   <li>ViewPphManager.ID_TBPPH_PERIODE
     *   <li>ViewPphManager.ID_TBPTKP_STATUS
     *   <li>ViewPphManager.ID_TBO_NAMA
     *   <li>ViewPphManager.ID_TBES_NAME
     *   <li>ViewPphManager.ID_TBJT_NAME
     *   <li>ViewPphManager.ID_TBJ_JOINED_DATE
     *   <li>ViewPphManager.ID_TBPPH_TOTAL_TAKE_HOME_PAY
     *   <li>ViewPphManager.ID_TBPPH_LOAN
     *   <li>ViewPphManager.ID_TBPPH_PENDAPATAN_TIDAK_TETAP
     *   <li>ViewPphManager.ID_TBPPH_PAJAK_BLN_INI
     *   <li>ViewPphManager.ID_TBPPH_IURAN_JHT_JAMSOSTEK
     *   <li>ViewPphManager.ID_TBPPH_TOTAL_GROSS
     *   <li>ViewPphManager.ID_TBPPH_TUNJANGAN_JAMSOSTEK_JKKJKM
     *   <li>ViewPphManager.ID_TBPPH_TUNJANGAN_TETAP
     *   <li>ViewPphManager.ID_TBPPH_GAJI_POKOK_GROSS
     *   <li>ViewPphManager.ID_TBPPH_DATE
     *   <li>ViewPphManager.ID_TBPPH_ID
     *   <li>ViewPphManager.ID_TBE_NAME
     *   <li>ViewPphManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ViewPphComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ViewPphBean b1 = (ViewPphBean)pObj1;
        ViewPphBean b2 = (ViewPphBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ViewPphManager.ID_TBPPH_PAJAK_KOMISI:
                if (b1.getTbpphPajakKomisi() == null && b2.getTbpphPajakKomisi() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPajakKomisi() == null && b2.getTbpphPajakKomisi() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPajakKomisi() != null && b2.getTbpphPajakKomisi() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPajakKomisi().compareTo(b2.getTbpphPajakKomisi());
                }
                break;
            case ViewPphManager.ID_TBE_TAX_NO:
                if (b1.getTbeTaxNo() == null && b2.getTbeTaxNo() != null) {
                    iReturn = -1;
                } else if (b1.getTbeTaxNo() == null && b2.getTbeTaxNo() == null) {
                    iReturn = 0;
                } else if (b1.getTbeTaxNo() != null && b2.getTbeTaxNo() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeTaxNo().compareTo(b2.getTbeTaxNo());
                }
                break;
            case ViewPphManager.ID_TBE_EMPLOYEE_ID:
                if (b1.getTbeEmployeeId() == null && b2.getTbeEmployeeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeEmployeeId() == null && b2.getTbeEmployeeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeEmployeeId() != null && b2.getTbeEmployeeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeEmployeeId().compareTo(b2.getTbeEmployeeId());
                }
                break;
            case ViewPphManager.ID_TBPPH_PERIODE:
                if (b1.getTbpphPeriode() == null && b2.getTbpphPeriode() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPeriode() == null && b2.getTbpphPeriode() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPeriode() != null && b2.getTbpphPeriode() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPeriode().compareTo(b2.getTbpphPeriode());
                }
                break;
            case ViewPphManager.ID_TBPTKP_STATUS:
                if (b1.getTbptkpStatus() == null && b2.getTbptkpStatus() != null) {
                    iReturn = -1;
                } else if (b1.getTbptkpStatus() == null && b2.getTbptkpStatus() == null) {
                    iReturn = 0;
                } else if (b1.getTbptkpStatus() != null && b2.getTbptkpStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbptkpStatus().compareTo(b2.getTbptkpStatus());
                }
                break;
            case ViewPphManager.ID_TBO_NAMA:
                if (b1.getTboNama() == null && b2.getTboNama() != null) {
                    iReturn = -1;
                } else if (b1.getTboNama() == null && b2.getTboNama() == null) {
                    iReturn = 0;
                } else if (b1.getTboNama() != null && b2.getTboNama() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTboNama().compareTo(b2.getTboNama());
                }
                break;
            case ViewPphManager.ID_TBES_NAME:
                if (b1.getTbesName() == null && b2.getTbesName() != null) {
                    iReturn = -1;
                } else if (b1.getTbesName() == null && b2.getTbesName() == null) {
                    iReturn = 0;
                } else if (b1.getTbesName() != null && b2.getTbesName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbesName().compareTo(b2.getTbesName());
                }
                break;
            case ViewPphManager.ID_TBJT_NAME:
                if (b1.getTbjtName() == null && b2.getTbjtName() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtName() == null && b2.getTbjtName() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtName() != null && b2.getTbjtName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtName().compareTo(b2.getTbjtName());
                }
                break;
            case ViewPphManager.ID_TBJ_JOINED_DATE:
                if (b1.getTbjJoinedDate() == null && b2.getTbjJoinedDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbjJoinedDate() == null && b2.getTbjJoinedDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbjJoinedDate() != null && b2.getTbjJoinedDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjJoinedDate().compareTo(b2.getTbjJoinedDate());
                }
                break;
            case ViewPphManager.ID_TBPPH_TOTAL_TAKE_HOME_PAY:
                if (b1.getTbpphTotalTakeHomePay() == null && b2.getTbpphTotalTakeHomePay() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphTotalTakeHomePay() == null && b2.getTbpphTotalTakeHomePay() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphTotalTakeHomePay() != null && b2.getTbpphTotalTakeHomePay() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphTotalTakeHomePay().compareTo(b2.getTbpphTotalTakeHomePay());
                }
                break;
            case ViewPphManager.ID_TBPPH_LOAN:
                if (b1.getTbpphLoan() == null && b2.getTbpphLoan() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphLoan() == null && b2.getTbpphLoan() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphLoan() != null && b2.getTbpphLoan() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphLoan().compareTo(b2.getTbpphLoan());
                }
                break;
            case ViewPphManager.ID_TBPPH_PENDAPATAN_TIDAK_TETAP:
                if (b1.getTbpphPendapatanTidakTetap() == null && b2.getTbpphPendapatanTidakTetap() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPendapatanTidakTetap() == null && b2.getTbpphPendapatanTidakTetap() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPendapatanTidakTetap() != null && b2.getTbpphPendapatanTidakTetap() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPendapatanTidakTetap().compareTo(b2.getTbpphPendapatanTidakTetap());
                }
                break;
            case ViewPphManager.ID_TBPPH_PAJAK_BLN_INI:
                if (b1.getTbpphPajakBlnIni() == null && b2.getTbpphPajakBlnIni() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPajakBlnIni() == null && b2.getTbpphPajakBlnIni() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPajakBlnIni() != null && b2.getTbpphPajakBlnIni() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPajakBlnIni().compareTo(b2.getTbpphPajakBlnIni());
                }
                break;
            case ViewPphManager.ID_TBPPH_IURAN_JHT_JAMSOSTEK:
                if (b1.getTbpphIuranJhtJamsostek() == null && b2.getTbpphIuranJhtJamsostek() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphIuranJhtJamsostek() == null && b2.getTbpphIuranJhtJamsostek() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphIuranJhtJamsostek() != null && b2.getTbpphIuranJhtJamsostek() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphIuranJhtJamsostek().compareTo(b2.getTbpphIuranJhtJamsostek());
                }
                break;
            case ViewPphManager.ID_TBPPH_TOTAL_GROSS:
                if (b1.getTbpphTotalGross() == null && b2.getTbpphTotalGross() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphTotalGross() == null && b2.getTbpphTotalGross() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphTotalGross() != null && b2.getTbpphTotalGross() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphTotalGross().compareTo(b2.getTbpphTotalGross());
                }
                break;
            case ViewPphManager.ID_TBPPH_TUNJANGAN_JAMSOSTEK_JKKJKM:
                if (b1.getTbpphTunjanganJamsostekJkkjkm() == null && b2.getTbpphTunjanganJamsostekJkkjkm() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphTunjanganJamsostekJkkjkm() == null && b2.getTbpphTunjanganJamsostekJkkjkm() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphTunjanganJamsostekJkkjkm() != null && b2.getTbpphTunjanganJamsostekJkkjkm() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphTunjanganJamsostekJkkjkm().compareTo(b2.getTbpphTunjanganJamsostekJkkjkm());
                }
                break;
            case ViewPphManager.ID_TBPPH_TUNJANGAN_TETAP:
                if (b1.getTbpphTunjanganTetap() == null && b2.getTbpphTunjanganTetap() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphTunjanganTetap() == null && b2.getTbpphTunjanganTetap() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphTunjanganTetap() != null && b2.getTbpphTunjanganTetap() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphTunjanganTetap().compareTo(b2.getTbpphTunjanganTetap());
                }
                break;
            case ViewPphManager.ID_TBPPH_GAJI_POKOK_GROSS:
                if (b1.getTbpphGajiPokokGross() == null && b2.getTbpphGajiPokokGross() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphGajiPokokGross() == null && b2.getTbpphGajiPokokGross() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphGajiPokokGross() != null && b2.getTbpphGajiPokokGross() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphGajiPokokGross().compareTo(b2.getTbpphGajiPokokGross());
                }
                break;
            case ViewPphManager.ID_TBPPH_DATE:
                if (b1.getTbpphDate() == null && b2.getTbpphDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphDate() == null && b2.getTbpphDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphDate() != null && b2.getTbpphDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphDate().compareTo(b2.getTbpphDate());
                }
                break;
            case ViewPphManager.ID_TBPPH_ID:
                if (b1.getTbpphId() == null && b2.getTbpphId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphId() == null && b2.getTbpphId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphId() != null && b2.getTbpphId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphId().compareTo(b2.getTbpphId());
                }
                break;
            case ViewPphManager.ID_TBE_NAME:
                if (b1.getTbeName() == null && b2.getTbeName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeName() == null && b2.getTbeName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeName() != null && b2.getTbeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeName().compareTo(b2.getTbeName());
                }
                break;
            case ViewPphManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
