// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbEmployeeBean is a mapping of tb_employee Table.
 * @author sql2java
*/
public class TbEmployeeBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 4357522861028486474L;
	
    private Integer tbptkpId;

    private boolean tbptkpIdIsModified = false;
    private boolean tbptkpIdIsInitialized = false;

    private Integer tberId;

    private boolean tberIdIsModified = false;
    private boolean tberIdIsInitialized = false;

    private Integer tbnId;

    private boolean tbnIdIsModified = false;
    private boolean tbnIdIsInitialized = false;

    private java.sql.Timestamp tbeJoinedDate;

    private boolean tbeJoinedDateIsModified = false;
    private boolean tbeJoinedDateIsInitialized = false;

    private Integer tbeStatus;

    private boolean tbeStatusIsModified = false;
    private boolean tbeStatusIsInitialized = false;

    private java.sql.Timestamp tbeDriverLicenseExpiry;

    private boolean tbeDriverLicenseExpiryIsModified = false;
    private boolean tbeDriverLicenseExpiryIsInitialized = false;

    private String tbePhone;

    private boolean tbePhoneIsModified = false;
    private boolean tbePhoneIsInitialized = false;

    private String tbeMobile;

    private boolean tbeMobileIsModified = false;
    private boolean tbeMobileIsInitialized = false;

    private String tbeDriverLicenseNo;

    private boolean tbeDriverLicenseNoIsModified = false;
    private boolean tbeDriverLicenseNoIsInitialized = false;

    private Integer tbeGender;

    private boolean tbeGenderIsModified = false;
    private boolean tbeGenderIsInitialized = false;

    private Integer tbeSmoker;

    private boolean tbeSmokerIsModified = false;
    private boolean tbeSmokerIsInitialized = false;

    private Integer tbeMaritalStatus;

    private boolean tbeMaritalStatusIsModified = false;
    private boolean tbeMaritalStatusIsInitialized = false;

    private java.sql.Timestamp tbeDob;

    private boolean tbeDobIsModified = false;
    private boolean tbeDobIsInitialized = false;

    private java.sql.Timestamp tbeTaxNoDate;

    private boolean tbeTaxNoDateIsModified = false;
    private boolean tbeTaxNoDateIsInitialized = false;

    private String tbeTaxNo;

    private boolean tbeTaxNoIsModified = false;
    private boolean tbeTaxNoIsInitialized = false;

    private String tbeIdNo;

    private boolean tbeIdNoIsModified = false;
    private boolean tbeIdNoIsInitialized = false;

    private String tbePhotoFileName;

    private boolean tbePhotoFileNameIsModified = false;
    private boolean tbePhotoFileNameIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private String tbeNickName;

    private boolean tbeNickNameIsModified = false;
    private boolean tbeNickNameIsInitialized = false;

    private String tbeLastName;

    private boolean tbeLastNameIsModified = false;
    private boolean tbeLastNameIsInitialized = false;

    private String tbeMiddleName;

    private boolean tbeMiddleNameIsModified = false;
    private boolean tbeMiddleNameIsInitialized = false;

    private String tbeFirstName;

    private boolean tbeFirstNameIsModified = false;
    private boolean tbeFirstNameIsInitialized = false;

    private String tbeEmail;

    private boolean tbeEmailIsModified = false;
    private boolean tbeEmailIsInitialized = false;

    private String tbeEmployeeId;

    private boolean tbeEmployeeIdIsModified = false;
    private boolean tbeEmployeeIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbEmployeeBean is via the createTbEmployeeBean method in TbEmployeeManager or
     * via the factory class TbEmployeeFactory create method
     */
    protected TbEmployeeBean()
    {
    }

    /**
     * Getter method for tbptkpId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbptkp_id</li>
     * <li> foreign key: tb_ptkp.tbptkp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbptkpId
     */
    public Integer getTbptkpId()
    {
        return tbptkpId;
    }

    /**
     * Setter method for tbptkpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbptkpId
     */
    public void setTbptkpId(Integer newVal)
    {
        if ((newVal != null && tbptkpId != null && (newVal.compareTo(tbptkpId) == 0)) ||
            (newVal == null && tbptkpId == null && tbptkpIdIsInitialized)) {
            return;
        }
        tbptkpId = newVal;
        tbptkpIdIsModified = true;
        tbptkpIdIsInitialized = true;
    }

    /**
     * Setter method for tbptkpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbptkpId
     */
    public void setTbptkpId(int newVal)
    {
        setTbptkpId(new Integer(newVal));
    }

    /**
     * Determines if the tbptkpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbptkpIdModified()
    {
        return tbptkpIdIsModified;
    }

    /**
     * Determines if the tbptkpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbptkpIdInitialized()
    {
        return tbptkpIdIsInitialized;
    }

    /**
     * Getter method for tberId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tber_id</li>
     * <li> foreign key: tb_ethnic_races.tber_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tberId
     */
    public Integer getTberId()
    {
        return tberId;
    }

    /**
     * Setter method for tberId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tberId
     */
    public void setTberId(Integer newVal)
    {
        if ((newVal != null && tberId != null && (newVal.compareTo(tberId) == 0)) ||
            (newVal == null && tberId == null && tberIdIsInitialized)) {
            return;
        }
        tberId = newVal;
        tberIdIsModified = true;
        tberIdIsInitialized = true;
    }

    /**
     * Setter method for tberId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tberId
     */
    public void setTberId(int newVal)
    {
        setTberId(new Integer(newVal));
    }

    /**
     * Determines if the tberId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTberIdModified()
    {
        return tberIdIsModified;
    }

    /**
     * Determines if the tberId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTberIdInitialized()
    {
        return tberIdIsInitialized;
    }

    /**
     * Getter method for tbnId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbn_id</li>
     * <li> foreign key: tb_nationality.tbn_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbnId
     */
    public Integer getTbnId()
    {
        return tbnId;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(Integer newVal)
    {
        if ((newVal != null && tbnId != null && (newVal.compareTo(tbnId) == 0)) ||
            (newVal == null && tbnId == null && tbnIdIsInitialized)) {
            return;
        }
        tbnId = newVal;
        tbnIdIsModified = true;
        tbnIdIsInitialized = true;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(int newVal)
    {
        setTbnId(new Integer(newVal));
    }

    /**
     * Determines if the tbnId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnIdModified()
    {
        return tbnIdIsModified;
    }

    /**
     * Determines if the tbnId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnIdInitialized()
    {
        return tbnIdIsInitialized;
    }

    /**
     * Getter method for tbeJoinedDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_joined_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbeJoinedDate
     */
    public java.sql.Timestamp getTbeJoinedDate()
    {
        return tbeJoinedDate;
    }

    /**
     * Setter method for tbeJoinedDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeJoinedDate
     */
    public void setTbeJoinedDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbeJoinedDate != null && (newVal.compareTo(tbeJoinedDate) == 0)) ||
            (newVal == null && tbeJoinedDate == null && tbeJoinedDateIsInitialized)) {
            return;
        }
        tbeJoinedDate = newVal;
        tbeJoinedDateIsModified = true;
        tbeJoinedDateIsInitialized = true;
    }

    /**
     * Setter method for tbeJoinedDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeJoinedDate
     */
    public void setTbeJoinedDate(long newVal)
    {
        setTbeJoinedDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbeJoinedDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeJoinedDateModified()
    {
        return tbeJoinedDateIsModified;
    }

    /**
     * Determines if the tbeJoinedDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeJoinedDateInitialized()
    {
        return tbeJoinedDateIsInitialized;
    }

    /**
     * Getter method for tbeStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_status</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeStatus
     */
    public Integer getTbeStatus()
    {
        return tbeStatus;
    }

    /**
     * Setter method for tbeStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeStatus
     */
    public void setTbeStatus(Integer newVal)
    {
        if ((newVal != null && tbeStatus != null && (newVal.compareTo(tbeStatus) == 0)) ||
            (newVal == null && tbeStatus == null && tbeStatusIsInitialized)) {
            return;
        }
        tbeStatus = newVal;
        tbeStatusIsModified = true;
        tbeStatusIsInitialized = true;
    }

    /**
     * Setter method for tbeStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeStatus
     */
    public void setTbeStatus(int newVal)
    {
        setTbeStatus(new Integer(newVal));
    }

    /**
     * Determines if the tbeStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeStatusModified()
    {
        return tbeStatusIsModified;
    }

    /**
     * Determines if the tbeStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeStatusInitialized()
    {
        return tbeStatusIsInitialized;
    }

    /**
     * Getter method for tbeDriverLicenseExpiry.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_driver_license_expiry</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbeDriverLicenseExpiry
     */
    public java.sql.Timestamp getTbeDriverLicenseExpiry()
    {
        return tbeDriverLicenseExpiry;
    }

    /**
     * Setter method for tbeDriverLicenseExpiry.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeDriverLicenseExpiry
     */
    public void setTbeDriverLicenseExpiry(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbeDriverLicenseExpiry != null && (newVal.compareTo(tbeDriverLicenseExpiry) == 0)) ||
            (newVal == null && tbeDriverLicenseExpiry == null && tbeDriverLicenseExpiryIsInitialized)) {
            return;
        }
        tbeDriverLicenseExpiry = newVal;
        tbeDriverLicenseExpiryIsModified = true;
        tbeDriverLicenseExpiryIsInitialized = true;
    }

    /**
     * Setter method for tbeDriverLicenseExpiry.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeDriverLicenseExpiry
     */
    public void setTbeDriverLicenseExpiry(long newVal)
    {
        setTbeDriverLicenseExpiry(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbeDriverLicenseExpiry has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeDriverLicenseExpiryModified()
    {
        return tbeDriverLicenseExpiryIsModified;
    }

    /**
     * Determines if the tbeDriverLicenseExpiry has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeDriverLicenseExpiryInitialized()
    {
        return tbeDriverLicenseExpiryIsInitialized;
    }

    /**
     * Getter method for tbePhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_phone</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbePhone
     */
    public String getTbePhone()
    {
        return tbePhone;
    }

    /**
     * Setter method for tbePhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbePhone
     */
    public void setTbePhone(String newVal)
    {
        if ((newVal != null && tbePhone != null && (newVal.compareTo(tbePhone) == 0)) ||
            (newVal == null && tbePhone == null && tbePhoneIsInitialized)) {
            return;
        }
        tbePhone = newVal;
        tbePhoneIsModified = true;
        tbePhoneIsInitialized = true;
    }

    /**
     * Determines if the tbePhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbePhoneModified()
    {
        return tbePhoneIsModified;
    }

    /**
     * Determines if the tbePhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbePhoneInitialized()
    {
        return tbePhoneIsInitialized;
    }

    /**
     * Getter method for tbeMobile.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_mobile</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeMobile
     */
    public String getTbeMobile()
    {
        return tbeMobile;
    }

    /**
     * Setter method for tbeMobile.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeMobile
     */
    public void setTbeMobile(String newVal)
    {
        if ((newVal != null && tbeMobile != null && (newVal.compareTo(tbeMobile) == 0)) ||
            (newVal == null && tbeMobile == null && tbeMobileIsInitialized)) {
            return;
        }
        tbeMobile = newVal;
        tbeMobileIsModified = true;
        tbeMobileIsInitialized = true;
    }

    /**
     * Determines if the tbeMobile has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeMobileModified()
    {
        return tbeMobileIsModified;
    }

    /**
     * Determines if the tbeMobile has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeMobileInitialized()
    {
        return tbeMobileIsInitialized;
    }

    /**
     * Getter method for tbeDriverLicenseNo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_driver_license_no</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeDriverLicenseNo
     */
    public String getTbeDriverLicenseNo()
    {
        return tbeDriverLicenseNo;
    }

    /**
     * Setter method for tbeDriverLicenseNo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeDriverLicenseNo
     */
    public void setTbeDriverLicenseNo(String newVal)
    {
        if ((newVal != null && tbeDriverLicenseNo != null && (newVal.compareTo(tbeDriverLicenseNo) == 0)) ||
            (newVal == null && tbeDriverLicenseNo == null && tbeDriverLicenseNoIsInitialized)) {
            return;
        }
        tbeDriverLicenseNo = newVal;
        tbeDriverLicenseNoIsModified = true;
        tbeDriverLicenseNoIsInitialized = true;
    }

    /**
     * Determines if the tbeDriverLicenseNo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeDriverLicenseNoModified()
    {
        return tbeDriverLicenseNoIsModified;
    }

    /**
     * Determines if the tbeDriverLicenseNo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeDriverLicenseNoInitialized()
    {
        return tbeDriverLicenseNoIsInitialized;
    }

    /**
     * Getter method for tbeGender.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_gender</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeGender
     */
    public Integer getTbeGender()
    {
        return tbeGender;
    }

    /**
     * Setter method for tbeGender.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeGender
     */
    public void setTbeGender(Integer newVal)
    {
        if ((newVal != null && tbeGender != null && (newVal.compareTo(tbeGender) == 0)) ||
            (newVal == null && tbeGender == null && tbeGenderIsInitialized)) {
            return;
        }
        tbeGender = newVal;
        tbeGenderIsModified = true;
        tbeGenderIsInitialized = true;
    }

    /**
     * Setter method for tbeGender.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeGender
     */
    public void setTbeGender(int newVal)
    {
        setTbeGender(new Integer(newVal));
    }

    /**
     * Determines if the tbeGender has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeGenderModified()
    {
        return tbeGenderIsModified;
    }

    /**
     * Determines if the tbeGender has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeGenderInitialized()
    {
        return tbeGenderIsInitialized;
    }

    /**
     * Getter method for tbeSmoker.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_smoker</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeSmoker
     */
    public Integer getTbeSmoker()
    {
        return tbeSmoker;
    }

    /**
     * Setter method for tbeSmoker.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeSmoker
     */
    public void setTbeSmoker(Integer newVal)
    {
        if ((newVal != null && tbeSmoker != null && (newVal.compareTo(tbeSmoker) == 0)) ||
            (newVal == null && tbeSmoker == null && tbeSmokerIsInitialized)) {
            return;
        }
        tbeSmoker = newVal;
        tbeSmokerIsModified = true;
        tbeSmokerIsInitialized = true;
    }

    /**
     * Setter method for tbeSmoker.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeSmoker
     */
    public void setTbeSmoker(int newVal)
    {
        setTbeSmoker(new Integer(newVal));
    }

    /**
     * Determines if the tbeSmoker has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeSmokerModified()
    {
        return tbeSmokerIsModified;
    }

    /**
     * Determines if the tbeSmoker has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeSmokerInitialized()
    {
        return tbeSmokerIsInitialized;
    }

    /**
     * Getter method for tbeMaritalStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_marital_status</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeMaritalStatus
     */
    public Integer getTbeMaritalStatus()
    {
        return tbeMaritalStatus;
    }

    /**
     * Setter method for tbeMaritalStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeMaritalStatus
     */
    public void setTbeMaritalStatus(Integer newVal)
    {
        if ((newVal != null && tbeMaritalStatus != null && (newVal.compareTo(tbeMaritalStatus) == 0)) ||
            (newVal == null && tbeMaritalStatus == null && tbeMaritalStatusIsInitialized)) {
            return;
        }
        tbeMaritalStatus = newVal;
        tbeMaritalStatusIsModified = true;
        tbeMaritalStatusIsInitialized = true;
    }

    /**
     * Setter method for tbeMaritalStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeMaritalStatus
     */
    public void setTbeMaritalStatus(int newVal)
    {
        setTbeMaritalStatus(new Integer(newVal));
    }

    /**
     * Determines if the tbeMaritalStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeMaritalStatusModified()
    {
        return tbeMaritalStatusIsModified;
    }

    /**
     * Determines if the tbeMaritalStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeMaritalStatusInitialized()
    {
        return tbeMaritalStatusIsInitialized;
    }

    /**
     * Getter method for tbeDob.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_dob</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbeDob
     */
    public java.sql.Timestamp getTbeDob()
    {
        return tbeDob;
    }

    /**
     * Setter method for tbeDob.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeDob
     */
    public void setTbeDob(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbeDob != null && (newVal.compareTo(tbeDob) == 0)) ||
            (newVal == null && tbeDob == null && tbeDobIsInitialized)) {
            return;
        }
        tbeDob = newVal;
        tbeDobIsModified = true;
        tbeDobIsInitialized = true;
    }

    /**
     * Setter method for tbeDob.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeDob
     */
    public void setTbeDob(long newVal)
    {
        setTbeDob(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbeDob has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeDobModified()
    {
        return tbeDobIsModified;
    }

    /**
     * Determines if the tbeDob has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeDobInitialized()
    {
        return tbeDobIsInitialized;
    }

    /**
     * Getter method for tbeTaxNoDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_tax_no_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbeTaxNoDate
     */
    public java.sql.Timestamp getTbeTaxNoDate()
    {
        return tbeTaxNoDate;
    }

    /**
     * Setter method for tbeTaxNoDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeTaxNoDate
     */
    public void setTbeTaxNoDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbeTaxNoDate != null && (newVal.compareTo(tbeTaxNoDate) == 0)) ||
            (newVal == null && tbeTaxNoDate == null && tbeTaxNoDateIsInitialized)) {
            return;
        }
        tbeTaxNoDate = newVal;
        tbeTaxNoDateIsModified = true;
        tbeTaxNoDateIsInitialized = true;
    }

    /**
     * Setter method for tbeTaxNoDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeTaxNoDate
     */
    public void setTbeTaxNoDate(long newVal)
    {
        setTbeTaxNoDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbeTaxNoDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeTaxNoDateModified()
    {
        return tbeTaxNoDateIsModified;
    }

    /**
     * Determines if the tbeTaxNoDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeTaxNoDateInitialized()
    {
        return tbeTaxNoDateIsInitialized;
    }

    /**
     * Getter method for tbeTaxNo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_tax_no</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeTaxNo
     */
    public String getTbeTaxNo()
    {
        return tbeTaxNo;
    }

    /**
     * Setter method for tbeTaxNo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeTaxNo
     */
    public void setTbeTaxNo(String newVal)
    {
        if ((newVal != null && tbeTaxNo != null && (newVal.compareTo(tbeTaxNo) == 0)) ||
            (newVal == null && tbeTaxNo == null && tbeTaxNoIsInitialized)) {
            return;
        }
        tbeTaxNo = newVal;
        tbeTaxNoIsModified = true;
        tbeTaxNoIsInitialized = true;
    }

    /**
     * Determines if the tbeTaxNo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeTaxNoModified()
    {
        return tbeTaxNoIsModified;
    }

    /**
     * Determines if the tbeTaxNo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeTaxNoInitialized()
    {
        return tbeTaxNoIsInitialized;
    }

    /**
     * Getter method for tbeIdNo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_id_no</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeIdNo
     */
    public String getTbeIdNo()
    {
        return tbeIdNo;
    }

    /**
     * Setter method for tbeIdNo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeIdNo
     */
    public void setTbeIdNo(String newVal)
    {
        if ((newVal != null && tbeIdNo != null && (newVal.compareTo(tbeIdNo) == 0)) ||
            (newVal == null && tbeIdNo == null && tbeIdNoIsInitialized)) {
            return;
        }
        tbeIdNo = newVal;
        tbeIdNoIsModified = true;
        tbeIdNoIsInitialized = true;
    }

    /**
     * Determines if the tbeIdNo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdNoModified()
    {
        return tbeIdNoIsModified;
    }

    /**
     * Determines if the tbeIdNo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdNoInitialized()
    {
        return tbeIdNoIsInitialized;
    }

    /**
     * Getter method for tbePhotoFileName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_photo_file_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbePhotoFileName
     */
    public String getTbePhotoFileName()
    {
        return tbePhotoFileName;
    }

    /**
     * Setter method for tbePhotoFileName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbePhotoFileName
     */
    public void setTbePhotoFileName(String newVal)
    {
        if ((newVal != null && tbePhotoFileName != null && (newVal.compareTo(tbePhotoFileName) == 0)) ||
            (newVal == null && tbePhotoFileName == null && tbePhotoFileNameIsInitialized)) {
            return;
        }
        tbePhotoFileName = newVal;
        tbePhotoFileNameIsModified = true;
        tbePhotoFileNameIsInitialized = true;
    }

    /**
     * Determines if the tbePhotoFileName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbePhotoFileNameModified()
    {
        return tbePhotoFileNameIsModified;
    }

    /**
     * Determines if the tbePhotoFileName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbePhotoFileNameInitialized()
    {
        return tbePhotoFileNameIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeNickName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_nick_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeNickName
     */
    public String getTbeNickName()
    {
        return tbeNickName;
    }

    /**
     * Setter method for tbeNickName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeNickName
     */
    public void setTbeNickName(String newVal)
    {
        if ((newVal != null && tbeNickName != null && (newVal.compareTo(tbeNickName) == 0)) ||
            (newVal == null && tbeNickName == null && tbeNickNameIsInitialized)) {
            return;
        }
        tbeNickName = newVal;
        tbeNickNameIsModified = true;
        tbeNickNameIsInitialized = true;
    }

    /**
     * Determines if the tbeNickName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNickNameModified()
    {
        return tbeNickNameIsModified;
    }

    /**
     * Determines if the tbeNickName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNickNameInitialized()
    {
        return tbeNickNameIsInitialized;
    }

    /**
     * Getter method for tbeLastName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_last_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeLastName
     */
    public String getTbeLastName()
    {
        return tbeLastName;
    }

    /**
     * Setter method for tbeLastName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeLastName
     */
    public void setTbeLastName(String newVal)
    {
        if ((newVal != null && tbeLastName != null && (newVal.compareTo(tbeLastName) == 0)) ||
            (newVal == null && tbeLastName == null && tbeLastNameIsInitialized)) {
            return;
        }
        tbeLastName = newVal;
        tbeLastNameIsModified = true;
        tbeLastNameIsInitialized = true;
    }

    /**
     * Determines if the tbeLastName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeLastNameModified()
    {
        return tbeLastNameIsModified;
    }

    /**
     * Determines if the tbeLastName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeLastNameInitialized()
    {
        return tbeLastNameIsInitialized;
    }

    /**
     * Getter method for tbeMiddleName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_middle_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeMiddleName
     */
    public String getTbeMiddleName()
    {
        return tbeMiddleName;
    }

    /**
     * Setter method for tbeMiddleName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeMiddleName
     */
    public void setTbeMiddleName(String newVal)
    {
        if ((newVal != null && tbeMiddleName != null && (newVal.compareTo(tbeMiddleName) == 0)) ||
            (newVal == null && tbeMiddleName == null && tbeMiddleNameIsInitialized)) {
            return;
        }
        tbeMiddleName = newVal;
        tbeMiddleNameIsModified = true;
        tbeMiddleNameIsInitialized = true;
    }

    /**
     * Determines if the tbeMiddleName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeMiddleNameModified()
    {
        return tbeMiddleNameIsModified;
    }

    /**
     * Determines if the tbeMiddleName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeMiddleNameInitialized()
    {
        return tbeMiddleNameIsInitialized;
    }

    /**
     * Getter method for tbeFirstName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_first_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeFirstName
     */
    public String getTbeFirstName()
    {
        return tbeFirstName;
    }

    /**
     * Setter method for tbeFirstName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeFirstName
     */
    public void setTbeFirstName(String newVal)
    {
        if ((newVal != null && tbeFirstName != null && (newVal.compareTo(tbeFirstName) == 0)) ||
            (newVal == null && tbeFirstName == null && tbeFirstNameIsInitialized)) {
            return;
        }
        tbeFirstName = newVal;
        tbeFirstNameIsModified = true;
        tbeFirstNameIsInitialized = true;
    }

    /**
     * Determines if the tbeFirstName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeFirstNameModified()
    {
        return tbeFirstNameIsModified;
    }

    /**
     * Determines if the tbeFirstName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeFirstNameInitialized()
    {
        return tbeFirstNameIsInitialized;
    }

    /**
     * Getter method for tbeEmail.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_email</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEmail
     */
    public String getTbeEmail()
    {
        return tbeEmail;
    }

    /**
     * Setter method for tbeEmail.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEmail
     */
    public void setTbeEmail(String newVal)
    {
        if ((newVal != null && tbeEmail != null && (newVal.compareTo(tbeEmail) == 0)) ||
            (newVal == null && tbeEmail == null && tbeEmailIsInitialized)) {
            return;
        }
        tbeEmail = newVal;
        tbeEmailIsModified = true;
        tbeEmailIsInitialized = true;
    }

    /**
     * Determines if the tbeEmail has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEmailModified()
    {
        return tbeEmailIsModified;
    }

    /**
     * Determines if the tbeEmail has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEmailInitialized()
    {
        return tbeEmailIsInitialized;
    }

    /**
     * Getter method for tbeEmployeeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_employee_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEmployeeId
     */
    public String getTbeEmployeeId()
    {
        return tbeEmployeeId;
    }

    /**
     * Setter method for tbeEmployeeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEmployeeId
     */
    public void setTbeEmployeeId(String newVal)
    {
        if ((newVal != null && tbeEmployeeId != null && (newVal.compareTo(tbeEmployeeId) == 0)) ||
            (newVal == null && tbeEmployeeId == null && tbeEmployeeIdIsInitialized)) {
            return;
        }
        tbeEmployeeId = newVal;
        tbeEmployeeIdIsModified = true;
        tbeEmployeeIdIsInitialized = true;
    }

    /**
     * Determines if the tbeEmployeeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEmployeeIdModified()
    {
        return tbeEmployeeIdIsModified;
    }

    /**
     * Determines if the tbeEmployeeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEmployeeIdInitialized()
    {
        return tbeEmployeeIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee.tbe_id</li>
     * <li> imported key: rpt_tb_attendance.tbe_id</li>
     * <li> imported key: tb_assigned_education.tbemp_id</li>
     * <li> imported key: tb_assigned_languages.tbe_id</li>
     * <li> imported key: tb_assigned_leaves.tbe_id</li>
     * <li> imported key: tb_assigned_licenses.tbe_id</li>
     * <li> imported key: tb_assigned_loan.tbe_id</li>
     * <li> imported key: tb_assigned_skills.tbe_id</li>
     * <li> imported key: tb_attendance.tbe_id</li>
     * <li> imported key: tb_company_property.tbe_id</li>
     * <li> imported key: tb_contact_details.tbe_id</li>
     * <li> imported key: tb_dependents.tbe_id</li>
     * <li> imported key: tb_emergency_contact.tbe_id</li>
     * <li> imported key: tb_employee_ptt.tbe_id</li>
     * <li> imported key: tb_employee_salary.tbe_id</li>
     * <li> imported key: tb_employee_shift.tbe_id</li>
     * <li> imported key: tb_immigration.tbe_id</li>
     * <li> imported key: tb_job.tbe_id</li>
     * <li> imported key: tb_kpi.tbe_Id</li>
     * <li> imported key: tb_kpi_assign.tbka_spv_id</li>
     * <li> imported key: tb_kpi_assign.tbe_id</li>
     * <li> imported key: tb_login.tbe_id</li>
     * <li> imported key: tb_pph.tbe_id</li>
     * <li> imported key: tb_project_employee.tbe_id</li>
     * <li> imported key: tb_report_to.tbe_id</li>
     * <li> imported key: tb_report_to.tbrt_spv</li>
     * <li> imported key: tb_timesheet.tbe_id</li>
     * <li> imported key: tb_vacancy.tbe_id</li>
     * <li> imported key: tb_work_experience.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /** The TbNationality referenced by this bean. */
    private TbNationalityBean referencedTbNationality;
    /** Getter method for TbNationalityBean. */
    public TbNationalityBean getTbNationalityBean() {
        return this.referencedTbNationality;
    }
    /** Setter method for TbNationalityBean. */
    public void setTbNationalityBean(TbNationalityBean reference) {
        this.referencedTbNationality = reference;
    }
    
    /** The TbEthnicRaces referenced by this bean. */
    private TbEthnicRacesBean referencedTbEthnicRaces;
    /** Getter method for TbEthnicRacesBean. */
    public TbEthnicRacesBean getTbEthnicRacesBean() {
        return this.referencedTbEthnicRaces;
    }
    /** Setter method for TbEthnicRacesBean. */
    public void setTbEthnicRacesBean(TbEthnicRacesBean reference) {
        this.referencedTbEthnicRaces = reference;
    }
    
    /** The TbPtkp referenced by this bean. */
    private TbPtkpBean referencedTbPtkp;
    /** Getter method for TbPtkpBean. */
    public TbPtkpBean getTbPtkpBean() {
        return this.referencedTbPtkp;
    }
    /** Setter method for TbPtkpBean. */
    public void setTbPtkpBean(TbPtkpBean reference) {
        this.referencedTbPtkp = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbptkpIdIsModified 		|| tberIdIsModified  		|| tbnIdIsModified  		|| tbeJoinedDateIsModified  		|| tbeStatusIsModified  		|| tbeDriverLicenseExpiryIsModified  		|| tbePhoneIsModified  		|| tbeMobileIsModified  		|| tbeDriverLicenseNoIsModified  		|| tbeGenderIsModified  		|| tbeSmokerIsModified  		|| tbeMaritalStatusIsModified  		|| tbeDobIsModified  		|| tbeTaxNoDateIsModified  		|| tbeTaxNoIsModified  		|| tbeIdNoIsModified  		|| tbePhotoFileNameIsModified  		|| tbeNameIsModified  		|| tbeNickNameIsModified  		|| tbeLastNameIsModified  		|| tbeMiddleNameIsModified  		|| tbeFirstNameIsModified  		|| tbeEmailIsModified  		|| tbeEmployeeIdIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbptkpIdIsModified = false;
        tberIdIsModified = false;
        tbnIdIsModified = false;
        tbeJoinedDateIsModified = false;
        tbeStatusIsModified = false;
        tbeDriverLicenseExpiryIsModified = false;
        tbePhoneIsModified = false;
        tbeMobileIsModified = false;
        tbeDriverLicenseNoIsModified = false;
        tbeGenderIsModified = false;
        tbeSmokerIsModified = false;
        tbeMaritalStatusIsModified = false;
        tbeDobIsModified = false;
        tbeTaxNoDateIsModified = false;
        tbeTaxNoIsModified = false;
        tbeIdNoIsModified = false;
        tbePhotoFileNameIsModified = false;
        tbeNameIsModified = false;
        tbeNickNameIsModified = false;
        tbeLastNameIsModified = false;
        tbeMiddleNameIsModified = false;
        tbeFirstNameIsModified = false;
        tbeEmailIsModified = false;
        tbeEmployeeIdIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbEmployeeBean bean)
    {
        setTbptkpId(bean.getTbptkpId());
        setTberId(bean.getTberId());
        setTbnId(bean.getTbnId());
        setTbeJoinedDate(bean.getTbeJoinedDate());
        setTbeStatus(bean.getTbeStatus());
        setTbeDriverLicenseExpiry(bean.getTbeDriverLicenseExpiry());
        setTbePhone(bean.getTbePhone());
        setTbeMobile(bean.getTbeMobile());
        setTbeDriverLicenseNo(bean.getTbeDriverLicenseNo());
        setTbeGender(bean.getTbeGender());
        setTbeSmoker(bean.getTbeSmoker());
        setTbeMaritalStatus(bean.getTbeMaritalStatus());
        setTbeDob(bean.getTbeDob());
        setTbeTaxNoDate(bean.getTbeTaxNoDate());
        setTbeTaxNo(bean.getTbeTaxNo());
        setTbeIdNo(bean.getTbeIdNo());
        setTbePhotoFileName(bean.getTbePhotoFileName());
        setTbeName(bean.getTbeName());
        setTbeNickName(bean.getTbeNickName());
        setTbeLastName(bean.getTbeLastName());
        setTbeMiddleName(bean.getTbeMiddleName());
        setTbeFirstName(bean.getTbeFirstName());
        setTbeEmail(bean.getTbeEmail());
        setTbeEmployeeId(bean.getTbeEmployeeId());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbptkp_id", getTbptkpId() == null ? "" : getTbptkpId().toString());
        dictionnary.put("tber_id", getTberId() == null ? "" : getTberId().toString());
        dictionnary.put("tbn_id", getTbnId() == null ? "" : getTbnId().toString());
        dictionnary.put("tbe_joined_date", getTbeJoinedDate() == null ? "" : getTbeJoinedDate().toString());
        dictionnary.put("tbe_status", getTbeStatus() == null ? "" : getTbeStatus().toString());
        dictionnary.put("tbe_driver_license_expiry", getTbeDriverLicenseExpiry() == null ? "" : getTbeDriverLicenseExpiry().toString());
        dictionnary.put("tbe_phone", getTbePhone() == null ? "" : getTbePhone().toString());
        dictionnary.put("tbe_mobile", getTbeMobile() == null ? "" : getTbeMobile().toString());
        dictionnary.put("tbe_driver_license_no", getTbeDriverLicenseNo() == null ? "" : getTbeDriverLicenseNo().toString());
        dictionnary.put("tbe_gender", getTbeGender() == null ? "" : getTbeGender().toString());
        dictionnary.put("tbe_smoker", getTbeSmoker() == null ? "" : getTbeSmoker().toString());
        dictionnary.put("tbe_marital_status", getTbeMaritalStatus() == null ? "" : getTbeMaritalStatus().toString());
        dictionnary.put("tbe_dob", getTbeDob() == null ? "" : getTbeDob().toString());
        dictionnary.put("tbe_tax_no_date", getTbeTaxNoDate() == null ? "" : getTbeTaxNoDate().toString());
        dictionnary.put("tbe_tax_no", getTbeTaxNo() == null ? "" : getTbeTaxNo().toString());
        dictionnary.put("tbe_id_no", getTbeIdNo() == null ? "" : getTbeIdNo().toString());
        dictionnary.put("tbe_photo_file_name", getTbePhotoFileName() == null ? "" : getTbePhotoFileName().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_nick_name", getTbeNickName() == null ? "" : getTbeNickName().toString());
        dictionnary.put("tbe_last_name", getTbeLastName() == null ? "" : getTbeLastName().toString());
        dictionnary.put("tbe_middle_name", getTbeMiddleName() == null ? "" : getTbeMiddleName().toString());
        dictionnary.put("tbe_first_name", getTbeFirstName() == null ? "" : getTbeFirstName().toString());
        dictionnary.put("tbe_email", getTbeEmail() == null ? "" : getTbeEmail().toString());
        dictionnary.put("tbe_employee_id", getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbptkp_id".equalsIgnoreCase(column) || "tbptkpId".equalsIgnoreCase(column)) {
            return getTbptkpId() == null ? "" : getTbptkpId().toString();
        } else if ("tber_id".equalsIgnoreCase(column) || "tberId".equalsIgnoreCase(column)) {
            return getTberId() == null ? "" : getTberId().toString();
        } else if ("tbn_id".equalsIgnoreCase(column) || "tbnId".equalsIgnoreCase(column)) {
            return getTbnId() == null ? "" : getTbnId().toString();
        } else if ("tbe_joined_date".equalsIgnoreCase(column) || "tbeJoinedDate".equalsIgnoreCase(column)) {
            return getTbeJoinedDate() == null ? "" : getTbeJoinedDate().toString();
        } else if ("tbe_status".equalsIgnoreCase(column) || "tbeStatus".equalsIgnoreCase(column)) {
            return getTbeStatus() == null ? "" : getTbeStatus().toString();
        } else if ("tbe_driver_license_expiry".equalsIgnoreCase(column) || "tbeDriverLicenseExpiry".equalsIgnoreCase(column)) {
            return getTbeDriverLicenseExpiry() == null ? "" : getTbeDriverLicenseExpiry().toString();
        } else if ("tbe_phone".equalsIgnoreCase(column) || "tbePhone".equalsIgnoreCase(column)) {
            return getTbePhone() == null ? "" : getTbePhone().toString();
        } else if ("tbe_mobile".equalsIgnoreCase(column) || "tbeMobile".equalsIgnoreCase(column)) {
            return getTbeMobile() == null ? "" : getTbeMobile().toString();
        } else if ("tbe_driver_license_no".equalsIgnoreCase(column) || "tbeDriverLicenseNo".equalsIgnoreCase(column)) {
            return getTbeDriverLicenseNo() == null ? "" : getTbeDriverLicenseNo().toString();
        } else if ("tbe_gender".equalsIgnoreCase(column) || "tbeGender".equalsIgnoreCase(column)) {
            return getTbeGender() == null ? "" : getTbeGender().toString();
        } else if ("tbe_smoker".equalsIgnoreCase(column) || "tbeSmoker".equalsIgnoreCase(column)) {
            return getTbeSmoker() == null ? "" : getTbeSmoker().toString();
        } else if ("tbe_marital_status".equalsIgnoreCase(column) || "tbeMaritalStatus".equalsIgnoreCase(column)) {
            return getTbeMaritalStatus() == null ? "" : getTbeMaritalStatus().toString();
        } else if ("tbe_dob".equalsIgnoreCase(column) || "tbeDob".equalsIgnoreCase(column)) {
            return getTbeDob() == null ? "" : getTbeDob().toString();
        } else if ("tbe_tax_no_date".equalsIgnoreCase(column) || "tbeTaxNoDate".equalsIgnoreCase(column)) {
            return getTbeTaxNoDate() == null ? "" : getTbeTaxNoDate().toString();
        } else if ("tbe_tax_no".equalsIgnoreCase(column) || "tbeTaxNo".equalsIgnoreCase(column)) {
            return getTbeTaxNo() == null ? "" : getTbeTaxNo().toString();
        } else if ("tbe_id_no".equalsIgnoreCase(column) || "tbeIdNo".equalsIgnoreCase(column)) {
            return getTbeIdNo() == null ? "" : getTbeIdNo().toString();
        } else if ("tbe_photo_file_name".equalsIgnoreCase(column) || "tbePhotoFileName".equalsIgnoreCase(column)) {
            return getTbePhotoFileName() == null ? "" : getTbePhotoFileName().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_nick_name".equalsIgnoreCase(column) || "tbeNickName".equalsIgnoreCase(column)) {
            return getTbeNickName() == null ? "" : getTbeNickName().toString();
        } else if ("tbe_last_name".equalsIgnoreCase(column) || "tbeLastName".equalsIgnoreCase(column)) {
            return getTbeLastName() == null ? "" : getTbeLastName().toString();
        } else if ("tbe_middle_name".equalsIgnoreCase(column) || "tbeMiddleName".equalsIgnoreCase(column)) {
            return getTbeMiddleName() == null ? "" : getTbeMiddleName().toString();
        } else if ("tbe_first_name".equalsIgnoreCase(column) || "tbeFirstName".equalsIgnoreCase(column)) {
            return getTbeFirstName() == null ? "" : getTbeFirstName().toString();
        } else if ("tbe_email".equalsIgnoreCase(column) || "tbeEmail".equalsIgnoreCase(column)) {
            return getTbeEmail() == null ? "" : getTbeEmail().toString();
        } else if ("tbe_employee_id".equalsIgnoreCase(column) || "tbeEmployeeId".equalsIgnoreCase(column)) {
            return getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbEmployeeBean)) {
            return false;
        }

		TbEmployeeBean obj = (TbEmployeeBean) object;
		return new EqualsBuilder()
            .append(getTbptkpId(), obj.getTbptkpId())
            .append(getTberId(), obj.getTberId())
            .append(getTbnId(), obj.getTbnId())
            .append(getTbeJoinedDate(), obj.getTbeJoinedDate())
            .append(getTbeStatus(), obj.getTbeStatus())
            .append(getTbeDriverLicenseExpiry(), obj.getTbeDriverLicenseExpiry())
            .append(getTbePhone(), obj.getTbePhone())
            .append(getTbeMobile(), obj.getTbeMobile())
            .append(getTbeDriverLicenseNo(), obj.getTbeDriverLicenseNo())
            .append(getTbeGender(), obj.getTbeGender())
            .append(getTbeSmoker(), obj.getTbeSmoker())
            .append(getTbeMaritalStatus(), obj.getTbeMaritalStatus())
            .append(getTbeDob(), obj.getTbeDob())
            .append(getTbeTaxNoDate(), obj.getTbeTaxNoDate())
            .append(getTbeTaxNo(), obj.getTbeTaxNo())
            .append(getTbeIdNo(), obj.getTbeIdNo())
            .append(getTbePhotoFileName(), obj.getTbePhotoFileName())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeNickName(), obj.getTbeNickName())
            .append(getTbeLastName(), obj.getTbeLastName())
            .append(getTbeMiddleName(), obj.getTbeMiddleName())
            .append(getTbeFirstName(), obj.getTbeFirstName())
            .append(getTbeEmail(), obj.getTbeEmail())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbptkpId())
            .append(getTberId())
            .append(getTbnId())
            .append(getTbeJoinedDate())
            .append(getTbeStatus())
            .append(getTbeDriverLicenseExpiry())
            .append(getTbePhone())
            .append(getTbeMobile())
            .append(getTbeDriverLicenseNo())
            .append(getTbeGender())
            .append(getTbeSmoker())
            .append(getTbeMaritalStatus())
            .append(getTbeDob())
            .append(getTbeTaxNoDate())
            .append(getTbeTaxNo())
            .append(getTbeIdNo())
            .append(getTbePhotoFileName())
            .append(getTbeName())
            .append(getTbeNickName())
            .append(getTbeLastName())
            .append(getTbeMiddleName())
            .append(getTbeFirstName())
            .append(getTbeEmail())
            .append(getTbeEmployeeId())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbptkp_id", getTbptkpId())
            .append("tber_id", getTberId())
            .append("tbn_id", getTbnId())
            .append("tbe_joined_date", getTbeJoinedDate())
            .append("tbe_status", getTbeStatus())
            .append("tbe_driver_license_expiry", getTbeDriverLicenseExpiry())
            .append("tbe_phone", getTbePhone())
            .append("tbe_mobile", getTbeMobile())
            .append("tbe_driver_license_no", getTbeDriverLicenseNo())
            .append("tbe_gender", getTbeGender())
            .append("tbe_smoker", getTbeSmoker())
            .append("tbe_marital_status", getTbeMaritalStatus())
            .append("tbe_dob", getTbeDob())
            .append("tbe_tax_no_date", getTbeTaxNoDate())
            .append("tbe_tax_no", getTbeTaxNo())
            .append("tbe_id_no", getTbeIdNo())
            .append("tbe_photo_file_name", getTbePhotoFileName())
            .append("tbe_name", getTbeName())
            .append("tbe_nick_name", getTbeNickName())
            .append("tbe_last_name", getTbeLastName())
            .append("tbe_middle_name", getTbeMiddleName())
            .append("tbe_first_name", getTbeFirstName())
            .append("tbe_email", getTbeEmail())
            .append("tbe_employee_id", getTbeEmployeeId())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbEmployeeBean obj = (TbEmployeeBean) object;
        return new CompareToBuilder()
            .append(getTbptkpId(), obj.getTbptkpId())
            .append(getTberId(), obj.getTberId())
            .append(getTbnId(), obj.getTbnId())
            .append(getTbeJoinedDate(), obj.getTbeJoinedDate())
            .append(getTbeStatus(), obj.getTbeStatus())
            .append(getTbeDriverLicenseExpiry(), obj.getTbeDriverLicenseExpiry())
            .append(getTbePhone(), obj.getTbePhone())
            .append(getTbeMobile(), obj.getTbeMobile())
            .append(getTbeDriverLicenseNo(), obj.getTbeDriverLicenseNo())
            .append(getTbeGender(), obj.getTbeGender())
            .append(getTbeSmoker(), obj.getTbeSmoker())
            .append(getTbeMaritalStatus(), obj.getTbeMaritalStatus())
            .append(getTbeDob(), obj.getTbeDob())
            .append(getTbeTaxNoDate(), obj.getTbeTaxNoDate())
            .append(getTbeTaxNo(), obj.getTbeTaxNo())
            .append(getTbeIdNo(), obj.getTbeIdNo())
            .append(getTbePhotoFileName(), obj.getTbePhotoFileName())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeNickName(), obj.getTbeNickName())
            .append(getTbeLastName(), obj.getTbeLastName())
            .append(getTbeMiddleName(), obj.getTbeMiddleName())
            .append(getTbeFirstName(), obj.getTbeFirstName())
            .append(getTbeEmail(), obj.getTbeEmail())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
