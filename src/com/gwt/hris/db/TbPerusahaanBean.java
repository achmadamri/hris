// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbPerusahaanBean is a mapping of tb_perusahaan Table.
 * @author sql2java
*/
public class TbPerusahaanBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 1548489222970005868L;
	
    private Integer tbpLocalCurrencyId;

    private boolean tbpLocalCurrencyIdIsModified = false;
    private boolean tbpLocalCurrencyIdIsInitialized = false;

    private Double tbpJkm;

    private boolean tbpJkmIsModified = false;
    private boolean tbpJkmIsInitialized = false;

    private Double tbpJkk;

    private boolean tbpJkkIsModified = false;
    private boolean tbpJkkIsInitialized = false;

    private String tbpComments;

    private boolean tbpCommentsIsModified = false;
    private boolean tbpCommentsIsInitialized = false;

    private String tbpZipCode;

    private boolean tbpZipCodeIsModified = false;
    private boolean tbpZipCodeIsInitialized = false;

    private String tbpProvince;

    private boolean tbpProvinceIsModified = false;
    private boolean tbpProvinceIsInitialized = false;

    private String tbpCity;

    private boolean tbpCityIsModified = false;
    private boolean tbpCityIsInitialized = false;

    private String tbpAddress1;

    private boolean tbpAddress1IsModified = false;
    private boolean tbpAddress1IsInitialized = false;

    private Integer fkTbnId;

    private boolean fkTbnIdIsModified = false;
    private boolean fkTbnIdIsInitialized = false;

    private String tbpFax;

    private boolean tbpFaxIsModified = false;
    private boolean tbpFaxIsInitialized = false;

    private String tbpPhone;

    private boolean tbpPhoneIsModified = false;
    private boolean tbpPhoneIsInitialized = false;

    private String tbpTaxId;

    private boolean tbpTaxIdIsModified = false;
    private boolean tbpTaxIdIsInitialized = false;

    private String tbpName;

    private boolean tbpNameIsModified = false;
    private boolean tbpNameIsInitialized = false;

    private String tbpPerusahaanId;

    private boolean tbpPerusahaanIdIsModified = false;
    private boolean tbpPerusahaanIdIsInitialized = false;

    private Integer tbpId;

    private boolean tbpIdIsModified = false;
    private boolean tbpIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbPerusahaanBean is via the createTbPerusahaanBean method in TbPerusahaanManager or
     * via the factory class TbPerusahaanFactory create method
     */
    protected TbPerusahaanBean()
    {
    }

    /**
     * Getter method for tbpLocalCurrencyId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_local_currency_id</li>
     * <li> foreign key: tb_currency.tbc_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpLocalCurrencyId
     */
    public Integer getTbpLocalCurrencyId()
    {
        return tbpLocalCurrencyId;
    }

    /**
     * Setter method for tbpLocalCurrencyId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpLocalCurrencyId
     */
    public void setTbpLocalCurrencyId(Integer newVal)
    {
        if ((newVal != null && tbpLocalCurrencyId != null && (newVal.compareTo(tbpLocalCurrencyId) == 0)) ||
            (newVal == null && tbpLocalCurrencyId == null && tbpLocalCurrencyIdIsInitialized)) {
            return;
        }
        tbpLocalCurrencyId = newVal;
        tbpLocalCurrencyIdIsModified = true;
        tbpLocalCurrencyIdIsInitialized = true;
    }

    /**
     * Setter method for tbpLocalCurrencyId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpLocalCurrencyId
     */
    public void setTbpLocalCurrencyId(int newVal)
    {
        setTbpLocalCurrencyId(new Integer(newVal));
    }

    /**
     * Determines if the tbpLocalCurrencyId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpLocalCurrencyIdModified()
    {
        return tbpLocalCurrencyIdIsModified;
    }

    /**
     * Determines if the tbpLocalCurrencyId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpLocalCurrencyIdInitialized()
    {
        return tbpLocalCurrencyIdIsInitialized;
    }

    /**
     * Getter method for tbpJkm.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_jkm</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpJkm
     */
    public Double getTbpJkm()
    {
        return tbpJkm;
    }

    /**
     * Setter method for tbpJkm.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpJkm
     */
    public void setTbpJkm(Double newVal)
    {
        if ((newVal != null && tbpJkm != null && (newVal.compareTo(tbpJkm) == 0)) ||
            (newVal == null && tbpJkm == null && tbpJkmIsInitialized)) {
            return;
        }
        tbpJkm = newVal;
        tbpJkmIsModified = true;
        tbpJkmIsInitialized = true;
    }

    /**
     * Setter method for tbpJkm.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpJkm
     */
    public void setTbpJkm(double newVal)
    {
        setTbpJkm(new Double(newVal));
    }

    /**
     * Determines if the tbpJkm has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpJkmModified()
    {
        return tbpJkmIsModified;
    }

    /**
     * Determines if the tbpJkm has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpJkmInitialized()
    {
        return tbpJkmIsInitialized;
    }

    /**
     * Getter method for tbpJkk.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_jkk</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpJkk
     */
    public Double getTbpJkk()
    {
        return tbpJkk;
    }

    /**
     * Setter method for tbpJkk.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpJkk
     */
    public void setTbpJkk(Double newVal)
    {
        if ((newVal != null && tbpJkk != null && (newVal.compareTo(tbpJkk) == 0)) ||
            (newVal == null && tbpJkk == null && tbpJkkIsInitialized)) {
            return;
        }
        tbpJkk = newVal;
        tbpJkkIsModified = true;
        tbpJkkIsInitialized = true;
    }

    /**
     * Setter method for tbpJkk.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpJkk
     */
    public void setTbpJkk(double newVal)
    {
        setTbpJkk(new Double(newVal));
    }

    /**
     * Determines if the tbpJkk has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpJkkModified()
    {
        return tbpJkkIsModified;
    }

    /**
     * Determines if the tbpJkk has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpJkkInitialized()
    {
        return tbpJkkIsInitialized;
    }

    /**
     * Getter method for tbpComments.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_comments</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpComments
     */
    public String getTbpComments()
    {
        return tbpComments;
    }

    /**
     * Setter method for tbpComments.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpComments
     */
    public void setTbpComments(String newVal)
    {
        if ((newVal != null && tbpComments != null && (newVal.compareTo(tbpComments) == 0)) ||
            (newVal == null && tbpComments == null && tbpCommentsIsInitialized)) {
            return;
        }
        tbpComments = newVal;
        tbpCommentsIsModified = true;
        tbpCommentsIsInitialized = true;
    }

    /**
     * Determines if the tbpComments has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpCommentsModified()
    {
        return tbpCommentsIsModified;
    }

    /**
     * Determines if the tbpComments has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpCommentsInitialized()
    {
        return tbpCommentsIsInitialized;
    }

    /**
     * Getter method for tbpZipCode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_zip_code</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpZipCode
     */
    public String getTbpZipCode()
    {
        return tbpZipCode;
    }

    /**
     * Setter method for tbpZipCode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpZipCode
     */
    public void setTbpZipCode(String newVal)
    {
        if ((newVal != null && tbpZipCode != null && (newVal.compareTo(tbpZipCode) == 0)) ||
            (newVal == null && tbpZipCode == null && tbpZipCodeIsInitialized)) {
            return;
        }
        tbpZipCode = newVal;
        tbpZipCodeIsModified = true;
        tbpZipCodeIsInitialized = true;
    }

    /**
     * Determines if the tbpZipCode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpZipCodeModified()
    {
        return tbpZipCodeIsModified;
    }

    /**
     * Determines if the tbpZipCode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpZipCodeInitialized()
    {
        return tbpZipCodeIsInitialized;
    }

    /**
     * Getter method for tbpProvince.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_province</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpProvince
     */
    public String getTbpProvince()
    {
        return tbpProvince;
    }

    /**
     * Setter method for tbpProvince.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpProvince
     */
    public void setTbpProvince(String newVal)
    {
        if ((newVal != null && tbpProvince != null && (newVal.compareTo(tbpProvince) == 0)) ||
            (newVal == null && tbpProvince == null && tbpProvinceIsInitialized)) {
            return;
        }
        tbpProvince = newVal;
        tbpProvinceIsModified = true;
        tbpProvinceIsInitialized = true;
    }

    /**
     * Determines if the tbpProvince has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpProvinceModified()
    {
        return tbpProvinceIsModified;
    }

    /**
     * Determines if the tbpProvince has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpProvinceInitialized()
    {
        return tbpProvinceIsInitialized;
    }

    /**
     * Getter method for tbpCity.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_city</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpCity
     */
    public String getTbpCity()
    {
        return tbpCity;
    }

    /**
     * Setter method for tbpCity.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpCity
     */
    public void setTbpCity(String newVal)
    {
        if ((newVal != null && tbpCity != null && (newVal.compareTo(tbpCity) == 0)) ||
            (newVal == null && tbpCity == null && tbpCityIsInitialized)) {
            return;
        }
        tbpCity = newVal;
        tbpCityIsModified = true;
        tbpCityIsInitialized = true;
    }

    /**
     * Determines if the tbpCity has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpCityModified()
    {
        return tbpCityIsModified;
    }

    /**
     * Determines if the tbpCity has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpCityInitialized()
    {
        return tbpCityIsInitialized;
    }

    /**
     * Getter method for tbpAddress1.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_address1</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpAddress1
     */
    public String getTbpAddress1()
    {
        return tbpAddress1;
    }

    /**
     * Setter method for tbpAddress1.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpAddress1
     */
    public void setTbpAddress1(String newVal)
    {
        if ((newVal != null && tbpAddress1 != null && (newVal.compareTo(tbpAddress1) == 0)) ||
            (newVal == null && tbpAddress1 == null && tbpAddress1IsInitialized)) {
            return;
        }
        tbpAddress1 = newVal;
        tbpAddress1IsModified = true;
        tbpAddress1IsInitialized = true;
    }

    /**
     * Determines if the tbpAddress1 has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpAddress1Modified()
    {
        return tbpAddress1IsModified;
    }

    /**
     * Determines if the tbpAddress1 has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpAddress1Initialized()
    {
        return tbpAddress1IsInitialized;
    }

    /**
     * Getter method for fkTbnId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.fk_tbn_id</li>
     * <li> foreign key: tb_negara.tbn_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of fkTbnId
     */
    public Integer getFkTbnId()
    {
        return fkTbnId;
    }

    /**
     * Setter method for fkTbnId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fkTbnId
     */
    public void setFkTbnId(Integer newVal)
    {
        if ((newVal != null && fkTbnId != null && (newVal.compareTo(fkTbnId) == 0)) ||
            (newVal == null && fkTbnId == null && fkTbnIdIsInitialized)) {
            return;
        }
        fkTbnId = newVal;
        fkTbnIdIsModified = true;
        fkTbnIdIsInitialized = true;
    }

    /**
     * Setter method for fkTbnId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to fkTbnId
     */
    public void setFkTbnId(int newVal)
    {
        setFkTbnId(new Integer(newVal));
    }

    /**
     * Determines if the fkTbnId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFkTbnIdModified()
    {
        return fkTbnIdIsModified;
    }

    /**
     * Determines if the fkTbnId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFkTbnIdInitialized()
    {
        return fkTbnIdIsInitialized;
    }

    /**
     * Getter method for tbpFax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_fax</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpFax
     */
    public String getTbpFax()
    {
        return tbpFax;
    }

    /**
     * Setter method for tbpFax.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpFax
     */
    public void setTbpFax(String newVal)
    {
        if ((newVal != null && tbpFax != null && (newVal.compareTo(tbpFax) == 0)) ||
            (newVal == null && tbpFax == null && tbpFaxIsInitialized)) {
            return;
        }
        tbpFax = newVal;
        tbpFaxIsModified = true;
        tbpFaxIsInitialized = true;
    }

    /**
     * Determines if the tbpFax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpFaxModified()
    {
        return tbpFaxIsModified;
    }

    /**
     * Determines if the tbpFax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpFaxInitialized()
    {
        return tbpFaxIsInitialized;
    }

    /**
     * Getter method for tbpPhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_phone</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpPhone
     */
    public String getTbpPhone()
    {
        return tbpPhone;
    }

    /**
     * Setter method for tbpPhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpPhone
     */
    public void setTbpPhone(String newVal)
    {
        if ((newVal != null && tbpPhone != null && (newVal.compareTo(tbpPhone) == 0)) ||
            (newVal == null && tbpPhone == null && tbpPhoneIsInitialized)) {
            return;
        }
        tbpPhone = newVal;
        tbpPhoneIsModified = true;
        tbpPhoneIsInitialized = true;
    }

    /**
     * Determines if the tbpPhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpPhoneModified()
    {
        return tbpPhoneIsModified;
    }

    /**
     * Determines if the tbpPhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpPhoneInitialized()
    {
        return tbpPhoneIsInitialized;
    }

    /**
     * Getter method for tbpTaxId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_tax_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpTaxId
     */
    public String getTbpTaxId()
    {
        return tbpTaxId;
    }

    /**
     * Setter method for tbpTaxId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpTaxId
     */
    public void setTbpTaxId(String newVal)
    {
        if ((newVal != null && tbpTaxId != null && (newVal.compareTo(tbpTaxId) == 0)) ||
            (newVal == null && tbpTaxId == null && tbpTaxIdIsInitialized)) {
            return;
        }
        tbpTaxId = newVal;
        tbpTaxIdIsModified = true;
        tbpTaxIdIsInitialized = true;
    }

    /**
     * Determines if the tbpTaxId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpTaxIdModified()
    {
        return tbpTaxIdIsModified;
    }

    /**
     * Determines if the tbpTaxId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpTaxIdInitialized()
    {
        return tbpTaxIdIsInitialized;
    }

    /**
     * Getter method for tbpName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpName
     */
    public String getTbpName()
    {
        return tbpName;
    }

    /**
     * Setter method for tbpName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpName
     */
    public void setTbpName(String newVal)
    {
        if ((newVal != null && tbpName != null && (newVal.compareTo(tbpName) == 0)) ||
            (newVal == null && tbpName == null && tbpNameIsInitialized)) {
            return;
        }
        tbpName = newVal;
        tbpNameIsModified = true;
        tbpNameIsInitialized = true;
    }

    /**
     * Determines if the tbpName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpNameModified()
    {
        return tbpNameIsModified;
    }

    /**
     * Determines if the tbpName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpNameInitialized()
    {
        return tbpNameIsInitialized;
    }

    /**
     * Getter method for tbpPerusahaanId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_perusahaan_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpPerusahaanId
     */
    public String getTbpPerusahaanId()
    {
        return tbpPerusahaanId;
    }

    /**
     * Setter method for tbpPerusahaanId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpPerusahaanId
     */
    public void setTbpPerusahaanId(String newVal)
    {
        if ((newVal != null && tbpPerusahaanId != null && (newVal.compareTo(tbpPerusahaanId) == 0)) ||
            (newVal == null && tbpPerusahaanId == null && tbpPerusahaanIdIsInitialized)) {
            return;
        }
        tbpPerusahaanId = newVal;
        tbpPerusahaanIdIsModified = true;
        tbpPerusahaanIdIsInitialized = true;
    }

    /**
     * Determines if the tbpPerusahaanId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpPerusahaanIdModified()
    {
        return tbpPerusahaanIdIsModified;
    }

    /**
     * Determines if the tbpPerusahaanId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpPerusahaanIdInitialized()
    {
        return tbpPerusahaanIdIsInitialized;
    }

    /**
     * Getter method for tbpId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_perusahaan.tbp_id</li>
     * <li> imported key: tb_job.tbp_id</li>
     * <li> imported key: tb_location.tbp_id</li>
     * <li> imported key: tb_organization.tbp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpId
     */
    public Integer getTbpId()
    {
        return tbpId;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(Integer newVal)
    {
        if ((newVal != null && tbpId != null && (newVal.compareTo(tbpId) == 0)) ||
            (newVal == null && tbpId == null && tbpIdIsInitialized)) {
            return;
        }
        tbpId = newVal;
        tbpIdIsModified = true;
        tbpIdIsInitialized = true;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(int newVal)
    {
        setTbpId(new Integer(newVal));
    }

    /**
     * Determines if the tbpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpIdModified()
    {
        return tbpIdIsModified;
    }

    /**
     * Determines if the tbpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpIdInitialized()
    {
        return tbpIdIsInitialized;
    }

    /** The TbNegara referenced by this bean. */
    private TbNegaraBean referencedTbNegara;
    /** Getter method for TbNegaraBean. */
    public TbNegaraBean getTbNegaraBean() {
        return this.referencedTbNegara;
    }
    /** Setter method for TbNegaraBean. */
    public void setTbNegaraBean(TbNegaraBean reference) {
        this.referencedTbNegara = reference;
    }
    
    /** The TbCurrency referenced by this bean. */
    private TbCurrencyBean referencedTbCurrency;
    /** Getter method for TbCurrencyBean. */
    public TbCurrencyBean getTbCurrencyBean() {
        return this.referencedTbCurrency;
    }
    /** Setter method for TbCurrencyBean. */
    public void setTbCurrencyBean(TbCurrencyBean reference) {
        this.referencedTbCurrency = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbpLocalCurrencyIdIsModified 		|| tbpJkmIsModified  		|| tbpJkkIsModified  		|| tbpCommentsIsModified  		|| tbpZipCodeIsModified  		|| tbpProvinceIsModified  		|| tbpCityIsModified  		|| tbpAddress1IsModified  		|| fkTbnIdIsModified  		|| tbpFaxIsModified  		|| tbpPhoneIsModified  		|| tbpTaxIdIsModified  		|| tbpNameIsModified  		|| tbpPerusahaanIdIsModified  		|| tbpIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbpLocalCurrencyIdIsModified = false;
        tbpJkmIsModified = false;
        tbpJkkIsModified = false;
        tbpCommentsIsModified = false;
        tbpZipCodeIsModified = false;
        tbpProvinceIsModified = false;
        tbpCityIsModified = false;
        tbpAddress1IsModified = false;
        fkTbnIdIsModified = false;
        tbpFaxIsModified = false;
        tbpPhoneIsModified = false;
        tbpTaxIdIsModified = false;
        tbpNameIsModified = false;
        tbpPerusahaanIdIsModified = false;
        tbpIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbPerusahaanBean bean)
    {
        setTbpLocalCurrencyId(bean.getTbpLocalCurrencyId());
        setTbpJkm(bean.getTbpJkm());
        setTbpJkk(bean.getTbpJkk());
        setTbpComments(bean.getTbpComments());
        setTbpZipCode(bean.getTbpZipCode());
        setTbpProvince(bean.getTbpProvince());
        setTbpCity(bean.getTbpCity());
        setTbpAddress1(bean.getTbpAddress1());
        setFkTbnId(bean.getFkTbnId());
        setTbpFax(bean.getTbpFax());
        setTbpPhone(bean.getTbpPhone());
        setTbpTaxId(bean.getTbpTaxId());
        setTbpName(bean.getTbpName());
        setTbpPerusahaanId(bean.getTbpPerusahaanId());
        setTbpId(bean.getTbpId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbp_local_currency_id", getTbpLocalCurrencyId() == null ? "" : getTbpLocalCurrencyId().toString());
        dictionnary.put("tbp_jkm", getTbpJkm() == null ? "" : getTbpJkm().toString());
        dictionnary.put("tbp_jkk", getTbpJkk() == null ? "" : getTbpJkk().toString());
        dictionnary.put("tbp_comments", getTbpComments() == null ? "" : getTbpComments().toString());
        dictionnary.put("tbp_zip_code", getTbpZipCode() == null ? "" : getTbpZipCode().toString());
        dictionnary.put("tbp_province", getTbpProvince() == null ? "" : getTbpProvince().toString());
        dictionnary.put("tbp_city", getTbpCity() == null ? "" : getTbpCity().toString());
        dictionnary.put("tbp_address1", getTbpAddress1() == null ? "" : getTbpAddress1().toString());
        dictionnary.put("fk_tbn_id", getFkTbnId() == null ? "" : getFkTbnId().toString());
        dictionnary.put("tbp_fax", getTbpFax() == null ? "" : getTbpFax().toString());
        dictionnary.put("tbp_phone", getTbpPhone() == null ? "" : getTbpPhone().toString());
        dictionnary.put("tbp_tax_id", getTbpTaxId() == null ? "" : getTbpTaxId().toString());
        dictionnary.put("tbp_name", getTbpName() == null ? "" : getTbpName().toString());
        dictionnary.put("tbp_perusahaan_id", getTbpPerusahaanId() == null ? "" : getTbpPerusahaanId().toString());
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbp_local_currency_id".equalsIgnoreCase(column) || "tbpLocalCurrencyId".equalsIgnoreCase(column)) {
            return getTbpLocalCurrencyId() == null ? "" : getTbpLocalCurrencyId().toString();
        } else if ("tbp_jkm".equalsIgnoreCase(column) || "tbpJkm".equalsIgnoreCase(column)) {
            return getTbpJkm() == null ? "" : getTbpJkm().toString();
        } else if ("tbp_jkk".equalsIgnoreCase(column) || "tbpJkk".equalsIgnoreCase(column)) {
            return getTbpJkk() == null ? "" : getTbpJkk().toString();
        } else if ("tbp_comments".equalsIgnoreCase(column) || "tbpComments".equalsIgnoreCase(column)) {
            return getTbpComments() == null ? "" : getTbpComments().toString();
        } else if ("tbp_zip_code".equalsIgnoreCase(column) || "tbpZipCode".equalsIgnoreCase(column)) {
            return getTbpZipCode() == null ? "" : getTbpZipCode().toString();
        } else if ("tbp_province".equalsIgnoreCase(column) || "tbpProvince".equalsIgnoreCase(column)) {
            return getTbpProvince() == null ? "" : getTbpProvince().toString();
        } else if ("tbp_city".equalsIgnoreCase(column) || "tbpCity".equalsIgnoreCase(column)) {
            return getTbpCity() == null ? "" : getTbpCity().toString();
        } else if ("tbp_address1".equalsIgnoreCase(column) || "tbpAddress1".equalsIgnoreCase(column)) {
            return getTbpAddress1() == null ? "" : getTbpAddress1().toString();
        } else if ("fk_tbn_id".equalsIgnoreCase(column) || "fkTbnId".equalsIgnoreCase(column)) {
            return getFkTbnId() == null ? "" : getFkTbnId().toString();
        } else if ("tbp_fax".equalsIgnoreCase(column) || "tbpFax".equalsIgnoreCase(column)) {
            return getTbpFax() == null ? "" : getTbpFax().toString();
        } else if ("tbp_phone".equalsIgnoreCase(column) || "tbpPhone".equalsIgnoreCase(column)) {
            return getTbpPhone() == null ? "" : getTbpPhone().toString();
        } else if ("tbp_tax_id".equalsIgnoreCase(column) || "tbpTaxId".equalsIgnoreCase(column)) {
            return getTbpTaxId() == null ? "" : getTbpTaxId().toString();
        } else if ("tbp_name".equalsIgnoreCase(column) || "tbpName".equalsIgnoreCase(column)) {
            return getTbpName() == null ? "" : getTbpName().toString();
        } else if ("tbp_perusahaan_id".equalsIgnoreCase(column) || "tbpPerusahaanId".equalsIgnoreCase(column)) {
            return getTbpPerusahaanId() == null ? "" : getTbpPerusahaanId().toString();
        } else if ("tbp_id".equalsIgnoreCase(column) || "tbpId".equalsIgnoreCase(column)) {
            return getTbpId() == null ? "" : getTbpId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbPerusahaanBean)) {
            return false;
        }

		TbPerusahaanBean obj = (TbPerusahaanBean) object;
		return new EqualsBuilder()
            .append(getTbpLocalCurrencyId(), obj.getTbpLocalCurrencyId())
            .append(getTbpJkm(), obj.getTbpJkm())
            .append(getTbpJkk(), obj.getTbpJkk())
            .append(getTbpComments(), obj.getTbpComments())
            .append(getTbpZipCode(), obj.getTbpZipCode())
            .append(getTbpProvince(), obj.getTbpProvince())
            .append(getTbpCity(), obj.getTbpCity())
            .append(getTbpAddress1(), obj.getTbpAddress1())
            .append(getFkTbnId(), obj.getFkTbnId())
            .append(getTbpFax(), obj.getTbpFax())
            .append(getTbpPhone(), obj.getTbpPhone())
            .append(getTbpTaxId(), obj.getTbpTaxId())
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpPerusahaanId(), obj.getTbpPerusahaanId())
            .append(getTbpId(), obj.getTbpId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbpLocalCurrencyId())
            .append(getTbpJkm())
            .append(getTbpJkk())
            .append(getTbpComments())
            .append(getTbpZipCode())
            .append(getTbpProvince())
            .append(getTbpCity())
            .append(getTbpAddress1())
            .append(getFkTbnId())
            .append(getTbpFax())
            .append(getTbpPhone())
            .append(getTbpTaxId())
            .append(getTbpName())
            .append(getTbpPerusahaanId())
            .append(getTbpId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbp_local_currency_id", getTbpLocalCurrencyId())
            .append("tbp_jkm", getTbpJkm())
            .append("tbp_jkk", getTbpJkk())
            .append("tbp_comments", getTbpComments())
            .append("tbp_zip_code", getTbpZipCode())
            .append("tbp_province", getTbpProvince())
            .append("tbp_city", getTbpCity())
            .append("tbp_address1", getTbpAddress1())
            .append("fk_tbn_id", getFkTbnId())
            .append("tbp_fax", getTbpFax())
            .append("tbp_phone", getTbpPhone())
            .append("tbp_tax_id", getTbpTaxId())
            .append("tbp_name", getTbpName())
            .append("tbp_perusahaan_id", getTbpPerusahaanId())
            .append("tbp_id", getTbpId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbPerusahaanBean obj = (TbPerusahaanBean) object;
        return new CompareToBuilder()
            .append(getTbpLocalCurrencyId(), obj.getTbpLocalCurrencyId())
            .append(getTbpJkm(), obj.getTbpJkm())
            .append(getTbpJkk(), obj.getTbpJkk())
            .append(getTbpComments(), obj.getTbpComments())
            .append(getTbpZipCode(), obj.getTbpZipCode())
            .append(getTbpProvince(), obj.getTbpProvince())
            .append(getTbpCity(), obj.getTbpCity())
            .append(getTbpAddress1(), obj.getTbpAddress1())
            .append(getFkTbnId(), obj.getFkTbnId())
            .append(getTbpFax(), obj.getTbpFax())
            .append(getTbpPhone(), obj.getTbpPhone())
            .append(getTbpTaxId(), obj.getTbpTaxId())
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpPerusahaanId(), obj.getTbpPerusahaanId())
            .append(getTbpId(), obj.getTbpId())
            .toComparison();
   }
}
