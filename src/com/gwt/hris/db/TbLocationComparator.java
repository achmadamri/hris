// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbLocationBean objects.
 * @author sql2java
 */
public class TbLocationComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbLocationComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbLocationComparator(TbLocationManager.ID_TBL_COMMENTS, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbLocationManager.ID_TBL_COMMENTS
     *   <li>TbLocationManager.ID_TBL_FAX
     *   <li>TbLocationManager.ID_TBL_PHONE
     *   <li>TbLocationManager.ID_TBL_ZIP_CODE
     *   <li>TbLocationManager.ID_TBL_ADDRESS
     *   <li>TbLocationManager.ID_TBL_CITY
     *   <li>TbLocationManager.ID_TBL_PROVINCE
     *   <li>TbLocationManager.ID_FK_TBN_ID
     *   <li>TbLocationManager.ID_TBL_COUNTRY
     *   <li>TbLocationManager.ID_TBL_NAME
     *   <li>TbLocationManager.ID_TBL_LOCATION_ID
     *   <li>TbLocationManager.ID_TBP_ID
     *   <li>TbLocationManager.ID_TBL_ID
     * </ul>
     */
    public TbLocationComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbLocationComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbLocationComparator(TbLocationManager.ID_TBL_COMMENTS, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbLocationManager.ID_TBL_COMMENTS
     *   <li>TbLocationManager.ID_TBL_FAX
     *   <li>TbLocationManager.ID_TBL_PHONE
     *   <li>TbLocationManager.ID_TBL_ZIP_CODE
     *   <li>TbLocationManager.ID_TBL_ADDRESS
     *   <li>TbLocationManager.ID_TBL_CITY
     *   <li>TbLocationManager.ID_TBL_PROVINCE
     *   <li>TbLocationManager.ID_FK_TBN_ID
     *   <li>TbLocationManager.ID_TBL_COUNTRY
     *   <li>TbLocationManager.ID_TBL_NAME
     *   <li>TbLocationManager.ID_TBL_LOCATION_ID
     *   <li>TbLocationManager.ID_TBP_ID
     *   <li>TbLocationManager.ID_TBL_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbLocationComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbLocationBean b1 = (TbLocationBean)pObj1;
        TbLocationBean b2 = (TbLocationBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbLocationManager.ID_TBL_COMMENTS:
                if (b1.getTblComments() == null && b2.getTblComments() != null) {
                    iReturn = -1;
                } else if (b1.getTblComments() == null && b2.getTblComments() == null) {
                    iReturn = 0;
                } else if (b1.getTblComments() != null && b2.getTblComments() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblComments().compareTo(b2.getTblComments());
                }
                break;
            case TbLocationManager.ID_TBL_FAX:
                if (b1.getTblFax() == null && b2.getTblFax() != null) {
                    iReturn = -1;
                } else if (b1.getTblFax() == null && b2.getTblFax() == null) {
                    iReturn = 0;
                } else if (b1.getTblFax() != null && b2.getTblFax() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblFax().compareTo(b2.getTblFax());
                }
                break;
            case TbLocationManager.ID_TBL_PHONE:
                if (b1.getTblPhone() == null && b2.getTblPhone() != null) {
                    iReturn = -1;
                } else if (b1.getTblPhone() == null && b2.getTblPhone() == null) {
                    iReturn = 0;
                } else if (b1.getTblPhone() != null && b2.getTblPhone() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblPhone().compareTo(b2.getTblPhone());
                }
                break;
            case TbLocationManager.ID_TBL_ZIP_CODE:
                if (b1.getTblZipCode() == null && b2.getTblZipCode() != null) {
                    iReturn = -1;
                } else if (b1.getTblZipCode() == null && b2.getTblZipCode() == null) {
                    iReturn = 0;
                } else if (b1.getTblZipCode() != null && b2.getTblZipCode() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblZipCode().compareTo(b2.getTblZipCode());
                }
                break;
            case TbLocationManager.ID_TBL_ADDRESS:
                if (b1.getTblAddress() == null && b2.getTblAddress() != null) {
                    iReturn = -1;
                } else if (b1.getTblAddress() == null && b2.getTblAddress() == null) {
                    iReturn = 0;
                } else if (b1.getTblAddress() != null && b2.getTblAddress() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblAddress().compareTo(b2.getTblAddress());
                }
                break;
            case TbLocationManager.ID_TBL_CITY:
                if (b1.getTblCity() == null && b2.getTblCity() != null) {
                    iReturn = -1;
                } else if (b1.getTblCity() == null && b2.getTblCity() == null) {
                    iReturn = 0;
                } else if (b1.getTblCity() != null && b2.getTblCity() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblCity().compareTo(b2.getTblCity());
                }
                break;
            case TbLocationManager.ID_TBL_PROVINCE:
                if (b1.getTblProvince() == null && b2.getTblProvince() != null) {
                    iReturn = -1;
                } else if (b1.getTblProvince() == null && b2.getTblProvince() == null) {
                    iReturn = 0;
                } else if (b1.getTblProvince() != null && b2.getTblProvince() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblProvince().compareTo(b2.getTblProvince());
                }
                break;
            case TbLocationManager.ID_FK_TBN_ID:
                if (b1.getFkTbnId() == null && b2.getFkTbnId() != null) {
                    iReturn = -1;
                } else if (b1.getFkTbnId() == null && b2.getFkTbnId() == null) {
                    iReturn = 0;
                } else if (b1.getFkTbnId() != null && b2.getFkTbnId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getFkTbnId().compareTo(b2.getFkTbnId());
                }
                break;
            case TbLocationManager.ID_TBL_COUNTRY:
                if (b1.getTblCountry() == null && b2.getTblCountry() != null) {
                    iReturn = -1;
                } else if (b1.getTblCountry() == null && b2.getTblCountry() == null) {
                    iReturn = 0;
                } else if (b1.getTblCountry() != null && b2.getTblCountry() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblCountry().compareTo(b2.getTblCountry());
                }
                break;
            case TbLocationManager.ID_TBL_NAME:
                if (b1.getTblName() == null && b2.getTblName() != null) {
                    iReturn = -1;
                } else if (b1.getTblName() == null && b2.getTblName() == null) {
                    iReturn = 0;
                } else if (b1.getTblName() != null && b2.getTblName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblName().compareTo(b2.getTblName());
                }
                break;
            case TbLocationManager.ID_TBL_LOCATION_ID:
                if (b1.getTblLocationId() == null && b2.getTblLocationId() != null) {
                    iReturn = -1;
                } else if (b1.getTblLocationId() == null && b2.getTblLocationId() == null) {
                    iReturn = 0;
                } else if (b1.getTblLocationId() != null && b2.getTblLocationId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblLocationId().compareTo(b2.getTblLocationId());
                }
                break;
            case TbLocationManager.ID_TBP_ID:
                if (b1.getTbpId() == null && b2.getTbpId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpId() == null && b2.getTbpId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpId() != null && b2.getTbpId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpId().compareTo(b2.getTbpId());
                }
                break;
            case TbLocationManager.ID_TBL_ID:
                if (b1.getTblId() == null && b2.getTblId() != null) {
                    iReturn = -1;
                } else if (b1.getTblId() == null && b2.getTblId() == null) {
                    iReturn = 0;
                } else if (b1.getTblId() != null && b2.getTblId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblId().compareTo(b2.getTblId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
