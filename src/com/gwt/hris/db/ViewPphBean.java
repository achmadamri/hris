// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewPphBean is a mapping of view_pph Table.
 * @author sql2java
*/
public class ViewPphBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -1260544415088474738L;
	
    private Double tbpphPajakKomisi;

    private boolean tbpphPajakKomisiIsModified = false;
    private boolean tbpphPajakKomisiIsInitialized = false;

    private String tbeTaxNo;

    private boolean tbeTaxNoIsModified = false;
    private boolean tbeTaxNoIsInitialized = false;

    private String tbeEmployeeId;

    private boolean tbeEmployeeIdIsModified = false;
    private boolean tbeEmployeeIdIsInitialized = false;

    private String tbpphPeriode;

    private boolean tbpphPeriodeIsModified = false;
    private boolean tbpphPeriodeIsInitialized = false;

    private String tbptkpStatus;

    private boolean tbptkpStatusIsModified = false;
    private boolean tbptkpStatusIsInitialized = false;

    private String tboNama;

    private boolean tboNamaIsModified = false;
    private boolean tboNamaIsInitialized = false;

    private String tbesName;

    private boolean tbesNameIsModified = false;
    private boolean tbesNameIsInitialized = false;

    private String tbjtName;

    private boolean tbjtNameIsModified = false;
    private boolean tbjtNameIsInitialized = false;

    private java.sql.Timestamp tbjJoinedDate;

    private boolean tbjJoinedDateIsModified = false;
    private boolean tbjJoinedDateIsInitialized = false;

    private Double tbpphTotalTakeHomePay;

    private boolean tbpphTotalTakeHomePayIsModified = false;
    private boolean tbpphTotalTakeHomePayIsInitialized = false;

    private Double tbpphLoan;

    private boolean tbpphLoanIsModified = false;
    private boolean tbpphLoanIsInitialized = false;

    private Double tbpphPendapatanTidakTetap;

    private boolean tbpphPendapatanTidakTetapIsModified = false;
    private boolean tbpphPendapatanTidakTetapIsInitialized = false;

    private Double tbpphPajakBlnIni;

    private boolean tbpphPajakBlnIniIsModified = false;
    private boolean tbpphPajakBlnIniIsInitialized = false;

    private Double tbpphIuranJhtJamsostek;

    private boolean tbpphIuranJhtJamsostekIsModified = false;
    private boolean tbpphIuranJhtJamsostekIsInitialized = false;

    private Double tbpphTotalGross;

    private boolean tbpphTotalGrossIsModified = false;
    private boolean tbpphTotalGrossIsInitialized = false;

    private Double tbpphTunjanganJamsostekJkkjkm;

    private boolean tbpphTunjanganJamsostekJkkjkmIsModified = false;
    private boolean tbpphTunjanganJamsostekJkkjkmIsInitialized = false;

    private Double tbpphTunjanganTetap;

    private boolean tbpphTunjanganTetapIsModified = false;
    private boolean tbpphTunjanganTetapIsInitialized = false;

    private Double tbpphGajiPokokGross;

    private boolean tbpphGajiPokokGrossIsModified = false;
    private boolean tbpphGajiPokokGrossIsInitialized = false;

    private java.sql.Timestamp tbpphDate;

    private boolean tbpphDateIsModified = false;
    private boolean tbpphDateIsInitialized = false;

    private Integer tbpphId;

    private boolean tbpphIdIsModified = false;
    private boolean tbpphIdIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewPphBean is via the createViewPphBean method in ViewPphManager or
     * via the factory class ViewPphFactory create method
     */
    protected ViewPphBean()
    {
    }

    /**
     * Getter method for tbpphPajakKomisi.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_pajak_komisi</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphPajakKomisi
     */
    public Double getTbpphPajakKomisi()
    {
        return tbpphPajakKomisi;
    }

    /**
     * Setter method for tbpphPajakKomisi.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphPajakKomisi
     */
    public void setTbpphPajakKomisi(Double newVal)
    {
        if ((newVal != null && tbpphPajakKomisi != null && (newVal.compareTo(tbpphPajakKomisi) == 0)) ||
            (newVal == null && tbpphPajakKomisi == null && tbpphPajakKomisiIsInitialized)) {
            return;
        }
        tbpphPajakKomisi = newVal;
        tbpphPajakKomisiIsModified = true;
        tbpphPajakKomisiIsInitialized = true;
    }

    /**
     * Setter method for tbpphPajakKomisi.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphPajakKomisi
     */
    public void setTbpphPajakKomisi(double newVal)
    {
        setTbpphPajakKomisi(new Double(newVal));
    }

    /**
     * Determines if the tbpphPajakKomisi has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphPajakKomisiModified()
    {
        return tbpphPajakKomisiIsModified;
    }

    /**
     * Determines if the tbpphPajakKomisi has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphPajakKomisiInitialized()
    {
        return tbpphPajakKomisiIsInitialized;
    }

    /**
     * Getter method for tbeTaxNo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbe_tax_no</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeTaxNo
     */
    public String getTbeTaxNo()
    {
        return tbeTaxNo;
    }

    /**
     * Setter method for tbeTaxNo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeTaxNo
     */
    public void setTbeTaxNo(String newVal)
    {
        if ((newVal != null && tbeTaxNo != null && (newVal.compareTo(tbeTaxNo) == 0)) ||
            (newVal == null && tbeTaxNo == null && tbeTaxNoIsInitialized)) {
            return;
        }
        tbeTaxNo = newVal;
        tbeTaxNoIsModified = true;
        tbeTaxNoIsInitialized = true;
    }

    /**
     * Determines if the tbeTaxNo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeTaxNoModified()
    {
        return tbeTaxNoIsModified;
    }

    /**
     * Determines if the tbeTaxNo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeTaxNoInitialized()
    {
        return tbeTaxNoIsInitialized;
    }

    /**
     * Getter method for tbeEmployeeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbe_employee_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEmployeeId
     */
    public String getTbeEmployeeId()
    {
        return tbeEmployeeId;
    }

    /**
     * Setter method for tbeEmployeeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEmployeeId
     */
    public void setTbeEmployeeId(String newVal)
    {
        if ((newVal != null && tbeEmployeeId != null && (newVal.compareTo(tbeEmployeeId) == 0)) ||
            (newVal == null && tbeEmployeeId == null && tbeEmployeeIdIsInitialized)) {
            return;
        }
        tbeEmployeeId = newVal;
        tbeEmployeeIdIsModified = true;
        tbeEmployeeIdIsInitialized = true;
    }

    /**
     * Determines if the tbeEmployeeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEmployeeIdModified()
    {
        return tbeEmployeeIdIsModified;
    }

    /**
     * Determines if the tbeEmployeeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEmployeeIdInitialized()
    {
        return tbeEmployeeIdIsInitialized;
    }

    /**
     * Getter method for tbpphPeriode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_periode</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpphPeriode
     */
    public String getTbpphPeriode()
    {
        return tbpphPeriode;
    }

    /**
     * Setter method for tbpphPeriode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphPeriode
     */
    public void setTbpphPeriode(String newVal)
    {
        if ((newVal != null && tbpphPeriode != null && (newVal.compareTo(tbpphPeriode) == 0)) ||
            (newVal == null && tbpphPeriode == null && tbpphPeriodeIsInitialized)) {
            return;
        }
        tbpphPeriode = newVal;
        tbpphPeriodeIsModified = true;
        tbpphPeriodeIsInitialized = true;
    }

    /**
     * Determines if the tbpphPeriode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphPeriodeModified()
    {
        return tbpphPeriodeIsModified;
    }

    /**
     * Determines if the tbpphPeriode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphPeriodeInitialized()
    {
        return tbpphPeriodeIsInitialized;
    }

    /**
     * Getter method for tbptkpStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbptkp_status</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbptkpStatus
     */
    public String getTbptkpStatus()
    {
        return tbptkpStatus;
    }

    /**
     * Setter method for tbptkpStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbptkpStatus
     */
    public void setTbptkpStatus(String newVal)
    {
        if ((newVal != null && tbptkpStatus != null && (newVal.compareTo(tbptkpStatus) == 0)) ||
            (newVal == null && tbptkpStatus == null && tbptkpStatusIsInitialized)) {
            return;
        }
        tbptkpStatus = newVal;
        tbptkpStatusIsModified = true;
        tbptkpStatusIsInitialized = true;
    }

    /**
     * Determines if the tbptkpStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbptkpStatusModified()
    {
        return tbptkpStatusIsModified;
    }

    /**
     * Determines if the tbptkpStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbptkpStatusInitialized()
    {
        return tbptkpStatusIsInitialized;
    }

    /**
     * Getter method for tboNama.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbo_nama</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tboNama
     */
    public String getTboNama()
    {
        return tboNama;
    }

    /**
     * Setter method for tboNama.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tboNama
     */
    public void setTboNama(String newVal)
    {
        if ((newVal != null && tboNama != null && (newVal.compareTo(tboNama) == 0)) ||
            (newVal == null && tboNama == null && tboNamaIsInitialized)) {
            return;
        }
        tboNama = newVal;
        tboNamaIsModified = true;
        tboNamaIsInitialized = true;
    }

    /**
     * Determines if the tboNama has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTboNamaModified()
    {
        return tboNamaIsModified;
    }

    /**
     * Determines if the tboNama has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTboNamaInitialized()
    {
        return tboNamaIsInitialized;
    }

    /**
     * Getter method for tbesName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbes_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbesName
     */
    public String getTbesName()
    {
        return tbesName;
    }

    /**
     * Setter method for tbesName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesName
     */
    public void setTbesName(String newVal)
    {
        if ((newVal != null && tbesName != null && (newVal.compareTo(tbesName) == 0)) ||
            (newVal == null && tbesName == null && tbesNameIsInitialized)) {
            return;
        }
        tbesName = newVal;
        tbesNameIsModified = true;
        tbesNameIsInitialized = true;
    }

    /**
     * Determines if the tbesName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesNameModified()
    {
        return tbesNameIsModified;
    }

    /**
     * Determines if the tbesName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesNameInitialized()
    {
        return tbesNameIsInitialized;
    }

    /**
     * Getter method for tbjtName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbjt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtName
     */
    public String getTbjtName()
    {
        return tbjtName;
    }

    /**
     * Setter method for tbjtName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtName
     */
    public void setTbjtName(String newVal)
    {
        if ((newVal != null && tbjtName != null && (newVal.compareTo(tbjtName) == 0)) ||
            (newVal == null && tbjtName == null && tbjtNameIsInitialized)) {
            return;
        }
        tbjtName = newVal;
        tbjtNameIsModified = true;
        tbjtNameIsInitialized = true;
    }

    /**
     * Determines if the tbjtName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtNameModified()
    {
        return tbjtNameIsModified;
    }

    /**
     * Determines if the tbjtName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtNameInitialized()
    {
        return tbjtNameIsInitialized;
    }

    /**
     * Getter method for tbjJoinedDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbj_joined_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbjJoinedDate
     */
    public java.sql.Timestamp getTbjJoinedDate()
    {
        return tbjJoinedDate;
    }

    /**
     * Setter method for tbjJoinedDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjJoinedDate
     */
    public void setTbjJoinedDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbjJoinedDate != null && (newVal.compareTo(tbjJoinedDate) == 0)) ||
            (newVal == null && tbjJoinedDate == null && tbjJoinedDateIsInitialized)) {
            return;
        }
        tbjJoinedDate = newVal;
        tbjJoinedDateIsModified = true;
        tbjJoinedDateIsInitialized = true;
    }

    /**
     * Setter method for tbjJoinedDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjJoinedDate
     */
    public void setTbjJoinedDate(long newVal)
    {
        setTbjJoinedDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbjJoinedDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjJoinedDateModified()
    {
        return tbjJoinedDateIsModified;
    }

    /**
     * Determines if the tbjJoinedDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjJoinedDateInitialized()
    {
        return tbjJoinedDateIsInitialized;
    }

    /**
     * Getter method for tbpphTotalTakeHomePay.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_total_take_home_pay</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphTotalTakeHomePay
     */
    public Double getTbpphTotalTakeHomePay()
    {
        return tbpphTotalTakeHomePay;
    }

    /**
     * Setter method for tbpphTotalTakeHomePay.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphTotalTakeHomePay
     */
    public void setTbpphTotalTakeHomePay(Double newVal)
    {
        if ((newVal != null && tbpphTotalTakeHomePay != null && (newVal.compareTo(tbpphTotalTakeHomePay) == 0)) ||
            (newVal == null && tbpphTotalTakeHomePay == null && tbpphTotalTakeHomePayIsInitialized)) {
            return;
        }
        tbpphTotalTakeHomePay = newVal;
        tbpphTotalTakeHomePayIsModified = true;
        tbpphTotalTakeHomePayIsInitialized = true;
    }

    /**
     * Setter method for tbpphTotalTakeHomePay.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphTotalTakeHomePay
     */
    public void setTbpphTotalTakeHomePay(double newVal)
    {
        setTbpphTotalTakeHomePay(new Double(newVal));
    }

    /**
     * Determines if the tbpphTotalTakeHomePay has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphTotalTakeHomePayModified()
    {
        return tbpphTotalTakeHomePayIsModified;
    }

    /**
     * Determines if the tbpphTotalTakeHomePay has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphTotalTakeHomePayInitialized()
    {
        return tbpphTotalTakeHomePayIsInitialized;
    }

    /**
     * Getter method for tbpphLoan.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_loan</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphLoan
     */
    public Double getTbpphLoan()
    {
        return tbpphLoan;
    }

    /**
     * Setter method for tbpphLoan.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphLoan
     */
    public void setTbpphLoan(Double newVal)
    {
        if ((newVal != null && tbpphLoan != null && (newVal.compareTo(tbpphLoan) == 0)) ||
            (newVal == null && tbpphLoan == null && tbpphLoanIsInitialized)) {
            return;
        }
        tbpphLoan = newVal;
        tbpphLoanIsModified = true;
        tbpphLoanIsInitialized = true;
    }

    /**
     * Setter method for tbpphLoan.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphLoan
     */
    public void setTbpphLoan(double newVal)
    {
        setTbpphLoan(new Double(newVal));
    }

    /**
     * Determines if the tbpphLoan has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphLoanModified()
    {
        return tbpphLoanIsModified;
    }

    /**
     * Determines if the tbpphLoan has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphLoanInitialized()
    {
        return tbpphLoanIsInitialized;
    }

    /**
     * Getter method for tbpphPendapatanTidakTetap.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_pendapatan_tidak_tetap</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphPendapatanTidakTetap
     */
    public Double getTbpphPendapatanTidakTetap()
    {
        return tbpphPendapatanTidakTetap;
    }

    /**
     * Setter method for tbpphPendapatanTidakTetap.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphPendapatanTidakTetap
     */
    public void setTbpphPendapatanTidakTetap(Double newVal)
    {
        if ((newVal != null && tbpphPendapatanTidakTetap != null && (newVal.compareTo(tbpphPendapatanTidakTetap) == 0)) ||
            (newVal == null && tbpphPendapatanTidakTetap == null && tbpphPendapatanTidakTetapIsInitialized)) {
            return;
        }
        tbpphPendapatanTidakTetap = newVal;
        tbpphPendapatanTidakTetapIsModified = true;
        tbpphPendapatanTidakTetapIsInitialized = true;
    }

    /**
     * Setter method for tbpphPendapatanTidakTetap.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphPendapatanTidakTetap
     */
    public void setTbpphPendapatanTidakTetap(double newVal)
    {
        setTbpphPendapatanTidakTetap(new Double(newVal));
    }

    /**
     * Determines if the tbpphPendapatanTidakTetap has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphPendapatanTidakTetapModified()
    {
        return tbpphPendapatanTidakTetapIsModified;
    }

    /**
     * Determines if the tbpphPendapatanTidakTetap has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphPendapatanTidakTetapInitialized()
    {
        return tbpphPendapatanTidakTetapIsInitialized;
    }

    /**
     * Getter method for tbpphPajakBlnIni.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_pajak_bln_ini</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphPajakBlnIni
     */
    public Double getTbpphPajakBlnIni()
    {
        return tbpphPajakBlnIni;
    }

    /**
     * Setter method for tbpphPajakBlnIni.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphPajakBlnIni
     */
    public void setTbpphPajakBlnIni(Double newVal)
    {
        if ((newVal != null && tbpphPajakBlnIni != null && (newVal.compareTo(tbpphPajakBlnIni) == 0)) ||
            (newVal == null && tbpphPajakBlnIni == null && tbpphPajakBlnIniIsInitialized)) {
            return;
        }
        tbpphPajakBlnIni = newVal;
        tbpphPajakBlnIniIsModified = true;
        tbpphPajakBlnIniIsInitialized = true;
    }

    /**
     * Setter method for tbpphPajakBlnIni.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphPajakBlnIni
     */
    public void setTbpphPajakBlnIni(double newVal)
    {
        setTbpphPajakBlnIni(new Double(newVal));
    }

    /**
     * Determines if the tbpphPajakBlnIni has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphPajakBlnIniModified()
    {
        return tbpphPajakBlnIniIsModified;
    }

    /**
     * Determines if the tbpphPajakBlnIni has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphPajakBlnIniInitialized()
    {
        return tbpphPajakBlnIniIsInitialized;
    }

    /**
     * Getter method for tbpphIuranJhtJamsostek.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_iuran_jht_jamsostek</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphIuranJhtJamsostek
     */
    public Double getTbpphIuranJhtJamsostek()
    {
        return tbpphIuranJhtJamsostek;
    }

    /**
     * Setter method for tbpphIuranJhtJamsostek.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphIuranJhtJamsostek
     */
    public void setTbpphIuranJhtJamsostek(Double newVal)
    {
        if ((newVal != null && tbpphIuranJhtJamsostek != null && (newVal.compareTo(tbpphIuranJhtJamsostek) == 0)) ||
            (newVal == null && tbpphIuranJhtJamsostek == null && tbpphIuranJhtJamsostekIsInitialized)) {
            return;
        }
        tbpphIuranJhtJamsostek = newVal;
        tbpphIuranJhtJamsostekIsModified = true;
        tbpphIuranJhtJamsostekIsInitialized = true;
    }

    /**
     * Setter method for tbpphIuranJhtJamsostek.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphIuranJhtJamsostek
     */
    public void setTbpphIuranJhtJamsostek(double newVal)
    {
        setTbpphIuranJhtJamsostek(new Double(newVal));
    }

    /**
     * Determines if the tbpphIuranJhtJamsostek has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphIuranJhtJamsostekModified()
    {
        return tbpphIuranJhtJamsostekIsModified;
    }

    /**
     * Determines if the tbpphIuranJhtJamsostek has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphIuranJhtJamsostekInitialized()
    {
        return tbpphIuranJhtJamsostekIsInitialized;
    }

    /**
     * Getter method for tbpphTotalGross.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_total_gross</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphTotalGross
     */
    public Double getTbpphTotalGross()
    {
        return tbpphTotalGross;
    }

    /**
     * Setter method for tbpphTotalGross.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphTotalGross
     */
    public void setTbpphTotalGross(Double newVal)
    {
        if ((newVal != null && tbpphTotalGross != null && (newVal.compareTo(tbpphTotalGross) == 0)) ||
            (newVal == null && tbpphTotalGross == null && tbpphTotalGrossIsInitialized)) {
            return;
        }
        tbpphTotalGross = newVal;
        tbpphTotalGrossIsModified = true;
        tbpphTotalGrossIsInitialized = true;
    }

    /**
     * Setter method for tbpphTotalGross.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphTotalGross
     */
    public void setTbpphTotalGross(double newVal)
    {
        setTbpphTotalGross(new Double(newVal));
    }

    /**
     * Determines if the tbpphTotalGross has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphTotalGrossModified()
    {
        return tbpphTotalGrossIsModified;
    }

    /**
     * Determines if the tbpphTotalGross has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphTotalGrossInitialized()
    {
        return tbpphTotalGrossIsInitialized;
    }

    /**
     * Getter method for tbpphTunjanganJamsostekJkkjkm.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_tunjangan_jamsostek_jkkjkm</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphTunjanganJamsostekJkkjkm
     */
    public Double getTbpphTunjanganJamsostekJkkjkm()
    {
        return tbpphTunjanganJamsostekJkkjkm;
    }

    /**
     * Setter method for tbpphTunjanganJamsostekJkkjkm.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphTunjanganJamsostekJkkjkm
     */
    public void setTbpphTunjanganJamsostekJkkjkm(Double newVal)
    {
        if ((newVal != null && tbpphTunjanganJamsostekJkkjkm != null && (newVal.compareTo(tbpphTunjanganJamsostekJkkjkm) == 0)) ||
            (newVal == null && tbpphTunjanganJamsostekJkkjkm == null && tbpphTunjanganJamsostekJkkjkmIsInitialized)) {
            return;
        }
        tbpphTunjanganJamsostekJkkjkm = newVal;
        tbpphTunjanganJamsostekJkkjkmIsModified = true;
        tbpphTunjanganJamsostekJkkjkmIsInitialized = true;
    }

    /**
     * Setter method for tbpphTunjanganJamsostekJkkjkm.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphTunjanganJamsostekJkkjkm
     */
    public void setTbpphTunjanganJamsostekJkkjkm(double newVal)
    {
        setTbpphTunjanganJamsostekJkkjkm(new Double(newVal));
    }

    /**
     * Determines if the tbpphTunjanganJamsostekJkkjkm has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphTunjanganJamsostekJkkjkmModified()
    {
        return tbpphTunjanganJamsostekJkkjkmIsModified;
    }

    /**
     * Determines if the tbpphTunjanganJamsostekJkkjkm has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphTunjanganJamsostekJkkjkmInitialized()
    {
        return tbpphTunjanganJamsostekJkkjkmIsInitialized;
    }

    /**
     * Getter method for tbpphTunjanganTetap.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_tunjangan_tetap</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphTunjanganTetap
     */
    public Double getTbpphTunjanganTetap()
    {
        return tbpphTunjanganTetap;
    }

    /**
     * Setter method for tbpphTunjanganTetap.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphTunjanganTetap
     */
    public void setTbpphTunjanganTetap(Double newVal)
    {
        if ((newVal != null && tbpphTunjanganTetap != null && (newVal.compareTo(tbpphTunjanganTetap) == 0)) ||
            (newVal == null && tbpphTunjanganTetap == null && tbpphTunjanganTetapIsInitialized)) {
            return;
        }
        tbpphTunjanganTetap = newVal;
        tbpphTunjanganTetapIsModified = true;
        tbpphTunjanganTetapIsInitialized = true;
    }

    /**
     * Setter method for tbpphTunjanganTetap.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphTunjanganTetap
     */
    public void setTbpphTunjanganTetap(double newVal)
    {
        setTbpphTunjanganTetap(new Double(newVal));
    }

    /**
     * Determines if the tbpphTunjanganTetap has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphTunjanganTetapModified()
    {
        return tbpphTunjanganTetapIsModified;
    }

    /**
     * Determines if the tbpphTunjanganTetap has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphTunjanganTetapInitialized()
    {
        return tbpphTunjanganTetapIsInitialized;
    }

    /**
     * Getter method for tbpphGajiPokokGross.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_gaji_pokok_gross</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphGajiPokokGross
     */
    public Double getTbpphGajiPokokGross()
    {
        return tbpphGajiPokokGross;
    }

    /**
     * Setter method for tbpphGajiPokokGross.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphGajiPokokGross
     */
    public void setTbpphGajiPokokGross(Double newVal)
    {
        if ((newVal != null && tbpphGajiPokokGross != null && (newVal.compareTo(tbpphGajiPokokGross) == 0)) ||
            (newVal == null && tbpphGajiPokokGross == null && tbpphGajiPokokGrossIsInitialized)) {
            return;
        }
        tbpphGajiPokokGross = newVal;
        tbpphGajiPokokGrossIsModified = true;
        tbpphGajiPokokGrossIsInitialized = true;
    }

    /**
     * Setter method for tbpphGajiPokokGross.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphGajiPokokGross
     */
    public void setTbpphGajiPokokGross(double newVal)
    {
        setTbpphGajiPokokGross(new Double(newVal));
    }

    /**
     * Determines if the tbpphGajiPokokGross has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphGajiPokokGrossModified()
    {
        return tbpphGajiPokokGrossIsModified;
    }

    /**
     * Determines if the tbpphGajiPokokGross has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphGajiPokokGrossInitialized()
    {
        return tbpphGajiPokokGrossIsInitialized;
    }

    /**
     * Getter method for tbpphDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbpphDate
     */
    public java.sql.Timestamp getTbpphDate()
    {
        return tbpphDate;
    }

    /**
     * Setter method for tbpphDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphDate
     */
    public void setTbpphDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbpphDate != null && (newVal.compareTo(tbpphDate) == 0)) ||
            (newVal == null && tbpphDate == null && tbpphDateIsInitialized)) {
            return;
        }
        tbpphDate = newVal;
        tbpphDateIsModified = true;
        tbpphDateIsInitialized = true;
    }

    /**
     * Setter method for tbpphDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphDate
     */
    public void setTbpphDate(long newVal)
    {
        setTbpphDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbpphDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphDateModified()
    {
        return tbpphDateIsModified;
    }

    /**
     * Determines if the tbpphDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphDateInitialized()
    {
        return tbpphDateIsInitialized;
    }

    /**
     * Getter method for tbpphId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbpph_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpphId
     */
    public Integer getTbpphId()
    {
        return tbpphId;
    }

    /**
     * Setter method for tbpphId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphId
     */
    public void setTbpphId(Integer newVal)
    {
        if ((newVal != null && tbpphId != null && (newVal.compareTo(tbpphId) == 0)) ||
            (newVal == null && tbpphId == null && tbpphIdIsInitialized)) {
            return;
        }
        tbpphId = newVal;
        tbpphIdIsModified = true;
        tbpphIdIsInitialized = true;
    }

    /**
     * Setter method for tbpphId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphId
     */
    public void setTbpphId(int newVal)
    {
        setTbpphId(new Integer(newVal));
    }

    /**
     * Determines if the tbpphId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphIdModified()
    {
        return tbpphIdIsModified;
    }

    /**
     * Determines if the tbpphId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphIdInitialized()
    {
        return tbpphIdIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbpphPajakKomisiIsModified 		|| tbeTaxNoIsModified  		|| tbeEmployeeIdIsModified  		|| tbpphPeriodeIsModified  		|| tbptkpStatusIsModified  		|| tboNamaIsModified  		|| tbesNameIsModified  		|| tbjtNameIsModified  		|| tbjJoinedDateIsModified  		|| tbpphTotalTakeHomePayIsModified  		|| tbpphLoanIsModified  		|| tbpphPendapatanTidakTetapIsModified  		|| tbpphPajakBlnIniIsModified  		|| tbpphIuranJhtJamsostekIsModified  		|| tbpphTotalGrossIsModified  		|| tbpphTunjanganJamsostekJkkjkmIsModified  		|| tbpphTunjanganTetapIsModified  		|| tbpphGajiPokokGrossIsModified  		|| tbpphDateIsModified  		|| tbpphIdIsModified  		|| tbeNameIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbpphPajakKomisiIsModified = false;
        tbeTaxNoIsModified = false;
        tbeEmployeeIdIsModified = false;
        tbpphPeriodeIsModified = false;
        tbptkpStatusIsModified = false;
        tboNamaIsModified = false;
        tbesNameIsModified = false;
        tbjtNameIsModified = false;
        tbjJoinedDateIsModified = false;
        tbpphTotalTakeHomePayIsModified = false;
        tbpphLoanIsModified = false;
        tbpphPendapatanTidakTetapIsModified = false;
        tbpphPajakBlnIniIsModified = false;
        tbpphIuranJhtJamsostekIsModified = false;
        tbpphTotalGrossIsModified = false;
        tbpphTunjanganJamsostekJkkjkmIsModified = false;
        tbpphTunjanganTetapIsModified = false;
        tbpphGajiPokokGrossIsModified = false;
        tbpphDateIsModified = false;
        tbpphIdIsModified = false;
        tbeNameIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewPphBean bean)
    {
        setTbpphPajakKomisi(bean.getTbpphPajakKomisi());
        setTbeTaxNo(bean.getTbeTaxNo());
        setTbeEmployeeId(bean.getTbeEmployeeId());
        setTbpphPeriode(bean.getTbpphPeriode());
        setTbptkpStatus(bean.getTbptkpStatus());
        setTboNama(bean.getTboNama());
        setTbesName(bean.getTbesName());
        setTbjtName(bean.getTbjtName());
        setTbjJoinedDate(bean.getTbjJoinedDate());
        setTbpphTotalTakeHomePay(bean.getTbpphTotalTakeHomePay());
        setTbpphLoan(bean.getTbpphLoan());
        setTbpphPendapatanTidakTetap(bean.getTbpphPendapatanTidakTetap());
        setTbpphPajakBlnIni(bean.getTbpphPajakBlnIni());
        setTbpphIuranJhtJamsostek(bean.getTbpphIuranJhtJamsostek());
        setTbpphTotalGross(bean.getTbpphTotalGross());
        setTbpphTunjanganJamsostekJkkjkm(bean.getTbpphTunjanganJamsostekJkkjkm());
        setTbpphTunjanganTetap(bean.getTbpphTunjanganTetap());
        setTbpphGajiPokokGross(bean.getTbpphGajiPokokGross());
        setTbpphDate(bean.getTbpphDate());
        setTbpphId(bean.getTbpphId());
        setTbeName(bean.getTbeName());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbpph_pajak_komisi", getTbpphPajakKomisi() == null ? "" : getTbpphPajakKomisi().toString());
        dictionnary.put("tbe_tax_no", getTbeTaxNo() == null ? "" : getTbeTaxNo().toString());
        dictionnary.put("tbe_employee_id", getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString());
        dictionnary.put("tbpph_periode", getTbpphPeriode() == null ? "" : getTbpphPeriode().toString());
        dictionnary.put("tbptkp_status", getTbptkpStatus() == null ? "" : getTbptkpStatus().toString());
        dictionnary.put("tbo_nama", getTboNama() == null ? "" : getTboNama().toString());
        dictionnary.put("tbes_name", getTbesName() == null ? "" : getTbesName().toString());
        dictionnary.put("tbjt_name", getTbjtName() == null ? "" : getTbjtName().toString());
        dictionnary.put("tbj_joined_date", getTbjJoinedDate() == null ? "" : getTbjJoinedDate().toString());
        dictionnary.put("tbpph_total_take_home_pay", getTbpphTotalTakeHomePay() == null ? "" : getTbpphTotalTakeHomePay().toString());
        dictionnary.put("tbpph_loan", getTbpphLoan() == null ? "" : getTbpphLoan().toString());
        dictionnary.put("tbpph_pendapatan_tidak_tetap", getTbpphPendapatanTidakTetap() == null ? "" : getTbpphPendapatanTidakTetap().toString());
        dictionnary.put("tbpph_pajak_bln_ini", getTbpphPajakBlnIni() == null ? "" : getTbpphPajakBlnIni().toString());
        dictionnary.put("tbpph_iuran_jht_jamsostek", getTbpphIuranJhtJamsostek() == null ? "" : getTbpphIuranJhtJamsostek().toString());
        dictionnary.put("tbpph_total_gross", getTbpphTotalGross() == null ? "" : getTbpphTotalGross().toString());
        dictionnary.put("tbpph_tunjangan_jamsostek_jkkjkm", getTbpphTunjanganJamsostekJkkjkm() == null ? "" : getTbpphTunjanganJamsostekJkkjkm().toString());
        dictionnary.put("tbpph_tunjangan_tetap", getTbpphTunjanganTetap() == null ? "" : getTbpphTunjanganTetap().toString());
        dictionnary.put("tbpph_gaji_pokok_gross", getTbpphGajiPokokGross() == null ? "" : getTbpphGajiPokokGross().toString());
        dictionnary.put("tbpph_date", getTbpphDate() == null ? "" : getTbpphDate().toString());
        dictionnary.put("tbpph_id", getTbpphId() == null ? "" : getTbpphId().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbpph_pajak_komisi".equalsIgnoreCase(column) || "tbpphPajakKomisi".equalsIgnoreCase(column)) {
            return getTbpphPajakKomisi() == null ? "" : getTbpphPajakKomisi().toString();
        } else if ("tbe_tax_no".equalsIgnoreCase(column) || "tbeTaxNo".equalsIgnoreCase(column)) {
            return getTbeTaxNo() == null ? "" : getTbeTaxNo().toString();
        } else if ("tbe_employee_id".equalsIgnoreCase(column) || "tbeEmployeeId".equalsIgnoreCase(column)) {
            return getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString();
        } else if ("tbpph_periode".equalsIgnoreCase(column) || "tbpphPeriode".equalsIgnoreCase(column)) {
            return getTbpphPeriode() == null ? "" : getTbpphPeriode().toString();
        } else if ("tbptkp_status".equalsIgnoreCase(column) || "tbptkpStatus".equalsIgnoreCase(column)) {
            return getTbptkpStatus() == null ? "" : getTbptkpStatus().toString();
        } else if ("tbo_nama".equalsIgnoreCase(column) || "tboNama".equalsIgnoreCase(column)) {
            return getTboNama() == null ? "" : getTboNama().toString();
        } else if ("tbes_name".equalsIgnoreCase(column) || "tbesName".equalsIgnoreCase(column)) {
            return getTbesName() == null ? "" : getTbesName().toString();
        } else if ("tbjt_name".equalsIgnoreCase(column) || "tbjtName".equalsIgnoreCase(column)) {
            return getTbjtName() == null ? "" : getTbjtName().toString();
        } else if ("tbj_joined_date".equalsIgnoreCase(column) || "tbjJoinedDate".equalsIgnoreCase(column)) {
            return getTbjJoinedDate() == null ? "" : getTbjJoinedDate().toString();
        } else if ("tbpph_total_take_home_pay".equalsIgnoreCase(column) || "tbpphTotalTakeHomePay".equalsIgnoreCase(column)) {
            return getTbpphTotalTakeHomePay() == null ? "" : getTbpphTotalTakeHomePay().toString();
        } else if ("tbpph_loan".equalsIgnoreCase(column) || "tbpphLoan".equalsIgnoreCase(column)) {
            return getTbpphLoan() == null ? "" : getTbpphLoan().toString();
        } else if ("tbpph_pendapatan_tidak_tetap".equalsIgnoreCase(column) || "tbpphPendapatanTidakTetap".equalsIgnoreCase(column)) {
            return getTbpphPendapatanTidakTetap() == null ? "" : getTbpphPendapatanTidakTetap().toString();
        } else if ("tbpph_pajak_bln_ini".equalsIgnoreCase(column) || "tbpphPajakBlnIni".equalsIgnoreCase(column)) {
            return getTbpphPajakBlnIni() == null ? "" : getTbpphPajakBlnIni().toString();
        } else if ("tbpph_iuran_jht_jamsostek".equalsIgnoreCase(column) || "tbpphIuranJhtJamsostek".equalsIgnoreCase(column)) {
            return getTbpphIuranJhtJamsostek() == null ? "" : getTbpphIuranJhtJamsostek().toString();
        } else if ("tbpph_total_gross".equalsIgnoreCase(column) || "tbpphTotalGross".equalsIgnoreCase(column)) {
            return getTbpphTotalGross() == null ? "" : getTbpphTotalGross().toString();
        } else if ("tbpph_tunjangan_jamsostek_jkkjkm".equalsIgnoreCase(column) || "tbpphTunjanganJamsostekJkkjkm".equalsIgnoreCase(column)) {
            return getTbpphTunjanganJamsostekJkkjkm() == null ? "" : getTbpphTunjanganJamsostekJkkjkm().toString();
        } else if ("tbpph_tunjangan_tetap".equalsIgnoreCase(column) || "tbpphTunjanganTetap".equalsIgnoreCase(column)) {
            return getTbpphTunjanganTetap() == null ? "" : getTbpphTunjanganTetap().toString();
        } else if ("tbpph_gaji_pokok_gross".equalsIgnoreCase(column) || "tbpphGajiPokokGross".equalsIgnoreCase(column)) {
            return getTbpphGajiPokokGross() == null ? "" : getTbpphGajiPokokGross().toString();
        } else if ("tbpph_date".equalsIgnoreCase(column) || "tbpphDate".equalsIgnoreCase(column)) {
            return getTbpphDate() == null ? "" : getTbpphDate().toString();
        } else if ("tbpph_id".equalsIgnoreCase(column) || "tbpphId".equalsIgnoreCase(column)) {
            return getTbpphId() == null ? "" : getTbpphId().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewPphBean)) {
            return false;
        }

		ViewPphBean obj = (ViewPphBean) object;
		return new EqualsBuilder()
            .append(getTbpphPajakKomisi(), obj.getTbpphPajakKomisi())
            .append(getTbeTaxNo(), obj.getTbeTaxNo())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbpphPeriode(), obj.getTbpphPeriode())
            .append(getTbptkpStatus(), obj.getTbptkpStatus())
            .append(getTboNama(), obj.getTboNama())
            .append(getTbesName(), obj.getTbesName())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjJoinedDate(), obj.getTbjJoinedDate())
            .append(getTbpphTotalTakeHomePay(), obj.getTbpphTotalTakeHomePay())
            .append(getTbpphLoan(), obj.getTbpphLoan())
            .append(getTbpphPendapatanTidakTetap(), obj.getTbpphPendapatanTidakTetap())
            .append(getTbpphPajakBlnIni(), obj.getTbpphPajakBlnIni())
            .append(getTbpphIuranJhtJamsostek(), obj.getTbpphIuranJhtJamsostek())
            .append(getTbpphTotalGross(), obj.getTbpphTotalGross())
            .append(getTbpphTunjanganJamsostekJkkjkm(), obj.getTbpphTunjanganJamsostekJkkjkm())
            .append(getTbpphTunjanganTetap(), obj.getTbpphTunjanganTetap())
            .append(getTbpphGajiPokokGross(), obj.getTbpphGajiPokokGross())
            .append(getTbpphDate(), obj.getTbpphDate())
            .append(getTbpphId(), obj.getTbpphId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbpphPajakKomisi())
            .append(getTbeTaxNo())
            .append(getTbeEmployeeId())
            .append(getTbpphPeriode())
            .append(getTbptkpStatus())
            .append(getTboNama())
            .append(getTbesName())
            .append(getTbjtName())
            .append(getTbjJoinedDate())
            .append(getTbpphTotalTakeHomePay())
            .append(getTbpphLoan())
            .append(getTbpphPendapatanTidakTetap())
            .append(getTbpphPajakBlnIni())
            .append(getTbpphIuranJhtJamsostek())
            .append(getTbpphTotalGross())
            .append(getTbpphTunjanganJamsostekJkkjkm())
            .append(getTbpphTunjanganTetap())
            .append(getTbpphGajiPokokGross())
            .append(getTbpphDate())
            .append(getTbpphId())
            .append(getTbeName())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbpph_pajak_komisi", getTbpphPajakKomisi())
            .append("tbe_tax_no", getTbeTaxNo())
            .append("tbe_employee_id", getTbeEmployeeId())
            .append("tbpph_periode", getTbpphPeriode())
            .append("tbptkp_status", getTbptkpStatus())
            .append("tbo_nama", getTboNama())
            .append("tbes_name", getTbesName())
            .append("tbjt_name", getTbjtName())
            .append("tbj_joined_date", getTbjJoinedDate())
            .append("tbpph_total_take_home_pay", getTbpphTotalTakeHomePay())
            .append("tbpph_loan", getTbpphLoan())
            .append("tbpph_pendapatan_tidak_tetap", getTbpphPendapatanTidakTetap())
            .append("tbpph_pajak_bln_ini", getTbpphPajakBlnIni())
            .append("tbpph_iuran_jht_jamsostek", getTbpphIuranJhtJamsostek())
            .append("tbpph_total_gross", getTbpphTotalGross())
            .append("tbpph_tunjangan_jamsostek_jkkjkm", getTbpphTunjanganJamsostekJkkjkm())
            .append("tbpph_tunjangan_tetap", getTbpphTunjanganTetap())
            .append("tbpph_gaji_pokok_gross", getTbpphGajiPokokGross())
            .append("tbpph_date", getTbpphDate())
            .append("tbpph_id", getTbpphId())
            .append("tbe_name", getTbeName())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewPphBean obj = (ViewPphBean) object;
        return new CompareToBuilder()
            .append(getTbpphPajakKomisi(), obj.getTbpphPajakKomisi())
            .append(getTbeTaxNo(), obj.getTbeTaxNo())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbpphPeriode(), obj.getTbpphPeriode())
            .append(getTbptkpStatus(), obj.getTbptkpStatus())
            .append(getTboNama(), obj.getTboNama())
            .append(getTbesName(), obj.getTbesName())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjJoinedDate(), obj.getTbjJoinedDate())
            .append(getTbpphTotalTakeHomePay(), obj.getTbpphTotalTakeHomePay())
            .append(getTbpphLoan(), obj.getTbpphLoan())
            .append(getTbpphPendapatanTidakTetap(), obj.getTbpphPendapatanTidakTetap())
            .append(getTbpphPajakBlnIni(), obj.getTbpphPajakBlnIni())
            .append(getTbpphIuranJhtJamsostek(), obj.getTbpphIuranJhtJamsostek())
            .append(getTbpphTotalGross(), obj.getTbpphTotalGross())
            .append(getTbpphTunjanganJamsostekJkkjkm(), obj.getTbpphTunjanganJamsostekJkkjkm())
            .append(getTbpphTunjanganTetap(), obj.getTbpphTunjanganTetap())
            .append(getTbpphGajiPokokGross(), obj.getTbpphGajiPokokGross())
            .append(getTbpphDate(), obj.getTbpphDate())
            .append(getTbpphId(), obj.getTbpphId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
