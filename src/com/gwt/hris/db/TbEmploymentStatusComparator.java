// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbEmploymentStatusBean objects.
 * @author sql2java
 */
public class TbEmploymentStatusComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbEmploymentStatusComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbEmploymentStatusComparator(TbEmploymentStatusManager.ID_TBES_NAME, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbEmploymentStatusManager.ID_TBES_NAME
     *   <li>TbEmploymentStatusManager.ID_TBES_EMPLOYMENT_STATUS_ID
     *   <li>TbEmploymentStatusManager.ID_TBES_ID
     * </ul>
     */
    public TbEmploymentStatusComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbEmploymentStatusComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbEmploymentStatusComparator(TbEmploymentStatusManager.ID_TBES_NAME, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbEmploymentStatusManager.ID_TBES_NAME
     *   <li>TbEmploymentStatusManager.ID_TBES_EMPLOYMENT_STATUS_ID
     *   <li>TbEmploymentStatusManager.ID_TBES_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbEmploymentStatusComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbEmploymentStatusBean b1 = (TbEmploymentStatusBean)pObj1;
        TbEmploymentStatusBean b2 = (TbEmploymentStatusBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbEmploymentStatusManager.ID_TBES_NAME:
                if (b1.getTbesName() == null && b2.getTbesName() != null) {
                    iReturn = -1;
                } else if (b1.getTbesName() == null && b2.getTbesName() == null) {
                    iReturn = 0;
                } else if (b1.getTbesName() != null && b2.getTbesName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbesName().compareTo(b2.getTbesName());
                }
                break;
            case TbEmploymentStatusManager.ID_TBES_EMPLOYMENT_STATUS_ID:
                if (b1.getTbesEmploymentStatusId() == null && b2.getTbesEmploymentStatusId() != null) {
                    iReturn = -1;
                } else if (b1.getTbesEmploymentStatusId() == null && b2.getTbesEmploymentStatusId() == null) {
                    iReturn = 0;
                } else if (b1.getTbesEmploymentStatusId() != null && b2.getTbesEmploymentStatusId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbesEmploymentStatusId().compareTo(b2.getTbesEmploymentStatusId());
                }
                break;
            case TbEmploymentStatusManager.ID_TBES_ID:
                if (b1.getTbesId() == null && b2.getTbesId() != null) {
                    iReturn = -1;
                } else if (b1.getTbesId() == null && b2.getTbesId() == null) {
                    iReturn = 0;
                } else if (b1.getTbesId() != null && b2.getTbesId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbesId().compareTo(b2.getTbesId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
