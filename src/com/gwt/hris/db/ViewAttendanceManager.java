// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.ViewAttendanceBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the view_attendance table.
 * @author sql2java
 */
public class ViewAttendanceManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbs_out_time field.
     */
    public static final int ID_TBS_OUT_TIME = 0;

    /**
     * Identify the tbs_in_time field.
     */
    public static final int ID_TBS_IN_TIME = 1;

    /**
     * Identify the tbs_name field.
     */
    public static final int ID_TBS_NAME = 2;

    /**
     * Identify the tbs_shift_id field.
     */
    public static final int ID_TBS_SHIFT_ID = 3;

    /**
     * Identify the tbs_id field.
     */
    public static final int ID_TBS_ID = 4;

    /**
     * Identify the tba_out_photo field.
     */
    public static final int ID_TBA_OUT_PHOTO = 5;

    /**
     * Identify the tba_in_photo field.
     */
    public static final int ID_TBA_IN_PHOTO = 6;

    /**
     * Identify the tba_out_latitude field.
     */
    public static final int ID_TBA_OUT_LATITUDE = 7;

    /**
     * Identify the tba_out_longitude field.
     */
    public static final int ID_TBA_OUT_LONGITUDE = 8;

    /**
     * Identify the tba_in_latitude field.
     */
    public static final int ID_TBA_IN_LATITUDE = 9;

    /**
     * Identify the tba_in_longitude field.
     */
    public static final int ID_TBA_IN_LONGITUDE = 10;

    /**
     * Identify the tba_out_time_diff field.
     */
    public static final int ID_TBA_OUT_TIME_DIFF = 11;

    /**
     * Identify the tba_in_time_diff field.
     */
    public static final int ID_TBA_IN_TIME_DIFF = 12;

    /**
     * Identify the tba_out_note field.
     */
    public static final int ID_TBA_OUT_NOTE = 13;

    /**
     * Identify the tba_in_note field.
     */
    public static final int ID_TBA_IN_NOTE = 14;

    /**
     * Identify the tba_out_time field.
     */
    public static final int ID_TBA_OUT_TIME = 15;

    /**
     * Identify the tba_in_time field.
     */
    public static final int ID_TBA_IN_TIME = 16;

    /**
     * Identify the tba_date field.
     */
    public static final int ID_TBA_DATE = 17;

    /**
     * Identify the tbe_name field.
     */
    public static final int ID_TBE_NAME = 18;

    /**
     * Identify the tbe_id field.
     */
    public static final int ID_TBE_ID = 19;

    /**
     * Contains all the full fields of the view_attendance table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "view_attendance.tbs_out_time"
        ,"view_attendance.tbs_in_time"
        ,"view_attendance.tbs_name"
        ,"view_attendance.tbs_shift_id"
        ,"view_attendance.tbs_id"
        ,"view_attendance.tba_out_photo"
        ,"view_attendance.tba_in_photo"
        ,"view_attendance.tba_out_latitude"
        ,"view_attendance.tba_out_longitude"
        ,"view_attendance.tba_in_latitude"
        ,"view_attendance.tba_in_longitude"
        ,"view_attendance.tba_out_time_diff"
        ,"view_attendance.tba_in_time_diff"
        ,"view_attendance.tba_out_note"
        ,"view_attendance.tba_in_note"
        ,"view_attendance.tba_out_time"
        ,"view_attendance.tba_in_time"
        ,"view_attendance.tba_date"
        ,"view_attendance.tbe_name"
        ,"view_attendance.tbe_id"
    };

    /**
     * Contains all the fields of the view_attendance table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbs_out_time"
        ,"tbs_in_time"
        ,"tbs_name"
        ,"tbs_shift_id"
        ,"tbs_id"
        ,"tba_out_photo"
        ,"tba_in_photo"
        ,"tba_out_latitude"
        ,"tba_out_longitude"
        ,"tba_in_latitude"
        ,"tba_in_longitude"
        ,"tba_out_time_diff"
        ,"tba_in_time_diff"
        ,"tba_out_note"
        ,"tba_in_note"
        ,"tba_out_time"
        ,"tba_in_time"
        ,"tba_date"
        ,"tbe_name"
        ,"tbe_id"
    };

    /**
     * Field that contains the comma separated fields of the view_attendance table.
     */
    public static final String ALL_FULL_FIELDS = "view_attendance.tbs_out_time"
                            + ",view_attendance.tbs_in_time"
                            + ",view_attendance.tbs_name"
                            + ",view_attendance.tbs_shift_id"
                            + ",view_attendance.tbs_id"
                            + ",view_attendance.tba_out_photo"
                            + ",view_attendance.tba_in_photo"
                            + ",view_attendance.tba_out_latitude"
                            + ",view_attendance.tba_out_longitude"
                            + ",view_attendance.tba_in_latitude"
                            + ",view_attendance.tba_in_longitude"
                            + ",view_attendance.tba_out_time_diff"
                            + ",view_attendance.tba_in_time_diff"
                            + ",view_attendance.tba_out_note"
                            + ",view_attendance.tba_in_note"
                            + ",view_attendance.tba_out_time"
                            + ",view_attendance.tba_in_time"
                            + ",view_attendance.tba_date"
                            + ",view_attendance.tbe_name"
                            + ",view_attendance.tbe_id";

    /**
     * Field that contains the comma separated fields of the view_attendance table.
     */
    public static final String ALL_FIELDS = "tbs_out_time"
                            + ",tbs_in_time"
                            + ",tbs_name"
                            + ",tbs_shift_id"
                            + ",tbs_id"
                            + ",tba_out_photo"
                            + ",tba_in_photo"
                            + ",tba_out_latitude"
                            + ",tba_out_longitude"
                            + ",tba_in_latitude"
                            + ",tba_in_longitude"
                            + ",tba_out_time_diff"
                            + ",tba_in_time_diff"
                            + ",tba_out_note"
                            + ",tba_in_note"
                            + ",tba_out_time"
                            + ",tba_in_time"
                            + ",tba_date"
                            + ",tbe_name"
                            + ",tbe_id";

    private static ViewAttendanceManager singleton = new ViewAttendanceManager();

    /**
     * Get the ViewAttendanceManager singleton.
     *
     * @return ViewAttendanceManager
     */
    public static ViewAttendanceManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new ViewAttendanceBean instance.
     *
     * @return the new ViewAttendanceBean
     */
    public ViewAttendanceBean createViewAttendanceBean()
    {
        return new ViewAttendanceBean();
    }




    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from view_attendance.
     *
     * @return an array of ViewAttendanceManager bean
     * @throws DAOException
     */
    //5
    public ViewAttendanceBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from view_attendance, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of ViewAttendanceManager bean
     * @throws DAOException
     */
    //6
    public ViewAttendanceBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ViewAttendanceBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ViewAttendanceBean table
     * @throws DAOException
     */
    //7
    public ViewAttendanceBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ViewAttendanceBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting ViewAttendanceBean table
     * @throws DAOException
     */
    //8
    public ViewAttendanceBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of ViewAttendanceBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting ViewAttendanceBean table
     * @throws DAOException
     */
    //9
    public ViewAttendanceBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_attendance ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM view_attendance ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the view_attendance table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM view_attendance " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ViewAttendanceBean bean into the database.
     *
     * @param bean the ViewAttendanceBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ViewAttendanceBean save(ViewAttendanceBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the ViewAttendanceBean bean into the database.
     *
     * @param bean the ViewAttendanceBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public ViewAttendanceBean insert(ViewAttendanceBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into view_attendance (");

            if (bean.isTbsOutTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbs_out_time");
                _dirtyCount++;
            }

            if (bean.isTbsInTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbs_in_time");
                _dirtyCount++;
            }

            if (bean.isTbsNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbs_name");
                _dirtyCount++;
            }

            if (bean.isTbsShiftIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbs_shift_id");
                _dirtyCount++;
            }

            if (bean.isTbsIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbs_id");
                _dirtyCount++;
            }

            if (bean.isTbaOutPhotoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_out_photo");
                _dirtyCount++;
            }

            if (bean.isTbaInPhotoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_in_photo");
                _dirtyCount++;
            }

            if (bean.isTbaOutLatitudeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_out_latitude");
                _dirtyCount++;
            }

            if (bean.isTbaOutLongitudeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_out_longitude");
                _dirtyCount++;
            }

            if (bean.isTbaInLatitudeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_in_latitude");
                _dirtyCount++;
            }

            if (bean.isTbaInLongitudeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_in_longitude");
                _dirtyCount++;
            }

            if (bean.isTbaOutTimeDiffModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_out_time_diff");
                _dirtyCount++;
            }

            if (bean.isTbaInTimeDiffModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_in_time_diff");
                _dirtyCount++;
            }

            if (bean.isTbaOutNoteModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_out_note");
                _dirtyCount++;
            }

            if (bean.isTbaInNoteModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_in_note");
                _dirtyCount++;
            }

            if (bean.isTbaOutTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_out_time");
                _dirtyCount++;
            }

            if (bean.isTbaInTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_in_time");
                _dirtyCount++;
            }

            if (bean.isTbaDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_date");
                _dirtyCount++;
            }

            if (bean.isTbeNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_name");
                _dirtyCount++;
            }

            if (bean.isTbeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the ViewAttendanceBean bean record in the database according to the changes.
     *
     * @param bean the ViewAttendanceBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ViewAttendanceBean update(ViewAttendanceBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();


            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE view_attendance SET ");
            boolean useComma=false;

            if (bean.isTbsOutTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbs_out_time=?");
            }

            if (bean.isTbsInTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbs_in_time=?");
            }

            if (bean.isTbsNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbs_name=?");
            }

            if (bean.isTbsShiftIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbs_shift_id=?");
            }

            if (bean.isTbsIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbs_id=?");
            }

            if (bean.isTbaOutPhotoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_out_photo=?");
            }

            if (bean.isTbaInPhotoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_in_photo=?");
            }

            if (bean.isTbaOutLatitudeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_out_latitude=?");
            }

            if (bean.isTbaOutLongitudeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_out_longitude=?");
            }

            if (bean.isTbaInLatitudeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_in_latitude=?");
            }

            if (bean.isTbaInLongitudeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_in_longitude=?");
            }

            if (bean.isTbaOutTimeDiffModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_out_time_diff=?");
            }

            if (bean.isTbaInTimeDiffModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_in_time_diff=?");
            }

            if (bean.isTbaOutNoteModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_out_note=?");
            }

            if (bean.isTbaInNoteModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_in_note=?");
            }

            if (bean.isTbaOutTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_out_time=?");
            }

            if (bean.isTbaInTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_in_time=?");
            }

            if (bean.isTbaDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_date=?");
            }

            if (bean.isTbeNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_name=?");
            }

            if (bean.isTbeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id=?");
            }
            sql.append("");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of ViewAttendanceBean beans into the database.
     *
     * @param beans the ViewAttendanceBean bean table to be saved
     * @return the saved ViewAttendanceBean array.
     * @throws DAOException
     */
    //15
    public ViewAttendanceBean[] save(ViewAttendanceBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of ViewAttendanceBean beans into the database.
     *
     * @param beans the ViewAttendanceBean bean table to be inserted
     * @return the saved ViewAttendanceBean array.
     * @throws DAOException
     */
    //16
    public ViewAttendanceBean[] insert(ViewAttendanceBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of ViewAttendanceBean beans into the database.
     *
     * @param beans the ViewAttendanceBean bean table to be inserted
     * @return the saved ViewAttendanceBean array.
     * @throws DAOException
     */
    //17
    public ViewAttendanceBean[] update(ViewAttendanceBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique ViewAttendanceBean bean from a template one giving a c
     *
     * @param bean the ViewAttendanceBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public ViewAttendanceBean loadUniqueUsingTemplate(ViewAttendanceBean bean) throws DAOException
    {
         ViewAttendanceBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of ViewAttendanceBean from a template one.
     *
     * @param bean the ViewAttendanceBean template to look for
     * @return all the ViewAttendanceBean matching the template
     * @throws DAOException
     */
    //19
    public ViewAttendanceBean[] loadUsingTemplate(ViewAttendanceBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of ViewAttendanceBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewAttendanceBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the ViewAttendanceBean matching the template
     * @throws DAOException
     */
    //20
    public ViewAttendanceBean[] loadUsingTemplate(ViewAttendanceBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of ViewAttendanceBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewAttendanceBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the ViewAttendanceBean matching the template
     * @throws DAOException
     */
    //20
    public ViewAttendanceBean[] loadUsingTemplate(ViewAttendanceBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_attendance ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a ViewAttendanceBean template.
     *
     * @param bean the ViewAttendanceBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(ViewAttendanceBean bean) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM view_attendance ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table view_attendance.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table view_attendance with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM view_attendance " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table view_attendance with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific ViewAttendanceBean bean
     *
     * @param bean the ViewAttendanceBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(ViewAttendanceBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific ViewAttendanceBean bean , given the start row and number of rows.
     *
     * @param bean the ViewAttendanceBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewAttendanceBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific ViewAttendanceBean bean given the start row and number of rows and the search type
     *
     * @param bean the ViewAttendanceBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewAttendanceBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM view_attendance");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, ViewAttendanceBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbsOutTimeModified()) {
                _dirtyCount ++;
                if (bean.getTbsOutTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_out_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_out_time ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbsInTimeModified()) {
                _dirtyCount ++;
                if (bean.getTbsInTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_in_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_in_time ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbsNameModified()) {
                _dirtyCount ++;
                if (bean.getTbsName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbsShiftIdModified()) {
                _dirtyCount ++;
                if (bean.getTbsShiftId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_shift_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_shift_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbsIdModified()) {
                _dirtyCount ++;
                if (bean.getTbsId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_id = ?");
                }
            }
            if (bean.isTbaOutPhotoModified()) {
                _dirtyCount ++;
                if (bean.getTbaOutPhoto() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_photo IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_photo ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaInPhotoModified()) {
                _dirtyCount ++;
                if (bean.getTbaInPhoto() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_photo IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_photo ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaOutLatitudeModified()) {
                _dirtyCount ++;
                if (bean.getTbaOutLatitude() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_latitude IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_latitude ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaOutLongitudeModified()) {
                _dirtyCount ++;
                if (bean.getTbaOutLongitude() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_longitude IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_longitude ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaInLatitudeModified()) {
                _dirtyCount ++;
                if (bean.getTbaInLatitude() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_latitude IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_latitude ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaInLongitudeModified()) {
                _dirtyCount ++;
                if (bean.getTbaInLongitude() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_longitude IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_longitude ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaOutTimeDiffModified()) {
                _dirtyCount ++;
                if (bean.getTbaOutTimeDiff() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_time_diff IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_time_diff = ?");
                }
            }
            if (bean.isTbaInTimeDiffModified()) {
                _dirtyCount ++;
                if (bean.getTbaInTimeDiff() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_time_diff IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_time_diff = ?");
                }
            }
            if (bean.isTbaOutNoteModified()) {
                _dirtyCount ++;
                if (bean.getTbaOutNote() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_note IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_note ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaInNoteModified()) {
                _dirtyCount ++;
                if (bean.getTbaInNote() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_note IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_note ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaOutTimeModified()) {
                _dirtyCount ++;
                if (bean.getTbaOutTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_out_time ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaInTimeModified()) {
                _dirtyCount ++;
                if (bean.getTbaInTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_in_time ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaDateModified()) {
                _dirtyCount ++;
                if (bean.getTbaDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_date ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, ViewAttendanceBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbsOutTimeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbsOutTime() + "]");
                        if (bean.getTbsOutTime() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbsOutTime()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbsOutTime() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbsOutTime() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbsOutTime() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbsOutTime());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbsOutTime() + "]");
                        if (bean.getTbsOutTime() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbsOutTime() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbsInTimeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbsInTime() + "]");
                        if (bean.getTbsInTime() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbsInTime()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbsInTime() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbsInTime() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbsInTime() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbsInTime());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbsInTime() + "]");
                        if (bean.getTbsInTime() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbsInTime() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbsNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbsName() + "]");
                        if (bean.getTbsName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbsName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbsName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbsName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbsName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbsName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbsName() + "]");
                        if (bean.getTbsName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbsName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbsShiftIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbsShiftId() + "]");
                        if (bean.getTbsShiftId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbsShiftId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbsShiftId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbsShiftId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbsShiftId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbsShiftId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbsShiftId() + "]");
                        if (bean.getTbsShiftId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbsShiftId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbsIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbsId() + "]");
                if (bean.getTbsId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbsId()); }
            }
            if (bean.isTbaOutPhotoModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaOutPhoto() + "]");
                        if (bean.getTbaOutPhoto() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaOutPhoto()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaOutPhoto() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaOutPhoto() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaOutPhoto() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaOutPhoto());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaOutPhoto() + "]");
                        if (bean.getTbaOutPhoto() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaOutPhoto() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaInPhotoModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaInPhoto() + "]");
                        if (bean.getTbaInPhoto() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaInPhoto()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaInPhoto() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaInPhoto() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaInPhoto() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaInPhoto());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaInPhoto() + "]");
                        if (bean.getTbaInPhoto() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaInPhoto() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaOutLatitudeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaOutLatitude() + "]");
                        if (bean.getTbaOutLatitude() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaOutLatitude()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaOutLatitude() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaOutLatitude() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaOutLatitude() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaOutLatitude());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaOutLatitude() + "]");
                        if (bean.getTbaOutLatitude() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaOutLatitude() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaOutLongitudeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaOutLongitude() + "]");
                        if (bean.getTbaOutLongitude() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaOutLongitude()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaOutLongitude() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaOutLongitude() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaOutLongitude() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaOutLongitude());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaOutLongitude() + "]");
                        if (bean.getTbaOutLongitude() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaOutLongitude() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaInLatitudeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaInLatitude() + "]");
                        if (bean.getTbaInLatitude() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaInLatitude()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaInLatitude() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaInLatitude() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaInLatitude() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaInLatitude());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaInLatitude() + "]");
                        if (bean.getTbaInLatitude() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaInLatitude() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaInLongitudeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaInLongitude() + "]");
                        if (bean.getTbaInLongitude() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaInLongitude()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaInLongitude() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaInLongitude() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaInLongitude() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaInLongitude());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaInLongitude() + "]");
                        if (bean.getTbaInLongitude() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaInLongitude() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaOutTimeDiffModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaOutTimeDiff() + "]");
                if (bean.getTbaOutTimeDiff() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbaOutTimeDiff()); }
            }
            if (bean.isTbaInTimeDiffModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaInTimeDiff() + "]");
                if (bean.getTbaInTimeDiff() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbaInTimeDiff()); }
            }
            if (bean.isTbaOutNoteModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaOutNote() + "]");
                        if (bean.getTbaOutNote() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaOutNote()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaOutNote() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaOutNote() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaOutNote() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaOutNote());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaOutNote() + "]");
                        if (bean.getTbaOutNote() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaOutNote() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaInNoteModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaInNote() + "]");
                        if (bean.getTbaInNote() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaInNote()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaInNote() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaInNote() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaInNote() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaInNote());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaInNote() + "]");
                        if (bean.getTbaInNote() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaInNote() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaOutTimeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaOutTime() + "]");
                        if (bean.getTbaOutTime() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaOutTime()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaOutTime() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaOutTime() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaOutTime() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaOutTime());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaOutTime() + "]");
                        if (bean.getTbaOutTime() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaOutTime() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaInTimeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaInTime() + "]");
                        if (bean.getTbaInTime() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaInTime()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaInTime() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaInTime() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaInTime() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaInTime());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaInTime() + "]");
                        if (bean.getTbaInTime() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaInTime() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaDateModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaDate() + "]");
                        if (bean.getTbaDate() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaDate()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaDate() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaDate() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaDate() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaDate());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaDate() + "]");
                        if (bean.getTbaDate() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaDate() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "]");
                        if (bean.getTbeName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "]");
                        if (bean.getTbeName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeId() + "]");
                if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of ViewAttendanceBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting ViewAttendanceBean table
     * @throws DAOException
     */
    //28
    public ViewAttendanceBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (ViewAttendanceBean[])v.toArray(new ViewAttendanceBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the view_attendance on a ViewAttendanceBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewAttendanceBean bean
     * @throws DAOException
     */
    //29
    public ViewAttendanceBean decodeRow(ResultSet rs) throws DAOException
    {
        ViewAttendanceBean bean = this.createViewAttendanceBean();
        try
        {
            bean.setTbsOutTime(rs.getString(1));
            bean.setTbsInTime(rs.getString(2));
            bean.setTbsName(rs.getString(3));
            bean.setTbsShiftId(rs.getString(4));
            bean.setTbsId(Manager.getInteger(rs, 5));
            bean.setTbaOutPhoto(rs.getString(6));
            bean.setTbaInPhoto(rs.getString(7));
            bean.setTbaOutLatitude(rs.getString(8));
            bean.setTbaOutLongitude(rs.getString(9));
            bean.setTbaInLatitude(rs.getString(10));
            bean.setTbaInLongitude(rs.getString(11));
            bean.setTbaOutTimeDiff(Manager.getInteger(rs, 12));
            bean.setTbaInTimeDiff(Manager.getInteger(rs, 13));
            bean.setTbaOutNote(rs.getString(14));
            bean.setTbaInNote(rs.getString(15));
            bean.setTbaOutTime(rs.getString(16));
            bean.setTbaInTime(rs.getString(17));
            bean.setTbaDate(rs.getString(18));
            bean.setTbeName(rs.getString(19));
            bean.setTbeId(Manager.getInteger(rs, 20));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public ViewAttendanceBean toBean(ViewAttendanceBeanModel beanModel, ViewAttendanceBean bean)
    {
		if (beanModel.getTbsOutTime() != null)
			bean.setTbsOutTime(beanModel.getTbsOutTime());

		if (bean.getTbsOutTime() != null)
		if ("java.sql.Timestamp".equals(bean.getTbsOutTime().getClass().getName()))
			bean.setTbsOutTime(beanModel.getTbsOutTime());
		
		if (beanModel.getTbsInTime() != null)
			bean.setTbsInTime(beanModel.getTbsInTime());

		if (bean.getTbsInTime() != null)
		if ("java.sql.Timestamp".equals(bean.getTbsInTime().getClass().getName()))
			bean.setTbsInTime(beanModel.getTbsInTime());
		
		if (beanModel.getTbsName() != null)
			bean.setTbsName(beanModel.getTbsName());

		if (bean.getTbsName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbsName().getClass().getName()))
			bean.setTbsName(beanModel.getTbsName());
		
		if (beanModel.getTbsShiftId() != null)
			bean.setTbsShiftId(beanModel.getTbsShiftId());

		if (bean.getTbsShiftId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbsShiftId().getClass().getName()))
			bean.setTbsShiftId(beanModel.getTbsShiftId());
		
		if (beanModel.getTbsId() != null)
			bean.setTbsId(beanModel.getTbsId());

		if (bean.getTbsId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbsId().getClass().getName()))
			bean.setTbsId(beanModel.getTbsId());
		
		if (beanModel.getTbaOutPhoto() != null)
			bean.setTbaOutPhoto(beanModel.getTbaOutPhoto());

		if (bean.getTbaOutPhoto() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaOutPhoto().getClass().getName()))
			bean.setTbaOutPhoto(beanModel.getTbaOutPhoto());
		
		if (beanModel.getTbaInPhoto() != null)
			bean.setTbaInPhoto(beanModel.getTbaInPhoto());

		if (bean.getTbaInPhoto() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaInPhoto().getClass().getName()))
			bean.setTbaInPhoto(beanModel.getTbaInPhoto());
		
		if (beanModel.getTbaOutLatitude() != null)
			bean.setTbaOutLatitude(beanModel.getTbaOutLatitude());

		if (bean.getTbaOutLatitude() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaOutLatitude().getClass().getName()))
			bean.setTbaOutLatitude(beanModel.getTbaOutLatitude());
		
		if (beanModel.getTbaOutLongitude() != null)
			bean.setTbaOutLongitude(beanModel.getTbaOutLongitude());

		if (bean.getTbaOutLongitude() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaOutLongitude().getClass().getName()))
			bean.setTbaOutLongitude(beanModel.getTbaOutLongitude());
		
		if (beanModel.getTbaInLatitude() != null)
			bean.setTbaInLatitude(beanModel.getTbaInLatitude());

		if (bean.getTbaInLatitude() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaInLatitude().getClass().getName()))
			bean.setTbaInLatitude(beanModel.getTbaInLatitude());
		
		if (beanModel.getTbaInLongitude() != null)
			bean.setTbaInLongitude(beanModel.getTbaInLongitude());

		if (bean.getTbaInLongitude() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaInLongitude().getClass().getName()))
			bean.setTbaInLongitude(beanModel.getTbaInLongitude());
		
		if (beanModel.getTbaOutTimeDiff() != null)
			bean.setTbaOutTimeDiff(beanModel.getTbaOutTimeDiff());

		if (bean.getTbaOutTimeDiff() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaOutTimeDiff().getClass().getName()))
			bean.setTbaOutTimeDiff(beanModel.getTbaOutTimeDiff());
		
		if (beanModel.getTbaInTimeDiff() != null)
			bean.setTbaInTimeDiff(beanModel.getTbaInTimeDiff());

		if (bean.getTbaInTimeDiff() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaInTimeDiff().getClass().getName()))
			bean.setTbaInTimeDiff(beanModel.getTbaInTimeDiff());
		
		if (beanModel.getTbaOutNote() != null)
			bean.setTbaOutNote(beanModel.getTbaOutNote());

		if (bean.getTbaOutNote() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaOutNote().getClass().getName()))
			bean.setTbaOutNote(beanModel.getTbaOutNote());
		
		if (beanModel.getTbaInNote() != null)
			bean.setTbaInNote(beanModel.getTbaInNote());

		if (bean.getTbaInNote() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaInNote().getClass().getName()))
			bean.setTbaInNote(beanModel.getTbaInNote());
		
		if (beanModel.getTbaOutTime() != null)
			bean.setTbaOutTime(beanModel.getTbaOutTime());

		if (bean.getTbaOutTime() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaOutTime().getClass().getName()))
			bean.setTbaOutTime(beanModel.getTbaOutTime());
		
		if (beanModel.getTbaInTime() != null)
			bean.setTbaInTime(beanModel.getTbaInTime());

		if (bean.getTbaInTime() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaInTime().getClass().getName()))
			bean.setTbaInTime(beanModel.getTbaInTime());
		
		if (beanModel.getTbaDate() != null)
			bean.setTbaDate(beanModel.getTbaDate());

		if (bean.getTbaDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaDate().getClass().getName()))
			bean.setTbaDate(beanModel.getTbaDate());
		
		if (beanModel.getTbeName() != null)
			bean.setTbeName(beanModel.getTbeName());

		if (bean.getTbeName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeName().getClass().getName()))
			bean.setTbeName(beanModel.getTbeName());
		
		if (beanModel.getTbeId() != null)
			bean.setTbeId(beanModel.getTbeId());

		if (bean.getTbeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeId().getClass().getName()))
			bean.setTbeId(beanModel.getTbeId());
		
        return bean;
    }
	
    //29AA
    public ViewAttendanceBean[] toBeans(ViewAttendanceBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	ViewAttendanceBean beans[] = new ViewAttendanceBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public ViewAttendanceBeanModel toBeanModel(ViewAttendanceBean bean)
    {
    	ViewAttendanceBeanModel beanModel = new ViewAttendanceBeanModel();
		beanModel.setTbsOutTime(bean.getTbsOutTime());
		beanModel.setTbsInTime(bean.getTbsInTime());
		beanModel.setTbsName(bean.getTbsName());
		beanModel.setTbsShiftId(bean.getTbsShiftId());
		beanModel.setTbsId(bean.getTbsId());
		beanModel.setTbaOutPhoto(bean.getTbaOutPhoto());
		beanModel.setTbaInPhoto(bean.getTbaInPhoto());
		beanModel.setTbaOutLatitude(bean.getTbaOutLatitude());
		beanModel.setTbaOutLongitude(bean.getTbaOutLongitude());
		beanModel.setTbaInLatitude(bean.getTbaInLatitude());
		beanModel.setTbaInLongitude(bean.getTbaInLongitude());
		beanModel.setTbaOutTimeDiff(bean.getTbaOutTimeDiff());
		beanModel.setTbaInTimeDiff(bean.getTbaInTimeDiff());
		beanModel.setTbaOutNote(bean.getTbaOutNote());
		beanModel.setTbaInNote(bean.getTbaInNote());
		beanModel.setTbaOutTime(bean.getTbaOutTime());
		beanModel.setTbaInTime(bean.getTbaInTime());
		beanModel.setTbaDate(bean.getTbaDate());
		beanModel.setTbeName(bean.getTbeName());
		beanModel.setTbeId(bean.getTbeId());
		return beanModel;
    }
    
    //29CC
    public ViewAttendanceBeanModel[] toBeanModels(ViewAttendanceBean beans[])
    {
    	int beansCount = beans.length;
    	ViewAttendanceBeanModel beanModels[] = new ViewAttendanceBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the view_attendance table on a ViewAttendanceBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting ViewAttendanceBean bean
     * @throws DAOException
     */
    //30
    public ViewAttendanceBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        ViewAttendanceBean bean = this.createViewAttendanceBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBS_OUT_TIME:
                        ++pos;
                        bean.setTbsOutTime(rs.getString(pos));
                        break;
                    case ID_TBS_IN_TIME:
                        ++pos;
                        bean.setTbsInTime(rs.getString(pos));
                        break;
                    case ID_TBS_NAME:
                        ++pos;
                        bean.setTbsName(rs.getString(pos));
                        break;
                    case ID_TBS_SHIFT_ID:
                        ++pos;
                        bean.setTbsShiftId(rs.getString(pos));
                        break;
                    case ID_TBS_ID:
                        ++pos;
                        bean.setTbsId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBA_OUT_PHOTO:
                        ++pos;
                        bean.setTbaOutPhoto(rs.getString(pos));
                        break;
                    case ID_TBA_IN_PHOTO:
                        ++pos;
                        bean.setTbaInPhoto(rs.getString(pos));
                        break;
                    case ID_TBA_OUT_LATITUDE:
                        ++pos;
                        bean.setTbaOutLatitude(rs.getString(pos));
                        break;
                    case ID_TBA_OUT_LONGITUDE:
                        ++pos;
                        bean.setTbaOutLongitude(rs.getString(pos));
                        break;
                    case ID_TBA_IN_LATITUDE:
                        ++pos;
                        bean.setTbaInLatitude(rs.getString(pos));
                        break;
                    case ID_TBA_IN_LONGITUDE:
                        ++pos;
                        bean.setTbaInLongitude(rs.getString(pos));
                        break;
                    case ID_TBA_OUT_TIME_DIFF:
                        ++pos;
                        bean.setTbaOutTimeDiff(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBA_IN_TIME_DIFF:
                        ++pos;
                        bean.setTbaInTimeDiff(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBA_OUT_NOTE:
                        ++pos;
                        bean.setTbaOutNote(rs.getString(pos));
                        break;
                    case ID_TBA_IN_NOTE:
                        ++pos;
                        bean.setTbaInNote(rs.getString(pos));
                        break;
                    case ID_TBA_OUT_TIME:
                        ++pos;
                        bean.setTbaOutTime(rs.getString(pos));
                        break;
                    case ID_TBA_IN_TIME:
                        ++pos;
                        bean.setTbaInTime(rs.getString(pos));
                        break;
                    case ID_TBA_DATE:
                        ++pos;
                        bean.setTbaDate(rs.getString(pos));
                        break;
                    case ID_TBE_NAME:
                        ++pos;
                        bean.setTbeName(rs.getString(pos));
                        break;
                    case ID_TBE_ID:
                        ++pos;
                        bean.setTbeId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the view_attendance on a ViewAttendanceBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewAttendanceBean bean
     * @throws DAOException
     */
    //31
    public ViewAttendanceBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        ViewAttendanceBean bean = this.createViewAttendanceBean();
        try
        {
            bean.setTbsOutTime(rs.getString("tbs_out_time"));
            bean.setTbsInTime(rs.getString("tbs_in_time"));
            bean.setTbsName(rs.getString("tbs_name"));
            bean.setTbsShiftId(rs.getString("tbs_shift_id"));
            bean.setTbsId(Manager.getInteger(rs, "tbs_id"));
            bean.setTbaOutPhoto(rs.getString("tba_out_photo"));
            bean.setTbaInPhoto(rs.getString("tba_in_photo"));
            bean.setTbaOutLatitude(rs.getString("tba_out_latitude"));
            bean.setTbaOutLongitude(rs.getString("tba_out_longitude"));
            bean.setTbaInLatitude(rs.getString("tba_in_latitude"));
            bean.setTbaInLongitude(rs.getString("tba_in_longitude"));
            bean.setTbaOutTimeDiff(Manager.getInteger(rs, "tba_out_time_diff"));
            bean.setTbaInTimeDiff(Manager.getInteger(rs, "tba_in_time_diff"));
            bean.setTbaOutNote(rs.getString("tba_out_note"));
            bean.setTbaInNote(rs.getString("tba_in_note"));
            bean.setTbaOutTime(rs.getString("tba_out_time"));
            bean.setTbaInTime(rs.getString("tba_in_time"));
            bean.setTbaDate(rs.getString("tba_date"));
            bean.setTbeName(rs.getString("tbe_name"));
            bean.setTbeId(Manager.getInteger(rs, "tbe_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ViewAttendanceBean
     * @throws DAOException
     */
    //32
    public ViewAttendanceBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ViewAttendanceBean
     * @throws DAOException
     */
    //33
    public ViewAttendanceBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (ViewAttendanceBean[])v.toArray(new ViewAttendanceBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of ViewAttendanceBean
     * @throws DAOException
     */
    //34
    public ViewAttendanceBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private ViewAttendanceListener listener = null;

    /**
     * Registers a unique ViewAttendanceListener listener.
     */
    //35
    public void registerListener(ViewAttendanceListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the ViewAttendanceBean bean.
     *
     * @param bean the ViewAttendanceBean bean to be saved
     */
    //36
    private void beforeInsert(ViewAttendanceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the ViewAttendanceBean bean.
     *
     * @param bean the ViewAttendanceBean bean to be saved
     */
    //37
    private void afterInsert(ViewAttendanceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the ViewAttendanceBean bean.
     *
     * @param bean the ViewAttendanceBean bean to be updated
     */
    //38
    private void beforeUpdate(ViewAttendanceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the ViewAttendanceBean bean.
     *
     * @param bean the ViewAttendanceBean bean to be updated
     */
    //39
    private void afterUpdate(ViewAttendanceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the ViewAttendanceBean bean.
     *
     * @param bean the ViewAttendanceBean bean to be deleted
     */
    private void beforeDelete(ViewAttendanceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the ViewAttendanceBean bean.
     *
     * @param bean the ViewAttendanceBean bean to be deleted
     */
    private void afterDelete(ViewAttendanceBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
