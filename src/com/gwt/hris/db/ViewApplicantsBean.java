// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewApplicantsBean is a mapping of view_applicants Table.
 * @author sql2java
*/
public class ViewApplicantsBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -7515628594502863897L;
	
    private String tbaResumeFileNameExisting;

    private boolean tbaResumeFileNameExistingIsModified = false;
    private boolean tbaResumeFileNameExistingIsInitialized = false;

    private String tbaResumeFileName;

    private boolean tbaResumeFileNameIsModified = false;
    private boolean tbaResumeFileNameIsInitialized = false;

    private Integer tbaStatus;

    private boolean tbaStatusIsModified = false;
    private boolean tbaStatusIsInitialized = false;

    private java.sql.Timestamp tbaDate;

    private boolean tbaDateIsModified = false;
    private boolean tbaDateIsInitialized = false;

    private String tbaName;

    private boolean tbaNameIsModified = false;
    private boolean tbaNameIsInitialized = false;

    private String tbaApplicantsId;

    private boolean tbaApplicantsIdIsModified = false;
    private boolean tbaApplicantsIdIsInitialized = false;

    private Integer tbaId;

    private boolean tbaIdIsModified = false;
    private boolean tbaIdIsInitialized = false;

    private String tbjtName;

    private boolean tbjtNameIsModified = false;
    private boolean tbjtNameIsInitialized = false;

    private Integer tbjtId;

    private boolean tbjtIdIsModified = false;
    private boolean tbjtIdIsInitialized = false;

    private Integer tbvPublishWeb;

    private boolean tbvPublishWebIsModified = false;
    private boolean tbvPublishWebIsInitialized = false;

    private Integer tbvPublishRss;

    private boolean tbvPublishRssIsModified = false;
    private boolean tbvPublishRssIsInitialized = false;

    private Integer tbvActive;

    private boolean tbvActiveIsModified = false;
    private boolean tbvActiveIsInitialized = false;

    private String tbvName;

    private boolean tbvNameIsModified = false;
    private boolean tbvNameIsInitialized = false;

    private String tbvVacancyId;

    private boolean tbvVacancyIdIsModified = false;
    private boolean tbvVacancyIdIsInitialized = false;

    private Integer tbvId;

    private boolean tbvIdIsModified = false;
    private boolean tbvIdIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewApplicantsBean is via the createViewApplicantsBean method in ViewApplicantsManager or
     * via the factory class ViewApplicantsFactory create method
     */
    protected ViewApplicantsBean()
    {
    }

    /**
     * Getter method for tbaResumeFileNameExisting.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tba_resume_file_name_existing</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaResumeFileNameExisting
     */
    public String getTbaResumeFileNameExisting()
    {
        return tbaResumeFileNameExisting;
    }

    /**
     * Setter method for tbaResumeFileNameExisting.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaResumeFileNameExisting
     */
    public void setTbaResumeFileNameExisting(String newVal)
    {
        if ((newVal != null && tbaResumeFileNameExisting != null && (newVal.compareTo(tbaResumeFileNameExisting) == 0)) ||
            (newVal == null && tbaResumeFileNameExisting == null && tbaResumeFileNameExistingIsInitialized)) {
            return;
        }
        tbaResumeFileNameExisting = newVal;
        tbaResumeFileNameExistingIsModified = true;
        tbaResumeFileNameExistingIsInitialized = true;
    }

    /**
     * Determines if the tbaResumeFileNameExisting has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaResumeFileNameExistingModified()
    {
        return tbaResumeFileNameExistingIsModified;
    }

    /**
     * Determines if the tbaResumeFileNameExisting has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaResumeFileNameExistingInitialized()
    {
        return tbaResumeFileNameExistingIsInitialized;
    }

    /**
     * Getter method for tbaResumeFileName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tba_resume_file_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaResumeFileName
     */
    public String getTbaResumeFileName()
    {
        return tbaResumeFileName;
    }

    /**
     * Setter method for tbaResumeFileName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaResumeFileName
     */
    public void setTbaResumeFileName(String newVal)
    {
        if ((newVal != null && tbaResumeFileName != null && (newVal.compareTo(tbaResumeFileName) == 0)) ||
            (newVal == null && tbaResumeFileName == null && tbaResumeFileNameIsInitialized)) {
            return;
        }
        tbaResumeFileName = newVal;
        tbaResumeFileNameIsModified = true;
        tbaResumeFileNameIsInitialized = true;
    }

    /**
     * Determines if the tbaResumeFileName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaResumeFileNameModified()
    {
        return tbaResumeFileNameIsModified;
    }

    /**
     * Determines if the tbaResumeFileName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaResumeFileNameInitialized()
    {
        return tbaResumeFileNameIsInitialized;
    }

    /**
     * Getter method for tbaStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tba_status</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaStatus
     */
    public Integer getTbaStatus()
    {
        return tbaStatus;
    }

    /**
     * Setter method for tbaStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaStatus
     */
    public void setTbaStatus(Integer newVal)
    {
        if ((newVal != null && tbaStatus != null && (newVal.compareTo(tbaStatus) == 0)) ||
            (newVal == null && tbaStatus == null && tbaStatusIsInitialized)) {
            return;
        }
        tbaStatus = newVal;
        tbaStatusIsModified = true;
        tbaStatusIsInitialized = true;
    }

    /**
     * Setter method for tbaStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaStatus
     */
    public void setTbaStatus(int newVal)
    {
        setTbaStatus(new Integer(newVal));
    }

    /**
     * Determines if the tbaStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaStatusModified()
    {
        return tbaStatusIsModified;
    }

    /**
     * Determines if the tbaStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaStatusInitialized()
    {
        return tbaStatusIsInitialized;
    }

    /**
     * Getter method for tbaDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tba_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaDate
     */
    public java.sql.Timestamp getTbaDate()
    {
        return tbaDate;
    }

    /**
     * Setter method for tbaDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaDate
     */
    public void setTbaDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaDate != null && (newVal.compareTo(tbaDate) == 0)) ||
            (newVal == null && tbaDate == null && tbaDateIsInitialized)) {
            return;
        }
        tbaDate = newVal;
        tbaDateIsModified = true;
        tbaDateIsInitialized = true;
    }

    /**
     * Setter method for tbaDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaDate
     */
    public void setTbaDate(long newVal)
    {
        setTbaDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaDateModified()
    {
        return tbaDateIsModified;
    }

    /**
     * Determines if the tbaDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaDateInitialized()
    {
        return tbaDateIsInitialized;
    }

    /**
     * Getter method for tbaName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tba_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaName
     */
    public String getTbaName()
    {
        return tbaName;
    }

    /**
     * Setter method for tbaName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaName
     */
    public void setTbaName(String newVal)
    {
        if ((newVal != null && tbaName != null && (newVal.compareTo(tbaName) == 0)) ||
            (newVal == null && tbaName == null && tbaNameIsInitialized)) {
            return;
        }
        tbaName = newVal;
        tbaNameIsModified = true;
        tbaNameIsInitialized = true;
    }

    /**
     * Determines if the tbaName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaNameModified()
    {
        return tbaNameIsModified;
    }

    /**
     * Determines if the tbaName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaNameInitialized()
    {
        return tbaNameIsInitialized;
    }

    /**
     * Getter method for tbaApplicantsId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tba_applicants_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaApplicantsId
     */
    public String getTbaApplicantsId()
    {
        return tbaApplicantsId;
    }

    /**
     * Setter method for tbaApplicantsId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaApplicantsId
     */
    public void setTbaApplicantsId(String newVal)
    {
        if ((newVal != null && tbaApplicantsId != null && (newVal.compareTo(tbaApplicantsId) == 0)) ||
            (newVal == null && tbaApplicantsId == null && tbaApplicantsIdIsInitialized)) {
            return;
        }
        tbaApplicantsId = newVal;
        tbaApplicantsIdIsModified = true;
        tbaApplicantsIdIsInitialized = true;
    }

    /**
     * Determines if the tbaApplicantsId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaApplicantsIdModified()
    {
        return tbaApplicantsIdIsModified;
    }

    /**
     * Determines if the tbaApplicantsId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaApplicantsIdInitialized()
    {
        return tbaApplicantsIdIsInitialized;
    }

    /**
     * Getter method for tbaId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tba_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaId
     */
    public Integer getTbaId()
    {
        return tbaId;
    }

    /**
     * Setter method for tbaId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaId
     */
    public void setTbaId(Integer newVal)
    {
        if ((newVal != null && tbaId != null && (newVal.compareTo(tbaId) == 0)) ||
            (newVal == null && tbaId == null && tbaIdIsInitialized)) {
            return;
        }
        tbaId = newVal;
        tbaIdIsModified = true;
        tbaIdIsInitialized = true;
    }

    /**
     * Setter method for tbaId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaId
     */
    public void setTbaId(int newVal)
    {
        setTbaId(new Integer(newVal));
    }

    /**
     * Determines if the tbaId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaIdModified()
    {
        return tbaIdIsModified;
    }

    /**
     * Determines if the tbaId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaIdInitialized()
    {
        return tbaIdIsInitialized;
    }

    /**
     * Getter method for tbjtName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tbjt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtName
     */
    public String getTbjtName()
    {
        return tbjtName;
    }

    /**
     * Setter method for tbjtName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtName
     */
    public void setTbjtName(String newVal)
    {
        if ((newVal != null && tbjtName != null && (newVal.compareTo(tbjtName) == 0)) ||
            (newVal == null && tbjtName == null && tbjtNameIsInitialized)) {
            return;
        }
        tbjtName = newVal;
        tbjtNameIsModified = true;
        tbjtNameIsInitialized = true;
    }

    /**
     * Determines if the tbjtName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtNameModified()
    {
        return tbjtNameIsModified;
    }

    /**
     * Determines if the tbjtName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtNameInitialized()
    {
        return tbjtNameIsInitialized;
    }

    /**
     * Getter method for tbjtId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tbjt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtId
     */
    public Integer getTbjtId()
    {
        return tbjtId;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(Integer newVal)
    {
        if ((newVal != null && tbjtId != null && (newVal.compareTo(tbjtId) == 0)) ||
            (newVal == null && tbjtId == null && tbjtIdIsInitialized)) {
            return;
        }
        tbjtId = newVal;
        tbjtIdIsModified = true;
        tbjtIdIsInitialized = true;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(int newVal)
    {
        setTbjtId(new Integer(newVal));
    }

    /**
     * Determines if the tbjtId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtIdModified()
    {
        return tbjtIdIsModified;
    }

    /**
     * Determines if the tbjtId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtIdInitialized()
    {
        return tbjtIdIsInitialized;
    }

    /**
     * Getter method for tbvPublishWeb.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tbv_publish_web</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbvPublishWeb
     */
    public Integer getTbvPublishWeb()
    {
        return tbvPublishWeb;
    }

    /**
     * Setter method for tbvPublishWeb.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvPublishWeb
     */
    public void setTbvPublishWeb(Integer newVal)
    {
        if ((newVal != null && tbvPublishWeb != null && (newVal.compareTo(tbvPublishWeb) == 0)) ||
            (newVal == null && tbvPublishWeb == null && tbvPublishWebIsInitialized)) {
            return;
        }
        tbvPublishWeb = newVal;
        tbvPublishWebIsModified = true;
        tbvPublishWebIsInitialized = true;
    }

    /**
     * Setter method for tbvPublishWeb.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbvPublishWeb
     */
    public void setTbvPublishWeb(int newVal)
    {
        setTbvPublishWeb(new Integer(newVal));
    }

    /**
     * Determines if the tbvPublishWeb has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvPublishWebModified()
    {
        return tbvPublishWebIsModified;
    }

    /**
     * Determines if the tbvPublishWeb has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvPublishWebInitialized()
    {
        return tbvPublishWebIsInitialized;
    }

    /**
     * Getter method for tbvPublishRss.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tbv_publish_rss</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbvPublishRss
     */
    public Integer getTbvPublishRss()
    {
        return tbvPublishRss;
    }

    /**
     * Setter method for tbvPublishRss.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvPublishRss
     */
    public void setTbvPublishRss(Integer newVal)
    {
        if ((newVal != null && tbvPublishRss != null && (newVal.compareTo(tbvPublishRss) == 0)) ||
            (newVal == null && tbvPublishRss == null && tbvPublishRssIsInitialized)) {
            return;
        }
        tbvPublishRss = newVal;
        tbvPublishRssIsModified = true;
        tbvPublishRssIsInitialized = true;
    }

    /**
     * Setter method for tbvPublishRss.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbvPublishRss
     */
    public void setTbvPublishRss(int newVal)
    {
        setTbvPublishRss(new Integer(newVal));
    }

    /**
     * Determines if the tbvPublishRss has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvPublishRssModified()
    {
        return tbvPublishRssIsModified;
    }

    /**
     * Determines if the tbvPublishRss has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvPublishRssInitialized()
    {
        return tbvPublishRssIsInitialized;
    }

    /**
     * Getter method for tbvActive.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tbv_active</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbvActive
     */
    public Integer getTbvActive()
    {
        return tbvActive;
    }

    /**
     * Setter method for tbvActive.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvActive
     */
    public void setTbvActive(Integer newVal)
    {
        if ((newVal != null && tbvActive != null && (newVal.compareTo(tbvActive) == 0)) ||
            (newVal == null && tbvActive == null && tbvActiveIsInitialized)) {
            return;
        }
        tbvActive = newVal;
        tbvActiveIsModified = true;
        tbvActiveIsInitialized = true;
    }

    /**
     * Setter method for tbvActive.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbvActive
     */
    public void setTbvActive(int newVal)
    {
        setTbvActive(new Integer(newVal));
    }

    /**
     * Determines if the tbvActive has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvActiveModified()
    {
        return tbvActiveIsModified;
    }

    /**
     * Determines if the tbvActive has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvActiveInitialized()
    {
        return tbvActiveIsInitialized;
    }

    /**
     * Getter method for tbvName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tbv_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbvName
     */
    public String getTbvName()
    {
        return tbvName;
    }

    /**
     * Setter method for tbvName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvName
     */
    public void setTbvName(String newVal)
    {
        if ((newVal != null && tbvName != null && (newVal.compareTo(tbvName) == 0)) ||
            (newVal == null && tbvName == null && tbvNameIsInitialized)) {
            return;
        }
        tbvName = newVal;
        tbvNameIsModified = true;
        tbvNameIsInitialized = true;
    }

    /**
     * Determines if the tbvName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvNameModified()
    {
        return tbvNameIsModified;
    }

    /**
     * Determines if the tbvName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvNameInitialized()
    {
        return tbvNameIsInitialized;
    }

    /**
     * Getter method for tbvVacancyId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tbv_vacancy_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbvVacancyId
     */
    public String getTbvVacancyId()
    {
        return tbvVacancyId;
    }

    /**
     * Setter method for tbvVacancyId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvVacancyId
     */
    public void setTbvVacancyId(String newVal)
    {
        if ((newVal != null && tbvVacancyId != null && (newVal.compareTo(tbvVacancyId) == 0)) ||
            (newVal == null && tbvVacancyId == null && tbvVacancyIdIsInitialized)) {
            return;
        }
        tbvVacancyId = newVal;
        tbvVacancyIdIsModified = true;
        tbvVacancyIdIsInitialized = true;
    }

    /**
     * Determines if the tbvVacancyId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvVacancyIdModified()
    {
        return tbvVacancyIdIsModified;
    }

    /**
     * Determines if the tbvVacancyId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvVacancyIdInitialized()
    {
        return tbvVacancyIdIsInitialized;
    }

    /**
     * Getter method for tbvId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tbv_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbvId
     */
    public Integer getTbvId()
    {
        return tbvId;
    }

    /**
     * Setter method for tbvId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvId
     */
    public void setTbvId(Integer newVal)
    {
        if ((newVal != null && tbvId != null && (newVal.compareTo(tbvId) == 0)) ||
            (newVal == null && tbvId == null && tbvIdIsInitialized)) {
            return;
        }
        tbvId = newVal;
        tbvIdIsModified = true;
        tbvIdIsInitialized = true;
    }

    /**
     * Setter method for tbvId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbvId
     */
    public void setTbvId(int newVal)
    {
        setTbvId(new Integer(newVal));
    }

    /**
     * Determines if the tbvId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvIdModified()
    {
        return tbvIdIsModified;
    }

    /**
     * Determines if the tbvId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvIdInitialized()
    {
        return tbvIdIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_applicants.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbaResumeFileNameExistingIsModified 		|| tbaResumeFileNameIsModified  		|| tbaStatusIsModified  		|| tbaDateIsModified  		|| tbaNameIsModified  		|| tbaApplicantsIdIsModified  		|| tbaIdIsModified  		|| tbjtNameIsModified  		|| tbjtIdIsModified  		|| tbvPublishWebIsModified  		|| tbvPublishRssIsModified  		|| tbvActiveIsModified  		|| tbvNameIsModified  		|| tbvVacancyIdIsModified  		|| tbvIdIsModified  		|| tbeNameIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbaResumeFileNameExistingIsModified = false;
        tbaResumeFileNameIsModified = false;
        tbaStatusIsModified = false;
        tbaDateIsModified = false;
        tbaNameIsModified = false;
        tbaApplicantsIdIsModified = false;
        tbaIdIsModified = false;
        tbjtNameIsModified = false;
        tbjtIdIsModified = false;
        tbvPublishWebIsModified = false;
        tbvPublishRssIsModified = false;
        tbvActiveIsModified = false;
        tbvNameIsModified = false;
        tbvVacancyIdIsModified = false;
        tbvIdIsModified = false;
        tbeNameIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewApplicantsBean bean)
    {
        setTbaResumeFileNameExisting(bean.getTbaResumeFileNameExisting());
        setTbaResumeFileName(bean.getTbaResumeFileName());
        setTbaStatus(bean.getTbaStatus());
        setTbaDate(bean.getTbaDate());
        setTbaName(bean.getTbaName());
        setTbaApplicantsId(bean.getTbaApplicantsId());
        setTbaId(bean.getTbaId());
        setTbjtName(bean.getTbjtName());
        setTbjtId(bean.getTbjtId());
        setTbvPublishWeb(bean.getTbvPublishWeb());
        setTbvPublishRss(bean.getTbvPublishRss());
        setTbvActive(bean.getTbvActive());
        setTbvName(bean.getTbvName());
        setTbvVacancyId(bean.getTbvVacancyId());
        setTbvId(bean.getTbvId());
        setTbeName(bean.getTbeName());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tba_resume_file_name_existing", getTbaResumeFileNameExisting() == null ? "" : getTbaResumeFileNameExisting().toString());
        dictionnary.put("tba_resume_file_name", getTbaResumeFileName() == null ? "" : getTbaResumeFileName().toString());
        dictionnary.put("tba_status", getTbaStatus() == null ? "" : getTbaStatus().toString());
        dictionnary.put("tba_date", getTbaDate() == null ? "" : getTbaDate().toString());
        dictionnary.put("tba_name", getTbaName() == null ? "" : getTbaName().toString());
        dictionnary.put("tba_applicants_id", getTbaApplicantsId() == null ? "" : getTbaApplicantsId().toString());
        dictionnary.put("tba_id", getTbaId() == null ? "" : getTbaId().toString());
        dictionnary.put("tbjt_name", getTbjtName() == null ? "" : getTbjtName().toString());
        dictionnary.put("tbjt_id", getTbjtId() == null ? "" : getTbjtId().toString());
        dictionnary.put("tbv_publish_web", getTbvPublishWeb() == null ? "" : getTbvPublishWeb().toString());
        dictionnary.put("tbv_publish_rss", getTbvPublishRss() == null ? "" : getTbvPublishRss().toString());
        dictionnary.put("tbv_active", getTbvActive() == null ? "" : getTbvActive().toString());
        dictionnary.put("tbv_name", getTbvName() == null ? "" : getTbvName().toString());
        dictionnary.put("tbv_vacancy_id", getTbvVacancyId() == null ? "" : getTbvVacancyId().toString());
        dictionnary.put("tbv_id", getTbvId() == null ? "" : getTbvId().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tba_resume_file_name_existing".equalsIgnoreCase(column) || "tbaResumeFileNameExisting".equalsIgnoreCase(column)) {
            return getTbaResumeFileNameExisting() == null ? "" : getTbaResumeFileNameExisting().toString();
        } else if ("tba_resume_file_name".equalsIgnoreCase(column) || "tbaResumeFileName".equalsIgnoreCase(column)) {
            return getTbaResumeFileName() == null ? "" : getTbaResumeFileName().toString();
        } else if ("tba_status".equalsIgnoreCase(column) || "tbaStatus".equalsIgnoreCase(column)) {
            return getTbaStatus() == null ? "" : getTbaStatus().toString();
        } else if ("tba_date".equalsIgnoreCase(column) || "tbaDate".equalsIgnoreCase(column)) {
            return getTbaDate() == null ? "" : getTbaDate().toString();
        } else if ("tba_name".equalsIgnoreCase(column) || "tbaName".equalsIgnoreCase(column)) {
            return getTbaName() == null ? "" : getTbaName().toString();
        } else if ("tba_applicants_id".equalsIgnoreCase(column) || "tbaApplicantsId".equalsIgnoreCase(column)) {
            return getTbaApplicantsId() == null ? "" : getTbaApplicantsId().toString();
        } else if ("tba_id".equalsIgnoreCase(column) || "tbaId".equalsIgnoreCase(column)) {
            return getTbaId() == null ? "" : getTbaId().toString();
        } else if ("tbjt_name".equalsIgnoreCase(column) || "tbjtName".equalsIgnoreCase(column)) {
            return getTbjtName() == null ? "" : getTbjtName().toString();
        } else if ("tbjt_id".equalsIgnoreCase(column) || "tbjtId".equalsIgnoreCase(column)) {
            return getTbjtId() == null ? "" : getTbjtId().toString();
        } else if ("tbv_publish_web".equalsIgnoreCase(column) || "tbvPublishWeb".equalsIgnoreCase(column)) {
            return getTbvPublishWeb() == null ? "" : getTbvPublishWeb().toString();
        } else if ("tbv_publish_rss".equalsIgnoreCase(column) || "tbvPublishRss".equalsIgnoreCase(column)) {
            return getTbvPublishRss() == null ? "" : getTbvPublishRss().toString();
        } else if ("tbv_active".equalsIgnoreCase(column) || "tbvActive".equalsIgnoreCase(column)) {
            return getTbvActive() == null ? "" : getTbvActive().toString();
        } else if ("tbv_name".equalsIgnoreCase(column) || "tbvName".equalsIgnoreCase(column)) {
            return getTbvName() == null ? "" : getTbvName().toString();
        } else if ("tbv_vacancy_id".equalsIgnoreCase(column) || "tbvVacancyId".equalsIgnoreCase(column)) {
            return getTbvVacancyId() == null ? "" : getTbvVacancyId().toString();
        } else if ("tbv_id".equalsIgnoreCase(column) || "tbvId".equalsIgnoreCase(column)) {
            return getTbvId() == null ? "" : getTbvId().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewApplicantsBean)) {
            return false;
        }

		ViewApplicantsBean obj = (ViewApplicantsBean) object;
		return new EqualsBuilder()
            .append(getTbaResumeFileNameExisting(), obj.getTbaResumeFileNameExisting())
            .append(getTbaResumeFileName(), obj.getTbaResumeFileName())
            .append(getTbaStatus(), obj.getTbaStatus())
            .append(getTbaDate(), obj.getTbaDate())
            .append(getTbaName(), obj.getTbaName())
            .append(getTbaApplicantsId(), obj.getTbaApplicantsId())
            .append(getTbaId(), obj.getTbaId())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjtId(), obj.getTbjtId())
            .append(getTbvPublishWeb(), obj.getTbvPublishWeb())
            .append(getTbvPublishRss(), obj.getTbvPublishRss())
            .append(getTbvActive(), obj.getTbvActive())
            .append(getTbvName(), obj.getTbvName())
            .append(getTbvVacancyId(), obj.getTbvVacancyId())
            .append(getTbvId(), obj.getTbvId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbaResumeFileNameExisting())
            .append(getTbaResumeFileName())
            .append(getTbaStatus())
            .append(getTbaDate())
            .append(getTbaName())
            .append(getTbaApplicantsId())
            .append(getTbaId())
            .append(getTbjtName())
            .append(getTbjtId())
            .append(getTbvPublishWeb())
            .append(getTbvPublishRss())
            .append(getTbvActive())
            .append(getTbvName())
            .append(getTbvVacancyId())
            .append(getTbvId())
            .append(getTbeName())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tba_resume_file_name_existing", getTbaResumeFileNameExisting())
            .append("tba_resume_file_name", getTbaResumeFileName())
            .append("tba_status", getTbaStatus())
            .append("tba_date", getTbaDate())
            .append("tba_name", getTbaName())
            .append("tba_applicants_id", getTbaApplicantsId())
            .append("tba_id", getTbaId())
            .append("tbjt_name", getTbjtName())
            .append("tbjt_id", getTbjtId())
            .append("tbv_publish_web", getTbvPublishWeb())
            .append("tbv_publish_rss", getTbvPublishRss())
            .append("tbv_active", getTbvActive())
            .append("tbv_name", getTbvName())
            .append("tbv_vacancy_id", getTbvVacancyId())
            .append("tbv_id", getTbvId())
            .append("tbe_name", getTbeName())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewApplicantsBean obj = (ViewApplicantsBean) object;
        return new CompareToBuilder()
            .append(getTbaResumeFileNameExisting(), obj.getTbaResumeFileNameExisting())
            .append(getTbaResumeFileName(), obj.getTbaResumeFileName())
            .append(getTbaStatus(), obj.getTbaStatus())
            .append(getTbaDate(), obj.getTbaDate())
            .append(getTbaName(), obj.getTbaName())
            .append(getTbaApplicantsId(), obj.getTbaApplicantsId())
            .append(getTbaId(), obj.getTbaId())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjtId(), obj.getTbjtId())
            .append(getTbvPublishWeb(), obj.getTbvPublishWeb())
            .append(getTbvPublishRss(), obj.getTbvPublishRss())
            .append(getTbvActive(), obj.getTbvActive())
            .append(getTbvName(), obj.getTbvName())
            .append(getTbvVacancyId(), obj.getTbvVacancyId())
            .append(getTbvId(), obj.getTbvId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
