// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.ViewPaygradeCurrencyBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the view_paygrade_currency table.
 * @author sql2java
 */
public class ViewPaygradeCurrencyManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbpc_overtime field.
     */
    public static final int ID_TBPC_OVERTIME = 0;

    /**
     * Identify the tbpc_late field.
     */
    public static final int ID_TBPC_LATE = 1;

    /**
     * Identify the tbpc_step field.
     */
    public static final int ID_TBPC_STEP = 2;

    /**
     * Identify the tbpc_max field.
     */
    public static final int ID_TBPC_MAX = 3;

    /**
     * Identify the tbpc_min field.
     */
    public static final int ID_TBPC_MIN = 4;

    /**
     * Identify the tbpc_id field.
     */
    public static final int ID_TBPC_ID = 5;

    /**
     * Identify the tbc_name field.
     */
    public static final int ID_TBC_NAME = 6;

    /**
     * Identify the tbc_currency_id field.
     */
    public static final int ID_TBC_CURRENCY_ID = 7;

    /**
     * Identify the tbc_id field.
     */
    public static final int ID_TBC_ID = 8;

    /**
     * Identify the tbp_name field.
     */
    public static final int ID_TBP_NAME = 9;

    /**
     * Identify the tbp_paygrade_id field.
     */
    public static final int ID_TBP_PAYGRADE_ID = 10;

    /**
     * Identify the tbp_id field.
     */
    public static final int ID_TBP_ID = 11;

    /**
     * Contains all the full fields of the view_paygrade_currency table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "view_paygrade_currency.tbpc_overtime"
        ,"view_paygrade_currency.tbpc_late"
        ,"view_paygrade_currency.tbpc_step"
        ,"view_paygrade_currency.tbpc_max"
        ,"view_paygrade_currency.tbpc_min"
        ,"view_paygrade_currency.tbpc_id"
        ,"view_paygrade_currency.tbc_name"
        ,"view_paygrade_currency.tbc_currency_id"
        ,"view_paygrade_currency.tbc_id"
        ,"view_paygrade_currency.tbp_name"
        ,"view_paygrade_currency.tbp_paygrade_id"
        ,"view_paygrade_currency.tbp_id"
    };

    /**
     * Contains all the fields of the view_paygrade_currency table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbpc_overtime"
        ,"tbpc_late"
        ,"tbpc_step"
        ,"tbpc_max"
        ,"tbpc_min"
        ,"tbpc_id"
        ,"tbc_name"
        ,"tbc_currency_id"
        ,"tbc_id"
        ,"tbp_name"
        ,"tbp_paygrade_id"
        ,"tbp_id"
    };

    /**
     * Field that contains the comma separated fields of the view_paygrade_currency table.
     */
    public static final String ALL_FULL_FIELDS = "view_paygrade_currency.tbpc_overtime"
                            + ",view_paygrade_currency.tbpc_late"
                            + ",view_paygrade_currency.tbpc_step"
                            + ",view_paygrade_currency.tbpc_max"
                            + ",view_paygrade_currency.tbpc_min"
                            + ",view_paygrade_currency.tbpc_id"
                            + ",view_paygrade_currency.tbc_name"
                            + ",view_paygrade_currency.tbc_currency_id"
                            + ",view_paygrade_currency.tbc_id"
                            + ",view_paygrade_currency.tbp_name"
                            + ",view_paygrade_currency.tbp_paygrade_id"
                            + ",view_paygrade_currency.tbp_id";

    /**
     * Field that contains the comma separated fields of the view_paygrade_currency table.
     */
    public static final String ALL_FIELDS = "tbpc_overtime"
                            + ",tbpc_late"
                            + ",tbpc_step"
                            + ",tbpc_max"
                            + ",tbpc_min"
                            + ",tbpc_id"
                            + ",tbc_name"
                            + ",tbc_currency_id"
                            + ",tbc_id"
                            + ",tbp_name"
                            + ",tbp_paygrade_id"
                            + ",tbp_id";

    private static ViewPaygradeCurrencyManager singleton = new ViewPaygradeCurrencyManager();

    /**
     * Get the ViewPaygradeCurrencyManager singleton.
     *
     * @return ViewPaygradeCurrencyManager
     */
    public static ViewPaygradeCurrencyManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new ViewPaygradeCurrencyBean instance.
     *
     * @return the new ViewPaygradeCurrencyBean
     */
    public ViewPaygradeCurrencyBean createViewPaygradeCurrencyBean()
    {
        return new ViewPaygradeCurrencyBean();
    }




    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from view_paygrade_currency.
     *
     * @return an array of ViewPaygradeCurrencyManager bean
     * @throws DAOException
     */
    //5
    public ViewPaygradeCurrencyBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from view_paygrade_currency, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of ViewPaygradeCurrencyManager bean
     * @throws DAOException
     */
    //6
    public ViewPaygradeCurrencyBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ViewPaygradeCurrencyBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ViewPaygradeCurrencyBean table
     * @throws DAOException
     */
    //7
    public ViewPaygradeCurrencyBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ViewPaygradeCurrencyBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting ViewPaygradeCurrencyBean table
     * @throws DAOException
     */
    //8
    public ViewPaygradeCurrencyBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of ViewPaygradeCurrencyBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting ViewPaygradeCurrencyBean table
     * @throws DAOException
     */
    //9
    public ViewPaygradeCurrencyBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_paygrade_currency ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM view_paygrade_currency ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the view_paygrade_currency table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM view_paygrade_currency " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ViewPaygradeCurrencyBean bean into the database.
     *
     * @param bean the ViewPaygradeCurrencyBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ViewPaygradeCurrencyBean save(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the ViewPaygradeCurrencyBean bean into the database.
     *
     * @param bean the ViewPaygradeCurrencyBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public ViewPaygradeCurrencyBean insert(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into view_paygrade_currency (");

            if (bean.isTbpcOvertimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpc_overtime");
                _dirtyCount++;
            }

            if (bean.isTbpcLateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpc_late");
                _dirtyCount++;
            }

            if (bean.isTbpcStepModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpc_step");
                _dirtyCount++;
            }

            if (bean.isTbpcMaxModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpc_max");
                _dirtyCount++;
            }

            if (bean.isTbpcMinModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpc_min");
                _dirtyCount++;
            }

            if (bean.isTbpcIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpc_id");
                _dirtyCount++;
            }

            if (bean.isTbcNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbc_name");
                _dirtyCount++;
            }

            if (bean.isTbcCurrencyIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbc_currency_id");
                _dirtyCount++;
            }

            if (bean.isTbcIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbc_id");
                _dirtyCount++;
            }

            if (bean.isTbpNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_name");
                _dirtyCount++;
            }

            if (bean.isTbpPaygradeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_paygrade_id");
                _dirtyCount++;
            }

            if (bean.isTbpIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the ViewPaygradeCurrencyBean bean record in the database according to the changes.
     *
     * @param bean the ViewPaygradeCurrencyBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ViewPaygradeCurrencyBean update(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();


            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE view_paygrade_currency SET ");
            boolean useComma=false;

            if (bean.isTbpcOvertimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpc_overtime=?");
            }

            if (bean.isTbpcLateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpc_late=?");
            }

            if (bean.isTbpcStepModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpc_step=?");
            }

            if (bean.isTbpcMaxModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpc_max=?");
            }

            if (bean.isTbpcMinModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpc_min=?");
            }

            if (bean.isTbpcIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpc_id=?");
            }

            if (bean.isTbcNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbc_name=?");
            }

            if (bean.isTbcCurrencyIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbc_currency_id=?");
            }

            if (bean.isTbcIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbc_id=?");
            }

            if (bean.isTbpNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_name=?");
            }

            if (bean.isTbpPaygradeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_paygrade_id=?");
            }

            if (bean.isTbpIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_id=?");
            }
            sql.append("");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of ViewPaygradeCurrencyBean beans into the database.
     *
     * @param beans the ViewPaygradeCurrencyBean bean table to be saved
     * @return the saved ViewPaygradeCurrencyBean array.
     * @throws DAOException
     */
    //15
    public ViewPaygradeCurrencyBean[] save(ViewPaygradeCurrencyBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of ViewPaygradeCurrencyBean beans into the database.
     *
     * @param beans the ViewPaygradeCurrencyBean bean table to be inserted
     * @return the saved ViewPaygradeCurrencyBean array.
     * @throws DAOException
     */
    //16
    public ViewPaygradeCurrencyBean[] insert(ViewPaygradeCurrencyBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of ViewPaygradeCurrencyBean beans into the database.
     *
     * @param beans the ViewPaygradeCurrencyBean bean table to be inserted
     * @return the saved ViewPaygradeCurrencyBean array.
     * @throws DAOException
     */
    //17
    public ViewPaygradeCurrencyBean[] update(ViewPaygradeCurrencyBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique ViewPaygradeCurrencyBean bean from a template one giving a c
     *
     * @param bean the ViewPaygradeCurrencyBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public ViewPaygradeCurrencyBean loadUniqueUsingTemplate(ViewPaygradeCurrencyBean bean) throws DAOException
    {
         ViewPaygradeCurrencyBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of ViewPaygradeCurrencyBean from a template one.
     *
     * @param bean the ViewPaygradeCurrencyBean template to look for
     * @return all the ViewPaygradeCurrencyBean matching the template
     * @throws DAOException
     */
    //19
    public ViewPaygradeCurrencyBean[] loadUsingTemplate(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of ViewPaygradeCurrencyBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewPaygradeCurrencyBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the ViewPaygradeCurrencyBean matching the template
     * @throws DAOException
     */
    //20
    public ViewPaygradeCurrencyBean[] loadUsingTemplate(ViewPaygradeCurrencyBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of ViewPaygradeCurrencyBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewPaygradeCurrencyBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the ViewPaygradeCurrencyBean matching the template
     * @throws DAOException
     */
    //20
    public ViewPaygradeCurrencyBean[] loadUsingTemplate(ViewPaygradeCurrencyBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_paygrade_currency ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a ViewPaygradeCurrencyBean template.
     *
     * @param bean the ViewPaygradeCurrencyBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM view_paygrade_currency ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table view_paygrade_currency.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table view_paygrade_currency with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM view_paygrade_currency " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table view_paygrade_currency with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific ViewPaygradeCurrencyBean bean
     *
     * @param bean the ViewPaygradeCurrencyBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific ViewPaygradeCurrencyBean bean , given the start row and number of rows.
     *
     * @param bean the ViewPaygradeCurrencyBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewPaygradeCurrencyBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific ViewPaygradeCurrencyBean bean given the start row and number of rows and the search type
     *
     * @param bean the ViewPaygradeCurrencyBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewPaygradeCurrencyBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM view_paygrade_currency");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, ViewPaygradeCurrencyBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbpcOvertimeModified()) {
                _dirtyCount ++;
                if (bean.getTbpcOvertime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_overtime IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_overtime = ?");
                }
            }
            if (bean.isTbpcLateModified()) {
                _dirtyCount ++;
                if (bean.getTbpcLate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_late IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_late = ?");
                }
            }
            if (bean.isTbpcStepModified()) {
                _dirtyCount ++;
                if (bean.getTbpcStep() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_step IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_step = ?");
                }
            }
            if (bean.isTbpcMaxModified()) {
                _dirtyCount ++;
                if (bean.getTbpcMax() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_max IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_max = ?");
                }
            }
            if (bean.isTbpcMinModified()) {
                _dirtyCount ++;
                if (bean.getTbpcMin() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_min IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_min = ?");
                }
            }
            if (bean.isTbpcIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpcId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpc_id = ?");
                }
            }
            if (bean.isTbcNameModified()) {
                _dirtyCount ++;
                if (bean.getTbcName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcCurrencyIdModified()) {
                _dirtyCount ++;
                if (bean.getTbcCurrencyId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_currency_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_currency_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcIdModified()) {
                _dirtyCount ++;
                if (bean.getTbcId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_id = ?");
                }
            }
            if (bean.isTbpNameModified()) {
                _dirtyCount ++;
                if (bean.getTbpName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpPaygradeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpPaygradeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_paygrade_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_paygrade_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, ViewPaygradeCurrencyBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbpcOvertimeModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpcOvertime() + "]");
                if (bean.getTbpcOvertime() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpcOvertime()); }
            }
            if (bean.isTbpcLateModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpcLate() + "]");
                if (bean.getTbpcLate() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpcLate()); }
            }
            if (bean.isTbpcStepModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpcStep() + "]");
                if (bean.getTbpcStep() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpcStep()); }
            }
            if (bean.isTbpcMaxModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpcMax() + "]");
                if (bean.getTbpcMax() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpcMax()); }
            }
            if (bean.isTbpcMinModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpcMin() + "]");
                if (bean.getTbpcMin() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbpcMin()); }
            }
            if (bean.isTbpcIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpcId() + "]");
                if (bean.getTbpcId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpcId()); }
            }
            if (bean.isTbcNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcName() + "]");
                        if (bean.getTbcName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcName() + "]");
                        if (bean.getTbcName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcCurrencyIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcCurrencyId() + "]");
                        if (bean.getTbcCurrencyId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcCurrencyId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcCurrencyId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcCurrencyId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcCurrencyId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcCurrencyId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcCurrencyId() + "]");
                        if (bean.getTbcCurrencyId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcCurrencyId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcId() + "]");
                if (bean.getTbcId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbcId()); }
            }
            if (bean.isTbpNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpName() + "]");
                        if (bean.getTbpName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpName() + "]");
                        if (bean.getTbpName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpPaygradeIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpPaygradeId() + "]");
                        if (bean.getTbpPaygradeId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpPaygradeId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpPaygradeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpPaygradeId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpPaygradeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpPaygradeId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpPaygradeId() + "]");
                        if (bean.getTbpPaygradeId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpPaygradeId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpId() + "]");
                if (bean.getTbpId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of ViewPaygradeCurrencyBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting ViewPaygradeCurrencyBean table
     * @throws DAOException
     */
    //28
    public ViewPaygradeCurrencyBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (ViewPaygradeCurrencyBean[])v.toArray(new ViewPaygradeCurrencyBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the view_paygrade_currency on a ViewPaygradeCurrencyBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewPaygradeCurrencyBean bean
     * @throws DAOException
     */
    //29
    public ViewPaygradeCurrencyBean decodeRow(ResultSet rs) throws DAOException
    {
        ViewPaygradeCurrencyBean bean = this.createViewPaygradeCurrencyBean();
        try
        {
            bean.setTbpcOvertime(Manager.getDouble(rs, 1));
            bean.setTbpcLate(Manager.getDouble(rs, 2));
            bean.setTbpcStep(Manager.getDouble(rs, 3));
            bean.setTbpcMax(Manager.getDouble(rs, 4));
            bean.setTbpcMin(Manager.getDouble(rs, 5));
            bean.setTbpcId(Manager.getInteger(rs, 6));
            bean.setTbcName(rs.getString(7));
            bean.setTbcCurrencyId(rs.getString(8));
            bean.setTbcId(Manager.getInteger(rs, 9));
            bean.setTbpName(rs.getString(10));
            bean.setTbpPaygradeId(rs.getString(11));
            bean.setTbpId(Manager.getInteger(rs, 12));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public ViewPaygradeCurrencyBean toBean(ViewPaygradeCurrencyBeanModel beanModel, ViewPaygradeCurrencyBean bean)
    {
		if (beanModel.getTbpcOvertime() != null)
			bean.setTbpcOvertime(beanModel.getTbpcOvertime());

		if (bean.getTbpcOvertime() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpcOvertime().getClass().getName()))
			bean.setTbpcOvertime(beanModel.getTbpcOvertime());
		
		if (beanModel.getTbpcLate() != null)
			bean.setTbpcLate(beanModel.getTbpcLate());

		if (bean.getTbpcLate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpcLate().getClass().getName()))
			bean.setTbpcLate(beanModel.getTbpcLate());
		
		if (beanModel.getTbpcStep() != null)
			bean.setTbpcStep(beanModel.getTbpcStep());

		if (bean.getTbpcStep() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpcStep().getClass().getName()))
			bean.setTbpcStep(beanModel.getTbpcStep());
		
		if (beanModel.getTbpcMax() != null)
			bean.setTbpcMax(beanModel.getTbpcMax());

		if (bean.getTbpcMax() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpcMax().getClass().getName()))
			bean.setTbpcMax(beanModel.getTbpcMax());
		
		if (beanModel.getTbpcMin() != null)
			bean.setTbpcMin(beanModel.getTbpcMin());

		if (bean.getTbpcMin() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpcMin().getClass().getName()))
			bean.setTbpcMin(beanModel.getTbpcMin());
		
		if (beanModel.getTbpcId() != null)
			bean.setTbpcId(beanModel.getTbpcId());

		if (bean.getTbpcId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpcId().getClass().getName()))
			bean.setTbpcId(beanModel.getTbpcId());
		
		if (beanModel.getTbcName() != null)
			bean.setTbcName(beanModel.getTbcName());

		if (bean.getTbcName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcName().getClass().getName()))
			bean.setTbcName(beanModel.getTbcName());
		
		if (beanModel.getTbcCurrencyId() != null)
			bean.setTbcCurrencyId(beanModel.getTbcCurrencyId());

		if (bean.getTbcCurrencyId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcCurrencyId().getClass().getName()))
			bean.setTbcCurrencyId(beanModel.getTbcCurrencyId());
		
		if (beanModel.getTbcId() != null)
			bean.setTbcId(beanModel.getTbcId());

		if (bean.getTbcId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcId().getClass().getName()))
			bean.setTbcId(beanModel.getTbcId());
		
		if (beanModel.getTbpName() != null)
			bean.setTbpName(beanModel.getTbpName());

		if (bean.getTbpName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpName().getClass().getName()))
			bean.setTbpName(beanModel.getTbpName());
		
		if (beanModel.getTbpPaygradeId() != null)
			bean.setTbpPaygradeId(beanModel.getTbpPaygradeId());

		if (bean.getTbpPaygradeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpPaygradeId().getClass().getName()))
			bean.setTbpPaygradeId(beanModel.getTbpPaygradeId());
		
		if (beanModel.getTbpId() != null)
			bean.setTbpId(beanModel.getTbpId());

		if (bean.getTbpId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpId().getClass().getName()))
			bean.setTbpId(beanModel.getTbpId());
		
        return bean;
    }
	
    //29AA
    public ViewPaygradeCurrencyBean[] toBeans(ViewPaygradeCurrencyBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	ViewPaygradeCurrencyBean beans[] = new ViewPaygradeCurrencyBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public ViewPaygradeCurrencyBeanModel toBeanModel(ViewPaygradeCurrencyBean bean)
    {
    	ViewPaygradeCurrencyBeanModel beanModel = new ViewPaygradeCurrencyBeanModel();
		beanModel.setTbpcOvertime(bean.getTbpcOvertime());
		beanModel.setTbpcLate(bean.getTbpcLate());
		beanModel.setTbpcStep(bean.getTbpcStep());
		beanModel.setTbpcMax(bean.getTbpcMax());
		beanModel.setTbpcMin(bean.getTbpcMin());
		beanModel.setTbpcId(bean.getTbpcId());
		beanModel.setTbcName(bean.getTbcName());
		beanModel.setTbcCurrencyId(bean.getTbcCurrencyId());
		beanModel.setTbcId(bean.getTbcId());
		beanModel.setTbpName(bean.getTbpName());
		beanModel.setTbpPaygradeId(bean.getTbpPaygradeId());
		beanModel.setTbpId(bean.getTbpId());
		return beanModel;
    }
    
    //29CC
    public ViewPaygradeCurrencyBeanModel[] toBeanModels(ViewPaygradeCurrencyBean beans[])
    {
    	int beansCount = beans.length;
    	ViewPaygradeCurrencyBeanModel beanModels[] = new ViewPaygradeCurrencyBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the view_paygrade_currency table on a ViewPaygradeCurrencyBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting ViewPaygradeCurrencyBean bean
     * @throws DAOException
     */
    //30
    public ViewPaygradeCurrencyBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        ViewPaygradeCurrencyBean bean = this.createViewPaygradeCurrencyBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBPC_OVERTIME:
                        ++pos;
                        bean.setTbpcOvertime(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPC_LATE:
                        ++pos;
                        bean.setTbpcLate(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPC_STEP:
                        ++pos;
                        bean.setTbpcStep(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPC_MAX:
                        ++pos;
                        bean.setTbpcMax(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPC_MIN:
                        ++pos;
                        bean.setTbpcMin(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBPC_ID:
                        ++pos;
                        bean.setTbpcId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBC_NAME:
                        ++pos;
                        bean.setTbcName(rs.getString(pos));
                        break;
                    case ID_TBC_CURRENCY_ID:
                        ++pos;
                        bean.setTbcCurrencyId(rs.getString(pos));
                        break;
                    case ID_TBC_ID:
                        ++pos;
                        bean.setTbcId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBP_NAME:
                        ++pos;
                        bean.setTbpName(rs.getString(pos));
                        break;
                    case ID_TBP_PAYGRADE_ID:
                        ++pos;
                        bean.setTbpPaygradeId(rs.getString(pos));
                        break;
                    case ID_TBP_ID:
                        ++pos;
                        bean.setTbpId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the view_paygrade_currency on a ViewPaygradeCurrencyBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewPaygradeCurrencyBean bean
     * @throws DAOException
     */
    //31
    public ViewPaygradeCurrencyBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        ViewPaygradeCurrencyBean bean = this.createViewPaygradeCurrencyBean();
        try
        {
            bean.setTbpcOvertime(Manager.getDouble(rs, "tbpc_overtime"));
            bean.setTbpcLate(Manager.getDouble(rs, "tbpc_late"));
            bean.setTbpcStep(Manager.getDouble(rs, "tbpc_step"));
            bean.setTbpcMax(Manager.getDouble(rs, "tbpc_max"));
            bean.setTbpcMin(Manager.getDouble(rs, "tbpc_min"));
            bean.setTbpcId(Manager.getInteger(rs, "tbpc_id"));
            bean.setTbcName(rs.getString("tbc_name"));
            bean.setTbcCurrencyId(rs.getString("tbc_currency_id"));
            bean.setTbcId(Manager.getInteger(rs, "tbc_id"));
            bean.setTbpName(rs.getString("tbp_name"));
            bean.setTbpPaygradeId(rs.getString("tbp_paygrade_id"));
            bean.setTbpId(Manager.getInteger(rs, "tbp_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ViewPaygradeCurrencyBean
     * @throws DAOException
     */
    //32
    public ViewPaygradeCurrencyBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ViewPaygradeCurrencyBean
     * @throws DAOException
     */
    //33
    public ViewPaygradeCurrencyBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (ViewPaygradeCurrencyBean[])v.toArray(new ViewPaygradeCurrencyBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of ViewPaygradeCurrencyBean
     * @throws DAOException
     */
    //34
    public ViewPaygradeCurrencyBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private ViewPaygradeCurrencyListener listener = null;

    /**
     * Registers a unique ViewPaygradeCurrencyListener listener.
     */
    //35
    public void registerListener(ViewPaygradeCurrencyListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the ViewPaygradeCurrencyBean bean.
     *
     * @param bean the ViewPaygradeCurrencyBean bean to be saved
     */
    //36
    private void beforeInsert(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the ViewPaygradeCurrencyBean bean.
     *
     * @param bean the ViewPaygradeCurrencyBean bean to be saved
     */
    //37
    private void afterInsert(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the ViewPaygradeCurrencyBean bean.
     *
     * @param bean the ViewPaygradeCurrencyBean bean to be updated
     */
    //38
    private void beforeUpdate(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the ViewPaygradeCurrencyBean bean.
     *
     * @param bean the ViewPaygradeCurrencyBean bean to be updated
     */
    //39
    private void afterUpdate(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the ViewPaygradeCurrencyBean bean.
     *
     * @param bean the ViewPaygradeCurrencyBean bean to be deleted
     */
    private void beforeDelete(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the ViewPaygradeCurrencyBean bean.
     *
     * @param bean the ViewPaygradeCurrencyBean bean to be deleted
     */
    private void afterDelete(ViewPaygradeCurrencyBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
