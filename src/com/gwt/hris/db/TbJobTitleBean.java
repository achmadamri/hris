// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbJobTitleBean is a mapping of tb_job_title Table.
 * @author sql2java
*/
public class TbJobTitleBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -1897561318385902685L;
	
    private Integer tbjtLeaveEntitled;

    private boolean tbjtLeaveEntitledIsModified = false;
    private boolean tbjtLeaveEntitledIsInitialized = false;

    private Integer tbpId;

    private boolean tbpIdIsModified = false;
    private boolean tbpIdIsInitialized = false;

    private Integer tbjsId;

    private boolean tbjsIdIsModified = false;
    private boolean tbjsIdIsInitialized = false;

    private String tbjtComments;

    private boolean tbjtCommentsIsModified = false;
    private boolean tbjtCommentsIsInitialized = false;

    private String tbjtDescription;

    private boolean tbjtDescriptionIsModified = false;
    private boolean tbjtDescriptionIsInitialized = false;

    private String tbjtName;

    private boolean tbjtNameIsModified = false;
    private boolean tbjtNameIsInitialized = false;

    private String tbjtJobTitleId;

    private boolean tbjtJobTitleIdIsModified = false;
    private boolean tbjtJobTitleIdIsInitialized = false;

    private Integer tbjtId;

    private boolean tbjtIdIsModified = false;
    private boolean tbjtIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbJobTitleBean is via the createTbJobTitleBean method in TbJobTitleManager or
     * via the factory class TbJobTitleFactory create method
     */
    protected TbJobTitleBean()
    {
    }

    /**
     * Getter method for tbjtLeaveEntitled.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job_title.tbjt_leave_entitled</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtLeaveEntitled
     */
    public Integer getTbjtLeaveEntitled()
    {
        return tbjtLeaveEntitled;
    }

    /**
     * Setter method for tbjtLeaveEntitled.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtLeaveEntitled
     */
    public void setTbjtLeaveEntitled(Integer newVal)
    {
        if ((newVal != null && tbjtLeaveEntitled != null && (newVal.compareTo(tbjtLeaveEntitled) == 0)) ||
            (newVal == null && tbjtLeaveEntitled == null && tbjtLeaveEntitledIsInitialized)) {
            return;
        }
        tbjtLeaveEntitled = newVal;
        tbjtLeaveEntitledIsModified = true;
        tbjtLeaveEntitledIsInitialized = true;
    }

    /**
     * Setter method for tbjtLeaveEntitled.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtLeaveEntitled
     */
    public void setTbjtLeaveEntitled(int newVal)
    {
        setTbjtLeaveEntitled(new Integer(newVal));
    }

    /**
     * Determines if the tbjtLeaveEntitled has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtLeaveEntitledModified()
    {
        return tbjtLeaveEntitledIsModified;
    }

    /**
     * Determines if the tbjtLeaveEntitled has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtLeaveEntitledInitialized()
    {
        return tbjtLeaveEntitledIsInitialized;
    }

    /**
     * Getter method for tbpId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job_title.tbp_id</li>
     * <li> foreign key: tb_paygrade.tbp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpId
     */
    public Integer getTbpId()
    {
        return tbpId;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(Integer newVal)
    {
        if ((newVal != null && tbpId != null && (newVal.compareTo(tbpId) == 0)) ||
            (newVal == null && tbpId == null && tbpIdIsInitialized)) {
            return;
        }
        tbpId = newVal;
        tbpIdIsModified = true;
        tbpIdIsInitialized = true;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(int newVal)
    {
        setTbpId(new Integer(newVal));
    }

    /**
     * Determines if the tbpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpIdModified()
    {
        return tbpIdIsModified;
    }

    /**
     * Determines if the tbpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpIdInitialized()
    {
        return tbpIdIsInitialized;
    }

    /**
     * Getter method for tbjsId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job_title.tbjs_id</li>
     * <li> foreign key: tb_job_specifications.tbjs_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjsId
     */
    public Integer getTbjsId()
    {
        return tbjsId;
    }

    /**
     * Setter method for tbjsId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjsId
     */
    public void setTbjsId(Integer newVal)
    {
        if ((newVal != null && tbjsId != null && (newVal.compareTo(tbjsId) == 0)) ||
            (newVal == null && tbjsId == null && tbjsIdIsInitialized)) {
            return;
        }
        tbjsId = newVal;
        tbjsIdIsModified = true;
        tbjsIdIsInitialized = true;
    }

    /**
     * Setter method for tbjsId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjsId
     */
    public void setTbjsId(int newVal)
    {
        setTbjsId(new Integer(newVal));
    }

    /**
     * Determines if the tbjsId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjsIdModified()
    {
        return tbjsIdIsModified;
    }

    /**
     * Determines if the tbjsId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjsIdInitialized()
    {
        return tbjsIdIsInitialized;
    }

    /**
     * Getter method for tbjtComments.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job_title.tbjt_comments</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtComments
     */
    public String getTbjtComments()
    {
        return tbjtComments;
    }

    /**
     * Setter method for tbjtComments.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtComments
     */
    public void setTbjtComments(String newVal)
    {
        if ((newVal != null && tbjtComments != null && (newVal.compareTo(tbjtComments) == 0)) ||
            (newVal == null && tbjtComments == null && tbjtCommentsIsInitialized)) {
            return;
        }
        tbjtComments = newVal;
        tbjtCommentsIsModified = true;
        tbjtCommentsIsInitialized = true;
    }

    /**
     * Determines if the tbjtComments has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtCommentsModified()
    {
        return tbjtCommentsIsModified;
    }

    /**
     * Determines if the tbjtComments has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtCommentsInitialized()
    {
        return tbjtCommentsIsInitialized;
    }

    /**
     * Getter method for tbjtDescription.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job_title.tbjt_description</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtDescription
     */
    public String getTbjtDescription()
    {
        return tbjtDescription;
    }

    /**
     * Setter method for tbjtDescription.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtDescription
     */
    public void setTbjtDescription(String newVal)
    {
        if ((newVal != null && tbjtDescription != null && (newVal.compareTo(tbjtDescription) == 0)) ||
            (newVal == null && tbjtDescription == null && tbjtDescriptionIsInitialized)) {
            return;
        }
        tbjtDescription = newVal;
        tbjtDescriptionIsModified = true;
        tbjtDescriptionIsInitialized = true;
    }

    /**
     * Determines if the tbjtDescription has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtDescriptionModified()
    {
        return tbjtDescriptionIsModified;
    }

    /**
     * Determines if the tbjtDescription has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtDescriptionInitialized()
    {
        return tbjtDescriptionIsInitialized;
    }

    /**
     * Getter method for tbjtName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job_title.tbjt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtName
     */
    public String getTbjtName()
    {
        return tbjtName;
    }

    /**
     * Setter method for tbjtName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtName
     */
    public void setTbjtName(String newVal)
    {
        if ((newVal != null && tbjtName != null && (newVal.compareTo(tbjtName) == 0)) ||
            (newVal == null && tbjtName == null && tbjtNameIsInitialized)) {
            return;
        }
        tbjtName = newVal;
        tbjtNameIsModified = true;
        tbjtNameIsInitialized = true;
    }

    /**
     * Determines if the tbjtName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtNameModified()
    {
        return tbjtNameIsModified;
    }

    /**
     * Determines if the tbjtName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtNameInitialized()
    {
        return tbjtNameIsInitialized;
    }

    /**
     * Getter method for tbjtJobTitleId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job_title.tbjt_job_title_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtJobTitleId
     */
    public String getTbjtJobTitleId()
    {
        return tbjtJobTitleId;
    }

    /**
     * Setter method for tbjtJobTitleId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtJobTitleId
     */
    public void setTbjtJobTitleId(String newVal)
    {
        if ((newVal != null && tbjtJobTitleId != null && (newVal.compareTo(tbjtJobTitleId) == 0)) ||
            (newVal == null && tbjtJobTitleId == null && tbjtJobTitleIdIsInitialized)) {
            return;
        }
        tbjtJobTitleId = newVal;
        tbjtJobTitleIdIsModified = true;
        tbjtJobTitleIdIsInitialized = true;
    }

    /**
     * Determines if the tbjtJobTitleId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtJobTitleIdModified()
    {
        return tbjtJobTitleIdIsModified;
    }

    /**
     * Determines if the tbjtJobTitleId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtJobTitleIdInitialized()
    {
        return tbjtJobTitleIdIsInitialized;
    }

    /**
     * Getter method for tbjtId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job_title.tbjt_id</li>
     * <li> imported key: tb_job.tbjt_id</li>
     * <li> imported key: tb_job_employment_status.tbjt_id</li>
     * <li> imported key: tb_job_renumeration.tbjt_id</li>
     * <li> imported key: tb_job_title_leave.tbjt_id</li>
     * <li> imported key: tb_menu_access.tbjt_id</li>
     * <li> imported key: tb_vacancy.tbjt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtId
     */
    public Integer getTbjtId()
    {
        return tbjtId;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(Integer newVal)
    {
        if ((newVal != null && tbjtId != null && (newVal.compareTo(tbjtId) == 0)) ||
            (newVal == null && tbjtId == null && tbjtIdIsInitialized)) {
            return;
        }
        tbjtId = newVal;
        tbjtIdIsModified = true;
        tbjtIdIsInitialized = true;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(int newVal)
    {
        setTbjtId(new Integer(newVal));
    }

    /**
     * Determines if the tbjtId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtIdModified()
    {
        return tbjtIdIsModified;
    }

    /**
     * Determines if the tbjtId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtIdInitialized()
    {
        return tbjtIdIsInitialized;
    }

    /** The TbJobSpecifications referenced by this bean. */
    private TbJobSpecificationsBean referencedTbJobSpecifications;
    /** Getter method for TbJobSpecificationsBean. */
    public TbJobSpecificationsBean getTbJobSpecificationsBean() {
        return this.referencedTbJobSpecifications;
    }
    /** Setter method for TbJobSpecificationsBean. */
    public void setTbJobSpecificationsBean(TbJobSpecificationsBean reference) {
        this.referencedTbJobSpecifications = reference;
    }
    
    /** The TbPaygrade referenced by this bean. */
    private TbPaygradeBean referencedTbPaygrade;
    /** Getter method for TbPaygradeBean. */
    public TbPaygradeBean getTbPaygradeBean() {
        return this.referencedTbPaygrade;
    }
    /** Setter method for TbPaygradeBean. */
    public void setTbPaygradeBean(TbPaygradeBean reference) {
        this.referencedTbPaygrade = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbjtLeaveEntitledIsModified 		|| tbpIdIsModified  		|| tbjsIdIsModified  		|| tbjtCommentsIsModified  		|| tbjtDescriptionIsModified  		|| tbjtNameIsModified  		|| tbjtJobTitleIdIsModified  		|| tbjtIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbjtLeaveEntitledIsModified = false;
        tbpIdIsModified = false;
        tbjsIdIsModified = false;
        tbjtCommentsIsModified = false;
        tbjtDescriptionIsModified = false;
        tbjtNameIsModified = false;
        tbjtJobTitleIdIsModified = false;
        tbjtIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbJobTitleBean bean)
    {
        setTbjtLeaveEntitled(bean.getTbjtLeaveEntitled());
        setTbpId(bean.getTbpId());
        setTbjsId(bean.getTbjsId());
        setTbjtComments(bean.getTbjtComments());
        setTbjtDescription(bean.getTbjtDescription());
        setTbjtName(bean.getTbjtName());
        setTbjtJobTitleId(bean.getTbjtJobTitleId());
        setTbjtId(bean.getTbjtId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbjt_leave_entitled", getTbjtLeaveEntitled() == null ? "" : getTbjtLeaveEntitled().toString());
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        dictionnary.put("tbjs_id", getTbjsId() == null ? "" : getTbjsId().toString());
        dictionnary.put("tbjt_comments", getTbjtComments() == null ? "" : getTbjtComments().toString());
        dictionnary.put("tbjt_description", getTbjtDescription() == null ? "" : getTbjtDescription().toString());
        dictionnary.put("tbjt_name", getTbjtName() == null ? "" : getTbjtName().toString());
        dictionnary.put("tbjt_job_title_id", getTbjtJobTitleId() == null ? "" : getTbjtJobTitleId().toString());
        dictionnary.put("tbjt_id", getTbjtId() == null ? "" : getTbjtId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbjt_id", getTbjtId() == null ? "" : getTbjtId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbjt_leave_entitled".equalsIgnoreCase(column) || "tbjtLeaveEntitled".equalsIgnoreCase(column)) {
            return getTbjtLeaveEntitled() == null ? "" : getTbjtLeaveEntitled().toString();
        } else if ("tbp_id".equalsIgnoreCase(column) || "tbpId".equalsIgnoreCase(column)) {
            return getTbpId() == null ? "" : getTbpId().toString();
        } else if ("tbjs_id".equalsIgnoreCase(column) || "tbjsId".equalsIgnoreCase(column)) {
            return getTbjsId() == null ? "" : getTbjsId().toString();
        } else if ("tbjt_comments".equalsIgnoreCase(column) || "tbjtComments".equalsIgnoreCase(column)) {
            return getTbjtComments() == null ? "" : getTbjtComments().toString();
        } else if ("tbjt_description".equalsIgnoreCase(column) || "tbjtDescription".equalsIgnoreCase(column)) {
            return getTbjtDescription() == null ? "" : getTbjtDescription().toString();
        } else if ("tbjt_name".equalsIgnoreCase(column) || "tbjtName".equalsIgnoreCase(column)) {
            return getTbjtName() == null ? "" : getTbjtName().toString();
        } else if ("tbjt_job_title_id".equalsIgnoreCase(column) || "tbjtJobTitleId".equalsIgnoreCase(column)) {
            return getTbjtJobTitleId() == null ? "" : getTbjtJobTitleId().toString();
        } else if ("tbjt_id".equalsIgnoreCase(column) || "tbjtId".equalsIgnoreCase(column)) {
            return getTbjtId() == null ? "" : getTbjtId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbJobTitleBean)) {
            return false;
        }

		TbJobTitleBean obj = (TbJobTitleBean) object;
		return new EqualsBuilder()
            .append(getTbjtLeaveEntitled(), obj.getTbjtLeaveEntitled())
            .append(getTbpId(), obj.getTbpId())
            .append(getTbjsId(), obj.getTbjsId())
            .append(getTbjtComments(), obj.getTbjtComments())
            .append(getTbjtDescription(), obj.getTbjtDescription())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjtJobTitleId(), obj.getTbjtJobTitleId())
            .append(getTbjtId(), obj.getTbjtId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbjtLeaveEntitled())
            .append(getTbpId())
            .append(getTbjsId())
            .append(getTbjtComments())
            .append(getTbjtDescription())
            .append(getTbjtName())
            .append(getTbjtJobTitleId())
            .append(getTbjtId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbjt_leave_entitled", getTbjtLeaveEntitled())
            .append("tbp_id", getTbpId())
            .append("tbjs_id", getTbjsId())
            .append("tbjt_comments", getTbjtComments())
            .append("tbjt_description", getTbjtDescription())
            .append("tbjt_name", getTbjtName())
            .append("tbjt_job_title_id", getTbjtJobTitleId())
            .append("tbjt_id", getTbjtId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbJobTitleBean obj = (TbJobTitleBean) object;
        return new CompareToBuilder()
            .append(getTbjtLeaveEntitled(), obj.getTbjtLeaveEntitled())
            .append(getTbpId(), obj.getTbpId())
            .append(getTbjsId(), obj.getTbjsId())
            .append(getTbjtComments(), obj.getTbjtComments())
            .append(getTbjtDescription(), obj.getTbjtDescription())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjtJobTitleId(), obj.getTbjtJobTitleId())
            .append(getTbjtId(), obj.getTbjtId())
            .toComparison();
   }
}
