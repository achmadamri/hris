// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbTarifPajakBean objects.
 * @author sql2java
 */
public class TbTarifPajakComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbTarifPajakComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbTarifPajakComparator(TbTarifPajakManager.ID_TBTP_NON_NPWP, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbTarifPajakManager.ID_TBTP_NON_NPWP
     *   <li>TbTarifPajakManager.ID_TBTP_NPWP
     *   <li>TbTarifPajakManager.ID_TBTP_PKP_SAMPAI
     *   <li>TbTarifPajakManager.ID_TBTP_PKP_DARI
     *   <li>TbTarifPajakManager.ID_TBTP_ID
     * </ul>
     */
    public TbTarifPajakComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbTarifPajakComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbTarifPajakComparator(TbTarifPajakManager.ID_TBTP_NON_NPWP, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbTarifPajakManager.ID_TBTP_NON_NPWP
     *   <li>TbTarifPajakManager.ID_TBTP_NPWP
     *   <li>TbTarifPajakManager.ID_TBTP_PKP_SAMPAI
     *   <li>TbTarifPajakManager.ID_TBTP_PKP_DARI
     *   <li>TbTarifPajakManager.ID_TBTP_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbTarifPajakComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbTarifPajakBean b1 = (TbTarifPajakBean)pObj1;
        TbTarifPajakBean b2 = (TbTarifPajakBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbTarifPajakManager.ID_TBTP_NON_NPWP:
                if (b1.getTbtpNonNpwp() == null && b2.getTbtpNonNpwp() != null) {
                    iReturn = -1;
                } else if (b1.getTbtpNonNpwp() == null && b2.getTbtpNonNpwp() == null) {
                    iReturn = 0;
                } else if (b1.getTbtpNonNpwp() != null && b2.getTbtpNonNpwp() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtpNonNpwp().compareTo(b2.getTbtpNonNpwp());
                }
                break;
            case TbTarifPajakManager.ID_TBTP_NPWP:
                if (b1.getTbtpNpwp() == null && b2.getTbtpNpwp() != null) {
                    iReturn = -1;
                } else if (b1.getTbtpNpwp() == null && b2.getTbtpNpwp() == null) {
                    iReturn = 0;
                } else if (b1.getTbtpNpwp() != null && b2.getTbtpNpwp() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtpNpwp().compareTo(b2.getTbtpNpwp());
                }
                break;
            case TbTarifPajakManager.ID_TBTP_PKP_SAMPAI:
                if (b1.getTbtpPkpSampai() == null && b2.getTbtpPkpSampai() != null) {
                    iReturn = -1;
                } else if (b1.getTbtpPkpSampai() == null && b2.getTbtpPkpSampai() == null) {
                    iReturn = 0;
                } else if (b1.getTbtpPkpSampai() != null && b2.getTbtpPkpSampai() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtpPkpSampai().compareTo(b2.getTbtpPkpSampai());
                }
                break;
            case TbTarifPajakManager.ID_TBTP_PKP_DARI:
                if (b1.getTbtpPkpDari() == null && b2.getTbtpPkpDari() != null) {
                    iReturn = -1;
                } else if (b1.getTbtpPkpDari() == null && b2.getTbtpPkpDari() == null) {
                    iReturn = 0;
                } else if (b1.getTbtpPkpDari() != null && b2.getTbtpPkpDari() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtpPkpDari().compareTo(b2.getTbtpPkpDari());
                }
                break;
            case TbTarifPajakManager.ID_TBTP_ID:
                if (b1.getTbtpId() == null && b2.getTbtpId() != null) {
                    iReturn = -1;
                } else if (b1.getTbtpId() == null && b2.getTbtpId() == null) {
                    iReturn = 0;
                } else if (b1.getTbtpId() != null && b2.getTbtpId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtpId().compareTo(b2.getTbtpId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
