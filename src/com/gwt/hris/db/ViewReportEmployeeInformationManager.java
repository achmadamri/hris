// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.ViewReportEmployeeInformationBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the view_report_employee_information table.
 * @author sql2java
 */
public class ViewReportEmployeeInformationManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbe_joined_date field.
     */
    public static final int ID_TBE_JOINED_DATE = 0;

    /**
     * Identify the tbe_status field.
     */
    public static final int ID_TBE_STATUS = 1;

    /**
     * Identify the tbs_name field.
     */
    public static final int ID_TBS_NAME = 2;

    /**
     * Identify the tbl_name field.
     */
    public static final int ID_TBL_NAME = 3;

    /**
     * Identify the tbae_major field.
     */
    public static final int ID_TBAE_MAJOR = 4;

    /**
     * Identify the tbe_name_report_to field.
     */
    public static final int ID_TBE_NAME_REPORT_TO = 5;

    /**
     * Identify the tbp_name field.
     */
    public static final int ID_TBP_NAME = 6;

    /**
     * Identify the tbes_currency_name field.
     */
    public static final int ID_TBES_CURRENCY_NAME = 7;

    /**
     * Identify the tbes_pay_frequency field.
     */
    public static final int ID_TBES_PAY_FREQUENCY = 8;

    /**
     * Identify the tbes_basic_salary field.
     */
    public static final int ID_TBES_BASIC_SALARY = 9;

    /**
     * Identify the tbes_name field.
     */
    public static final int ID_TBES_NAME = 10;

    /**
     * Identify the tbo_nama field.
     */
    public static final int ID_TBO_NAMA = 11;

    /**
     * Identify the tbj_joined_date field.
     */
    public static final int ID_TBJ_JOINED_DATE = 12;

    /**
     * Identify the tbjt_name field.
     */
    public static final int ID_TBJT_NAME = 13;

    /**
     * Identify the tbn_nama field.
     */
    public static final int ID_TBN_NAMA = 14;

    /**
     * Identify the tbcd_work_phone field.
     */
    public static final int ID_TBCD_WORK_PHONE = 15;

    /**
     * Identify the tbcd_mobile_phone field.
     */
    public static final int ID_TBCD_MOBILE_PHONE = 16;

    /**
     * Identify the tbcd_home_phone field.
     */
    public static final int ID_TBCD_HOME_PHONE = 17;

    /**
     * Identify the tbcd_zip_code field.
     */
    public static final int ID_TBCD_ZIP_CODE = 18;

    /**
     * Identify the tbcd_province field.
     */
    public static final int ID_TBCD_PROVINCE = 19;

    /**
     * Identify the tbcd_city field.
     */
    public static final int ID_TBCD_CITY = 20;

    /**
     * Identify the tbcd_street field.
     */
    public static final int ID_TBCD_STREET = 21;

    /**
     * Identify the tbe_driver_license_expiry field.
     */
    public static final int ID_TBE_DRIVER_LICENSE_EXPIRY = 22;

    /**
     * Identify the tbe_driver_license_no field.
     */
    public static final int ID_TBE_DRIVER_LICENSE_NO = 23;

    /**
     * Identify the tbe_gender field.
     */
    public static final int ID_TBE_GENDER = 24;

    /**
     * Identify the tbe_smoker field.
     */
    public static final int ID_TBE_SMOKER = 25;

    /**
     * Identify the tbe_marital_status field.
     */
    public static final int ID_TBE_MARITAL_STATUS = 26;

    /**
     * Identify the tbe_dob field.
     */
    public static final int ID_TBE_DOB = 27;

    /**
     * Identify the tbe_tax_no field.
     */
    public static final int ID_TBE_TAX_NO = 28;

    /**
     * Identify the tbe_id_no field.
     */
    public static final int ID_TBE_ID_NO = 29;

    /**
     * Identify the tbe_name field.
     */
    public static final int ID_TBE_NAME = 30;

    /**
     * Identify the tbe_employee_id field.
     */
    public static final int ID_TBE_EMPLOYEE_ID = 31;

    /**
     * Identify the tbe_id field.
     */
    public static final int ID_TBE_ID = 32;

    /**
     * Contains all the full fields of the view_report_employee_information table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "view_report_employee_information.tbe_joined_date"
        ,"view_report_employee_information.tbe_status"
        ,"view_report_employee_information.tbs_name"
        ,"view_report_employee_information.tbl_name"
        ,"view_report_employee_information.tbae_major"
        ,"view_report_employee_information.tbe_name_report_to"
        ,"view_report_employee_information.tbp_name"
        ,"view_report_employee_information.tbes_currency_name"
        ,"view_report_employee_information.tbes_pay_frequency"
        ,"view_report_employee_information.tbes_basic_salary"
        ,"view_report_employee_information.tbes_name"
        ,"view_report_employee_information.tbo_nama"
        ,"view_report_employee_information.tbj_joined_date"
        ,"view_report_employee_information.tbjt_name"
        ,"view_report_employee_information.tbn_nama"
        ,"view_report_employee_information.tbcd_work_phone"
        ,"view_report_employee_information.tbcd_mobile_phone"
        ,"view_report_employee_information.tbcd_home_phone"
        ,"view_report_employee_information.tbcd_zip_code"
        ,"view_report_employee_information.tbcd_province"
        ,"view_report_employee_information.tbcd_city"
        ,"view_report_employee_information.tbcd_street"
        ,"view_report_employee_information.tbe_driver_license_expiry"
        ,"view_report_employee_information.tbe_driver_license_no"
        ,"view_report_employee_information.tbe_gender"
        ,"view_report_employee_information.tbe_smoker"
        ,"view_report_employee_information.tbe_marital_status"
        ,"view_report_employee_information.tbe_dob"
        ,"view_report_employee_information.tbe_tax_no"
        ,"view_report_employee_information.tbe_id_no"
        ,"view_report_employee_information.tbe_name"
        ,"view_report_employee_information.tbe_employee_id"
        ,"view_report_employee_information.tbe_id"
    };

    /**
     * Contains all the fields of the view_report_employee_information table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbe_joined_date"
        ,"tbe_status"
        ,"tbs_name"
        ,"tbl_name"
        ,"tbae_major"
        ,"tbe_name_report_to"
        ,"tbp_name"
        ,"tbes_currency_name"
        ,"tbes_pay_frequency"
        ,"tbes_basic_salary"
        ,"tbes_name"
        ,"tbo_nama"
        ,"tbj_joined_date"
        ,"tbjt_name"
        ,"tbn_nama"
        ,"tbcd_work_phone"
        ,"tbcd_mobile_phone"
        ,"tbcd_home_phone"
        ,"tbcd_zip_code"
        ,"tbcd_province"
        ,"tbcd_city"
        ,"tbcd_street"
        ,"tbe_driver_license_expiry"
        ,"tbe_driver_license_no"
        ,"tbe_gender"
        ,"tbe_smoker"
        ,"tbe_marital_status"
        ,"tbe_dob"
        ,"tbe_tax_no"
        ,"tbe_id_no"
        ,"tbe_name"
        ,"tbe_employee_id"
        ,"tbe_id"
    };

    /**
     * Field that contains the comma separated fields of the view_report_employee_information table.
     */
    public static final String ALL_FULL_FIELDS = "view_report_employee_information.tbe_joined_date"
                            + ",view_report_employee_information.tbe_status"
                            + ",view_report_employee_information.tbs_name"
                            + ",view_report_employee_information.tbl_name"
                            + ",view_report_employee_information.tbae_major"
                            + ",view_report_employee_information.tbe_name_report_to"
                            + ",view_report_employee_information.tbp_name"
                            + ",view_report_employee_information.tbes_currency_name"
                            + ",view_report_employee_information.tbes_pay_frequency"
                            + ",view_report_employee_information.tbes_basic_salary"
                            + ",view_report_employee_information.tbes_name"
                            + ",view_report_employee_information.tbo_nama"
                            + ",view_report_employee_information.tbj_joined_date"
                            + ",view_report_employee_information.tbjt_name"
                            + ",view_report_employee_information.tbn_nama"
                            + ",view_report_employee_information.tbcd_work_phone"
                            + ",view_report_employee_information.tbcd_mobile_phone"
                            + ",view_report_employee_information.tbcd_home_phone"
                            + ",view_report_employee_information.tbcd_zip_code"
                            + ",view_report_employee_information.tbcd_province"
                            + ",view_report_employee_information.tbcd_city"
                            + ",view_report_employee_information.tbcd_street"
                            + ",view_report_employee_information.tbe_driver_license_expiry"
                            + ",view_report_employee_information.tbe_driver_license_no"
                            + ",view_report_employee_information.tbe_gender"
                            + ",view_report_employee_information.tbe_smoker"
                            + ",view_report_employee_information.tbe_marital_status"
                            + ",view_report_employee_information.tbe_dob"
                            + ",view_report_employee_information.tbe_tax_no"
                            + ",view_report_employee_information.tbe_id_no"
                            + ",view_report_employee_information.tbe_name"
                            + ",view_report_employee_information.tbe_employee_id"
                            + ",view_report_employee_information.tbe_id";

    /**
     * Field that contains the comma separated fields of the view_report_employee_information table.
     */
    public static final String ALL_FIELDS = "tbe_joined_date"
                            + ",tbe_status"
                            + ",tbs_name"
                            + ",tbl_name"
                            + ",tbae_major"
                            + ",tbe_name_report_to"
                            + ",tbp_name"
                            + ",tbes_currency_name"
                            + ",tbes_pay_frequency"
                            + ",tbes_basic_salary"
                            + ",tbes_name"
                            + ",tbo_nama"
                            + ",tbj_joined_date"
                            + ",tbjt_name"
                            + ",tbn_nama"
                            + ",tbcd_work_phone"
                            + ",tbcd_mobile_phone"
                            + ",tbcd_home_phone"
                            + ",tbcd_zip_code"
                            + ",tbcd_province"
                            + ",tbcd_city"
                            + ",tbcd_street"
                            + ",tbe_driver_license_expiry"
                            + ",tbe_driver_license_no"
                            + ",tbe_gender"
                            + ",tbe_smoker"
                            + ",tbe_marital_status"
                            + ",tbe_dob"
                            + ",tbe_tax_no"
                            + ",tbe_id_no"
                            + ",tbe_name"
                            + ",tbe_employee_id"
                            + ",tbe_id";

    private static ViewReportEmployeeInformationManager singleton = new ViewReportEmployeeInformationManager();

    /**
     * Get the ViewReportEmployeeInformationManager singleton.
     *
     * @return ViewReportEmployeeInformationManager
     */
    public static ViewReportEmployeeInformationManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new ViewReportEmployeeInformationBean instance.
     *
     * @return the new ViewReportEmployeeInformationBean
     */
    public ViewReportEmployeeInformationBean createViewReportEmployeeInformationBean()
    {
        return new ViewReportEmployeeInformationBean();
    }




    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from view_report_employee_information.
     *
     * @return an array of ViewReportEmployeeInformationManager bean
     * @throws DAOException
     */
    //5
    public ViewReportEmployeeInformationBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from view_report_employee_information, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of ViewReportEmployeeInformationManager bean
     * @throws DAOException
     */
    //6
    public ViewReportEmployeeInformationBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ViewReportEmployeeInformationBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ViewReportEmployeeInformationBean table
     * @throws DAOException
     */
    //7
    public ViewReportEmployeeInformationBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ViewReportEmployeeInformationBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting ViewReportEmployeeInformationBean table
     * @throws DAOException
     */
    //8
    public ViewReportEmployeeInformationBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of ViewReportEmployeeInformationBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting ViewReportEmployeeInformationBean table
     * @throws DAOException
     */
    //9
    public ViewReportEmployeeInformationBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_report_employee_information ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM view_report_employee_information ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the view_report_employee_information table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM view_report_employee_information " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ViewReportEmployeeInformationBean bean into the database.
     *
     * @param bean the ViewReportEmployeeInformationBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ViewReportEmployeeInformationBean save(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the ViewReportEmployeeInformationBean bean into the database.
     *
     * @param bean the ViewReportEmployeeInformationBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public ViewReportEmployeeInformationBean insert(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into view_report_employee_information (");

            if (bean.isTbeJoinedDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_joined_date");
                _dirtyCount++;
            }

            if (bean.isTbeStatusModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_status");
                _dirtyCount++;
            }

            if (bean.isTbsNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbs_name");
                _dirtyCount++;
            }

            if (bean.isTblNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_name");
                _dirtyCount++;
            }

            if (bean.isTbaeMajorModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbae_major");
                _dirtyCount++;
            }

            if (bean.isTbeNameReportToModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_name_report_to");
                _dirtyCount++;
            }

            if (bean.isTbpNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_name");
                _dirtyCount++;
            }

            if (bean.isTbesCurrencyNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbes_currency_name");
                _dirtyCount++;
            }

            if (bean.isTbesPayFrequencyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbes_pay_frequency");
                _dirtyCount++;
            }

            if (bean.isTbesBasicSalaryModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbes_basic_salary");
                _dirtyCount++;
            }

            if (bean.isTbesNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbes_name");
                _dirtyCount++;
            }

            if (bean.isTboNamaModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbo_nama");
                _dirtyCount++;
            }

            if (bean.isTbjJoinedDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbj_joined_date");
                _dirtyCount++;
            }

            if (bean.isTbjtNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbjt_name");
                _dirtyCount++;
            }

            if (bean.isTbnNamaModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbn_nama");
                _dirtyCount++;
            }

            if (bean.isTbcdWorkPhoneModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbcd_work_phone");
                _dirtyCount++;
            }

            if (bean.isTbcdMobilePhoneModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbcd_mobile_phone");
                _dirtyCount++;
            }

            if (bean.isTbcdHomePhoneModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbcd_home_phone");
                _dirtyCount++;
            }

            if (bean.isTbcdZipCodeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbcd_zip_code");
                _dirtyCount++;
            }

            if (bean.isTbcdProvinceModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbcd_province");
                _dirtyCount++;
            }

            if (bean.isTbcdCityModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbcd_city");
                _dirtyCount++;
            }

            if (bean.isTbcdStreetModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbcd_street");
                _dirtyCount++;
            }

            if (bean.isTbeDriverLicenseExpiryModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_driver_license_expiry");
                _dirtyCount++;
            }

            if (bean.isTbeDriverLicenseNoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_driver_license_no");
                _dirtyCount++;
            }

            if (bean.isTbeGenderModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_gender");
                _dirtyCount++;
            }

            if (bean.isTbeSmokerModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_smoker");
                _dirtyCount++;
            }

            if (bean.isTbeMaritalStatusModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_marital_status");
                _dirtyCount++;
            }

            if (bean.isTbeDobModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_dob");
                _dirtyCount++;
            }

            if (bean.isTbeTaxNoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_tax_no");
                _dirtyCount++;
            }

            if (bean.isTbeIdNoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id_no");
                _dirtyCount++;
            }

            if (bean.isTbeNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_name");
                _dirtyCount++;
            }

            if (bean.isTbeEmployeeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_employee_id");
                _dirtyCount++;
            }

            if (bean.isTbeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the ViewReportEmployeeInformationBean bean record in the database according to the changes.
     *
     * @param bean the ViewReportEmployeeInformationBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ViewReportEmployeeInformationBean update(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();


            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE view_report_employee_information SET ");
            boolean useComma=false;

            if (bean.isTbeJoinedDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_joined_date=?");
            }

            if (bean.isTbeStatusModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_status=?");
            }

            if (bean.isTbsNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbs_name=?");
            }

            if (bean.isTblNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_name=?");
            }

            if (bean.isTbaeMajorModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbae_major=?");
            }

            if (bean.isTbeNameReportToModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_name_report_to=?");
            }

            if (bean.isTbpNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_name=?");
            }

            if (bean.isTbesCurrencyNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbes_currency_name=?");
            }

            if (bean.isTbesPayFrequencyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbes_pay_frequency=?");
            }

            if (bean.isTbesBasicSalaryModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbes_basic_salary=?");
            }

            if (bean.isTbesNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbes_name=?");
            }

            if (bean.isTboNamaModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbo_nama=?");
            }

            if (bean.isTbjJoinedDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbj_joined_date=?");
            }

            if (bean.isTbjtNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbjt_name=?");
            }

            if (bean.isTbnNamaModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbn_nama=?");
            }

            if (bean.isTbcdWorkPhoneModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbcd_work_phone=?");
            }

            if (bean.isTbcdMobilePhoneModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbcd_mobile_phone=?");
            }

            if (bean.isTbcdHomePhoneModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbcd_home_phone=?");
            }

            if (bean.isTbcdZipCodeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbcd_zip_code=?");
            }

            if (bean.isTbcdProvinceModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbcd_province=?");
            }

            if (bean.isTbcdCityModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbcd_city=?");
            }

            if (bean.isTbcdStreetModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbcd_street=?");
            }

            if (bean.isTbeDriverLicenseExpiryModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_driver_license_expiry=?");
            }

            if (bean.isTbeDriverLicenseNoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_driver_license_no=?");
            }

            if (bean.isTbeGenderModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_gender=?");
            }

            if (bean.isTbeSmokerModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_smoker=?");
            }

            if (bean.isTbeMaritalStatusModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_marital_status=?");
            }

            if (bean.isTbeDobModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_dob=?");
            }

            if (bean.isTbeTaxNoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_tax_no=?");
            }

            if (bean.isTbeIdNoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id_no=?");
            }

            if (bean.isTbeNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_name=?");
            }

            if (bean.isTbeEmployeeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_employee_id=?");
            }

            if (bean.isTbeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id=?");
            }
            sql.append("");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of ViewReportEmployeeInformationBean beans into the database.
     *
     * @param beans the ViewReportEmployeeInformationBean bean table to be saved
     * @return the saved ViewReportEmployeeInformationBean array.
     * @throws DAOException
     */
    //15
    public ViewReportEmployeeInformationBean[] save(ViewReportEmployeeInformationBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of ViewReportEmployeeInformationBean beans into the database.
     *
     * @param beans the ViewReportEmployeeInformationBean bean table to be inserted
     * @return the saved ViewReportEmployeeInformationBean array.
     * @throws DAOException
     */
    //16
    public ViewReportEmployeeInformationBean[] insert(ViewReportEmployeeInformationBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of ViewReportEmployeeInformationBean beans into the database.
     *
     * @param beans the ViewReportEmployeeInformationBean bean table to be inserted
     * @return the saved ViewReportEmployeeInformationBean array.
     * @throws DAOException
     */
    //17
    public ViewReportEmployeeInformationBean[] update(ViewReportEmployeeInformationBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique ViewReportEmployeeInformationBean bean from a template one giving a c
     *
     * @param bean the ViewReportEmployeeInformationBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public ViewReportEmployeeInformationBean loadUniqueUsingTemplate(ViewReportEmployeeInformationBean bean) throws DAOException
    {
         ViewReportEmployeeInformationBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of ViewReportEmployeeInformationBean from a template one.
     *
     * @param bean the ViewReportEmployeeInformationBean template to look for
     * @return all the ViewReportEmployeeInformationBean matching the template
     * @throws DAOException
     */
    //19
    public ViewReportEmployeeInformationBean[] loadUsingTemplate(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of ViewReportEmployeeInformationBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewReportEmployeeInformationBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the ViewReportEmployeeInformationBean matching the template
     * @throws DAOException
     */
    //20
    public ViewReportEmployeeInformationBean[] loadUsingTemplate(ViewReportEmployeeInformationBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of ViewReportEmployeeInformationBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewReportEmployeeInformationBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the ViewReportEmployeeInformationBean matching the template
     * @throws DAOException
     */
    //20
    public ViewReportEmployeeInformationBean[] loadUsingTemplate(ViewReportEmployeeInformationBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_report_employee_information ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a ViewReportEmployeeInformationBean template.
     *
     * @param bean the ViewReportEmployeeInformationBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM view_report_employee_information ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table view_report_employee_information.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table view_report_employee_information with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM view_report_employee_information " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table view_report_employee_information with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific ViewReportEmployeeInformationBean bean
     *
     * @param bean the ViewReportEmployeeInformationBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific ViewReportEmployeeInformationBean bean , given the start row and number of rows.
     *
     * @param bean the ViewReportEmployeeInformationBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewReportEmployeeInformationBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific ViewReportEmployeeInformationBean bean given the start row and number of rows and the search type
     *
     * @param bean the ViewReportEmployeeInformationBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewReportEmployeeInformationBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM view_report_employee_information");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, ViewReportEmployeeInformationBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbeJoinedDateModified()) {
                _dirtyCount ++;
                if (bean.getTbeJoinedDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_joined_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_joined_date = ?");
                }
            }
            if (bean.isTbeStatusModified()) {
                _dirtyCount ++;
                if (bean.getTbeStatus() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_status IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_status = ?");
                }
            }
            if (bean.isTbsNameModified()) {
                _dirtyCount ++;
                if (bean.getTbsName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbs_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblNameModified()) {
                _dirtyCount ++;
                if (bean.getTblName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaeMajorModified()) {
                _dirtyCount ++;
                if (bean.getTbaeMajor() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbae_major IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbae_major ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeNameReportToModified()) {
                _dirtyCount ++;
                if (bean.getTbeNameReportTo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name_report_to IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name_report_to ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpNameModified()) {
                _dirtyCount ++;
                if (bean.getTbpName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbesCurrencyNameModified()) {
                _dirtyCount ++;
                if (bean.getTbesCurrencyName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_currency_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_currency_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbesPayFrequencyModified()) {
                _dirtyCount ++;
                if (bean.getTbesPayFrequency() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_pay_frequency IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_pay_frequency = ?");
                }
            }
            if (bean.isTbesBasicSalaryModified()) {
                _dirtyCount ++;
                if (bean.getTbesBasicSalary() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_basic_salary IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_basic_salary = ?");
                }
            }
            if (bean.isTbesNameModified()) {
                _dirtyCount ++;
                if (bean.getTbesName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTboNamaModified()) {
                _dirtyCount ++;
                if (bean.getTboNama() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbo_nama IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbo_nama ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbjJoinedDateModified()) {
                _dirtyCount ++;
                if (bean.getTbjJoinedDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbj_joined_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbj_joined_date = ?");
                }
            }
            if (bean.isTbjtNameModified()) {
                _dirtyCount ++;
                if (bean.getTbjtName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbnNamaModified()) {
                _dirtyCount ++;
                if (bean.getTbnNama() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbn_nama IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbn_nama ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcdWorkPhoneModified()) {
                _dirtyCount ++;
                if (bean.getTbcdWorkPhone() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_work_phone IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_work_phone ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcdMobilePhoneModified()) {
                _dirtyCount ++;
                if (bean.getTbcdMobilePhone() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_mobile_phone IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_mobile_phone ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcdHomePhoneModified()) {
                _dirtyCount ++;
                if (bean.getTbcdHomePhone() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_home_phone IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_home_phone ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcdZipCodeModified()) {
                _dirtyCount ++;
                if (bean.getTbcdZipCode() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_zip_code IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_zip_code ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcdProvinceModified()) {
                _dirtyCount ++;
                if (bean.getTbcdProvince() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_province IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_province ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcdCityModified()) {
                _dirtyCount ++;
                if (bean.getTbcdCity() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_city IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_city ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcdStreetModified()) {
                _dirtyCount ++;
                if (bean.getTbcdStreet() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_street IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbcd_street ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeDriverLicenseExpiryModified()) {
                _dirtyCount ++;
                if (bean.getTbeDriverLicenseExpiry() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_expiry IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_expiry = ?");
                }
            }
            if (bean.isTbeDriverLicenseNoModified()) {
                _dirtyCount ++;
                if (bean.getTbeDriverLicenseNo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_no IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_no ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeGenderModified()) {
                _dirtyCount ++;
                if (bean.getTbeGender() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_gender IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_gender = ?");
                }
            }
            if (bean.isTbeSmokerModified()) {
                _dirtyCount ++;
                if (bean.getTbeSmoker() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_smoker IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_smoker = ?");
                }
            }
            if (bean.isTbeMaritalStatusModified()) {
                _dirtyCount ++;
                if (bean.getTbeMaritalStatus() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_marital_status IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_marital_status = ?");
                }
            }
            if (bean.isTbeDobModified()) {
                _dirtyCount ++;
                if (bean.getTbeDob() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_dob IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_dob = ?");
                }
            }
            if (bean.isTbeTaxNoModified()) {
                _dirtyCount ++;
                if (bean.getTbeTaxNo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_tax_no IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_tax_no ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeIdNoModified()) {
                _dirtyCount ++;
                if (bean.getTbeIdNo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id_no IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id_no ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeEmployeeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeEmployeeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_employee_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_employee_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, ViewReportEmployeeInformationBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbeJoinedDateModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeJoinedDate() + "]");
                if (bean.getTbeJoinedDate() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbeJoinedDate()); }
            }
            if (bean.isTbeStatusModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeStatus() + "]");
                if (bean.getTbeStatus() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeStatus()); }
            }
            if (bean.isTbsNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbsName() + "]");
                        if (bean.getTbsName() == null) { ps.setNull(++_dirtyCount, Types.LONGVARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbsName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbsName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbsName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbsName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbsName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbsName() + "]");
                        if (bean.getTbsName() + "%" == null) { ps.setNull(++_dirtyCount, Types.LONGVARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbsName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblName() + "]");
                        if (bean.getTblName() == null) { ps.setNull(++_dirtyCount, Types.LONGVARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblName() + "]");
                        if (bean.getTblName() + "%" == null) { ps.setNull(++_dirtyCount, Types.LONGVARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaeMajorModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaeMajor() + "]");
                        if (bean.getTbaeMajor() == null) { ps.setNull(++_dirtyCount, Types.LONGVARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaeMajor()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaeMajor() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaeMajor() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaeMajor() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaeMajor());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaeMajor() + "]");
                        if (bean.getTbaeMajor() + "%" == null) { ps.setNull(++_dirtyCount, Types.LONGVARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaeMajor() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeNameReportToModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeNameReportTo() + "]");
                        if (bean.getTbeNameReportTo() == null) { ps.setNull(++_dirtyCount, Types.LONGVARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeNameReportTo()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeNameReportTo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeNameReportTo() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeNameReportTo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeNameReportTo());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeNameReportTo() + "]");
                        if (bean.getTbeNameReportTo() + "%" == null) { ps.setNull(++_dirtyCount, Types.LONGVARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeNameReportTo() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpName() + "]");
                        if (bean.getTbpName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpName() + "]");
                        if (bean.getTbpName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbesCurrencyNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbesCurrencyName() + "]");
                        if (bean.getTbesCurrencyName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbesCurrencyName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbesCurrencyName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbesCurrencyName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbesCurrencyName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbesCurrencyName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbesCurrencyName() + "]");
                        if (bean.getTbesCurrencyName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbesCurrencyName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbesPayFrequencyModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbesPayFrequency() + "]");
                if (bean.getTbesPayFrequency() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbesPayFrequency()); }
            }
            if (bean.isTbesBasicSalaryModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbesBasicSalary() + "]");
                if (bean.getTbesBasicSalary() == null) { ps.setNull(++_dirtyCount, Types.DOUBLE); } else { Manager.setDouble(ps, ++_dirtyCount, bean.getTbesBasicSalary()); }
            }
            if (bean.isTbesNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbesName() + "]");
                        if (bean.getTbesName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbesName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbesName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbesName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbesName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbesName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbesName() + "]");
                        if (bean.getTbesName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbesName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTboNamaModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTboNama() + "]");
                        if (bean.getTboNama() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTboNama()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTboNama() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTboNama() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTboNama() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTboNama());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTboNama() + "]");
                        if (bean.getTboNama() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTboNama() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbjJoinedDateModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjJoinedDate() + "]");
                if (bean.getTbjJoinedDate() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbjJoinedDate()); }
            }
            if (bean.isTbjtNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtName() + "]");
                        if (bean.getTbjtName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtName() + "]");
                        if (bean.getTbjtName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbnNamaModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbnNama() + "]");
                        if (bean.getTbnNama() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbnNama()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbnNama() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbnNama() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbnNama() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbnNama());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbnNama() + "]");
                        if (bean.getTbnNama() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbnNama() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcdWorkPhoneModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdWorkPhone() + "]");
                        if (bean.getTbcdWorkPhone() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdWorkPhone()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdWorkPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdWorkPhone() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdWorkPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdWorkPhone());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdWorkPhone() + "]");
                        if (bean.getTbcdWorkPhone() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdWorkPhone() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcdMobilePhoneModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdMobilePhone() + "]");
                        if (bean.getTbcdMobilePhone() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdMobilePhone()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdMobilePhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdMobilePhone() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdMobilePhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdMobilePhone());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdMobilePhone() + "]");
                        if (bean.getTbcdMobilePhone() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdMobilePhone() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcdHomePhoneModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdHomePhone() + "]");
                        if (bean.getTbcdHomePhone() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdHomePhone()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdHomePhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdHomePhone() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdHomePhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdHomePhone());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdHomePhone() + "]");
                        if (bean.getTbcdHomePhone() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdHomePhone() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcdZipCodeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdZipCode() + "]");
                        if (bean.getTbcdZipCode() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdZipCode()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdZipCode() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdZipCode() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdZipCode() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdZipCode());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdZipCode() + "]");
                        if (bean.getTbcdZipCode() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdZipCode() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcdProvinceModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdProvince() + "]");
                        if (bean.getTbcdProvince() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdProvince()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdProvince() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdProvince() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdProvince() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdProvince());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdProvince() + "]");
                        if (bean.getTbcdProvince() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdProvince() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcdCityModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdCity() + "]");
                        if (bean.getTbcdCity() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdCity()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdCity() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdCity() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdCity() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdCity());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdCity() + "]");
                        if (bean.getTbcdCity() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdCity() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcdStreetModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdStreet() + "]");
                        if (bean.getTbcdStreet() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdStreet()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdStreet() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdStreet() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcdStreet() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcdStreet());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcdStreet() + "]");
                        if (bean.getTbcdStreet() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcdStreet() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeDriverLicenseExpiryModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDriverLicenseExpiry() + "]");
                if (bean.getTbeDriverLicenseExpiry() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbeDriverLicenseExpiry()); }
            }
            if (bean.isTbeDriverLicenseNoModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDriverLicenseNo() + "]");
                        if (bean.getTbeDriverLicenseNo() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeDriverLicenseNo()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeDriverLicenseNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeDriverLicenseNo() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDriverLicenseNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeDriverLicenseNo());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeDriverLicenseNo() + "]");
                        if (bean.getTbeDriverLicenseNo() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeDriverLicenseNo() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeGenderModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeGender() + "]");
                if (bean.getTbeGender() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeGender()); }
            }
            if (bean.isTbeSmokerModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeSmoker() + "]");
                if (bean.getTbeSmoker() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeSmoker()); }
            }
            if (bean.isTbeMaritalStatusModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeMaritalStatus() + "]");
                if (bean.getTbeMaritalStatus() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeMaritalStatus()); }
            }
            if (bean.isTbeDobModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDob() + "]");
                if (bean.getTbeDob() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbeDob()); }
            }
            if (bean.isTbeTaxNoModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeTaxNo() + "]");
                        if (bean.getTbeTaxNo() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeTaxNo()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeTaxNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeTaxNo() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeTaxNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeTaxNo());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeTaxNo() + "]");
                        if (bean.getTbeTaxNo() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeTaxNo() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeIdNoModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeIdNo() + "]");
                        if (bean.getTbeIdNo() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeIdNo()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeIdNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeIdNo() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeIdNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeIdNo());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeIdNo() + "]");
                        if (bean.getTbeIdNo() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeIdNo() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "]");
                        if (bean.getTbeName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "]");
                        if (bean.getTbeName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeEmployeeIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmployeeId() + "]");
                        if (bean.getTbeEmployeeId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmployeeId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmployeeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmployeeId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmployeeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmployeeId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmployeeId() + "]");
                        if (bean.getTbeEmployeeId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmployeeId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeId() + "]");
                if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of ViewReportEmployeeInformationBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting ViewReportEmployeeInformationBean table
     * @throws DAOException
     */
    //28
    public ViewReportEmployeeInformationBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (ViewReportEmployeeInformationBean[])v.toArray(new ViewReportEmployeeInformationBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the view_report_employee_information on a ViewReportEmployeeInformationBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewReportEmployeeInformationBean bean
     * @throws DAOException
     */
    //29
    public ViewReportEmployeeInformationBean decodeRow(ResultSet rs) throws DAOException
    {
        ViewReportEmployeeInformationBean bean = this.createViewReportEmployeeInformationBean();
        try
        {
            bean.setTbeJoinedDate(rs.getTimestamp(1));
            bean.setTbeStatus(Manager.getInteger(rs, 2));
            bean.setTbsName(rs.getString(3));
            bean.setTblName(rs.getString(4));
            bean.setTbaeMajor(rs.getString(5));
            bean.setTbeNameReportTo(rs.getString(6));
            bean.setTbpName(rs.getString(7));
            bean.setTbesCurrencyName(rs.getString(8));
            bean.setTbesPayFrequency(Manager.getInteger(rs, 9));
            bean.setTbesBasicSalary(Manager.getDouble(rs, 10));
            bean.setTbesName(rs.getString(11));
            bean.setTboNama(rs.getString(12));
            bean.setTbjJoinedDate(rs.getTimestamp(13));
            bean.setTbjtName(rs.getString(14));
            bean.setTbnNama(rs.getString(15));
            bean.setTbcdWorkPhone(rs.getString(16));
            bean.setTbcdMobilePhone(rs.getString(17));
            bean.setTbcdHomePhone(rs.getString(18));
            bean.setTbcdZipCode(rs.getString(19));
            bean.setTbcdProvince(rs.getString(20));
            bean.setTbcdCity(rs.getString(21));
            bean.setTbcdStreet(rs.getString(22));
            bean.setTbeDriverLicenseExpiry(rs.getTimestamp(23));
            bean.setTbeDriverLicenseNo(rs.getString(24));
            bean.setTbeGender(Manager.getInteger(rs, 25));
            bean.setTbeSmoker(Manager.getInteger(rs, 26));
            bean.setTbeMaritalStatus(Manager.getInteger(rs, 27));
            bean.setTbeDob(rs.getTimestamp(28));
            bean.setTbeTaxNo(rs.getString(29));
            bean.setTbeIdNo(rs.getString(30));
            bean.setTbeName(rs.getString(31));
            bean.setTbeEmployeeId(rs.getString(32));
            bean.setTbeId(Manager.getInteger(rs, 33));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public ViewReportEmployeeInformationBean toBean(ViewReportEmployeeInformationBeanModel beanModel, ViewReportEmployeeInformationBean bean)
    {
		if (beanModel.getTbeJoinedDate() != null)
			bean.setTbeJoinedDate(beanModel.getTbeJoinedDate());

		if (bean.getTbeJoinedDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeJoinedDate().getClass().getName()))
			bean.setTbeJoinedDate(beanModel.getTbeJoinedDate());
		
		if (beanModel.getTbeStatus() != null)
			bean.setTbeStatus(beanModel.getTbeStatus());

		if (bean.getTbeStatus() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeStatus().getClass().getName()))
			bean.setTbeStatus(beanModel.getTbeStatus());
		
		if (beanModel.getTbsName() != null)
			bean.setTbsName(beanModel.getTbsName());

		if (bean.getTbsName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbsName().getClass().getName()))
			bean.setTbsName(beanModel.getTbsName());
		
		if (beanModel.getTblName() != null)
			bean.setTblName(beanModel.getTblName());

		if (bean.getTblName() != null)
		if ("java.sql.Timestamp".equals(bean.getTblName().getClass().getName()))
			bean.setTblName(beanModel.getTblName());
		
		if (beanModel.getTbaeMajor() != null)
			bean.setTbaeMajor(beanModel.getTbaeMajor());

		if (bean.getTbaeMajor() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaeMajor().getClass().getName()))
			bean.setTbaeMajor(beanModel.getTbaeMajor());
		
		if (beanModel.getTbeNameReportTo() != null)
			bean.setTbeNameReportTo(beanModel.getTbeNameReportTo());

		if (bean.getTbeNameReportTo() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeNameReportTo().getClass().getName()))
			bean.setTbeNameReportTo(beanModel.getTbeNameReportTo());
		
		if (beanModel.getTbpName() != null)
			bean.setTbpName(beanModel.getTbpName());

		if (bean.getTbpName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpName().getClass().getName()))
			bean.setTbpName(beanModel.getTbpName());
		
		if (beanModel.getTbesCurrencyName() != null)
			bean.setTbesCurrencyName(beanModel.getTbesCurrencyName());

		if (bean.getTbesCurrencyName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbesCurrencyName().getClass().getName()))
			bean.setTbesCurrencyName(beanModel.getTbesCurrencyName());
		
		if (beanModel.getTbesPayFrequency() != null)
			bean.setTbesPayFrequency(beanModel.getTbesPayFrequency());

		if (bean.getTbesPayFrequency() != null)
		if ("java.sql.Timestamp".equals(bean.getTbesPayFrequency().getClass().getName()))
			bean.setTbesPayFrequency(beanModel.getTbesPayFrequency());
		
		if (beanModel.getTbesBasicSalary() != null)
			bean.setTbesBasicSalary(beanModel.getTbesBasicSalary());

		if (bean.getTbesBasicSalary() != null)
		if ("java.sql.Timestamp".equals(bean.getTbesBasicSalary().getClass().getName()))
			bean.setTbesBasicSalary(beanModel.getTbesBasicSalary());
		
		if (beanModel.getTbesName() != null)
			bean.setTbesName(beanModel.getTbesName());

		if (bean.getTbesName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbesName().getClass().getName()))
			bean.setTbesName(beanModel.getTbesName());
		
		if (beanModel.getTboNama() != null)
			bean.setTboNama(beanModel.getTboNama());

		if (bean.getTboNama() != null)
		if ("java.sql.Timestamp".equals(bean.getTboNama().getClass().getName()))
			bean.setTboNama(beanModel.getTboNama());
		
		if (beanModel.getTbjJoinedDate() != null)
			bean.setTbjJoinedDate(beanModel.getTbjJoinedDate());

		if (bean.getTbjJoinedDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbjJoinedDate().getClass().getName()))
			bean.setTbjJoinedDate(beanModel.getTbjJoinedDate());
		
		if (beanModel.getTbjtName() != null)
			bean.setTbjtName(beanModel.getTbjtName());

		if (bean.getTbjtName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbjtName().getClass().getName()))
			bean.setTbjtName(beanModel.getTbjtName());
		
		if (beanModel.getTbnNama() != null)
			bean.setTbnNama(beanModel.getTbnNama());

		if (bean.getTbnNama() != null)
		if ("java.sql.Timestamp".equals(bean.getTbnNama().getClass().getName()))
			bean.setTbnNama(beanModel.getTbnNama());
		
		if (beanModel.getTbcdWorkPhone() != null)
			bean.setTbcdWorkPhone(beanModel.getTbcdWorkPhone());

		if (bean.getTbcdWorkPhone() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcdWorkPhone().getClass().getName()))
			bean.setTbcdWorkPhone(beanModel.getTbcdWorkPhone());
		
		if (beanModel.getTbcdMobilePhone() != null)
			bean.setTbcdMobilePhone(beanModel.getTbcdMobilePhone());

		if (bean.getTbcdMobilePhone() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcdMobilePhone().getClass().getName()))
			bean.setTbcdMobilePhone(beanModel.getTbcdMobilePhone());
		
		if (beanModel.getTbcdHomePhone() != null)
			bean.setTbcdHomePhone(beanModel.getTbcdHomePhone());

		if (bean.getTbcdHomePhone() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcdHomePhone().getClass().getName()))
			bean.setTbcdHomePhone(beanModel.getTbcdHomePhone());
		
		if (beanModel.getTbcdZipCode() != null)
			bean.setTbcdZipCode(beanModel.getTbcdZipCode());

		if (bean.getTbcdZipCode() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcdZipCode().getClass().getName()))
			bean.setTbcdZipCode(beanModel.getTbcdZipCode());
		
		if (beanModel.getTbcdProvince() != null)
			bean.setTbcdProvince(beanModel.getTbcdProvince());

		if (bean.getTbcdProvince() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcdProvince().getClass().getName()))
			bean.setTbcdProvince(beanModel.getTbcdProvince());
		
		if (beanModel.getTbcdCity() != null)
			bean.setTbcdCity(beanModel.getTbcdCity());

		if (bean.getTbcdCity() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcdCity().getClass().getName()))
			bean.setTbcdCity(beanModel.getTbcdCity());
		
		if (beanModel.getTbcdStreet() != null)
			bean.setTbcdStreet(beanModel.getTbcdStreet());

		if (bean.getTbcdStreet() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcdStreet().getClass().getName()))
			bean.setTbcdStreet(beanModel.getTbcdStreet());
		
		if (beanModel.getTbeDriverLicenseExpiry() != null)
			bean.setTbeDriverLicenseExpiry(beanModel.getTbeDriverLicenseExpiry());

		if (bean.getTbeDriverLicenseExpiry() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeDriverLicenseExpiry().getClass().getName()))
			bean.setTbeDriverLicenseExpiry(beanModel.getTbeDriverLicenseExpiry());
		
		if (beanModel.getTbeDriverLicenseNo() != null)
			bean.setTbeDriverLicenseNo(beanModel.getTbeDriverLicenseNo());

		if (bean.getTbeDriverLicenseNo() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeDriverLicenseNo().getClass().getName()))
			bean.setTbeDriverLicenseNo(beanModel.getTbeDriverLicenseNo());
		
		if (beanModel.getTbeGender() != null)
			bean.setTbeGender(beanModel.getTbeGender());

		if (bean.getTbeGender() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeGender().getClass().getName()))
			bean.setTbeGender(beanModel.getTbeGender());
		
		if (beanModel.getTbeSmoker() != null)
			bean.setTbeSmoker(beanModel.getTbeSmoker());

		if (bean.getTbeSmoker() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeSmoker().getClass().getName()))
			bean.setTbeSmoker(beanModel.getTbeSmoker());
		
		if (beanModel.getTbeMaritalStatus() != null)
			bean.setTbeMaritalStatus(beanModel.getTbeMaritalStatus());

		if (bean.getTbeMaritalStatus() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeMaritalStatus().getClass().getName()))
			bean.setTbeMaritalStatus(beanModel.getTbeMaritalStatus());
		
		if (beanModel.getTbeDob() != null)
			bean.setTbeDob(beanModel.getTbeDob());

		if (bean.getTbeDob() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeDob().getClass().getName()))
			bean.setTbeDob(beanModel.getTbeDob());
		
		if (beanModel.getTbeTaxNo() != null)
			bean.setTbeTaxNo(beanModel.getTbeTaxNo());

		if (bean.getTbeTaxNo() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeTaxNo().getClass().getName()))
			bean.setTbeTaxNo(beanModel.getTbeTaxNo());
		
		if (beanModel.getTbeIdNo() != null)
			bean.setTbeIdNo(beanModel.getTbeIdNo());

		if (bean.getTbeIdNo() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeIdNo().getClass().getName()))
			bean.setTbeIdNo(beanModel.getTbeIdNo());
		
		if (beanModel.getTbeName() != null)
			bean.setTbeName(beanModel.getTbeName());

		if (bean.getTbeName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeName().getClass().getName()))
			bean.setTbeName(beanModel.getTbeName());
		
		if (beanModel.getTbeEmployeeId() != null)
			bean.setTbeEmployeeId(beanModel.getTbeEmployeeId());

		if (bean.getTbeEmployeeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeEmployeeId().getClass().getName()))
			bean.setTbeEmployeeId(beanModel.getTbeEmployeeId());
		
		if (beanModel.getTbeId() != null)
			bean.setTbeId(beanModel.getTbeId());

		if (bean.getTbeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeId().getClass().getName()))
			bean.setTbeId(beanModel.getTbeId());
		
        return bean;
    }
	
    //29AA
    public ViewReportEmployeeInformationBean[] toBeans(ViewReportEmployeeInformationBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	ViewReportEmployeeInformationBean beans[] = new ViewReportEmployeeInformationBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public ViewReportEmployeeInformationBeanModel toBeanModel(ViewReportEmployeeInformationBean bean)
    {
    	ViewReportEmployeeInformationBeanModel beanModel = new ViewReportEmployeeInformationBeanModel();
		beanModel.setTbeJoinedDate(bean.getTbeJoinedDate());
		beanModel.setTbeStatus(bean.getTbeStatus());
		beanModel.setTbsName(bean.getTbsName());
		beanModel.setTblName(bean.getTblName());
		beanModel.setTbaeMajor(bean.getTbaeMajor());
		beanModel.setTbeNameReportTo(bean.getTbeNameReportTo());
		beanModel.setTbpName(bean.getTbpName());
		beanModel.setTbesCurrencyName(bean.getTbesCurrencyName());
		beanModel.setTbesPayFrequency(bean.getTbesPayFrequency());
		beanModel.setTbesBasicSalary(bean.getTbesBasicSalary());
		beanModel.setTbesName(bean.getTbesName());
		beanModel.setTboNama(bean.getTboNama());
		beanModel.setTbjJoinedDate(bean.getTbjJoinedDate());
		beanModel.setTbjtName(bean.getTbjtName());
		beanModel.setTbnNama(bean.getTbnNama());
		beanModel.setTbcdWorkPhone(bean.getTbcdWorkPhone());
		beanModel.setTbcdMobilePhone(bean.getTbcdMobilePhone());
		beanModel.setTbcdHomePhone(bean.getTbcdHomePhone());
		beanModel.setTbcdZipCode(bean.getTbcdZipCode());
		beanModel.setTbcdProvince(bean.getTbcdProvince());
		beanModel.setTbcdCity(bean.getTbcdCity());
		beanModel.setTbcdStreet(bean.getTbcdStreet());
		beanModel.setTbeDriverLicenseExpiry(bean.getTbeDriverLicenseExpiry());
		beanModel.setTbeDriverLicenseNo(bean.getTbeDriverLicenseNo());
		beanModel.setTbeGender(bean.getTbeGender());
		beanModel.setTbeSmoker(bean.getTbeSmoker());
		beanModel.setTbeMaritalStatus(bean.getTbeMaritalStatus());
		beanModel.setTbeDob(bean.getTbeDob());
		beanModel.setTbeTaxNo(bean.getTbeTaxNo());
		beanModel.setTbeIdNo(bean.getTbeIdNo());
		beanModel.setTbeName(bean.getTbeName());
		beanModel.setTbeEmployeeId(bean.getTbeEmployeeId());
		beanModel.setTbeId(bean.getTbeId());
		return beanModel;
    }
    
    //29CC
    public ViewReportEmployeeInformationBeanModel[] toBeanModels(ViewReportEmployeeInformationBean beans[])
    {
    	int beansCount = beans.length;
    	ViewReportEmployeeInformationBeanModel beanModels[] = new ViewReportEmployeeInformationBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the view_report_employee_information table on a ViewReportEmployeeInformationBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting ViewReportEmployeeInformationBean bean
     * @throws DAOException
     */
    //30
    public ViewReportEmployeeInformationBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        ViewReportEmployeeInformationBean bean = this.createViewReportEmployeeInformationBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBE_JOINED_DATE:
                        ++pos;
                        bean.setTbeJoinedDate(rs.getTimestamp(pos));
                        break;
                    case ID_TBE_STATUS:
                        ++pos;
                        bean.setTbeStatus(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBS_NAME:
                        ++pos;
                        bean.setTbsName(rs.getString(pos));
                        break;
                    case ID_TBL_NAME:
                        ++pos;
                        bean.setTblName(rs.getString(pos));
                        break;
                    case ID_TBAE_MAJOR:
                        ++pos;
                        bean.setTbaeMajor(rs.getString(pos));
                        break;
                    case ID_TBE_NAME_REPORT_TO:
                        ++pos;
                        bean.setTbeNameReportTo(rs.getString(pos));
                        break;
                    case ID_TBP_NAME:
                        ++pos;
                        bean.setTbpName(rs.getString(pos));
                        break;
                    case ID_TBES_CURRENCY_NAME:
                        ++pos;
                        bean.setTbesCurrencyName(rs.getString(pos));
                        break;
                    case ID_TBES_PAY_FREQUENCY:
                        ++pos;
                        bean.setTbesPayFrequency(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBES_BASIC_SALARY:
                        ++pos;
                        bean.setTbesBasicSalary(Manager.getDouble(rs, pos));
                        break;
                    case ID_TBES_NAME:
                        ++pos;
                        bean.setTbesName(rs.getString(pos));
                        break;
                    case ID_TBO_NAMA:
                        ++pos;
                        bean.setTboNama(rs.getString(pos));
                        break;
                    case ID_TBJ_JOINED_DATE:
                        ++pos;
                        bean.setTbjJoinedDate(rs.getTimestamp(pos));
                        break;
                    case ID_TBJT_NAME:
                        ++pos;
                        bean.setTbjtName(rs.getString(pos));
                        break;
                    case ID_TBN_NAMA:
                        ++pos;
                        bean.setTbnNama(rs.getString(pos));
                        break;
                    case ID_TBCD_WORK_PHONE:
                        ++pos;
                        bean.setTbcdWorkPhone(rs.getString(pos));
                        break;
                    case ID_TBCD_MOBILE_PHONE:
                        ++pos;
                        bean.setTbcdMobilePhone(rs.getString(pos));
                        break;
                    case ID_TBCD_HOME_PHONE:
                        ++pos;
                        bean.setTbcdHomePhone(rs.getString(pos));
                        break;
                    case ID_TBCD_ZIP_CODE:
                        ++pos;
                        bean.setTbcdZipCode(rs.getString(pos));
                        break;
                    case ID_TBCD_PROVINCE:
                        ++pos;
                        bean.setTbcdProvince(rs.getString(pos));
                        break;
                    case ID_TBCD_CITY:
                        ++pos;
                        bean.setTbcdCity(rs.getString(pos));
                        break;
                    case ID_TBCD_STREET:
                        ++pos;
                        bean.setTbcdStreet(rs.getString(pos));
                        break;
                    case ID_TBE_DRIVER_LICENSE_EXPIRY:
                        ++pos;
                        bean.setTbeDriverLicenseExpiry(rs.getTimestamp(pos));
                        break;
                    case ID_TBE_DRIVER_LICENSE_NO:
                        ++pos;
                        bean.setTbeDriverLicenseNo(rs.getString(pos));
                        break;
                    case ID_TBE_GENDER:
                        ++pos;
                        bean.setTbeGender(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_SMOKER:
                        ++pos;
                        bean.setTbeSmoker(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_MARITAL_STATUS:
                        ++pos;
                        bean.setTbeMaritalStatus(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_DOB:
                        ++pos;
                        bean.setTbeDob(rs.getTimestamp(pos));
                        break;
                    case ID_TBE_TAX_NO:
                        ++pos;
                        bean.setTbeTaxNo(rs.getString(pos));
                        break;
                    case ID_TBE_ID_NO:
                        ++pos;
                        bean.setTbeIdNo(rs.getString(pos));
                        break;
                    case ID_TBE_NAME:
                        ++pos;
                        bean.setTbeName(rs.getString(pos));
                        break;
                    case ID_TBE_EMPLOYEE_ID:
                        ++pos;
                        bean.setTbeEmployeeId(rs.getString(pos));
                        break;
                    case ID_TBE_ID:
                        ++pos;
                        bean.setTbeId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the view_report_employee_information on a ViewReportEmployeeInformationBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewReportEmployeeInformationBean bean
     * @throws DAOException
     */
    //31
    public ViewReportEmployeeInformationBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        ViewReportEmployeeInformationBean bean = this.createViewReportEmployeeInformationBean();
        try
        {
            bean.setTbeJoinedDate(rs.getTimestamp("tbe_joined_date"));
            bean.setTbeStatus(Manager.getInteger(rs, "tbe_status"));
            bean.setTbsName(rs.getString("tbs_name"));
            bean.setTblName(rs.getString("tbl_name"));
            bean.setTbaeMajor(rs.getString("tbae_major"));
            bean.setTbeNameReportTo(rs.getString("tbe_name_report_to"));
            bean.setTbpName(rs.getString("tbp_name"));
            bean.setTbesCurrencyName(rs.getString("tbes_currency_name"));
            bean.setTbesPayFrequency(Manager.getInteger(rs, "tbes_pay_frequency"));
            bean.setTbesBasicSalary(Manager.getDouble(rs, "tbes_basic_salary"));
            bean.setTbesName(rs.getString("tbes_name"));
            bean.setTboNama(rs.getString("tbo_nama"));
            bean.setTbjJoinedDate(rs.getTimestamp("tbj_joined_date"));
            bean.setTbjtName(rs.getString("tbjt_name"));
            bean.setTbnNama(rs.getString("tbn_nama"));
            bean.setTbcdWorkPhone(rs.getString("tbcd_work_phone"));
            bean.setTbcdMobilePhone(rs.getString("tbcd_mobile_phone"));
            bean.setTbcdHomePhone(rs.getString("tbcd_home_phone"));
            bean.setTbcdZipCode(rs.getString("tbcd_zip_code"));
            bean.setTbcdProvince(rs.getString("tbcd_province"));
            bean.setTbcdCity(rs.getString("tbcd_city"));
            bean.setTbcdStreet(rs.getString("tbcd_street"));
            bean.setTbeDriverLicenseExpiry(rs.getTimestamp("tbe_driver_license_expiry"));
            bean.setTbeDriverLicenseNo(rs.getString("tbe_driver_license_no"));
            bean.setTbeGender(Manager.getInteger(rs, "tbe_gender"));
            bean.setTbeSmoker(Manager.getInteger(rs, "tbe_smoker"));
            bean.setTbeMaritalStatus(Manager.getInteger(rs, "tbe_marital_status"));
            bean.setTbeDob(rs.getTimestamp("tbe_dob"));
            bean.setTbeTaxNo(rs.getString("tbe_tax_no"));
            bean.setTbeIdNo(rs.getString("tbe_id_no"));
            bean.setTbeName(rs.getString("tbe_name"));
            bean.setTbeEmployeeId(rs.getString("tbe_employee_id"));
            bean.setTbeId(Manager.getInteger(rs, "tbe_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ViewReportEmployeeInformationBean
     * @throws DAOException
     */
    //32
    public ViewReportEmployeeInformationBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ViewReportEmployeeInformationBean
     * @throws DAOException
     */
    //33
    public ViewReportEmployeeInformationBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (ViewReportEmployeeInformationBean[])v.toArray(new ViewReportEmployeeInformationBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of ViewReportEmployeeInformationBean
     * @throws DAOException
     */
    //34
    public ViewReportEmployeeInformationBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private ViewReportEmployeeInformationListener listener = null;

    /**
     * Registers a unique ViewReportEmployeeInformationListener listener.
     */
    //35
    public void registerListener(ViewReportEmployeeInformationListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the ViewReportEmployeeInformationBean bean.
     *
     * @param bean the ViewReportEmployeeInformationBean bean to be saved
     */
    //36
    private void beforeInsert(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the ViewReportEmployeeInformationBean bean.
     *
     * @param bean the ViewReportEmployeeInformationBean bean to be saved
     */
    //37
    private void afterInsert(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the ViewReportEmployeeInformationBean bean.
     *
     * @param bean the ViewReportEmployeeInformationBean bean to be updated
     */
    //38
    private void beforeUpdate(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the ViewReportEmployeeInformationBean bean.
     *
     * @param bean the ViewReportEmployeeInformationBean bean to be updated
     */
    //39
    private void afterUpdate(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the ViewReportEmployeeInformationBean bean.
     *
     * @param bean the ViewReportEmployeeInformationBean bean to be deleted
     */
    private void beforeDelete(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the ViewReportEmployeeInformationBean bean.
     *
     * @param bean the ViewReportEmployeeInformationBean bean to be deleted
     */
    private void afterDelete(ViewReportEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
