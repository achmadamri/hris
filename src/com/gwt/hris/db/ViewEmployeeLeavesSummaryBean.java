// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewEmployeeLeavesSummaryBean is a mapping of view_employee_leaves_summary Table.
 * @author sql2java
*/
public class ViewEmployeeLeavesSummaryBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 7803573393794460435L;
	
    private Integer tbltReduction;

    private boolean tbltReductionIsModified = false;
    private boolean tbltReductionIsInitialized = false;

    private String tbltName;

    private boolean tbltNameIsModified = false;
    private boolean tbltNameIsInitialized = false;

    private Integer minTbaleLeaveAvailable;

    private boolean minTbaleLeaveAvailableIsModified = false;
    private boolean minTbaleLeaveAvailableIsInitialized = false;

    private Long sumTbaleLeaveTaken;

    private boolean sumTbaleLeaveTakenIsModified = false;
    private boolean sumTbaleLeaveTakenIsInitialized = false;

    private Integer tbaleStatus;

    private boolean tbaleStatusIsModified = false;
    private boolean tbaleStatusIsInitialized = false;

    private Integer tbjtLeaveEntitled;

    private boolean tbjtLeaveEntitledIsModified = false;
    private boolean tbjtLeaveEntitledIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewEmployeeLeavesSummaryBean is via the createViewEmployeeLeavesSummaryBean method in ViewEmployeeLeavesSummaryManager or
     * via the factory class ViewEmployeeLeavesSummaryFactory create method
     */
    protected ViewEmployeeLeavesSummaryBean()
    {
    }

    /**
     * Getter method for tbltReduction.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves_summary.tblt_reduction</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbltReduction
     */
    public Integer getTbltReduction()
    {
        return tbltReduction;
    }

    /**
     * Setter method for tbltReduction.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltReduction
     */
    public void setTbltReduction(Integer newVal)
    {
        if ((newVal != null && tbltReduction != null && (newVal.compareTo(tbltReduction) == 0)) ||
            (newVal == null && tbltReduction == null && tbltReductionIsInitialized)) {
            return;
        }
        tbltReduction = newVal;
        tbltReductionIsModified = true;
        tbltReductionIsInitialized = true;
    }

    /**
     * Setter method for tbltReduction.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbltReduction
     */
    public void setTbltReduction(int newVal)
    {
        setTbltReduction(new Integer(newVal));
    }

    /**
     * Determines if the tbltReduction has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltReductionModified()
    {
        return tbltReductionIsModified;
    }

    /**
     * Determines if the tbltReduction has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltReductionInitialized()
    {
        return tbltReductionIsInitialized;
    }

    /**
     * Getter method for tbltName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves_summary.tblt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbltName
     */
    public String getTbltName()
    {
        return tbltName;
    }

    /**
     * Setter method for tbltName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltName
     */
    public void setTbltName(String newVal)
    {
        if ((newVal != null && tbltName != null && (newVal.compareTo(tbltName) == 0)) ||
            (newVal == null && tbltName == null && tbltNameIsInitialized)) {
            return;
        }
        tbltName = newVal;
        tbltNameIsModified = true;
        tbltNameIsInitialized = true;
    }

    /**
     * Determines if the tbltName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltNameModified()
    {
        return tbltNameIsModified;
    }

    /**
     * Determines if the tbltName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltNameInitialized()
    {
        return tbltNameIsInitialized;
    }

    /**
     * Getter method for minTbaleLeaveAvailable.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves_summary.min_tbale_leave_available</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of minTbaleLeaveAvailable
     */
    public Integer getMinTbaleLeaveAvailable()
    {
        return minTbaleLeaveAvailable;
    }

    /**
     * Setter method for minTbaleLeaveAvailable.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to minTbaleLeaveAvailable
     */
    public void setMinTbaleLeaveAvailable(Integer newVal)
    {
        if ((newVal != null && minTbaleLeaveAvailable != null && (newVal.compareTo(minTbaleLeaveAvailable) == 0)) ||
            (newVal == null && minTbaleLeaveAvailable == null && minTbaleLeaveAvailableIsInitialized)) {
            return;
        }
        minTbaleLeaveAvailable = newVal;
        minTbaleLeaveAvailableIsModified = true;
        minTbaleLeaveAvailableIsInitialized = true;
    }

    /**
     * Setter method for minTbaleLeaveAvailable.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to minTbaleLeaveAvailable
     */
    public void setMinTbaleLeaveAvailable(int newVal)
    {
        setMinTbaleLeaveAvailable(new Integer(newVal));
    }

    /**
     * Determines if the minTbaleLeaveAvailable has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isMinTbaleLeaveAvailableModified()
    {
        return minTbaleLeaveAvailableIsModified;
    }

    /**
     * Determines if the minTbaleLeaveAvailable has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isMinTbaleLeaveAvailableInitialized()
    {
        return minTbaleLeaveAvailableIsInitialized;
    }

    /**
     * Getter method for sumTbaleLeaveTaken.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves_summary.sum_tbale_leave_taken</li>
     * <li>column size: 32</li>
     * <li>jdbc type returned by the driver: Types.DECIMAL</li>
     * </ul>
     *
     * @return the value of sumTbaleLeaveTaken
     */
    public Long getSumTbaleLeaveTaken()
    {
        return sumTbaleLeaveTaken;
    }

    /**
     * Setter method for sumTbaleLeaveTaken.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to sumTbaleLeaveTaken
     */
    public void setSumTbaleLeaveTaken(Long newVal)
    {
        if ((newVal != null && sumTbaleLeaveTaken != null && (newVal.compareTo(sumTbaleLeaveTaken) == 0)) ||
            (newVal == null && sumTbaleLeaveTaken == null && sumTbaleLeaveTakenIsInitialized)) {
            return;
        }
        sumTbaleLeaveTaken = newVal;
        sumTbaleLeaveTakenIsModified = true;
        sumTbaleLeaveTakenIsInitialized = true;
    }

    /**
     * Setter method for sumTbaleLeaveTaken.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to sumTbaleLeaveTaken
     */
    public void setSumTbaleLeaveTaken(long newVal)
    {
        setSumTbaleLeaveTaken(new Long(newVal));
    }

    /**
     * Determines if the sumTbaleLeaveTaken has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isSumTbaleLeaveTakenModified()
    {
        return sumTbaleLeaveTakenIsModified;
    }

    /**
     * Determines if the sumTbaleLeaveTaken has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isSumTbaleLeaveTakenInitialized()
    {
        return sumTbaleLeaveTakenIsInitialized;
    }

    /**
     * Getter method for tbaleStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves_summary.tbale_status</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaleStatus
     */
    public Integer getTbaleStatus()
    {
        return tbaleStatus;
    }

    /**
     * Setter method for tbaleStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleStatus
     */
    public void setTbaleStatus(Integer newVal)
    {
        if ((newVal != null && tbaleStatus != null && (newVal.compareTo(tbaleStatus) == 0)) ||
            (newVal == null && tbaleStatus == null && tbaleStatusIsInitialized)) {
            return;
        }
        tbaleStatus = newVal;
        tbaleStatusIsModified = true;
        tbaleStatusIsInitialized = true;
    }

    /**
     * Setter method for tbaleStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleStatus
     */
    public void setTbaleStatus(int newVal)
    {
        setTbaleStatus(new Integer(newVal));
    }

    /**
     * Determines if the tbaleStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleStatusModified()
    {
        return tbaleStatusIsModified;
    }

    /**
     * Determines if the tbaleStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleStatusInitialized()
    {
        return tbaleStatusIsInitialized;
    }

    /**
     * Getter method for tbjtLeaveEntitled.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves_summary.tbjt_leave_entitled</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtLeaveEntitled
     */
    public Integer getTbjtLeaveEntitled()
    {
        return tbjtLeaveEntitled;
    }

    /**
     * Setter method for tbjtLeaveEntitled.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtLeaveEntitled
     */
    public void setTbjtLeaveEntitled(Integer newVal)
    {
        if ((newVal != null && tbjtLeaveEntitled != null && (newVal.compareTo(tbjtLeaveEntitled) == 0)) ||
            (newVal == null && tbjtLeaveEntitled == null && tbjtLeaveEntitledIsInitialized)) {
            return;
        }
        tbjtLeaveEntitled = newVal;
        tbjtLeaveEntitledIsModified = true;
        tbjtLeaveEntitledIsInitialized = true;
    }

    /**
     * Setter method for tbjtLeaveEntitled.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtLeaveEntitled
     */
    public void setTbjtLeaveEntitled(int newVal)
    {
        setTbjtLeaveEntitled(new Integer(newVal));
    }

    /**
     * Determines if the tbjtLeaveEntitled has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtLeaveEntitledModified()
    {
        return tbjtLeaveEntitledIsModified;
    }

    /**
     * Determines if the tbjtLeaveEntitled has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtLeaveEntitledInitialized()
    {
        return tbjtLeaveEntitledIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves_summary.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves_summary.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbltReductionIsModified 		|| tbltNameIsModified  		|| minTbaleLeaveAvailableIsModified  		|| sumTbaleLeaveTakenIsModified  		|| tbaleStatusIsModified  		|| tbjtLeaveEntitledIsModified  		|| tbeNameIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbltReductionIsModified = false;
        tbltNameIsModified = false;
        minTbaleLeaveAvailableIsModified = false;
        sumTbaleLeaveTakenIsModified = false;
        tbaleStatusIsModified = false;
        tbjtLeaveEntitledIsModified = false;
        tbeNameIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewEmployeeLeavesSummaryBean bean)
    {
        setTbltReduction(bean.getTbltReduction());
        setTbltName(bean.getTbltName());
        setMinTbaleLeaveAvailable(bean.getMinTbaleLeaveAvailable());
        setSumTbaleLeaveTaken(bean.getSumTbaleLeaveTaken());
        setTbaleStatus(bean.getTbaleStatus());
        setTbjtLeaveEntitled(bean.getTbjtLeaveEntitled());
        setTbeName(bean.getTbeName());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tblt_reduction", getTbltReduction() == null ? "" : getTbltReduction().toString());
        dictionnary.put("tblt_name", getTbltName() == null ? "" : getTbltName().toString());
        dictionnary.put("min_tbale_leave_available", getMinTbaleLeaveAvailable() == null ? "" : getMinTbaleLeaveAvailable().toString());
        dictionnary.put("sum_tbale_leave_taken", getSumTbaleLeaveTaken() == null ? "" : getSumTbaleLeaveTaken().toString());
        dictionnary.put("tbale_status", getTbaleStatus() == null ? "" : getTbaleStatus().toString());
        dictionnary.put("tbjt_leave_entitled", getTbjtLeaveEntitled() == null ? "" : getTbjtLeaveEntitled().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tblt_reduction".equalsIgnoreCase(column) || "tbltReduction".equalsIgnoreCase(column)) {
            return getTbltReduction() == null ? "" : getTbltReduction().toString();
        } else if ("tblt_name".equalsIgnoreCase(column) || "tbltName".equalsIgnoreCase(column)) {
            return getTbltName() == null ? "" : getTbltName().toString();
        } else if ("min_tbale_leave_available".equalsIgnoreCase(column) || "minTbaleLeaveAvailable".equalsIgnoreCase(column)) {
            return getMinTbaleLeaveAvailable() == null ? "" : getMinTbaleLeaveAvailable().toString();
        } else if ("sum_tbale_leave_taken".equalsIgnoreCase(column) || "sumTbaleLeaveTaken".equalsIgnoreCase(column)) {
            return getSumTbaleLeaveTaken() == null ? "" : getSumTbaleLeaveTaken().toString();
        } else if ("tbale_status".equalsIgnoreCase(column) || "tbaleStatus".equalsIgnoreCase(column)) {
            return getTbaleStatus() == null ? "" : getTbaleStatus().toString();
        } else if ("tbjt_leave_entitled".equalsIgnoreCase(column) || "tbjtLeaveEntitled".equalsIgnoreCase(column)) {
            return getTbjtLeaveEntitled() == null ? "" : getTbjtLeaveEntitled().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewEmployeeLeavesSummaryBean)) {
            return false;
        }

		ViewEmployeeLeavesSummaryBean obj = (ViewEmployeeLeavesSummaryBean) object;
		return new EqualsBuilder()
            .append(getTbltReduction(), obj.getTbltReduction())
            .append(getTbltName(), obj.getTbltName())
            .append(getMinTbaleLeaveAvailable(), obj.getMinTbaleLeaveAvailable())
            .append(getSumTbaleLeaveTaken(), obj.getSumTbaleLeaveTaken())
            .append(getTbaleStatus(), obj.getTbaleStatus())
            .append(getTbjtLeaveEntitled(), obj.getTbjtLeaveEntitled())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbltReduction())
            .append(getTbltName())
            .append(getMinTbaleLeaveAvailable())
            .append(getSumTbaleLeaveTaken())
            .append(getTbaleStatus())
            .append(getTbjtLeaveEntitled())
            .append(getTbeName())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tblt_reduction", getTbltReduction())
            .append("tblt_name", getTbltName())
            .append("min_tbale_leave_available", getMinTbaleLeaveAvailable())
            .append("sum_tbale_leave_taken", getSumTbaleLeaveTaken())
            .append("tbale_status", getTbaleStatus())
            .append("tbjt_leave_entitled", getTbjtLeaveEntitled())
            .append("tbe_name", getTbeName())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewEmployeeLeavesSummaryBean obj = (ViewEmployeeLeavesSummaryBean) object;
        return new CompareToBuilder()
            .append(getTbltReduction(), obj.getTbltReduction())
            .append(getTbltName(), obj.getTbltName())
            .append(getMinTbaleLeaveAvailable(), obj.getMinTbaleLeaveAvailable())
            .append(getSumTbaleLeaveTaken(), obj.getSumTbaleLeaveTaken())
            .append(getTbaleStatus(), obj.getTbaleStatus())
            .append(getTbjtLeaveEntitled(), obj.getTbjtLeaveEntitled())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
