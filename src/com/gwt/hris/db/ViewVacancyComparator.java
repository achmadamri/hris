// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the ViewVacancyBean objects.
 * @author sql2java
 */
public class ViewVacancyComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ViewVacancyComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewVacancyComparator(ViewVacancyManager.ID_COUNT_TBA_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewVacancyManager.ID_COUNT_TBA_ID
     *   <li>ViewVacancyManager.ID_TBJT_NAME
     *   <li>ViewVacancyManager.ID_TBJT_ID
     *   <li>ViewVacancyManager.ID_TBV_PUBLISH_WEB
     *   <li>ViewVacancyManager.ID_TBV_PUBLISH_RSS
     *   <li>ViewVacancyManager.ID_TBV_ACTIVE
     *   <li>ViewVacancyManager.ID_TBV_DESCRIPTION
     *   <li>ViewVacancyManager.ID_TBV_NO_POSITIONS
     *   <li>ViewVacancyManager.ID_TBV_NAME
     *   <li>ViewVacancyManager.ID_TBV_VACANCY_ID
     *   <li>ViewVacancyManager.ID_TBV_ID
     *   <li>ViewVacancyManager.ID_TBE_NAME
     *   <li>ViewVacancyManager.ID_TBE_ID
     * </ul>
     */
    public ViewVacancyComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ViewVacancyComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewVacancyComparator(ViewVacancyManager.ID_COUNT_TBA_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewVacancyManager.ID_COUNT_TBA_ID
     *   <li>ViewVacancyManager.ID_TBJT_NAME
     *   <li>ViewVacancyManager.ID_TBJT_ID
     *   <li>ViewVacancyManager.ID_TBV_PUBLISH_WEB
     *   <li>ViewVacancyManager.ID_TBV_PUBLISH_RSS
     *   <li>ViewVacancyManager.ID_TBV_ACTIVE
     *   <li>ViewVacancyManager.ID_TBV_DESCRIPTION
     *   <li>ViewVacancyManager.ID_TBV_NO_POSITIONS
     *   <li>ViewVacancyManager.ID_TBV_NAME
     *   <li>ViewVacancyManager.ID_TBV_VACANCY_ID
     *   <li>ViewVacancyManager.ID_TBV_ID
     *   <li>ViewVacancyManager.ID_TBE_NAME
     *   <li>ViewVacancyManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ViewVacancyComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ViewVacancyBean b1 = (ViewVacancyBean)pObj1;
        ViewVacancyBean b2 = (ViewVacancyBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ViewVacancyManager.ID_COUNT_TBA_ID:
                if (b1.getCountTbaId() == null && b2.getCountTbaId() != null) {
                    iReturn = -1;
                } else if (b1.getCountTbaId() == null && b2.getCountTbaId() == null) {
                    iReturn = 0;
                } else if (b1.getCountTbaId() != null && b2.getCountTbaId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getCountTbaId().compareTo(b2.getCountTbaId());
                }
                break;
            case ViewVacancyManager.ID_TBJT_NAME:
                if (b1.getTbjtName() == null && b2.getTbjtName() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtName() == null && b2.getTbjtName() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtName() != null && b2.getTbjtName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtName().compareTo(b2.getTbjtName());
                }
                break;
            case ViewVacancyManager.ID_TBJT_ID:
                if (b1.getTbjtId() == null && b2.getTbjtId() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtId() == null && b2.getTbjtId() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtId() != null && b2.getTbjtId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtId().compareTo(b2.getTbjtId());
                }
                break;
            case ViewVacancyManager.ID_TBV_PUBLISH_WEB:
                if (b1.getTbvPublishWeb() == null && b2.getTbvPublishWeb() != null) {
                    iReturn = -1;
                } else if (b1.getTbvPublishWeb() == null && b2.getTbvPublishWeb() == null) {
                    iReturn = 0;
                } else if (b1.getTbvPublishWeb() != null && b2.getTbvPublishWeb() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbvPublishWeb().compareTo(b2.getTbvPublishWeb());
                }
                break;
            case ViewVacancyManager.ID_TBV_PUBLISH_RSS:
                if (b1.getTbvPublishRss() == null && b2.getTbvPublishRss() != null) {
                    iReturn = -1;
                } else if (b1.getTbvPublishRss() == null && b2.getTbvPublishRss() == null) {
                    iReturn = 0;
                } else if (b1.getTbvPublishRss() != null && b2.getTbvPublishRss() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbvPublishRss().compareTo(b2.getTbvPublishRss());
                }
                break;
            case ViewVacancyManager.ID_TBV_ACTIVE:
                if (b1.getTbvActive() == null && b2.getTbvActive() != null) {
                    iReturn = -1;
                } else if (b1.getTbvActive() == null && b2.getTbvActive() == null) {
                    iReturn = 0;
                } else if (b1.getTbvActive() != null && b2.getTbvActive() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbvActive().compareTo(b2.getTbvActive());
                }
                break;
            case ViewVacancyManager.ID_TBV_DESCRIPTION:
                if (b1.getTbvDescription() == null && b2.getTbvDescription() != null) {
                    iReturn = -1;
                } else if (b1.getTbvDescription() == null && b2.getTbvDescription() == null) {
                    iReturn = 0;
                } else if (b1.getTbvDescription() != null && b2.getTbvDescription() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbvDescription().compareTo(b2.getTbvDescription());
                }
                break;
            case ViewVacancyManager.ID_TBV_NO_POSITIONS:
                if (b1.getTbvNoPositions() == null && b2.getTbvNoPositions() != null) {
                    iReturn = -1;
                } else if (b1.getTbvNoPositions() == null && b2.getTbvNoPositions() == null) {
                    iReturn = 0;
                } else if (b1.getTbvNoPositions() != null && b2.getTbvNoPositions() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbvNoPositions().compareTo(b2.getTbvNoPositions());
                }
                break;
            case ViewVacancyManager.ID_TBV_NAME:
                if (b1.getTbvName() == null && b2.getTbvName() != null) {
                    iReturn = -1;
                } else if (b1.getTbvName() == null && b2.getTbvName() == null) {
                    iReturn = 0;
                } else if (b1.getTbvName() != null && b2.getTbvName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbvName().compareTo(b2.getTbvName());
                }
                break;
            case ViewVacancyManager.ID_TBV_VACANCY_ID:
                if (b1.getTbvVacancyId() == null && b2.getTbvVacancyId() != null) {
                    iReturn = -1;
                } else if (b1.getTbvVacancyId() == null && b2.getTbvVacancyId() == null) {
                    iReturn = 0;
                } else if (b1.getTbvVacancyId() != null && b2.getTbvVacancyId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbvVacancyId().compareTo(b2.getTbvVacancyId());
                }
                break;
            case ViewVacancyManager.ID_TBV_ID:
                if (b1.getTbvId() == null && b2.getTbvId() != null) {
                    iReturn = -1;
                } else if (b1.getTbvId() == null && b2.getTbvId() == null) {
                    iReturn = 0;
                } else if (b1.getTbvId() != null && b2.getTbvId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbvId().compareTo(b2.getTbvId());
                }
                break;
            case ViewVacancyManager.ID_TBE_NAME:
                if (b1.getTbeName() == null && b2.getTbeName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeName() == null && b2.getTbeName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeName() != null && b2.getTbeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeName().compareTo(b2.getTbeName());
                }
                break;
            case ViewVacancyManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
