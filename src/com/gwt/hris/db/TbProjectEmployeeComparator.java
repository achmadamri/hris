// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbProjectEmployeeBean objects.
 * @author sql2java
 */
public class TbProjectEmployeeComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbProjectEmployeeComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbProjectEmployeeComparator(TbProjectEmployeeManager.ID_TBE_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbProjectEmployeeManager.ID_TBE_ID
     *   <li>TbProjectEmployeeManager.ID_TBP_ID
     *   <li>TbProjectEmployeeManager.ID_TBPE_ID
     * </ul>
     */
    public TbProjectEmployeeComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbProjectEmployeeComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbProjectEmployeeComparator(TbProjectEmployeeManager.ID_TBE_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbProjectEmployeeManager.ID_TBE_ID
     *   <li>TbProjectEmployeeManager.ID_TBP_ID
     *   <li>TbProjectEmployeeManager.ID_TBPE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbProjectEmployeeComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbProjectEmployeeBean b1 = (TbProjectEmployeeBean)pObj1;
        TbProjectEmployeeBean b2 = (TbProjectEmployeeBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbProjectEmployeeManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            case TbProjectEmployeeManager.ID_TBP_ID:
                if (b1.getTbpId() == null && b2.getTbpId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpId() == null && b2.getTbpId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpId() != null && b2.getTbpId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpId().compareTo(b2.getTbpId());
                }
                break;
            case TbProjectEmployeeManager.ID_TBPE_ID:
                if (b1.getTbpeId() == null && b2.getTbpeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpeId() == null && b2.getTbpeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpeId() != null && b2.getTbpeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpeId().compareTo(b2.getTbpeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
