// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbHolidayBean is a mapping of tb_holiday Table.
 * @author sql2java
*/
public class TbHolidayBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 7485064946440713757L;
	
    private Integer tbhRepeatAnnually;

    private boolean tbhRepeatAnnuallyIsModified = false;
    private boolean tbhRepeatAnnuallyIsInitialized = false;

    private java.sql.Timestamp tbhDate;

    private boolean tbhDateIsModified = false;
    private boolean tbhDateIsInitialized = false;

    private String tbhName;

    private boolean tbhNameIsModified = false;
    private boolean tbhNameIsInitialized = false;

    private String tbhHolidayId;

    private boolean tbhHolidayIdIsModified = false;
    private boolean tbhHolidayIdIsInitialized = false;

    private Integer tbhId;

    private boolean tbhIdIsModified = false;
    private boolean tbhIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbHolidayBean is via the createTbHolidayBean method in TbHolidayManager or
     * via the factory class TbHolidayFactory create method
     */
    protected TbHolidayBean()
    {
    }

    /**
     * Getter method for tbhRepeatAnnually.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_holiday.tbh_repeat_annually</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbhRepeatAnnually
     */
    public Integer getTbhRepeatAnnually()
    {
        return tbhRepeatAnnually;
    }

    /**
     * Setter method for tbhRepeatAnnually.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbhRepeatAnnually
     */
    public void setTbhRepeatAnnually(Integer newVal)
    {
        if ((newVal != null && tbhRepeatAnnually != null && (newVal.compareTo(tbhRepeatAnnually) == 0)) ||
            (newVal == null && tbhRepeatAnnually == null && tbhRepeatAnnuallyIsInitialized)) {
            return;
        }
        tbhRepeatAnnually = newVal;
        tbhRepeatAnnuallyIsModified = true;
        tbhRepeatAnnuallyIsInitialized = true;
    }

    /**
     * Setter method for tbhRepeatAnnually.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbhRepeatAnnually
     */
    public void setTbhRepeatAnnually(int newVal)
    {
        setTbhRepeatAnnually(new Integer(newVal));
    }

    /**
     * Determines if the tbhRepeatAnnually has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbhRepeatAnnuallyModified()
    {
        return tbhRepeatAnnuallyIsModified;
    }

    /**
     * Determines if the tbhRepeatAnnually has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbhRepeatAnnuallyInitialized()
    {
        return tbhRepeatAnnuallyIsInitialized;
    }

    /**
     * Getter method for tbhDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_holiday.tbh_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbhDate
     */
    public java.sql.Timestamp getTbhDate()
    {
        return tbhDate;
    }

    /**
     * Setter method for tbhDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbhDate
     */
    public void setTbhDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbhDate != null && (newVal.compareTo(tbhDate) == 0)) ||
            (newVal == null && tbhDate == null && tbhDateIsInitialized)) {
            return;
        }
        tbhDate = newVal;
        tbhDateIsModified = true;
        tbhDateIsInitialized = true;
    }

    /**
     * Setter method for tbhDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbhDate
     */
    public void setTbhDate(long newVal)
    {
        setTbhDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbhDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbhDateModified()
    {
        return tbhDateIsModified;
    }

    /**
     * Determines if the tbhDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbhDateInitialized()
    {
        return tbhDateIsInitialized;
    }

    /**
     * Getter method for tbhName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_holiday.tbh_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbhName
     */
    public String getTbhName()
    {
        return tbhName;
    }

    /**
     * Setter method for tbhName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbhName
     */
    public void setTbhName(String newVal)
    {
        if ((newVal != null && tbhName != null && (newVal.compareTo(tbhName) == 0)) ||
            (newVal == null && tbhName == null && tbhNameIsInitialized)) {
            return;
        }
        tbhName = newVal;
        tbhNameIsModified = true;
        tbhNameIsInitialized = true;
    }

    /**
     * Determines if the tbhName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbhNameModified()
    {
        return tbhNameIsModified;
    }

    /**
     * Determines if the tbhName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbhNameInitialized()
    {
        return tbhNameIsInitialized;
    }

    /**
     * Getter method for tbhHolidayId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_holiday.tbh_holiday_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbhHolidayId
     */
    public String getTbhHolidayId()
    {
        return tbhHolidayId;
    }

    /**
     * Setter method for tbhHolidayId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbhHolidayId
     */
    public void setTbhHolidayId(String newVal)
    {
        if ((newVal != null && tbhHolidayId != null && (newVal.compareTo(tbhHolidayId) == 0)) ||
            (newVal == null && tbhHolidayId == null && tbhHolidayIdIsInitialized)) {
            return;
        }
        tbhHolidayId = newVal;
        tbhHolidayIdIsModified = true;
        tbhHolidayIdIsInitialized = true;
    }

    /**
     * Determines if the tbhHolidayId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbhHolidayIdModified()
    {
        return tbhHolidayIdIsModified;
    }

    /**
     * Determines if the tbhHolidayId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbhHolidayIdInitialized()
    {
        return tbhHolidayIdIsInitialized;
    }

    /**
     * Getter method for tbhId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_holiday.tbh_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbhId
     */
    public Integer getTbhId()
    {
        return tbhId;
    }

    /**
     * Setter method for tbhId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbhId
     */
    public void setTbhId(Integer newVal)
    {
        if ((newVal != null && tbhId != null && (newVal.compareTo(tbhId) == 0)) ||
            (newVal == null && tbhId == null && tbhIdIsInitialized)) {
            return;
        }
        tbhId = newVal;
        tbhIdIsModified = true;
        tbhIdIsInitialized = true;
    }

    /**
     * Setter method for tbhId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbhId
     */
    public void setTbhId(int newVal)
    {
        setTbhId(new Integer(newVal));
    }

    /**
     * Determines if the tbhId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbhIdModified()
    {
        return tbhIdIsModified;
    }

    /**
     * Determines if the tbhId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbhIdInitialized()
    {
        return tbhIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbhRepeatAnnuallyIsModified 		|| tbhDateIsModified  		|| tbhNameIsModified  		|| tbhHolidayIdIsModified  		|| tbhIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbhRepeatAnnuallyIsModified = false;
        tbhDateIsModified = false;
        tbhNameIsModified = false;
        tbhHolidayIdIsModified = false;
        tbhIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbHolidayBean bean)
    {
        setTbhRepeatAnnually(bean.getTbhRepeatAnnually());
        setTbhDate(bean.getTbhDate());
        setTbhName(bean.getTbhName());
        setTbhHolidayId(bean.getTbhHolidayId());
        setTbhId(bean.getTbhId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbh_repeat_annually", getTbhRepeatAnnually() == null ? "" : getTbhRepeatAnnually().toString());
        dictionnary.put("tbh_date", getTbhDate() == null ? "" : getTbhDate().toString());
        dictionnary.put("tbh_name", getTbhName() == null ? "" : getTbhName().toString());
        dictionnary.put("tbh_holiday_id", getTbhHolidayId() == null ? "" : getTbhHolidayId().toString());
        dictionnary.put("tbh_id", getTbhId() == null ? "" : getTbhId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbh_id", getTbhId() == null ? "" : getTbhId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbh_repeat_annually".equalsIgnoreCase(column) || "tbhRepeatAnnually".equalsIgnoreCase(column)) {
            return getTbhRepeatAnnually() == null ? "" : getTbhRepeatAnnually().toString();
        } else if ("tbh_date".equalsIgnoreCase(column) || "tbhDate".equalsIgnoreCase(column)) {
            return getTbhDate() == null ? "" : getTbhDate().toString();
        } else if ("tbh_name".equalsIgnoreCase(column) || "tbhName".equalsIgnoreCase(column)) {
            return getTbhName() == null ? "" : getTbhName().toString();
        } else if ("tbh_holiday_id".equalsIgnoreCase(column) || "tbhHolidayId".equalsIgnoreCase(column)) {
            return getTbhHolidayId() == null ? "" : getTbhHolidayId().toString();
        } else if ("tbh_id".equalsIgnoreCase(column) || "tbhId".equalsIgnoreCase(column)) {
            return getTbhId() == null ? "" : getTbhId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbHolidayBean)) {
            return false;
        }

		TbHolidayBean obj = (TbHolidayBean) object;
		return new EqualsBuilder()
            .append(getTbhRepeatAnnually(), obj.getTbhRepeatAnnually())
            .append(getTbhDate(), obj.getTbhDate())
            .append(getTbhName(), obj.getTbhName())
            .append(getTbhHolidayId(), obj.getTbhHolidayId())
            .append(getTbhId(), obj.getTbhId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbhRepeatAnnually())
            .append(getTbhDate())
            .append(getTbhName())
            .append(getTbhHolidayId())
            .append(getTbhId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbh_repeat_annually", getTbhRepeatAnnually())
            .append("tbh_date", getTbhDate())
            .append("tbh_name", getTbhName())
            .append("tbh_holiday_id", getTbhHolidayId())
            .append("tbh_id", getTbhId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbHolidayBean obj = (TbHolidayBean) object;
        return new CompareToBuilder()
            .append(getTbhRepeatAnnually(), obj.getTbhRepeatAnnually())
            .append(getTbhDate(), obj.getTbhDate())
            .append(getTbhName(), obj.getTbhName())
            .append(getTbhHolidayId(), obj.getTbhHolidayId())
            .append(getTbhId(), obj.getTbhId())
            .toComparison();
   }
}
