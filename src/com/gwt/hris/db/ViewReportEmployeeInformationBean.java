// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewReportEmployeeInformationBean is a mapping of view_report_employee_information Table.
 * @author sql2java
*/
public class ViewReportEmployeeInformationBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 1866997670323752546L;
	
    private java.sql.Timestamp tbeJoinedDate;

    private boolean tbeJoinedDateIsModified = false;
    private boolean tbeJoinedDateIsInitialized = false;

    private Integer tbeStatus;

    private boolean tbeStatusIsModified = false;
    private boolean tbeStatusIsInitialized = false;

    private String tbsName;

    private boolean tbsNameIsModified = false;
    private boolean tbsNameIsInitialized = false;

    private String tblName;

    private boolean tblNameIsModified = false;
    private boolean tblNameIsInitialized = false;

    private String tbaeMajor;

    private boolean tbaeMajorIsModified = false;
    private boolean tbaeMajorIsInitialized = false;

    private String tbeNameReportTo;

    private boolean tbeNameReportToIsModified = false;
    private boolean tbeNameReportToIsInitialized = false;

    private String tbpName;

    private boolean tbpNameIsModified = false;
    private boolean tbpNameIsInitialized = false;

    private String tbesCurrencyName;

    private boolean tbesCurrencyNameIsModified = false;
    private boolean tbesCurrencyNameIsInitialized = false;

    private Integer tbesPayFrequency;

    private boolean tbesPayFrequencyIsModified = false;
    private boolean tbesPayFrequencyIsInitialized = false;

    private Double tbesBasicSalary;

    private boolean tbesBasicSalaryIsModified = false;
    private boolean tbesBasicSalaryIsInitialized = false;

    private String tbesName;

    private boolean tbesNameIsModified = false;
    private boolean tbesNameIsInitialized = false;

    private String tboNama;

    private boolean tboNamaIsModified = false;
    private boolean tboNamaIsInitialized = false;

    private java.sql.Timestamp tbjJoinedDate;

    private boolean tbjJoinedDateIsModified = false;
    private boolean tbjJoinedDateIsInitialized = false;

    private String tbjtName;

    private boolean tbjtNameIsModified = false;
    private boolean tbjtNameIsInitialized = false;

    private String tbnNama;

    private boolean tbnNamaIsModified = false;
    private boolean tbnNamaIsInitialized = false;

    private String tbcdWorkPhone;

    private boolean tbcdWorkPhoneIsModified = false;
    private boolean tbcdWorkPhoneIsInitialized = false;

    private String tbcdMobilePhone;

    private boolean tbcdMobilePhoneIsModified = false;
    private boolean tbcdMobilePhoneIsInitialized = false;

    private String tbcdHomePhone;

    private boolean tbcdHomePhoneIsModified = false;
    private boolean tbcdHomePhoneIsInitialized = false;

    private String tbcdZipCode;

    private boolean tbcdZipCodeIsModified = false;
    private boolean tbcdZipCodeIsInitialized = false;

    private String tbcdProvince;

    private boolean tbcdProvinceIsModified = false;
    private boolean tbcdProvinceIsInitialized = false;

    private String tbcdCity;

    private boolean tbcdCityIsModified = false;
    private boolean tbcdCityIsInitialized = false;

    private String tbcdStreet;

    private boolean tbcdStreetIsModified = false;
    private boolean tbcdStreetIsInitialized = false;

    private java.sql.Timestamp tbeDriverLicenseExpiry;

    private boolean tbeDriverLicenseExpiryIsModified = false;
    private boolean tbeDriverLicenseExpiryIsInitialized = false;

    private String tbeDriverLicenseNo;

    private boolean tbeDriverLicenseNoIsModified = false;
    private boolean tbeDriverLicenseNoIsInitialized = false;

    private Integer tbeGender;

    private boolean tbeGenderIsModified = false;
    private boolean tbeGenderIsInitialized = false;

    private Integer tbeSmoker;

    private boolean tbeSmokerIsModified = false;
    private boolean tbeSmokerIsInitialized = false;

    private Integer tbeMaritalStatus;

    private boolean tbeMaritalStatusIsModified = false;
    private boolean tbeMaritalStatusIsInitialized = false;

    private java.sql.Timestamp tbeDob;

    private boolean tbeDobIsModified = false;
    private boolean tbeDobIsInitialized = false;

    private String tbeTaxNo;

    private boolean tbeTaxNoIsModified = false;
    private boolean tbeTaxNoIsInitialized = false;

    private String tbeIdNo;

    private boolean tbeIdNoIsModified = false;
    private boolean tbeIdNoIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private String tbeEmployeeId;

    private boolean tbeEmployeeIdIsModified = false;
    private boolean tbeEmployeeIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewReportEmployeeInformationBean is via the createViewReportEmployeeInformationBean method in ViewReportEmployeeInformationManager or
     * via the factory class ViewReportEmployeeInformationFactory create method
     */
    protected ViewReportEmployeeInformationBean()
    {
    }

    /**
     * Getter method for tbeJoinedDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_joined_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbeJoinedDate
     */
    public java.sql.Timestamp getTbeJoinedDate()
    {
        return tbeJoinedDate;
    }

    /**
     * Setter method for tbeJoinedDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeJoinedDate
     */
    public void setTbeJoinedDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbeJoinedDate != null && (newVal.compareTo(tbeJoinedDate) == 0)) ||
            (newVal == null && tbeJoinedDate == null && tbeJoinedDateIsInitialized)) {
            return;
        }
        tbeJoinedDate = newVal;
        tbeJoinedDateIsModified = true;
        tbeJoinedDateIsInitialized = true;
    }

    /**
     * Setter method for tbeJoinedDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeJoinedDate
     */
    public void setTbeJoinedDate(long newVal)
    {
        setTbeJoinedDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbeJoinedDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeJoinedDateModified()
    {
        return tbeJoinedDateIsModified;
    }

    /**
     * Determines if the tbeJoinedDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeJoinedDateInitialized()
    {
        return tbeJoinedDateIsInitialized;
    }

    /**
     * Getter method for tbeStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_status</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeStatus
     */
    public Integer getTbeStatus()
    {
        return tbeStatus;
    }

    /**
     * Setter method for tbeStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeStatus
     */
    public void setTbeStatus(Integer newVal)
    {
        if ((newVal != null && tbeStatus != null && (newVal.compareTo(tbeStatus) == 0)) ||
            (newVal == null && tbeStatus == null && tbeStatusIsInitialized)) {
            return;
        }
        tbeStatus = newVal;
        tbeStatusIsModified = true;
        tbeStatusIsInitialized = true;
    }

    /**
     * Setter method for tbeStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeStatus
     */
    public void setTbeStatus(int newVal)
    {
        setTbeStatus(new Integer(newVal));
    }

    /**
     * Determines if the tbeStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeStatusModified()
    {
        return tbeStatusIsModified;
    }

    /**
     * Determines if the tbeStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeStatusInitialized()
    {
        return tbeStatusIsInitialized;
    }

    /**
     * Getter method for tbsName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbs_name</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARCHAR</li>
     * </ul>
     *
     * @return the value of tbsName
     */
    public String getTbsName()
    {
        return tbsName;
    }

    /**
     * Setter method for tbsName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsName
     */
    public void setTbsName(String newVal)
    {
        if ((newVal != null && tbsName != null && (newVal.compareTo(tbsName) == 0)) ||
            (newVal == null && tbsName == null && tbsNameIsInitialized)) {
            return;
        }
        tbsName = newVal;
        tbsNameIsModified = true;
        tbsNameIsInitialized = true;
    }

    /**
     * Determines if the tbsName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsNameModified()
    {
        return tbsNameIsModified;
    }

    /**
     * Determines if the tbsName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsNameInitialized()
    {
        return tbsNameIsInitialized;
    }

    /**
     * Getter method for tblName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbl_name</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARCHAR</li>
     * </ul>
     *
     * @return the value of tblName
     */
    public String getTblName()
    {
        return tblName;
    }

    /**
     * Setter method for tblName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblName
     */
    public void setTblName(String newVal)
    {
        if ((newVal != null && tblName != null && (newVal.compareTo(tblName) == 0)) ||
            (newVal == null && tblName == null && tblNameIsInitialized)) {
            return;
        }
        tblName = newVal;
        tblNameIsModified = true;
        tblNameIsInitialized = true;
    }

    /**
     * Determines if the tblName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblNameModified()
    {
        return tblNameIsModified;
    }

    /**
     * Determines if the tblName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblNameInitialized()
    {
        return tblNameIsInitialized;
    }

    /**
     * Getter method for tbaeMajor.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbae_major</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARCHAR</li>
     * </ul>
     *
     * @return the value of tbaeMajor
     */
    public String getTbaeMajor()
    {
        return tbaeMajor;
    }

    /**
     * Setter method for tbaeMajor.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaeMajor
     */
    public void setTbaeMajor(String newVal)
    {
        if ((newVal != null && tbaeMajor != null && (newVal.compareTo(tbaeMajor) == 0)) ||
            (newVal == null && tbaeMajor == null && tbaeMajorIsInitialized)) {
            return;
        }
        tbaeMajor = newVal;
        tbaeMajorIsModified = true;
        tbaeMajorIsInitialized = true;
    }

    /**
     * Determines if the tbaeMajor has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaeMajorModified()
    {
        return tbaeMajorIsModified;
    }

    /**
     * Determines if the tbaeMajor has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaeMajorInitialized()
    {
        return tbaeMajorIsInitialized;
    }

    /**
     * Getter method for tbeNameReportTo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_name_report_to</li>
     * <li>column size: 65535</li>
     * <li>jdbc type returned by the driver: Types.LONGVARCHAR</li>
     * </ul>
     *
     * @return the value of tbeNameReportTo
     */
    public String getTbeNameReportTo()
    {
        return tbeNameReportTo;
    }

    /**
     * Setter method for tbeNameReportTo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeNameReportTo
     */
    public void setTbeNameReportTo(String newVal)
    {
        if ((newVal != null && tbeNameReportTo != null && (newVal.compareTo(tbeNameReportTo) == 0)) ||
            (newVal == null && tbeNameReportTo == null && tbeNameReportToIsInitialized)) {
            return;
        }
        tbeNameReportTo = newVal;
        tbeNameReportToIsModified = true;
        tbeNameReportToIsInitialized = true;
    }

    /**
     * Determines if the tbeNameReportTo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameReportToModified()
    {
        return tbeNameReportToIsModified;
    }

    /**
     * Determines if the tbeNameReportTo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameReportToInitialized()
    {
        return tbeNameReportToIsInitialized;
    }

    /**
     * Getter method for tbpName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbp_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpName
     */
    public String getTbpName()
    {
        return tbpName;
    }

    /**
     * Setter method for tbpName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpName
     */
    public void setTbpName(String newVal)
    {
        if ((newVal != null && tbpName != null && (newVal.compareTo(tbpName) == 0)) ||
            (newVal == null && tbpName == null && tbpNameIsInitialized)) {
            return;
        }
        tbpName = newVal;
        tbpNameIsModified = true;
        tbpNameIsInitialized = true;
    }

    /**
     * Determines if the tbpName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpNameModified()
    {
        return tbpNameIsModified;
    }

    /**
     * Determines if the tbpName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpNameInitialized()
    {
        return tbpNameIsInitialized;
    }

    /**
     * Getter method for tbesCurrencyName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbes_currency_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbesCurrencyName
     */
    public String getTbesCurrencyName()
    {
        return tbesCurrencyName;
    }

    /**
     * Setter method for tbesCurrencyName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesCurrencyName
     */
    public void setTbesCurrencyName(String newVal)
    {
        if ((newVal != null && tbesCurrencyName != null && (newVal.compareTo(tbesCurrencyName) == 0)) ||
            (newVal == null && tbesCurrencyName == null && tbesCurrencyNameIsInitialized)) {
            return;
        }
        tbesCurrencyName = newVal;
        tbesCurrencyNameIsModified = true;
        tbesCurrencyNameIsInitialized = true;
    }

    /**
     * Determines if the tbesCurrencyName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesCurrencyNameModified()
    {
        return tbesCurrencyNameIsModified;
    }

    /**
     * Determines if the tbesCurrencyName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesCurrencyNameInitialized()
    {
        return tbesCurrencyNameIsInitialized;
    }

    /**
     * Getter method for tbesPayFrequency.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbes_pay_frequency</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbesPayFrequency
     */
    public Integer getTbesPayFrequency()
    {
        return tbesPayFrequency;
    }

    /**
     * Setter method for tbesPayFrequency.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesPayFrequency
     */
    public void setTbesPayFrequency(Integer newVal)
    {
        if ((newVal != null && tbesPayFrequency != null && (newVal.compareTo(tbesPayFrequency) == 0)) ||
            (newVal == null && tbesPayFrequency == null && tbesPayFrequencyIsInitialized)) {
            return;
        }
        tbesPayFrequency = newVal;
        tbesPayFrequencyIsModified = true;
        tbesPayFrequencyIsInitialized = true;
    }

    /**
     * Setter method for tbesPayFrequency.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesPayFrequency
     */
    public void setTbesPayFrequency(int newVal)
    {
        setTbesPayFrequency(new Integer(newVal));
    }

    /**
     * Determines if the tbesPayFrequency has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesPayFrequencyModified()
    {
        return tbesPayFrequencyIsModified;
    }

    /**
     * Determines if the tbesPayFrequency has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesPayFrequencyInitialized()
    {
        return tbesPayFrequencyIsInitialized;
    }

    /**
     * Getter method for tbesBasicSalary.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbes_basic_salary</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbesBasicSalary
     */
    public Double getTbesBasicSalary()
    {
        return tbesBasicSalary;
    }

    /**
     * Setter method for tbesBasicSalary.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesBasicSalary
     */
    public void setTbesBasicSalary(Double newVal)
    {
        if ((newVal != null && tbesBasicSalary != null && (newVal.compareTo(tbesBasicSalary) == 0)) ||
            (newVal == null && tbesBasicSalary == null && tbesBasicSalaryIsInitialized)) {
            return;
        }
        tbesBasicSalary = newVal;
        tbesBasicSalaryIsModified = true;
        tbesBasicSalaryIsInitialized = true;
    }

    /**
     * Setter method for tbesBasicSalary.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesBasicSalary
     */
    public void setTbesBasicSalary(double newVal)
    {
        setTbesBasicSalary(new Double(newVal));
    }

    /**
     * Determines if the tbesBasicSalary has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesBasicSalaryModified()
    {
        return tbesBasicSalaryIsModified;
    }

    /**
     * Determines if the tbesBasicSalary has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesBasicSalaryInitialized()
    {
        return tbesBasicSalaryIsInitialized;
    }

    /**
     * Getter method for tbesName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbes_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbesName
     */
    public String getTbesName()
    {
        return tbesName;
    }

    /**
     * Setter method for tbesName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesName
     */
    public void setTbesName(String newVal)
    {
        if ((newVal != null && tbesName != null && (newVal.compareTo(tbesName) == 0)) ||
            (newVal == null && tbesName == null && tbesNameIsInitialized)) {
            return;
        }
        tbesName = newVal;
        tbesNameIsModified = true;
        tbesNameIsInitialized = true;
    }

    /**
     * Determines if the tbesName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesNameModified()
    {
        return tbesNameIsModified;
    }

    /**
     * Determines if the tbesName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesNameInitialized()
    {
        return tbesNameIsInitialized;
    }

    /**
     * Getter method for tboNama.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbo_nama</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tboNama
     */
    public String getTboNama()
    {
        return tboNama;
    }

    /**
     * Setter method for tboNama.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tboNama
     */
    public void setTboNama(String newVal)
    {
        if ((newVal != null && tboNama != null && (newVal.compareTo(tboNama) == 0)) ||
            (newVal == null && tboNama == null && tboNamaIsInitialized)) {
            return;
        }
        tboNama = newVal;
        tboNamaIsModified = true;
        tboNamaIsInitialized = true;
    }

    /**
     * Determines if the tboNama has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTboNamaModified()
    {
        return tboNamaIsModified;
    }

    /**
     * Determines if the tboNama has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTboNamaInitialized()
    {
        return tboNamaIsInitialized;
    }

    /**
     * Getter method for tbjJoinedDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbj_joined_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbjJoinedDate
     */
    public java.sql.Timestamp getTbjJoinedDate()
    {
        return tbjJoinedDate;
    }

    /**
     * Setter method for tbjJoinedDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjJoinedDate
     */
    public void setTbjJoinedDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbjJoinedDate != null && (newVal.compareTo(tbjJoinedDate) == 0)) ||
            (newVal == null && tbjJoinedDate == null && tbjJoinedDateIsInitialized)) {
            return;
        }
        tbjJoinedDate = newVal;
        tbjJoinedDateIsModified = true;
        tbjJoinedDateIsInitialized = true;
    }

    /**
     * Setter method for tbjJoinedDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjJoinedDate
     */
    public void setTbjJoinedDate(long newVal)
    {
        setTbjJoinedDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbjJoinedDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjJoinedDateModified()
    {
        return tbjJoinedDateIsModified;
    }

    /**
     * Determines if the tbjJoinedDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjJoinedDateInitialized()
    {
        return tbjJoinedDateIsInitialized;
    }

    /**
     * Getter method for tbjtName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbjt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtName
     */
    public String getTbjtName()
    {
        return tbjtName;
    }

    /**
     * Setter method for tbjtName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtName
     */
    public void setTbjtName(String newVal)
    {
        if ((newVal != null && tbjtName != null && (newVal.compareTo(tbjtName) == 0)) ||
            (newVal == null && tbjtName == null && tbjtNameIsInitialized)) {
            return;
        }
        tbjtName = newVal;
        tbjtNameIsModified = true;
        tbjtNameIsInitialized = true;
    }

    /**
     * Determines if the tbjtName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtNameModified()
    {
        return tbjtNameIsModified;
    }

    /**
     * Determines if the tbjtName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtNameInitialized()
    {
        return tbjtNameIsInitialized;
    }

    /**
     * Getter method for tbnNama.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbn_nama</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbnNama
     */
    public String getTbnNama()
    {
        return tbnNama;
    }

    /**
     * Setter method for tbnNama.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnNama
     */
    public void setTbnNama(String newVal)
    {
        if ((newVal != null && tbnNama != null && (newVal.compareTo(tbnNama) == 0)) ||
            (newVal == null && tbnNama == null && tbnNamaIsInitialized)) {
            return;
        }
        tbnNama = newVal;
        tbnNamaIsModified = true;
        tbnNamaIsInitialized = true;
    }

    /**
     * Determines if the tbnNama has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnNamaModified()
    {
        return tbnNamaIsModified;
    }

    /**
     * Determines if the tbnNama has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnNamaInitialized()
    {
        return tbnNamaIsInitialized;
    }

    /**
     * Getter method for tbcdWorkPhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbcd_work_phone</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdWorkPhone
     */
    public String getTbcdWorkPhone()
    {
        return tbcdWorkPhone;
    }

    /**
     * Setter method for tbcdWorkPhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdWorkPhone
     */
    public void setTbcdWorkPhone(String newVal)
    {
        if ((newVal != null && tbcdWorkPhone != null && (newVal.compareTo(tbcdWorkPhone) == 0)) ||
            (newVal == null && tbcdWorkPhone == null && tbcdWorkPhoneIsInitialized)) {
            return;
        }
        tbcdWorkPhone = newVal;
        tbcdWorkPhoneIsModified = true;
        tbcdWorkPhoneIsInitialized = true;
    }

    /**
     * Determines if the tbcdWorkPhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdWorkPhoneModified()
    {
        return tbcdWorkPhoneIsModified;
    }

    /**
     * Determines if the tbcdWorkPhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdWorkPhoneInitialized()
    {
        return tbcdWorkPhoneIsInitialized;
    }

    /**
     * Getter method for tbcdMobilePhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbcd_mobile_phone</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdMobilePhone
     */
    public String getTbcdMobilePhone()
    {
        return tbcdMobilePhone;
    }

    /**
     * Setter method for tbcdMobilePhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdMobilePhone
     */
    public void setTbcdMobilePhone(String newVal)
    {
        if ((newVal != null && tbcdMobilePhone != null && (newVal.compareTo(tbcdMobilePhone) == 0)) ||
            (newVal == null && tbcdMobilePhone == null && tbcdMobilePhoneIsInitialized)) {
            return;
        }
        tbcdMobilePhone = newVal;
        tbcdMobilePhoneIsModified = true;
        tbcdMobilePhoneIsInitialized = true;
    }

    /**
     * Determines if the tbcdMobilePhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdMobilePhoneModified()
    {
        return tbcdMobilePhoneIsModified;
    }

    /**
     * Determines if the tbcdMobilePhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdMobilePhoneInitialized()
    {
        return tbcdMobilePhoneIsInitialized;
    }

    /**
     * Getter method for tbcdHomePhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbcd_home_phone</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdHomePhone
     */
    public String getTbcdHomePhone()
    {
        return tbcdHomePhone;
    }

    /**
     * Setter method for tbcdHomePhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdHomePhone
     */
    public void setTbcdHomePhone(String newVal)
    {
        if ((newVal != null && tbcdHomePhone != null && (newVal.compareTo(tbcdHomePhone) == 0)) ||
            (newVal == null && tbcdHomePhone == null && tbcdHomePhoneIsInitialized)) {
            return;
        }
        tbcdHomePhone = newVal;
        tbcdHomePhoneIsModified = true;
        tbcdHomePhoneIsInitialized = true;
    }

    /**
     * Determines if the tbcdHomePhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdHomePhoneModified()
    {
        return tbcdHomePhoneIsModified;
    }

    /**
     * Determines if the tbcdHomePhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdHomePhoneInitialized()
    {
        return tbcdHomePhoneIsInitialized;
    }

    /**
     * Getter method for tbcdZipCode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbcd_zip_code</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdZipCode
     */
    public String getTbcdZipCode()
    {
        return tbcdZipCode;
    }

    /**
     * Setter method for tbcdZipCode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdZipCode
     */
    public void setTbcdZipCode(String newVal)
    {
        if ((newVal != null && tbcdZipCode != null && (newVal.compareTo(tbcdZipCode) == 0)) ||
            (newVal == null && tbcdZipCode == null && tbcdZipCodeIsInitialized)) {
            return;
        }
        tbcdZipCode = newVal;
        tbcdZipCodeIsModified = true;
        tbcdZipCodeIsInitialized = true;
    }

    /**
     * Determines if the tbcdZipCode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdZipCodeModified()
    {
        return tbcdZipCodeIsModified;
    }

    /**
     * Determines if the tbcdZipCode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdZipCodeInitialized()
    {
        return tbcdZipCodeIsInitialized;
    }

    /**
     * Getter method for tbcdProvince.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbcd_province</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdProvince
     */
    public String getTbcdProvince()
    {
        return tbcdProvince;
    }

    /**
     * Setter method for tbcdProvince.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdProvince
     */
    public void setTbcdProvince(String newVal)
    {
        if ((newVal != null && tbcdProvince != null && (newVal.compareTo(tbcdProvince) == 0)) ||
            (newVal == null && tbcdProvince == null && tbcdProvinceIsInitialized)) {
            return;
        }
        tbcdProvince = newVal;
        tbcdProvinceIsModified = true;
        tbcdProvinceIsInitialized = true;
    }

    /**
     * Determines if the tbcdProvince has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdProvinceModified()
    {
        return tbcdProvinceIsModified;
    }

    /**
     * Determines if the tbcdProvince has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdProvinceInitialized()
    {
        return tbcdProvinceIsInitialized;
    }

    /**
     * Getter method for tbcdCity.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbcd_city</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdCity
     */
    public String getTbcdCity()
    {
        return tbcdCity;
    }

    /**
     * Setter method for tbcdCity.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdCity
     */
    public void setTbcdCity(String newVal)
    {
        if ((newVal != null && tbcdCity != null && (newVal.compareTo(tbcdCity) == 0)) ||
            (newVal == null && tbcdCity == null && tbcdCityIsInitialized)) {
            return;
        }
        tbcdCity = newVal;
        tbcdCityIsModified = true;
        tbcdCityIsInitialized = true;
    }

    /**
     * Determines if the tbcdCity has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdCityModified()
    {
        return tbcdCityIsModified;
    }

    /**
     * Determines if the tbcdCity has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdCityInitialized()
    {
        return tbcdCityIsInitialized;
    }

    /**
     * Getter method for tbcdStreet.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbcd_street</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdStreet
     */
    public String getTbcdStreet()
    {
        return tbcdStreet;
    }

    /**
     * Setter method for tbcdStreet.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdStreet
     */
    public void setTbcdStreet(String newVal)
    {
        if ((newVal != null && tbcdStreet != null && (newVal.compareTo(tbcdStreet) == 0)) ||
            (newVal == null && tbcdStreet == null && tbcdStreetIsInitialized)) {
            return;
        }
        tbcdStreet = newVal;
        tbcdStreetIsModified = true;
        tbcdStreetIsInitialized = true;
    }

    /**
     * Determines if the tbcdStreet has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdStreetModified()
    {
        return tbcdStreetIsModified;
    }

    /**
     * Determines if the tbcdStreet has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdStreetInitialized()
    {
        return tbcdStreetIsInitialized;
    }

    /**
     * Getter method for tbeDriverLicenseExpiry.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_driver_license_expiry</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbeDriverLicenseExpiry
     */
    public java.sql.Timestamp getTbeDriverLicenseExpiry()
    {
        return tbeDriverLicenseExpiry;
    }

    /**
     * Setter method for tbeDriverLicenseExpiry.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeDriverLicenseExpiry
     */
    public void setTbeDriverLicenseExpiry(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbeDriverLicenseExpiry != null && (newVal.compareTo(tbeDriverLicenseExpiry) == 0)) ||
            (newVal == null && tbeDriverLicenseExpiry == null && tbeDriverLicenseExpiryIsInitialized)) {
            return;
        }
        tbeDriverLicenseExpiry = newVal;
        tbeDriverLicenseExpiryIsModified = true;
        tbeDriverLicenseExpiryIsInitialized = true;
    }

    /**
     * Setter method for tbeDriverLicenseExpiry.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeDriverLicenseExpiry
     */
    public void setTbeDriverLicenseExpiry(long newVal)
    {
        setTbeDriverLicenseExpiry(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbeDriverLicenseExpiry has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeDriverLicenseExpiryModified()
    {
        return tbeDriverLicenseExpiryIsModified;
    }

    /**
     * Determines if the tbeDriverLicenseExpiry has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeDriverLicenseExpiryInitialized()
    {
        return tbeDriverLicenseExpiryIsInitialized;
    }

    /**
     * Getter method for tbeDriverLicenseNo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_driver_license_no</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeDriverLicenseNo
     */
    public String getTbeDriverLicenseNo()
    {
        return tbeDriverLicenseNo;
    }

    /**
     * Setter method for tbeDriverLicenseNo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeDriverLicenseNo
     */
    public void setTbeDriverLicenseNo(String newVal)
    {
        if ((newVal != null && tbeDriverLicenseNo != null && (newVal.compareTo(tbeDriverLicenseNo) == 0)) ||
            (newVal == null && tbeDriverLicenseNo == null && tbeDriverLicenseNoIsInitialized)) {
            return;
        }
        tbeDriverLicenseNo = newVal;
        tbeDriverLicenseNoIsModified = true;
        tbeDriverLicenseNoIsInitialized = true;
    }

    /**
     * Determines if the tbeDriverLicenseNo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeDriverLicenseNoModified()
    {
        return tbeDriverLicenseNoIsModified;
    }

    /**
     * Determines if the tbeDriverLicenseNo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeDriverLicenseNoInitialized()
    {
        return tbeDriverLicenseNoIsInitialized;
    }

    /**
     * Getter method for tbeGender.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_gender</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeGender
     */
    public Integer getTbeGender()
    {
        return tbeGender;
    }

    /**
     * Setter method for tbeGender.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeGender
     */
    public void setTbeGender(Integer newVal)
    {
        if ((newVal != null && tbeGender != null && (newVal.compareTo(tbeGender) == 0)) ||
            (newVal == null && tbeGender == null && tbeGenderIsInitialized)) {
            return;
        }
        tbeGender = newVal;
        tbeGenderIsModified = true;
        tbeGenderIsInitialized = true;
    }

    /**
     * Setter method for tbeGender.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeGender
     */
    public void setTbeGender(int newVal)
    {
        setTbeGender(new Integer(newVal));
    }

    /**
     * Determines if the tbeGender has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeGenderModified()
    {
        return tbeGenderIsModified;
    }

    /**
     * Determines if the tbeGender has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeGenderInitialized()
    {
        return tbeGenderIsInitialized;
    }

    /**
     * Getter method for tbeSmoker.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_smoker</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeSmoker
     */
    public Integer getTbeSmoker()
    {
        return tbeSmoker;
    }

    /**
     * Setter method for tbeSmoker.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeSmoker
     */
    public void setTbeSmoker(Integer newVal)
    {
        if ((newVal != null && tbeSmoker != null && (newVal.compareTo(tbeSmoker) == 0)) ||
            (newVal == null && tbeSmoker == null && tbeSmokerIsInitialized)) {
            return;
        }
        tbeSmoker = newVal;
        tbeSmokerIsModified = true;
        tbeSmokerIsInitialized = true;
    }

    /**
     * Setter method for tbeSmoker.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeSmoker
     */
    public void setTbeSmoker(int newVal)
    {
        setTbeSmoker(new Integer(newVal));
    }

    /**
     * Determines if the tbeSmoker has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeSmokerModified()
    {
        return tbeSmokerIsModified;
    }

    /**
     * Determines if the tbeSmoker has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeSmokerInitialized()
    {
        return tbeSmokerIsInitialized;
    }

    /**
     * Getter method for tbeMaritalStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_marital_status</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeMaritalStatus
     */
    public Integer getTbeMaritalStatus()
    {
        return tbeMaritalStatus;
    }

    /**
     * Setter method for tbeMaritalStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeMaritalStatus
     */
    public void setTbeMaritalStatus(Integer newVal)
    {
        if ((newVal != null && tbeMaritalStatus != null && (newVal.compareTo(tbeMaritalStatus) == 0)) ||
            (newVal == null && tbeMaritalStatus == null && tbeMaritalStatusIsInitialized)) {
            return;
        }
        tbeMaritalStatus = newVal;
        tbeMaritalStatusIsModified = true;
        tbeMaritalStatusIsInitialized = true;
    }

    /**
     * Setter method for tbeMaritalStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeMaritalStatus
     */
    public void setTbeMaritalStatus(int newVal)
    {
        setTbeMaritalStatus(new Integer(newVal));
    }

    /**
     * Determines if the tbeMaritalStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeMaritalStatusModified()
    {
        return tbeMaritalStatusIsModified;
    }

    /**
     * Determines if the tbeMaritalStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeMaritalStatusInitialized()
    {
        return tbeMaritalStatusIsInitialized;
    }

    /**
     * Getter method for tbeDob.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_dob</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbeDob
     */
    public java.sql.Timestamp getTbeDob()
    {
        return tbeDob;
    }

    /**
     * Setter method for tbeDob.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeDob
     */
    public void setTbeDob(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbeDob != null && (newVal.compareTo(tbeDob) == 0)) ||
            (newVal == null && tbeDob == null && tbeDobIsInitialized)) {
            return;
        }
        tbeDob = newVal;
        tbeDobIsModified = true;
        tbeDobIsInitialized = true;
    }

    /**
     * Setter method for tbeDob.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeDob
     */
    public void setTbeDob(long newVal)
    {
        setTbeDob(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbeDob has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeDobModified()
    {
        return tbeDobIsModified;
    }

    /**
     * Determines if the tbeDob has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeDobInitialized()
    {
        return tbeDobIsInitialized;
    }

    /**
     * Getter method for tbeTaxNo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_tax_no</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeTaxNo
     */
    public String getTbeTaxNo()
    {
        return tbeTaxNo;
    }

    /**
     * Setter method for tbeTaxNo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeTaxNo
     */
    public void setTbeTaxNo(String newVal)
    {
        if ((newVal != null && tbeTaxNo != null && (newVal.compareTo(tbeTaxNo) == 0)) ||
            (newVal == null && tbeTaxNo == null && tbeTaxNoIsInitialized)) {
            return;
        }
        tbeTaxNo = newVal;
        tbeTaxNoIsModified = true;
        tbeTaxNoIsInitialized = true;
    }

    /**
     * Determines if the tbeTaxNo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeTaxNoModified()
    {
        return tbeTaxNoIsModified;
    }

    /**
     * Determines if the tbeTaxNo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeTaxNoInitialized()
    {
        return tbeTaxNoIsInitialized;
    }

    /**
     * Getter method for tbeIdNo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_id_no</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeIdNo
     */
    public String getTbeIdNo()
    {
        return tbeIdNo;
    }

    /**
     * Setter method for tbeIdNo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeIdNo
     */
    public void setTbeIdNo(String newVal)
    {
        if ((newVal != null && tbeIdNo != null && (newVal.compareTo(tbeIdNo) == 0)) ||
            (newVal == null && tbeIdNo == null && tbeIdNoIsInitialized)) {
            return;
        }
        tbeIdNo = newVal;
        tbeIdNoIsModified = true;
        tbeIdNoIsInitialized = true;
    }

    /**
     * Determines if the tbeIdNo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdNoModified()
    {
        return tbeIdNoIsModified;
    }

    /**
     * Determines if the tbeIdNo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdNoInitialized()
    {
        return tbeIdNoIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeEmployeeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_employee_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEmployeeId
     */
    public String getTbeEmployeeId()
    {
        return tbeEmployeeId;
    }

    /**
     * Setter method for tbeEmployeeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEmployeeId
     */
    public void setTbeEmployeeId(String newVal)
    {
        if ((newVal != null && tbeEmployeeId != null && (newVal.compareTo(tbeEmployeeId) == 0)) ||
            (newVal == null && tbeEmployeeId == null && tbeEmployeeIdIsInitialized)) {
            return;
        }
        tbeEmployeeId = newVal;
        tbeEmployeeIdIsModified = true;
        tbeEmployeeIdIsInitialized = true;
    }

    /**
     * Determines if the tbeEmployeeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEmployeeIdModified()
    {
        return tbeEmployeeIdIsModified;
    }

    /**
     * Determines if the tbeEmployeeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEmployeeIdInitialized()
    {
        return tbeEmployeeIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_information.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbeJoinedDateIsModified 		|| tbeStatusIsModified  		|| tbsNameIsModified  		|| tblNameIsModified  		|| tbaeMajorIsModified  		|| tbeNameReportToIsModified  		|| tbpNameIsModified  		|| tbesCurrencyNameIsModified  		|| tbesPayFrequencyIsModified  		|| tbesBasicSalaryIsModified  		|| tbesNameIsModified  		|| tboNamaIsModified  		|| tbjJoinedDateIsModified  		|| tbjtNameIsModified  		|| tbnNamaIsModified  		|| tbcdWorkPhoneIsModified  		|| tbcdMobilePhoneIsModified  		|| tbcdHomePhoneIsModified  		|| tbcdZipCodeIsModified  		|| tbcdProvinceIsModified  		|| tbcdCityIsModified  		|| tbcdStreetIsModified  		|| tbeDriverLicenseExpiryIsModified  		|| tbeDriverLicenseNoIsModified  		|| tbeGenderIsModified  		|| tbeSmokerIsModified  		|| tbeMaritalStatusIsModified  		|| tbeDobIsModified  		|| tbeTaxNoIsModified  		|| tbeIdNoIsModified  		|| tbeNameIsModified  		|| tbeEmployeeIdIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbeJoinedDateIsModified = false;
        tbeStatusIsModified = false;
        tbsNameIsModified = false;
        tblNameIsModified = false;
        tbaeMajorIsModified = false;
        tbeNameReportToIsModified = false;
        tbpNameIsModified = false;
        tbesCurrencyNameIsModified = false;
        tbesPayFrequencyIsModified = false;
        tbesBasicSalaryIsModified = false;
        tbesNameIsModified = false;
        tboNamaIsModified = false;
        tbjJoinedDateIsModified = false;
        tbjtNameIsModified = false;
        tbnNamaIsModified = false;
        tbcdWorkPhoneIsModified = false;
        tbcdMobilePhoneIsModified = false;
        tbcdHomePhoneIsModified = false;
        tbcdZipCodeIsModified = false;
        tbcdProvinceIsModified = false;
        tbcdCityIsModified = false;
        tbcdStreetIsModified = false;
        tbeDriverLicenseExpiryIsModified = false;
        tbeDriverLicenseNoIsModified = false;
        tbeGenderIsModified = false;
        tbeSmokerIsModified = false;
        tbeMaritalStatusIsModified = false;
        tbeDobIsModified = false;
        tbeTaxNoIsModified = false;
        tbeIdNoIsModified = false;
        tbeNameIsModified = false;
        tbeEmployeeIdIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewReportEmployeeInformationBean bean)
    {
        setTbeJoinedDate(bean.getTbeJoinedDate());
        setTbeStatus(bean.getTbeStatus());
        setTbsName(bean.getTbsName());
        setTblName(bean.getTblName());
        setTbaeMajor(bean.getTbaeMajor());
        setTbeNameReportTo(bean.getTbeNameReportTo());
        setTbpName(bean.getTbpName());
        setTbesCurrencyName(bean.getTbesCurrencyName());
        setTbesPayFrequency(bean.getTbesPayFrequency());
        setTbesBasicSalary(bean.getTbesBasicSalary());
        setTbesName(bean.getTbesName());
        setTboNama(bean.getTboNama());
        setTbjJoinedDate(bean.getTbjJoinedDate());
        setTbjtName(bean.getTbjtName());
        setTbnNama(bean.getTbnNama());
        setTbcdWorkPhone(bean.getTbcdWorkPhone());
        setTbcdMobilePhone(bean.getTbcdMobilePhone());
        setTbcdHomePhone(bean.getTbcdHomePhone());
        setTbcdZipCode(bean.getTbcdZipCode());
        setTbcdProvince(bean.getTbcdProvince());
        setTbcdCity(bean.getTbcdCity());
        setTbcdStreet(bean.getTbcdStreet());
        setTbeDriverLicenseExpiry(bean.getTbeDriverLicenseExpiry());
        setTbeDriverLicenseNo(bean.getTbeDriverLicenseNo());
        setTbeGender(bean.getTbeGender());
        setTbeSmoker(bean.getTbeSmoker());
        setTbeMaritalStatus(bean.getTbeMaritalStatus());
        setTbeDob(bean.getTbeDob());
        setTbeTaxNo(bean.getTbeTaxNo());
        setTbeIdNo(bean.getTbeIdNo());
        setTbeName(bean.getTbeName());
        setTbeEmployeeId(bean.getTbeEmployeeId());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbe_joined_date", getTbeJoinedDate() == null ? "" : getTbeJoinedDate().toString());
        dictionnary.put("tbe_status", getTbeStatus() == null ? "" : getTbeStatus().toString());
        dictionnary.put("tbs_name", getTbsName() == null ? "" : getTbsName().toString());
        dictionnary.put("tbl_name", getTblName() == null ? "" : getTblName().toString());
        dictionnary.put("tbae_major", getTbaeMajor() == null ? "" : getTbaeMajor().toString());
        dictionnary.put("tbe_name_report_to", getTbeNameReportTo() == null ? "" : getTbeNameReportTo().toString());
        dictionnary.put("tbp_name", getTbpName() == null ? "" : getTbpName().toString());
        dictionnary.put("tbes_currency_name", getTbesCurrencyName() == null ? "" : getTbesCurrencyName().toString());
        dictionnary.put("tbes_pay_frequency", getTbesPayFrequency() == null ? "" : getTbesPayFrequency().toString());
        dictionnary.put("tbes_basic_salary", getTbesBasicSalary() == null ? "" : getTbesBasicSalary().toString());
        dictionnary.put("tbes_name", getTbesName() == null ? "" : getTbesName().toString());
        dictionnary.put("tbo_nama", getTboNama() == null ? "" : getTboNama().toString());
        dictionnary.put("tbj_joined_date", getTbjJoinedDate() == null ? "" : getTbjJoinedDate().toString());
        dictionnary.put("tbjt_name", getTbjtName() == null ? "" : getTbjtName().toString());
        dictionnary.put("tbn_nama", getTbnNama() == null ? "" : getTbnNama().toString());
        dictionnary.put("tbcd_work_phone", getTbcdWorkPhone() == null ? "" : getTbcdWorkPhone().toString());
        dictionnary.put("tbcd_mobile_phone", getTbcdMobilePhone() == null ? "" : getTbcdMobilePhone().toString());
        dictionnary.put("tbcd_home_phone", getTbcdHomePhone() == null ? "" : getTbcdHomePhone().toString());
        dictionnary.put("tbcd_zip_code", getTbcdZipCode() == null ? "" : getTbcdZipCode().toString());
        dictionnary.put("tbcd_province", getTbcdProvince() == null ? "" : getTbcdProvince().toString());
        dictionnary.put("tbcd_city", getTbcdCity() == null ? "" : getTbcdCity().toString());
        dictionnary.put("tbcd_street", getTbcdStreet() == null ? "" : getTbcdStreet().toString());
        dictionnary.put("tbe_driver_license_expiry", getTbeDriverLicenseExpiry() == null ? "" : getTbeDriverLicenseExpiry().toString());
        dictionnary.put("tbe_driver_license_no", getTbeDriverLicenseNo() == null ? "" : getTbeDriverLicenseNo().toString());
        dictionnary.put("tbe_gender", getTbeGender() == null ? "" : getTbeGender().toString());
        dictionnary.put("tbe_smoker", getTbeSmoker() == null ? "" : getTbeSmoker().toString());
        dictionnary.put("tbe_marital_status", getTbeMaritalStatus() == null ? "" : getTbeMaritalStatus().toString());
        dictionnary.put("tbe_dob", getTbeDob() == null ? "" : getTbeDob().toString());
        dictionnary.put("tbe_tax_no", getTbeTaxNo() == null ? "" : getTbeTaxNo().toString());
        dictionnary.put("tbe_id_no", getTbeIdNo() == null ? "" : getTbeIdNo().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_employee_id", getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbe_joined_date".equalsIgnoreCase(column) || "tbeJoinedDate".equalsIgnoreCase(column)) {
            return getTbeJoinedDate() == null ? "" : getTbeJoinedDate().toString();
        } else if ("tbe_status".equalsIgnoreCase(column) || "tbeStatus".equalsIgnoreCase(column)) {
            return getTbeStatus() == null ? "" : getTbeStatus().toString();
        } else if ("tbs_name".equalsIgnoreCase(column) || "tbsName".equalsIgnoreCase(column)) {
            return getTbsName() == null ? "" : getTbsName().toString();
        } else if ("tbl_name".equalsIgnoreCase(column) || "tblName".equalsIgnoreCase(column)) {
            return getTblName() == null ? "" : getTblName().toString();
        } else if ("tbae_major".equalsIgnoreCase(column) || "tbaeMajor".equalsIgnoreCase(column)) {
            return getTbaeMajor() == null ? "" : getTbaeMajor().toString();
        } else if ("tbe_name_report_to".equalsIgnoreCase(column) || "tbeNameReportTo".equalsIgnoreCase(column)) {
            return getTbeNameReportTo() == null ? "" : getTbeNameReportTo().toString();
        } else if ("tbp_name".equalsIgnoreCase(column) || "tbpName".equalsIgnoreCase(column)) {
            return getTbpName() == null ? "" : getTbpName().toString();
        } else if ("tbes_currency_name".equalsIgnoreCase(column) || "tbesCurrencyName".equalsIgnoreCase(column)) {
            return getTbesCurrencyName() == null ? "" : getTbesCurrencyName().toString();
        } else if ("tbes_pay_frequency".equalsIgnoreCase(column) || "tbesPayFrequency".equalsIgnoreCase(column)) {
            return getTbesPayFrequency() == null ? "" : getTbesPayFrequency().toString();
        } else if ("tbes_basic_salary".equalsIgnoreCase(column) || "tbesBasicSalary".equalsIgnoreCase(column)) {
            return getTbesBasicSalary() == null ? "" : getTbesBasicSalary().toString();
        } else if ("tbes_name".equalsIgnoreCase(column) || "tbesName".equalsIgnoreCase(column)) {
            return getTbesName() == null ? "" : getTbesName().toString();
        } else if ("tbo_nama".equalsIgnoreCase(column) || "tboNama".equalsIgnoreCase(column)) {
            return getTboNama() == null ? "" : getTboNama().toString();
        } else if ("tbj_joined_date".equalsIgnoreCase(column) || "tbjJoinedDate".equalsIgnoreCase(column)) {
            return getTbjJoinedDate() == null ? "" : getTbjJoinedDate().toString();
        } else if ("tbjt_name".equalsIgnoreCase(column) || "tbjtName".equalsIgnoreCase(column)) {
            return getTbjtName() == null ? "" : getTbjtName().toString();
        } else if ("tbn_nama".equalsIgnoreCase(column) || "tbnNama".equalsIgnoreCase(column)) {
            return getTbnNama() == null ? "" : getTbnNama().toString();
        } else if ("tbcd_work_phone".equalsIgnoreCase(column) || "tbcdWorkPhone".equalsIgnoreCase(column)) {
            return getTbcdWorkPhone() == null ? "" : getTbcdWorkPhone().toString();
        } else if ("tbcd_mobile_phone".equalsIgnoreCase(column) || "tbcdMobilePhone".equalsIgnoreCase(column)) {
            return getTbcdMobilePhone() == null ? "" : getTbcdMobilePhone().toString();
        } else if ("tbcd_home_phone".equalsIgnoreCase(column) || "tbcdHomePhone".equalsIgnoreCase(column)) {
            return getTbcdHomePhone() == null ? "" : getTbcdHomePhone().toString();
        } else if ("tbcd_zip_code".equalsIgnoreCase(column) || "tbcdZipCode".equalsIgnoreCase(column)) {
            return getTbcdZipCode() == null ? "" : getTbcdZipCode().toString();
        } else if ("tbcd_province".equalsIgnoreCase(column) || "tbcdProvince".equalsIgnoreCase(column)) {
            return getTbcdProvince() == null ? "" : getTbcdProvince().toString();
        } else if ("tbcd_city".equalsIgnoreCase(column) || "tbcdCity".equalsIgnoreCase(column)) {
            return getTbcdCity() == null ? "" : getTbcdCity().toString();
        } else if ("tbcd_street".equalsIgnoreCase(column) || "tbcdStreet".equalsIgnoreCase(column)) {
            return getTbcdStreet() == null ? "" : getTbcdStreet().toString();
        } else if ("tbe_driver_license_expiry".equalsIgnoreCase(column) || "tbeDriverLicenseExpiry".equalsIgnoreCase(column)) {
            return getTbeDriverLicenseExpiry() == null ? "" : getTbeDriverLicenseExpiry().toString();
        } else if ("tbe_driver_license_no".equalsIgnoreCase(column) || "tbeDriverLicenseNo".equalsIgnoreCase(column)) {
            return getTbeDriverLicenseNo() == null ? "" : getTbeDriverLicenseNo().toString();
        } else if ("tbe_gender".equalsIgnoreCase(column) || "tbeGender".equalsIgnoreCase(column)) {
            return getTbeGender() == null ? "" : getTbeGender().toString();
        } else if ("tbe_smoker".equalsIgnoreCase(column) || "tbeSmoker".equalsIgnoreCase(column)) {
            return getTbeSmoker() == null ? "" : getTbeSmoker().toString();
        } else if ("tbe_marital_status".equalsIgnoreCase(column) || "tbeMaritalStatus".equalsIgnoreCase(column)) {
            return getTbeMaritalStatus() == null ? "" : getTbeMaritalStatus().toString();
        } else if ("tbe_dob".equalsIgnoreCase(column) || "tbeDob".equalsIgnoreCase(column)) {
            return getTbeDob() == null ? "" : getTbeDob().toString();
        } else if ("tbe_tax_no".equalsIgnoreCase(column) || "tbeTaxNo".equalsIgnoreCase(column)) {
            return getTbeTaxNo() == null ? "" : getTbeTaxNo().toString();
        } else if ("tbe_id_no".equalsIgnoreCase(column) || "tbeIdNo".equalsIgnoreCase(column)) {
            return getTbeIdNo() == null ? "" : getTbeIdNo().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_employee_id".equalsIgnoreCase(column) || "tbeEmployeeId".equalsIgnoreCase(column)) {
            return getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewReportEmployeeInformationBean)) {
            return false;
        }

		ViewReportEmployeeInformationBean obj = (ViewReportEmployeeInformationBean) object;
		return new EqualsBuilder()
            .append(getTbeJoinedDate(), obj.getTbeJoinedDate())
            .append(getTbeStatus(), obj.getTbeStatus())
            .append(getTbsName(), obj.getTbsName())
            .append(getTblName(), obj.getTblName())
            .append(getTbaeMajor(), obj.getTbaeMajor())
            .append(getTbeNameReportTo(), obj.getTbeNameReportTo())
            .append(getTbpName(), obj.getTbpName())
            .append(getTbesCurrencyName(), obj.getTbesCurrencyName())
            .append(getTbesPayFrequency(), obj.getTbesPayFrequency())
            .append(getTbesBasicSalary(), obj.getTbesBasicSalary())
            .append(getTbesName(), obj.getTbesName())
            .append(getTboNama(), obj.getTboNama())
            .append(getTbjJoinedDate(), obj.getTbjJoinedDate())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbnNama(), obj.getTbnNama())
            .append(getTbcdWorkPhone(), obj.getTbcdWorkPhone())
            .append(getTbcdMobilePhone(), obj.getTbcdMobilePhone())
            .append(getTbcdHomePhone(), obj.getTbcdHomePhone())
            .append(getTbcdZipCode(), obj.getTbcdZipCode())
            .append(getTbcdProvince(), obj.getTbcdProvince())
            .append(getTbcdCity(), obj.getTbcdCity())
            .append(getTbcdStreet(), obj.getTbcdStreet())
            .append(getTbeDriverLicenseExpiry(), obj.getTbeDriverLicenseExpiry())
            .append(getTbeDriverLicenseNo(), obj.getTbeDriverLicenseNo())
            .append(getTbeGender(), obj.getTbeGender())
            .append(getTbeSmoker(), obj.getTbeSmoker())
            .append(getTbeMaritalStatus(), obj.getTbeMaritalStatus())
            .append(getTbeDob(), obj.getTbeDob())
            .append(getTbeTaxNo(), obj.getTbeTaxNo())
            .append(getTbeIdNo(), obj.getTbeIdNo())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbeJoinedDate())
            .append(getTbeStatus())
            .append(getTbsName())
            .append(getTblName())
            .append(getTbaeMajor())
            .append(getTbeNameReportTo())
            .append(getTbpName())
            .append(getTbesCurrencyName())
            .append(getTbesPayFrequency())
            .append(getTbesBasicSalary())
            .append(getTbesName())
            .append(getTboNama())
            .append(getTbjJoinedDate())
            .append(getTbjtName())
            .append(getTbnNama())
            .append(getTbcdWorkPhone())
            .append(getTbcdMobilePhone())
            .append(getTbcdHomePhone())
            .append(getTbcdZipCode())
            .append(getTbcdProvince())
            .append(getTbcdCity())
            .append(getTbcdStreet())
            .append(getTbeDriverLicenseExpiry())
            .append(getTbeDriverLicenseNo())
            .append(getTbeGender())
            .append(getTbeSmoker())
            .append(getTbeMaritalStatus())
            .append(getTbeDob())
            .append(getTbeTaxNo())
            .append(getTbeIdNo())
            .append(getTbeName())
            .append(getTbeEmployeeId())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbe_joined_date", getTbeJoinedDate())
            .append("tbe_status", getTbeStatus())
            .append("tbs_name", getTbsName())
            .append("tbl_name", getTblName())
            .append("tbae_major", getTbaeMajor())
            .append("tbe_name_report_to", getTbeNameReportTo())
            .append("tbp_name", getTbpName())
            .append("tbes_currency_name", getTbesCurrencyName())
            .append("tbes_pay_frequency", getTbesPayFrequency())
            .append("tbes_basic_salary", getTbesBasicSalary())
            .append("tbes_name", getTbesName())
            .append("tbo_nama", getTboNama())
            .append("tbj_joined_date", getTbjJoinedDate())
            .append("tbjt_name", getTbjtName())
            .append("tbn_nama", getTbnNama())
            .append("tbcd_work_phone", getTbcdWorkPhone())
            .append("tbcd_mobile_phone", getTbcdMobilePhone())
            .append("tbcd_home_phone", getTbcdHomePhone())
            .append("tbcd_zip_code", getTbcdZipCode())
            .append("tbcd_province", getTbcdProvince())
            .append("tbcd_city", getTbcdCity())
            .append("tbcd_street", getTbcdStreet())
            .append("tbe_driver_license_expiry", getTbeDriverLicenseExpiry())
            .append("tbe_driver_license_no", getTbeDriverLicenseNo())
            .append("tbe_gender", getTbeGender())
            .append("tbe_smoker", getTbeSmoker())
            .append("tbe_marital_status", getTbeMaritalStatus())
            .append("tbe_dob", getTbeDob())
            .append("tbe_tax_no", getTbeTaxNo())
            .append("tbe_id_no", getTbeIdNo())
            .append("tbe_name", getTbeName())
            .append("tbe_employee_id", getTbeEmployeeId())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewReportEmployeeInformationBean obj = (ViewReportEmployeeInformationBean) object;
        return new CompareToBuilder()
            .append(getTbeJoinedDate(), obj.getTbeJoinedDate())
            .append(getTbeStatus(), obj.getTbeStatus())
            .append(getTbsName(), obj.getTbsName())
            .append(getTblName(), obj.getTblName())
            .append(getTbaeMajor(), obj.getTbaeMajor())
            .append(getTbeNameReportTo(), obj.getTbeNameReportTo())
            .append(getTbpName(), obj.getTbpName())
            .append(getTbesCurrencyName(), obj.getTbesCurrencyName())
            .append(getTbesPayFrequency(), obj.getTbesPayFrequency())
            .append(getTbesBasicSalary(), obj.getTbesBasicSalary())
            .append(getTbesName(), obj.getTbesName())
            .append(getTboNama(), obj.getTboNama())
            .append(getTbjJoinedDate(), obj.getTbjJoinedDate())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbnNama(), obj.getTbnNama())
            .append(getTbcdWorkPhone(), obj.getTbcdWorkPhone())
            .append(getTbcdMobilePhone(), obj.getTbcdMobilePhone())
            .append(getTbcdHomePhone(), obj.getTbcdHomePhone())
            .append(getTbcdZipCode(), obj.getTbcdZipCode())
            .append(getTbcdProvince(), obj.getTbcdProvince())
            .append(getTbcdCity(), obj.getTbcdCity())
            .append(getTbcdStreet(), obj.getTbcdStreet())
            .append(getTbeDriverLicenseExpiry(), obj.getTbeDriverLicenseExpiry())
            .append(getTbeDriverLicenseNo(), obj.getTbeDriverLicenseNo())
            .append(getTbeGender(), obj.getTbeGender())
            .append(getTbeSmoker(), obj.getTbeSmoker())
            .append(getTbeMaritalStatus(), obj.getTbeMaritalStatus())
            .append(getTbeDob(), obj.getTbeDob())
            .append(getTbeTaxNo(), obj.getTbeTaxNo())
            .append(getTbeIdNo(), obj.getTbeIdNo())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
