// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.ViewEmployeeInformationBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the view_employee_information table.
 * @author sql2java
 */
public class ViewEmployeeInformationManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbp_name field.
     */
    public static final int ID_TBP_NAME = 0;

    /**
     * Identify the tbp_perusahaan_id field.
     */
    public static final int ID_TBP_PERUSAHAAN_ID = 1;

    /**
     * Identify the tbp_id field.
     */
    public static final int ID_TBP_ID = 2;

    /**
     * Identify the tbl_comments field.
     */
    public static final int ID_TBL_COMMENTS = 3;

    /**
     * Identify the tbl_fax field.
     */
    public static final int ID_TBL_FAX = 4;

    /**
     * Identify the tbl_phone field.
     */
    public static final int ID_TBL_PHONE = 5;

    /**
     * Identify the tbl_zip_code field.
     */
    public static final int ID_TBL_ZIP_CODE = 6;

    /**
     * Identify the tbl_address field.
     */
    public static final int ID_TBL_ADDRESS = 7;

    /**
     * Identify the tbl_city field.
     */
    public static final int ID_TBL_CITY = 8;

    /**
     * Identify the tbl_province field.
     */
    public static final int ID_TBL_PROVINCE = 9;

    /**
     * Identify the tbl_country field.
     */
    public static final int ID_TBL_COUNTRY = 10;

    /**
     * Identify the tbl_name field.
     */
    public static final int ID_TBL_NAME = 11;

    /**
     * Identify the tbl_location_id field.
     */
    public static final int ID_TBL_LOCATION_ID = 12;

    /**
     * Identify the tbl_id field.
     */
    public static final int ID_TBL_ID = 13;

    /**
     * Identify the tbo_nama field.
     */
    public static final int ID_TBO_NAMA = 14;

    /**
     * Identify the tbo_parent_id field.
     */
    public static final int ID_TBO_PARENT_ID = 15;

    /**
     * Identify the tbo_id field.
     */
    public static final int ID_TBO_ID = 16;

    /**
     * Identify the tbes_name field.
     */
    public static final int ID_TBES_NAME = 17;

    /**
     * Identify the tbes_employment_status_id field.
     */
    public static final int ID_TBES_EMPLOYMENT_STATUS_ID = 18;

    /**
     * Identify the tbes_id field.
     */
    public static final int ID_TBES_ID = 19;

    /**
     * Identify the tbj_joined_date field.
     */
    public static final int ID_TBJ_JOINED_DATE = 20;

    /**
     * Identify the tbjt_comments field.
     */
    public static final int ID_TBJT_COMMENTS = 21;

    /**
     * Identify the tbjt_description field.
     */
    public static final int ID_TBJT_DESCRIPTION = 22;

    /**
     * Identify the tbjt_name field.
     */
    public static final int ID_TBJT_NAME = 23;

    /**
     * Identify the tbjt_job_title_id field.
     */
    public static final int ID_TBJT_JOB_TITLE_ID = 24;

    /**
     * Identify the tbjt_id field.
     */
    public static final int ID_TBJT_ID = 25;

    /**
     * Identify the tbe_joined_date field.
     */
    public static final int ID_TBE_JOINED_DATE = 26;

    /**
     * Identify the tbe_status field.
     */
    public static final int ID_TBE_STATUS = 27;

    /**
     * Identify the tbe_driver_license_expiry field.
     */
    public static final int ID_TBE_DRIVER_LICENSE_EXPIRY = 28;

    /**
     * Identify the tbe_driver_license_no field.
     */
    public static final int ID_TBE_DRIVER_LICENSE_NO = 29;

    /**
     * Identify the tbe_gender field.
     */
    public static final int ID_TBE_GENDER = 30;

    /**
     * Identify the tbe_smoker field.
     */
    public static final int ID_TBE_SMOKER = 31;

    /**
     * Identify the tbe_marital_status field.
     */
    public static final int ID_TBE_MARITAL_STATUS = 32;

    /**
     * Identify the tbe_dob field.
     */
    public static final int ID_TBE_DOB = 33;

    /**
     * Identify the tbe_id_no field.
     */
    public static final int ID_TBE_ID_NO = 34;

    /**
     * Identify the tbe_photo_file_name field.
     */
    public static final int ID_TBE_PHOTO_FILE_NAME = 35;

    /**
     * Identify the tbe_name field.
     */
    public static final int ID_TBE_NAME = 36;

    /**
     * Identify the tbe_nick_name field.
     */
    public static final int ID_TBE_NICK_NAME = 37;

    /**
     * Identify the tbe_last_name field.
     */
    public static final int ID_TBE_LAST_NAME = 38;

    /**
     * Identify the tbe_middle_name field.
     */
    public static final int ID_TBE_MIDDLE_NAME = 39;

    /**
     * Identify the tbe_first_name field.
     */
    public static final int ID_TBE_FIRST_NAME = 40;

    /**
     * Identify the tbe_employee_id field.
     */
    public static final int ID_TBE_EMPLOYEE_ID = 41;

    /**
     * Identify the tbe_email field.
     */
    public static final int ID_TBE_EMAIL = 42;

    /**
     * Identify the tbe_id field.
     */
    public static final int ID_TBE_ID = 43;

    /**
     * Contains all the full fields of the view_employee_information table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "view_employee_information.tbp_name"
        ,"view_employee_information.tbp_perusahaan_id"
        ,"view_employee_information.tbp_id"
        ,"view_employee_information.tbl_comments"
        ,"view_employee_information.tbl_fax"
        ,"view_employee_information.tbl_phone"
        ,"view_employee_information.tbl_zip_code"
        ,"view_employee_information.tbl_address"
        ,"view_employee_information.tbl_city"
        ,"view_employee_information.tbl_province"
        ,"view_employee_information.tbl_country"
        ,"view_employee_information.tbl_name"
        ,"view_employee_information.tbl_location_id"
        ,"view_employee_information.tbl_id"
        ,"view_employee_information.tbo_nama"
        ,"view_employee_information.tbo_parent_id"
        ,"view_employee_information.tbo_id"
        ,"view_employee_information.tbes_name"
        ,"view_employee_information.tbes_employment_status_id"
        ,"view_employee_information.tbes_id"
        ,"view_employee_information.tbj_joined_date"
        ,"view_employee_information.tbjt_comments"
        ,"view_employee_information.tbjt_description"
        ,"view_employee_information.tbjt_name"
        ,"view_employee_information.tbjt_job_title_id"
        ,"view_employee_information.tbjt_id"
        ,"view_employee_information.tbe_joined_date"
        ,"view_employee_information.tbe_status"
        ,"view_employee_information.tbe_driver_license_expiry"
        ,"view_employee_information.tbe_driver_license_no"
        ,"view_employee_information.tbe_gender"
        ,"view_employee_information.tbe_smoker"
        ,"view_employee_information.tbe_marital_status"
        ,"view_employee_information.tbe_dob"
        ,"view_employee_information.tbe_id_no"
        ,"view_employee_information.tbe_photo_file_name"
        ,"view_employee_information.tbe_name"
        ,"view_employee_information.tbe_nick_name"
        ,"view_employee_information.tbe_last_name"
        ,"view_employee_information.tbe_middle_name"
        ,"view_employee_information.tbe_first_name"
        ,"view_employee_information.tbe_employee_id"
        ,"view_employee_information.tbe_email"
        ,"view_employee_information.tbe_id"
    };

    /**
     * Contains all the fields of the view_employee_information table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbp_name"
        ,"tbp_perusahaan_id"
        ,"tbp_id"
        ,"tbl_comments"
        ,"tbl_fax"
        ,"tbl_phone"
        ,"tbl_zip_code"
        ,"tbl_address"
        ,"tbl_city"
        ,"tbl_province"
        ,"tbl_country"
        ,"tbl_name"
        ,"tbl_location_id"
        ,"tbl_id"
        ,"tbo_nama"
        ,"tbo_parent_id"
        ,"tbo_id"
        ,"tbes_name"
        ,"tbes_employment_status_id"
        ,"tbes_id"
        ,"tbj_joined_date"
        ,"tbjt_comments"
        ,"tbjt_description"
        ,"tbjt_name"
        ,"tbjt_job_title_id"
        ,"tbjt_id"
        ,"tbe_joined_date"
        ,"tbe_status"
        ,"tbe_driver_license_expiry"
        ,"tbe_driver_license_no"
        ,"tbe_gender"
        ,"tbe_smoker"
        ,"tbe_marital_status"
        ,"tbe_dob"
        ,"tbe_id_no"
        ,"tbe_photo_file_name"
        ,"tbe_name"
        ,"tbe_nick_name"
        ,"tbe_last_name"
        ,"tbe_middle_name"
        ,"tbe_first_name"
        ,"tbe_employee_id"
        ,"tbe_email"
        ,"tbe_id"
    };

    /**
     * Field that contains the comma separated fields of the view_employee_information table.
     */
    public static final String ALL_FULL_FIELDS = "view_employee_information.tbp_name"
                            + ",view_employee_information.tbp_perusahaan_id"
                            + ",view_employee_information.tbp_id"
                            + ",view_employee_information.tbl_comments"
                            + ",view_employee_information.tbl_fax"
                            + ",view_employee_information.tbl_phone"
                            + ",view_employee_information.tbl_zip_code"
                            + ",view_employee_information.tbl_address"
                            + ",view_employee_information.tbl_city"
                            + ",view_employee_information.tbl_province"
                            + ",view_employee_information.tbl_country"
                            + ",view_employee_information.tbl_name"
                            + ",view_employee_information.tbl_location_id"
                            + ",view_employee_information.tbl_id"
                            + ",view_employee_information.tbo_nama"
                            + ",view_employee_information.tbo_parent_id"
                            + ",view_employee_information.tbo_id"
                            + ",view_employee_information.tbes_name"
                            + ",view_employee_information.tbes_employment_status_id"
                            + ",view_employee_information.tbes_id"
                            + ",view_employee_information.tbj_joined_date"
                            + ",view_employee_information.tbjt_comments"
                            + ",view_employee_information.tbjt_description"
                            + ",view_employee_information.tbjt_name"
                            + ",view_employee_information.tbjt_job_title_id"
                            + ",view_employee_information.tbjt_id"
                            + ",view_employee_information.tbe_joined_date"
                            + ",view_employee_information.tbe_status"
                            + ",view_employee_information.tbe_driver_license_expiry"
                            + ",view_employee_information.tbe_driver_license_no"
                            + ",view_employee_information.tbe_gender"
                            + ",view_employee_information.tbe_smoker"
                            + ",view_employee_information.tbe_marital_status"
                            + ",view_employee_information.tbe_dob"
                            + ",view_employee_information.tbe_id_no"
                            + ",view_employee_information.tbe_photo_file_name"
                            + ",view_employee_information.tbe_name"
                            + ",view_employee_information.tbe_nick_name"
                            + ",view_employee_information.tbe_last_name"
                            + ",view_employee_information.tbe_middle_name"
                            + ",view_employee_information.tbe_first_name"
                            + ",view_employee_information.tbe_employee_id"
                            + ",view_employee_information.tbe_email"
                            + ",view_employee_information.tbe_id";

    /**
     * Field that contains the comma separated fields of the view_employee_information table.
     */
    public static final String ALL_FIELDS = "tbp_name"
                            + ",tbp_perusahaan_id"
                            + ",tbp_id"
                            + ",tbl_comments"
                            + ",tbl_fax"
                            + ",tbl_phone"
                            + ",tbl_zip_code"
                            + ",tbl_address"
                            + ",tbl_city"
                            + ",tbl_province"
                            + ",tbl_country"
                            + ",tbl_name"
                            + ",tbl_location_id"
                            + ",tbl_id"
                            + ",tbo_nama"
                            + ",tbo_parent_id"
                            + ",tbo_id"
                            + ",tbes_name"
                            + ",tbes_employment_status_id"
                            + ",tbes_id"
                            + ",tbj_joined_date"
                            + ",tbjt_comments"
                            + ",tbjt_description"
                            + ",tbjt_name"
                            + ",tbjt_job_title_id"
                            + ",tbjt_id"
                            + ",tbe_joined_date"
                            + ",tbe_status"
                            + ",tbe_driver_license_expiry"
                            + ",tbe_driver_license_no"
                            + ",tbe_gender"
                            + ",tbe_smoker"
                            + ",tbe_marital_status"
                            + ",tbe_dob"
                            + ",tbe_id_no"
                            + ",tbe_photo_file_name"
                            + ",tbe_name"
                            + ",tbe_nick_name"
                            + ",tbe_last_name"
                            + ",tbe_middle_name"
                            + ",tbe_first_name"
                            + ",tbe_employee_id"
                            + ",tbe_email"
                            + ",tbe_id";

    private static ViewEmployeeInformationManager singleton = new ViewEmployeeInformationManager();

    /**
     * Get the ViewEmployeeInformationManager singleton.
     *
     * @return ViewEmployeeInformationManager
     */
    public static ViewEmployeeInformationManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new ViewEmployeeInformationBean instance.
     *
     * @return the new ViewEmployeeInformationBean
     */
    public ViewEmployeeInformationBean createViewEmployeeInformationBean()
    {
        return new ViewEmployeeInformationBean();
    }




    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from view_employee_information.
     *
     * @return an array of ViewEmployeeInformationManager bean
     * @throws DAOException
     */
    //5
    public ViewEmployeeInformationBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from view_employee_information, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of ViewEmployeeInformationManager bean
     * @throws DAOException
     */
    //6
    public ViewEmployeeInformationBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ViewEmployeeInformationBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ViewEmployeeInformationBean table
     * @throws DAOException
     */
    //7
    public ViewEmployeeInformationBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ViewEmployeeInformationBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting ViewEmployeeInformationBean table
     * @throws DAOException
     */
    //8
    public ViewEmployeeInformationBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of ViewEmployeeInformationBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting ViewEmployeeInformationBean table
     * @throws DAOException
     */
    //9
    public ViewEmployeeInformationBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_employee_information ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM view_employee_information ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the view_employee_information table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM view_employee_information " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ViewEmployeeInformationBean bean into the database.
     *
     * @param bean the ViewEmployeeInformationBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ViewEmployeeInformationBean save(ViewEmployeeInformationBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the ViewEmployeeInformationBean bean into the database.
     *
     * @param bean the ViewEmployeeInformationBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public ViewEmployeeInformationBean insert(ViewEmployeeInformationBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into view_employee_information (");

            if (bean.isTbpNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_name");
                _dirtyCount++;
            }

            if (bean.isTbpPerusahaanIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_perusahaan_id");
                _dirtyCount++;
            }

            if (bean.isTbpIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_id");
                _dirtyCount++;
            }

            if (bean.isTblCommentsModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_comments");
                _dirtyCount++;
            }

            if (bean.isTblFaxModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_fax");
                _dirtyCount++;
            }

            if (bean.isTblPhoneModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_phone");
                _dirtyCount++;
            }

            if (bean.isTblZipCodeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_zip_code");
                _dirtyCount++;
            }

            if (bean.isTblAddressModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_address");
                _dirtyCount++;
            }

            if (bean.isTblCityModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_city");
                _dirtyCount++;
            }

            if (bean.isTblProvinceModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_province");
                _dirtyCount++;
            }

            if (bean.isTblCountryModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_country");
                _dirtyCount++;
            }

            if (bean.isTblNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_name");
                _dirtyCount++;
            }

            if (bean.isTblLocationIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_location_id");
                _dirtyCount++;
            }

            if (bean.isTblIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_id");
                _dirtyCount++;
            }

            if (bean.isTboNamaModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbo_nama");
                _dirtyCount++;
            }

            if (bean.isTboParentIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbo_parent_id");
                _dirtyCount++;
            }

            if (bean.isTboIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbo_id");
                _dirtyCount++;
            }

            if (bean.isTbesNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbes_name");
                _dirtyCount++;
            }

            if (bean.isTbesEmploymentStatusIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbes_employment_status_id");
                _dirtyCount++;
            }

            if (bean.isTbesIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbes_id");
                _dirtyCount++;
            }

            if (bean.isTbjJoinedDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbj_joined_date");
                _dirtyCount++;
            }

            if (bean.isTbjtCommentsModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbjt_comments");
                _dirtyCount++;
            }

            if (bean.isTbjtDescriptionModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbjt_description");
                _dirtyCount++;
            }

            if (bean.isTbjtNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbjt_name");
                _dirtyCount++;
            }

            if (bean.isTbjtJobTitleIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbjt_job_title_id");
                _dirtyCount++;
            }

            if (bean.isTbjtIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbjt_id");
                _dirtyCount++;
            }

            if (bean.isTbeJoinedDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_joined_date");
                _dirtyCount++;
            }

            if (bean.isTbeStatusModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_status");
                _dirtyCount++;
            }

            if (bean.isTbeDriverLicenseExpiryModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_driver_license_expiry");
                _dirtyCount++;
            }

            if (bean.isTbeDriverLicenseNoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_driver_license_no");
                _dirtyCount++;
            }

            if (bean.isTbeGenderModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_gender");
                _dirtyCount++;
            }

            if (bean.isTbeSmokerModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_smoker");
                _dirtyCount++;
            }

            if (bean.isTbeMaritalStatusModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_marital_status");
                _dirtyCount++;
            }

            if (bean.isTbeDobModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_dob");
                _dirtyCount++;
            }

            if (bean.isTbeIdNoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id_no");
                _dirtyCount++;
            }

            if (bean.isTbePhotoFileNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_photo_file_name");
                _dirtyCount++;
            }

            if (bean.isTbeNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_name");
                _dirtyCount++;
            }

            if (bean.isTbeNickNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_nick_name");
                _dirtyCount++;
            }

            if (bean.isTbeLastNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_last_name");
                _dirtyCount++;
            }

            if (bean.isTbeMiddleNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_middle_name");
                _dirtyCount++;
            }

            if (bean.isTbeFirstNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_first_name");
                _dirtyCount++;
            }

            if (bean.isTbeEmployeeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_employee_id");
                _dirtyCount++;
            }

            if (bean.isTbeEmailModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_email");
                _dirtyCount++;
            }

            if (bean.isTbeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the ViewEmployeeInformationBean bean record in the database according to the changes.
     *
     * @param bean the ViewEmployeeInformationBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ViewEmployeeInformationBean update(ViewEmployeeInformationBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();


            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE view_employee_information SET ");
            boolean useComma=false;

            if (bean.isTbpNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_name=?");
            }

            if (bean.isTbpPerusahaanIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_perusahaan_id=?");
            }

            if (bean.isTbpIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_id=?");
            }

            if (bean.isTblCommentsModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_comments=?");
            }

            if (bean.isTblFaxModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_fax=?");
            }

            if (bean.isTblPhoneModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_phone=?");
            }

            if (bean.isTblZipCodeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_zip_code=?");
            }

            if (bean.isTblAddressModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_address=?");
            }

            if (bean.isTblCityModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_city=?");
            }

            if (bean.isTblProvinceModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_province=?");
            }

            if (bean.isTblCountryModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_country=?");
            }

            if (bean.isTblNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_name=?");
            }

            if (bean.isTblLocationIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_location_id=?");
            }

            if (bean.isTblIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_id=?");
            }

            if (bean.isTboNamaModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbo_nama=?");
            }

            if (bean.isTboParentIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbo_parent_id=?");
            }

            if (bean.isTboIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbo_id=?");
            }

            if (bean.isTbesNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbes_name=?");
            }

            if (bean.isTbesEmploymentStatusIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbes_employment_status_id=?");
            }

            if (bean.isTbesIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbes_id=?");
            }

            if (bean.isTbjJoinedDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbj_joined_date=?");
            }

            if (bean.isTbjtCommentsModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbjt_comments=?");
            }

            if (bean.isTbjtDescriptionModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbjt_description=?");
            }

            if (bean.isTbjtNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbjt_name=?");
            }

            if (bean.isTbjtJobTitleIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbjt_job_title_id=?");
            }

            if (bean.isTbjtIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbjt_id=?");
            }

            if (bean.isTbeJoinedDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_joined_date=?");
            }

            if (bean.isTbeStatusModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_status=?");
            }

            if (bean.isTbeDriverLicenseExpiryModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_driver_license_expiry=?");
            }

            if (bean.isTbeDriverLicenseNoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_driver_license_no=?");
            }

            if (bean.isTbeGenderModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_gender=?");
            }

            if (bean.isTbeSmokerModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_smoker=?");
            }

            if (bean.isTbeMaritalStatusModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_marital_status=?");
            }

            if (bean.isTbeDobModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_dob=?");
            }

            if (bean.isTbeIdNoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id_no=?");
            }

            if (bean.isTbePhotoFileNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_photo_file_name=?");
            }

            if (bean.isTbeNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_name=?");
            }

            if (bean.isTbeNickNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_nick_name=?");
            }

            if (bean.isTbeLastNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_last_name=?");
            }

            if (bean.isTbeMiddleNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_middle_name=?");
            }

            if (bean.isTbeFirstNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_first_name=?");
            }

            if (bean.isTbeEmployeeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_employee_id=?");
            }

            if (bean.isTbeEmailModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_email=?");
            }

            if (bean.isTbeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id=?");
            }
            sql.append("");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of ViewEmployeeInformationBean beans into the database.
     *
     * @param beans the ViewEmployeeInformationBean bean table to be saved
     * @return the saved ViewEmployeeInformationBean array.
     * @throws DAOException
     */
    //15
    public ViewEmployeeInformationBean[] save(ViewEmployeeInformationBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of ViewEmployeeInformationBean beans into the database.
     *
     * @param beans the ViewEmployeeInformationBean bean table to be inserted
     * @return the saved ViewEmployeeInformationBean array.
     * @throws DAOException
     */
    //16
    public ViewEmployeeInformationBean[] insert(ViewEmployeeInformationBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of ViewEmployeeInformationBean beans into the database.
     *
     * @param beans the ViewEmployeeInformationBean bean table to be inserted
     * @return the saved ViewEmployeeInformationBean array.
     * @throws DAOException
     */
    //17
    public ViewEmployeeInformationBean[] update(ViewEmployeeInformationBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique ViewEmployeeInformationBean bean from a template one giving a c
     *
     * @param bean the ViewEmployeeInformationBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public ViewEmployeeInformationBean loadUniqueUsingTemplate(ViewEmployeeInformationBean bean) throws DAOException
    {
         ViewEmployeeInformationBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of ViewEmployeeInformationBean from a template one.
     *
     * @param bean the ViewEmployeeInformationBean template to look for
     * @return all the ViewEmployeeInformationBean matching the template
     * @throws DAOException
     */
    //19
    public ViewEmployeeInformationBean[] loadUsingTemplate(ViewEmployeeInformationBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of ViewEmployeeInformationBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewEmployeeInformationBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the ViewEmployeeInformationBean matching the template
     * @throws DAOException
     */
    //20
    public ViewEmployeeInformationBean[] loadUsingTemplate(ViewEmployeeInformationBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of ViewEmployeeInformationBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewEmployeeInformationBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the ViewEmployeeInformationBean matching the template
     * @throws DAOException
     */
    //20
    public ViewEmployeeInformationBean[] loadUsingTemplate(ViewEmployeeInformationBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_employee_information ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a ViewEmployeeInformationBean template.
     *
     * @param bean the ViewEmployeeInformationBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(ViewEmployeeInformationBean bean) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM view_employee_information ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table view_employee_information.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table view_employee_information with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM view_employee_information " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table view_employee_information with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific ViewEmployeeInformationBean bean
     *
     * @param bean the ViewEmployeeInformationBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(ViewEmployeeInformationBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific ViewEmployeeInformationBean bean , given the start row and number of rows.
     *
     * @param bean the ViewEmployeeInformationBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewEmployeeInformationBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific ViewEmployeeInformationBean bean given the start row and number of rows and the search type
     *
     * @param bean the ViewEmployeeInformationBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewEmployeeInformationBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM view_employee_information");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, ViewEmployeeInformationBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbpNameModified()) {
                _dirtyCount ++;
                if (bean.getTbpName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpPerusahaanIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpPerusahaanId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_perusahaan_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_perusahaan_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id = ?");
                }
            }
            if (bean.isTblCommentsModified()) {
                _dirtyCount ++;
                if (bean.getTblComments() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_comments IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_comments ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblFaxModified()) {
                _dirtyCount ++;
                if (bean.getTblFax() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_fax IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_fax ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblPhoneModified()) {
                _dirtyCount ++;
                if (bean.getTblPhone() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_phone IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_phone ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblZipCodeModified()) {
                _dirtyCount ++;
                if (bean.getTblZipCode() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_zip_code IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_zip_code ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblAddressModified()) {
                _dirtyCount ++;
                if (bean.getTblAddress() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_address IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_address ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblCityModified()) {
                _dirtyCount ++;
                if (bean.getTblCity() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_city IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_city ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblProvinceModified()) {
                _dirtyCount ++;
                if (bean.getTblProvince() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_province IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_province ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblCountryModified()) {
                _dirtyCount ++;
                if (bean.getTblCountry() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_country IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_country ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblNameModified()) {
                _dirtyCount ++;
                if (bean.getTblName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblLocationIdModified()) {
                _dirtyCount ++;
                if (bean.getTblLocationId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_location_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_location_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblIdModified()) {
                _dirtyCount ++;
                if (bean.getTblId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_id = ?");
                }
            }
            if (bean.isTboNamaModified()) {
                _dirtyCount ++;
                if (bean.getTboNama() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbo_nama IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbo_nama ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTboParentIdModified()) {
                _dirtyCount ++;
                if (bean.getTboParentId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbo_parent_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbo_parent_id = ?");
                }
            }
            if (bean.isTboIdModified()) {
                _dirtyCount ++;
                if (bean.getTboId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbo_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbo_id = ?");
                }
            }
            if (bean.isTbesNameModified()) {
                _dirtyCount ++;
                if (bean.getTbesName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbesEmploymentStatusIdModified()) {
                _dirtyCount ++;
                if (bean.getTbesEmploymentStatusId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_employment_status_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_employment_status_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbesIdModified()) {
                _dirtyCount ++;
                if (bean.getTbesId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbes_id = ?");
                }
            }
            if (bean.isTbjJoinedDateModified()) {
                _dirtyCount ++;
                if (bean.getTbjJoinedDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbj_joined_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbj_joined_date = ?");
                }
            }
            if (bean.isTbjtCommentsModified()) {
                _dirtyCount ++;
                if (bean.getTbjtComments() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_comments IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_comments ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbjtDescriptionModified()) {
                _dirtyCount ++;
                if (bean.getTbjtDescription() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_description IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_description ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbjtNameModified()) {
                _dirtyCount ++;
                if (bean.getTbjtName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbjtJobTitleIdModified()) {
                _dirtyCount ++;
                if (bean.getTbjtJobTitleId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_job_title_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_job_title_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbjtIdModified()) {
                _dirtyCount ++;
                if (bean.getTbjtId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_id = ?");
                }
            }
            if (bean.isTbeJoinedDateModified()) {
                _dirtyCount ++;
                if (bean.getTbeJoinedDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_joined_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_joined_date = ?");
                }
            }
            if (bean.isTbeStatusModified()) {
                _dirtyCount ++;
                if (bean.getTbeStatus() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_status IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_status = ?");
                }
            }
            if (bean.isTbeDriverLicenseExpiryModified()) {
                _dirtyCount ++;
                if (bean.getTbeDriverLicenseExpiry() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_expiry IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_expiry = ?");
                }
            }
            if (bean.isTbeDriverLicenseNoModified()) {
                _dirtyCount ++;
                if (bean.getTbeDriverLicenseNo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_no IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_no ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeGenderModified()) {
                _dirtyCount ++;
                if (bean.getTbeGender() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_gender IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_gender = ?");
                }
            }
            if (bean.isTbeSmokerModified()) {
                _dirtyCount ++;
                if (bean.getTbeSmoker() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_smoker IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_smoker = ?");
                }
            }
            if (bean.isTbeMaritalStatusModified()) {
                _dirtyCount ++;
                if (bean.getTbeMaritalStatus() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_marital_status IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_marital_status = ?");
                }
            }
            if (bean.isTbeDobModified()) {
                _dirtyCount ++;
                if (bean.getTbeDob() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_dob IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_dob = ?");
                }
            }
            if (bean.isTbeIdNoModified()) {
                _dirtyCount ++;
                if (bean.getTbeIdNo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id_no IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id_no ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbePhotoFileNameModified()) {
                _dirtyCount ++;
                if (bean.getTbePhotoFileName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_photo_file_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_photo_file_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeNickNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeNickName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_nick_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_nick_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeLastNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeLastName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_last_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_last_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeMiddleNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeMiddleName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_middle_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_middle_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeFirstNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeFirstName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_first_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_first_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeEmployeeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeEmployeeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_employee_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_employee_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeEmailModified()) {
                _dirtyCount ++;
                if (bean.getTbeEmail() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_email IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_email ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, ViewEmployeeInformationBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbpNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpName() + "]");
                        if (bean.getTbpName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpName() + "]");
                        if (bean.getTbpName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpPerusahaanIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpPerusahaanId() + "]");
                        if (bean.getTbpPerusahaanId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpPerusahaanId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpPerusahaanId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpPerusahaanId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpPerusahaanId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpPerusahaanId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpPerusahaanId() + "]");
                        if (bean.getTbpPerusahaanId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpPerusahaanId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpId() + "]");
                if (bean.getTbpId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpId()); }
            }
            if (bean.isTblCommentsModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblComments() + "]");
                        if (bean.getTblComments() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblComments()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblComments() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblComments());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblComments() + "]");
                        if (bean.getTblComments() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblComments() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblFaxModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblFax() + "]");
                        if (bean.getTblFax() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblFax()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblFax() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblFax() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblFax() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblFax());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblFax() + "]");
                        if (bean.getTblFax() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblFax() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblPhoneModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblPhone() + "]");
                        if (bean.getTblPhone() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblPhone()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblPhone() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblPhone());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblPhone() + "]");
                        if (bean.getTblPhone() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblPhone() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblZipCodeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblZipCode() + "]");
                        if (bean.getTblZipCode() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblZipCode()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblZipCode() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblZipCode() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblZipCode() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblZipCode());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblZipCode() + "]");
                        if (bean.getTblZipCode() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblZipCode() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblAddressModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblAddress() + "]");
                        if (bean.getTblAddress() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblAddress()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblAddress() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblAddress() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblAddress() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblAddress());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblAddress() + "]");
                        if (bean.getTblAddress() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblAddress() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblCityModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblCity() + "]");
                        if (bean.getTblCity() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblCity()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblCity() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblCity() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblCity() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblCity());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblCity() + "]");
                        if (bean.getTblCity() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblCity() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblProvinceModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblProvince() + "]");
                        if (bean.getTblProvince() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblProvince()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblProvince() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblProvince() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblProvince() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblProvince());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblProvince() + "]");
                        if (bean.getTblProvince() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblProvince() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblCountryModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblCountry() + "]");
                        if (bean.getTblCountry() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblCountry()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblCountry() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblCountry() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblCountry() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblCountry());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblCountry() + "]");
                        if (bean.getTblCountry() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblCountry() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblName() + "]");
                        if (bean.getTblName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblName() + "]");
                        if (bean.getTblName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblLocationIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblLocationId() + "]");
                        if (bean.getTblLocationId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblLocationId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblLocationId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblLocationId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblLocationId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblLocationId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblLocationId() + "]");
                        if (bean.getTblLocationId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblLocationId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTblId() + "]");
                if (bean.getTblId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTblId()); }
            }
            if (bean.isTboNamaModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTboNama() + "]");
                        if (bean.getTboNama() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTboNama()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTboNama() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTboNama() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTboNama() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTboNama());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTboNama() + "]");
                        if (bean.getTboNama() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTboNama() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTboParentIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTboParentId() + "]");
                if (bean.getTboParentId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTboParentId()); }
            }
            if (bean.isTboIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTboId() + "]");
                if (bean.getTboId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTboId()); }
            }
            if (bean.isTbesNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbesName() + "]");
                        if (bean.getTbesName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbesName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbesName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbesName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbesName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbesName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbesName() + "]");
                        if (bean.getTbesName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbesName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbesEmploymentStatusIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbesEmploymentStatusId() + "]");
                        if (bean.getTbesEmploymentStatusId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbesEmploymentStatusId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbesEmploymentStatusId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbesEmploymentStatusId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbesEmploymentStatusId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbesEmploymentStatusId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbesEmploymentStatusId() + "]");
                        if (bean.getTbesEmploymentStatusId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbesEmploymentStatusId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbesIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbesId() + "]");
                if (bean.getTbesId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbesId()); }
            }
            if (bean.isTbjJoinedDateModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjJoinedDate() + "]");
                if (bean.getTbjJoinedDate() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbjJoinedDate()); }
            }
            if (bean.isTbjtCommentsModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtComments() + "]");
                        if (bean.getTbjtComments() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtComments()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtComments() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtComments());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtComments() + "]");
                        if (bean.getTbjtComments() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtComments() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbjtDescriptionModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtDescription() + "]");
                        if (bean.getTbjtDescription() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtDescription()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtDescription() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtDescription() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtDescription() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtDescription());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtDescription() + "]");
                        if (bean.getTbjtDescription() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtDescription() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbjtNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtName() + "]");
                        if (bean.getTbjtName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtName() + "]");
                        if (bean.getTbjtName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbjtJobTitleIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtJobTitleId() + "]");
                        if (bean.getTbjtJobTitleId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtJobTitleId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtJobTitleId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtJobTitleId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtJobTitleId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtJobTitleId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtJobTitleId() + "]");
                        if (bean.getTbjtJobTitleId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtJobTitleId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbjtIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtId() + "]");
                if (bean.getTbjtId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbjtId()); }
            }
            if (bean.isTbeJoinedDateModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeJoinedDate() + "]");
                if (bean.getTbeJoinedDate() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbeJoinedDate()); }
            }
            if (bean.isTbeStatusModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeStatus() + "]");
                if (bean.getTbeStatus() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeStatus()); }
            }
            if (bean.isTbeDriverLicenseExpiryModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDriverLicenseExpiry() + "]");
                if (bean.getTbeDriverLicenseExpiry() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbeDriverLicenseExpiry()); }
            }
            if (bean.isTbeDriverLicenseNoModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDriverLicenseNo() + "]");
                        if (bean.getTbeDriverLicenseNo() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeDriverLicenseNo()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeDriverLicenseNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeDriverLicenseNo() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDriverLicenseNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeDriverLicenseNo());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeDriverLicenseNo() + "]");
                        if (bean.getTbeDriverLicenseNo() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeDriverLicenseNo() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeGenderModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeGender() + "]");
                if (bean.getTbeGender() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeGender()); }
            }
            if (bean.isTbeSmokerModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeSmoker() + "]");
                if (bean.getTbeSmoker() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeSmoker()); }
            }
            if (bean.isTbeMaritalStatusModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeMaritalStatus() + "]");
                if (bean.getTbeMaritalStatus() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeMaritalStatus()); }
            }
            if (bean.isTbeDobModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDob() + "]");
                if (bean.getTbeDob() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbeDob()); }
            }
            if (bean.isTbeIdNoModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeIdNo() + "]");
                        if (bean.getTbeIdNo() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeIdNo()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeIdNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeIdNo() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeIdNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeIdNo());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeIdNo() + "]");
                        if (bean.getTbeIdNo() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeIdNo() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbePhotoFileNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbePhotoFileName() + "]");
                        if (bean.getTbePhotoFileName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbePhotoFileName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbePhotoFileName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbePhotoFileName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbePhotoFileName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbePhotoFileName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbePhotoFileName() + "]");
                        if (bean.getTbePhotoFileName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbePhotoFileName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "]");
                        if (bean.getTbeName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "]");
                        if (bean.getTbeName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeNickNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeNickName() + "]");
                        if (bean.getTbeNickName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeNickName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeNickName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeNickName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeNickName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeNickName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeNickName() + "]");
                        if (bean.getTbeNickName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeNickName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeLastNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeLastName() + "]");
                        if (bean.getTbeLastName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeLastName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeLastName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeLastName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeLastName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeLastName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeLastName() + "]");
                        if (bean.getTbeLastName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeLastName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeMiddleNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeMiddleName() + "]");
                        if (bean.getTbeMiddleName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeMiddleName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeMiddleName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeMiddleName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeMiddleName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeMiddleName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeMiddleName() + "]");
                        if (bean.getTbeMiddleName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeMiddleName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeFirstNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeFirstName() + "]");
                        if (bean.getTbeFirstName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeFirstName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeFirstName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeFirstName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeFirstName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeFirstName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeFirstName() + "]");
                        if (bean.getTbeFirstName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeFirstName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeEmployeeIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmployeeId() + "]");
                        if (bean.getTbeEmployeeId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmployeeId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmployeeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmployeeId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmployeeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmployeeId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmployeeId() + "]");
                        if (bean.getTbeEmployeeId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmployeeId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeEmailModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmail() + "]");
                        if (bean.getTbeEmail() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmail()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmail() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmail() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmail() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmail());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmail() + "]");
                        if (bean.getTbeEmail() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmail() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeId() + "]");
                if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of ViewEmployeeInformationBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting ViewEmployeeInformationBean table
     * @throws DAOException
     */
    //28
    public ViewEmployeeInformationBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (ViewEmployeeInformationBean[])v.toArray(new ViewEmployeeInformationBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the view_employee_information on a ViewEmployeeInformationBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewEmployeeInformationBean bean
     * @throws DAOException
     */
    //29
    public ViewEmployeeInformationBean decodeRow(ResultSet rs) throws DAOException
    {
        ViewEmployeeInformationBean bean = this.createViewEmployeeInformationBean();
        try
        {
            bean.setTbpName(rs.getString(1));
            bean.setTbpPerusahaanId(rs.getString(2));
            bean.setTbpId(Manager.getInteger(rs, 3));
            bean.setTblComments(rs.getString(4));
            bean.setTblFax(rs.getString(5));
            bean.setTblPhone(rs.getString(6));
            bean.setTblZipCode(rs.getString(7));
            bean.setTblAddress(rs.getString(8));
            bean.setTblCity(rs.getString(9));
            bean.setTblProvince(rs.getString(10));
            bean.setTblCountry(rs.getString(11));
            bean.setTblName(rs.getString(12));
            bean.setTblLocationId(rs.getString(13));
            bean.setTblId(Manager.getInteger(rs, 14));
            bean.setTboNama(rs.getString(15));
            bean.setTboParentId(Manager.getInteger(rs, 16));
            bean.setTboId(Manager.getInteger(rs, 17));
            bean.setTbesName(rs.getString(18));
            bean.setTbesEmploymentStatusId(rs.getString(19));
            bean.setTbesId(Manager.getInteger(rs, 20));
            bean.setTbjJoinedDate(rs.getTimestamp(21));
            bean.setTbjtComments(rs.getString(22));
            bean.setTbjtDescription(rs.getString(23));
            bean.setTbjtName(rs.getString(24));
            bean.setTbjtJobTitleId(rs.getString(25));
            bean.setTbjtId(Manager.getInteger(rs, 26));
            bean.setTbeJoinedDate(rs.getTimestamp(27));
            bean.setTbeStatus(Manager.getInteger(rs, 28));
            bean.setTbeDriverLicenseExpiry(rs.getTimestamp(29));
            bean.setTbeDriverLicenseNo(rs.getString(30));
            bean.setTbeGender(Manager.getInteger(rs, 31));
            bean.setTbeSmoker(Manager.getInteger(rs, 32));
            bean.setTbeMaritalStatus(Manager.getInteger(rs, 33));
            bean.setTbeDob(rs.getTimestamp(34));
            bean.setTbeIdNo(rs.getString(35));
            bean.setTbePhotoFileName(rs.getString(36));
            bean.setTbeName(rs.getString(37));
            bean.setTbeNickName(rs.getString(38));
            bean.setTbeLastName(rs.getString(39));
            bean.setTbeMiddleName(rs.getString(40));
            bean.setTbeFirstName(rs.getString(41));
            bean.setTbeEmployeeId(rs.getString(42));
            bean.setTbeEmail(rs.getString(43));
            bean.setTbeId(Manager.getInteger(rs, 44));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public ViewEmployeeInformationBean toBean(ViewEmployeeInformationBeanModel beanModel, ViewEmployeeInformationBean bean)
    {
		if (beanModel.getTbpName() != null)
			bean.setTbpName(beanModel.getTbpName());

		if (bean.getTbpName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpName().getClass().getName()))
			bean.setTbpName(beanModel.getTbpName());
		
		if (beanModel.getTbpPerusahaanId() != null)
			bean.setTbpPerusahaanId(beanModel.getTbpPerusahaanId());

		if (bean.getTbpPerusahaanId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpPerusahaanId().getClass().getName()))
			bean.setTbpPerusahaanId(beanModel.getTbpPerusahaanId());
		
		if (beanModel.getTbpId() != null)
			bean.setTbpId(beanModel.getTbpId());

		if (bean.getTbpId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpId().getClass().getName()))
			bean.setTbpId(beanModel.getTbpId());
		
		if (beanModel.getTblComments() != null)
			bean.setTblComments(beanModel.getTblComments());

		if (bean.getTblComments() != null)
		if ("java.sql.Timestamp".equals(bean.getTblComments().getClass().getName()))
			bean.setTblComments(beanModel.getTblComments());
		
		if (beanModel.getTblFax() != null)
			bean.setTblFax(beanModel.getTblFax());

		if (bean.getTblFax() != null)
		if ("java.sql.Timestamp".equals(bean.getTblFax().getClass().getName()))
			bean.setTblFax(beanModel.getTblFax());
		
		if (beanModel.getTblPhone() != null)
			bean.setTblPhone(beanModel.getTblPhone());

		if (bean.getTblPhone() != null)
		if ("java.sql.Timestamp".equals(bean.getTblPhone().getClass().getName()))
			bean.setTblPhone(beanModel.getTblPhone());
		
		if (beanModel.getTblZipCode() != null)
			bean.setTblZipCode(beanModel.getTblZipCode());

		if (bean.getTblZipCode() != null)
		if ("java.sql.Timestamp".equals(bean.getTblZipCode().getClass().getName()))
			bean.setTblZipCode(beanModel.getTblZipCode());
		
		if (beanModel.getTblAddress() != null)
			bean.setTblAddress(beanModel.getTblAddress());

		if (bean.getTblAddress() != null)
		if ("java.sql.Timestamp".equals(bean.getTblAddress().getClass().getName()))
			bean.setTblAddress(beanModel.getTblAddress());
		
		if (beanModel.getTblCity() != null)
			bean.setTblCity(beanModel.getTblCity());

		if (bean.getTblCity() != null)
		if ("java.sql.Timestamp".equals(bean.getTblCity().getClass().getName()))
			bean.setTblCity(beanModel.getTblCity());
		
		if (beanModel.getTblProvince() != null)
			bean.setTblProvince(beanModel.getTblProvince());

		if (bean.getTblProvince() != null)
		if ("java.sql.Timestamp".equals(bean.getTblProvince().getClass().getName()))
			bean.setTblProvince(beanModel.getTblProvince());
		
		if (beanModel.getTblCountry() != null)
			bean.setTblCountry(beanModel.getTblCountry());

		if (bean.getTblCountry() != null)
		if ("java.sql.Timestamp".equals(bean.getTblCountry().getClass().getName()))
			bean.setTblCountry(beanModel.getTblCountry());
		
		if (beanModel.getTblName() != null)
			bean.setTblName(beanModel.getTblName());

		if (bean.getTblName() != null)
		if ("java.sql.Timestamp".equals(bean.getTblName().getClass().getName()))
			bean.setTblName(beanModel.getTblName());
		
		if (beanModel.getTblLocationId() != null)
			bean.setTblLocationId(beanModel.getTblLocationId());

		if (bean.getTblLocationId() != null)
		if ("java.sql.Timestamp".equals(bean.getTblLocationId().getClass().getName()))
			bean.setTblLocationId(beanModel.getTblLocationId());
		
		if (beanModel.getTblId() != null)
			bean.setTblId(beanModel.getTblId());

		if (bean.getTblId() != null)
		if ("java.sql.Timestamp".equals(bean.getTblId().getClass().getName()))
			bean.setTblId(beanModel.getTblId());
		
		if (beanModel.getTboNama() != null)
			bean.setTboNama(beanModel.getTboNama());

		if (bean.getTboNama() != null)
		if ("java.sql.Timestamp".equals(bean.getTboNama().getClass().getName()))
			bean.setTboNama(beanModel.getTboNama());
		
		if (beanModel.getTboParentId() != null)
			bean.setTboParentId(beanModel.getTboParentId());

		if (bean.getTboParentId() != null)
		if ("java.sql.Timestamp".equals(bean.getTboParentId().getClass().getName()))
			bean.setTboParentId(beanModel.getTboParentId());
		
		if (beanModel.getTboId() != null)
			bean.setTboId(beanModel.getTboId());

		if (bean.getTboId() != null)
		if ("java.sql.Timestamp".equals(bean.getTboId().getClass().getName()))
			bean.setTboId(beanModel.getTboId());
		
		if (beanModel.getTbesName() != null)
			bean.setTbesName(beanModel.getTbesName());

		if (bean.getTbesName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbesName().getClass().getName()))
			bean.setTbesName(beanModel.getTbesName());
		
		if (beanModel.getTbesEmploymentStatusId() != null)
			bean.setTbesEmploymentStatusId(beanModel.getTbesEmploymentStatusId());

		if (bean.getTbesEmploymentStatusId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbesEmploymentStatusId().getClass().getName()))
			bean.setTbesEmploymentStatusId(beanModel.getTbesEmploymentStatusId());
		
		if (beanModel.getTbesId() != null)
			bean.setTbesId(beanModel.getTbesId());

		if (bean.getTbesId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbesId().getClass().getName()))
			bean.setTbesId(beanModel.getTbesId());
		
		if (beanModel.getTbjJoinedDate() != null)
			bean.setTbjJoinedDate(beanModel.getTbjJoinedDate());

		if (bean.getTbjJoinedDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbjJoinedDate().getClass().getName()))
			bean.setTbjJoinedDate(beanModel.getTbjJoinedDate());
		
		if (beanModel.getTbjtComments() != null)
			bean.setTbjtComments(beanModel.getTbjtComments());

		if (bean.getTbjtComments() != null)
		if ("java.sql.Timestamp".equals(bean.getTbjtComments().getClass().getName()))
			bean.setTbjtComments(beanModel.getTbjtComments());
		
		if (beanModel.getTbjtDescription() != null)
			bean.setTbjtDescription(beanModel.getTbjtDescription());

		if (bean.getTbjtDescription() != null)
		if ("java.sql.Timestamp".equals(bean.getTbjtDescription().getClass().getName()))
			bean.setTbjtDescription(beanModel.getTbjtDescription());
		
		if (beanModel.getTbjtName() != null)
			bean.setTbjtName(beanModel.getTbjtName());

		if (bean.getTbjtName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbjtName().getClass().getName()))
			bean.setTbjtName(beanModel.getTbjtName());
		
		if (beanModel.getTbjtJobTitleId() != null)
			bean.setTbjtJobTitleId(beanModel.getTbjtJobTitleId());

		if (bean.getTbjtJobTitleId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbjtJobTitleId().getClass().getName()))
			bean.setTbjtJobTitleId(beanModel.getTbjtJobTitleId());
		
		if (beanModel.getTbjtId() != null)
			bean.setTbjtId(beanModel.getTbjtId());

		if (bean.getTbjtId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbjtId().getClass().getName()))
			bean.setTbjtId(beanModel.getTbjtId());
		
		if (beanModel.getTbeJoinedDate() != null)
			bean.setTbeJoinedDate(beanModel.getTbeJoinedDate());

		if (bean.getTbeJoinedDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeJoinedDate().getClass().getName()))
			bean.setTbeJoinedDate(beanModel.getTbeJoinedDate());
		
		if (beanModel.getTbeStatus() != null)
			bean.setTbeStatus(beanModel.getTbeStatus());

		if (bean.getTbeStatus() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeStatus().getClass().getName()))
			bean.setTbeStatus(beanModel.getTbeStatus());
		
		if (beanModel.getTbeDriverLicenseExpiry() != null)
			bean.setTbeDriverLicenseExpiry(beanModel.getTbeDriverLicenseExpiry());

		if (bean.getTbeDriverLicenseExpiry() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeDriverLicenseExpiry().getClass().getName()))
			bean.setTbeDriverLicenseExpiry(beanModel.getTbeDriverLicenseExpiry());
		
		if (beanModel.getTbeDriverLicenseNo() != null)
			bean.setTbeDriverLicenseNo(beanModel.getTbeDriverLicenseNo());

		if (bean.getTbeDriverLicenseNo() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeDriverLicenseNo().getClass().getName()))
			bean.setTbeDriverLicenseNo(beanModel.getTbeDriverLicenseNo());
		
		if (beanModel.getTbeGender() != null)
			bean.setTbeGender(beanModel.getTbeGender());

		if (bean.getTbeGender() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeGender().getClass().getName()))
			bean.setTbeGender(beanModel.getTbeGender());
		
		if (beanModel.getTbeSmoker() != null)
			bean.setTbeSmoker(beanModel.getTbeSmoker());

		if (bean.getTbeSmoker() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeSmoker().getClass().getName()))
			bean.setTbeSmoker(beanModel.getTbeSmoker());
		
		if (beanModel.getTbeMaritalStatus() != null)
			bean.setTbeMaritalStatus(beanModel.getTbeMaritalStatus());

		if (bean.getTbeMaritalStatus() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeMaritalStatus().getClass().getName()))
			bean.setTbeMaritalStatus(beanModel.getTbeMaritalStatus());
		
		if (beanModel.getTbeDob() != null)
			bean.setTbeDob(beanModel.getTbeDob());

		if (bean.getTbeDob() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeDob().getClass().getName()))
			bean.setTbeDob(beanModel.getTbeDob());
		
		if (beanModel.getTbeIdNo() != null)
			bean.setTbeIdNo(beanModel.getTbeIdNo());

		if (bean.getTbeIdNo() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeIdNo().getClass().getName()))
			bean.setTbeIdNo(beanModel.getTbeIdNo());
		
		if (beanModel.getTbePhotoFileName() != null)
			bean.setTbePhotoFileName(beanModel.getTbePhotoFileName());

		if (bean.getTbePhotoFileName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbePhotoFileName().getClass().getName()))
			bean.setTbePhotoFileName(beanModel.getTbePhotoFileName());
		
		if (beanModel.getTbeName() != null)
			bean.setTbeName(beanModel.getTbeName());

		if (bean.getTbeName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeName().getClass().getName()))
			bean.setTbeName(beanModel.getTbeName());
		
		if (beanModel.getTbeNickName() != null)
			bean.setTbeNickName(beanModel.getTbeNickName());

		if (bean.getTbeNickName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeNickName().getClass().getName()))
			bean.setTbeNickName(beanModel.getTbeNickName());
		
		if (beanModel.getTbeLastName() != null)
			bean.setTbeLastName(beanModel.getTbeLastName());

		if (bean.getTbeLastName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeLastName().getClass().getName()))
			bean.setTbeLastName(beanModel.getTbeLastName());
		
		if (beanModel.getTbeMiddleName() != null)
			bean.setTbeMiddleName(beanModel.getTbeMiddleName());

		if (bean.getTbeMiddleName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeMiddleName().getClass().getName()))
			bean.setTbeMiddleName(beanModel.getTbeMiddleName());
		
		if (beanModel.getTbeFirstName() != null)
			bean.setTbeFirstName(beanModel.getTbeFirstName());

		if (bean.getTbeFirstName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeFirstName().getClass().getName()))
			bean.setTbeFirstName(beanModel.getTbeFirstName());
		
		if (beanModel.getTbeEmployeeId() != null)
			bean.setTbeEmployeeId(beanModel.getTbeEmployeeId());

		if (bean.getTbeEmployeeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeEmployeeId().getClass().getName()))
			bean.setTbeEmployeeId(beanModel.getTbeEmployeeId());
		
		if (beanModel.getTbeEmail() != null)
			bean.setTbeEmail(beanModel.getTbeEmail());

		if (bean.getTbeEmail() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeEmail().getClass().getName()))
			bean.setTbeEmail(beanModel.getTbeEmail());
		
		if (beanModel.getTbeId() != null)
			bean.setTbeId(beanModel.getTbeId());

		if (bean.getTbeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeId().getClass().getName()))
			bean.setTbeId(beanModel.getTbeId());
		
        return bean;
    }
	
    //29AA
    public ViewEmployeeInformationBean[] toBeans(ViewEmployeeInformationBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	ViewEmployeeInformationBean beans[] = new ViewEmployeeInformationBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public ViewEmployeeInformationBeanModel toBeanModel(ViewEmployeeInformationBean bean)
    {
    	ViewEmployeeInformationBeanModel beanModel = new ViewEmployeeInformationBeanModel();
		beanModel.setTbpName(bean.getTbpName());
		beanModel.setTbpPerusahaanId(bean.getTbpPerusahaanId());
		beanModel.setTbpId(bean.getTbpId());
		beanModel.setTblComments(bean.getTblComments());
		beanModel.setTblFax(bean.getTblFax());
		beanModel.setTblPhone(bean.getTblPhone());
		beanModel.setTblZipCode(bean.getTblZipCode());
		beanModel.setTblAddress(bean.getTblAddress());
		beanModel.setTblCity(bean.getTblCity());
		beanModel.setTblProvince(bean.getTblProvince());
		beanModel.setTblCountry(bean.getTblCountry());
		beanModel.setTblName(bean.getTblName());
		beanModel.setTblLocationId(bean.getTblLocationId());
		beanModel.setTblId(bean.getTblId());
		beanModel.setTboNama(bean.getTboNama());
		beanModel.setTboParentId(bean.getTboParentId());
		beanModel.setTboId(bean.getTboId());
		beanModel.setTbesName(bean.getTbesName());
		beanModel.setTbesEmploymentStatusId(bean.getTbesEmploymentStatusId());
		beanModel.setTbesId(bean.getTbesId());
		beanModel.setTbjJoinedDate(bean.getTbjJoinedDate());
		beanModel.setTbjtComments(bean.getTbjtComments());
		beanModel.setTbjtDescription(bean.getTbjtDescription());
		beanModel.setTbjtName(bean.getTbjtName());
		beanModel.setTbjtJobTitleId(bean.getTbjtJobTitleId());
		beanModel.setTbjtId(bean.getTbjtId());
		beanModel.setTbeJoinedDate(bean.getTbeJoinedDate());
		beanModel.setTbeStatus(bean.getTbeStatus());
		beanModel.setTbeDriverLicenseExpiry(bean.getTbeDriverLicenseExpiry());
		beanModel.setTbeDriverLicenseNo(bean.getTbeDriverLicenseNo());
		beanModel.setTbeGender(bean.getTbeGender());
		beanModel.setTbeSmoker(bean.getTbeSmoker());
		beanModel.setTbeMaritalStatus(bean.getTbeMaritalStatus());
		beanModel.setTbeDob(bean.getTbeDob());
		beanModel.setTbeIdNo(bean.getTbeIdNo());
		beanModel.setTbePhotoFileName(bean.getTbePhotoFileName());
		beanModel.setTbeName(bean.getTbeName());
		beanModel.setTbeNickName(bean.getTbeNickName());
		beanModel.setTbeLastName(bean.getTbeLastName());
		beanModel.setTbeMiddleName(bean.getTbeMiddleName());
		beanModel.setTbeFirstName(bean.getTbeFirstName());
		beanModel.setTbeEmployeeId(bean.getTbeEmployeeId());
		beanModel.setTbeEmail(bean.getTbeEmail());
		beanModel.setTbeId(bean.getTbeId());
		return beanModel;
    }
    
    //29CC
    public ViewEmployeeInformationBeanModel[] toBeanModels(ViewEmployeeInformationBean beans[])
    {
    	int beansCount = beans.length;
    	ViewEmployeeInformationBeanModel beanModels[] = new ViewEmployeeInformationBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the view_employee_information table on a ViewEmployeeInformationBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting ViewEmployeeInformationBean bean
     * @throws DAOException
     */
    //30
    public ViewEmployeeInformationBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        ViewEmployeeInformationBean bean = this.createViewEmployeeInformationBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBP_NAME:
                        ++pos;
                        bean.setTbpName(rs.getString(pos));
                        break;
                    case ID_TBP_PERUSAHAAN_ID:
                        ++pos;
                        bean.setTbpPerusahaanId(rs.getString(pos));
                        break;
                    case ID_TBP_ID:
                        ++pos;
                        bean.setTbpId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBL_COMMENTS:
                        ++pos;
                        bean.setTblComments(rs.getString(pos));
                        break;
                    case ID_TBL_FAX:
                        ++pos;
                        bean.setTblFax(rs.getString(pos));
                        break;
                    case ID_TBL_PHONE:
                        ++pos;
                        bean.setTblPhone(rs.getString(pos));
                        break;
                    case ID_TBL_ZIP_CODE:
                        ++pos;
                        bean.setTblZipCode(rs.getString(pos));
                        break;
                    case ID_TBL_ADDRESS:
                        ++pos;
                        bean.setTblAddress(rs.getString(pos));
                        break;
                    case ID_TBL_CITY:
                        ++pos;
                        bean.setTblCity(rs.getString(pos));
                        break;
                    case ID_TBL_PROVINCE:
                        ++pos;
                        bean.setTblProvince(rs.getString(pos));
                        break;
                    case ID_TBL_COUNTRY:
                        ++pos;
                        bean.setTblCountry(rs.getString(pos));
                        break;
                    case ID_TBL_NAME:
                        ++pos;
                        bean.setTblName(rs.getString(pos));
                        break;
                    case ID_TBL_LOCATION_ID:
                        ++pos;
                        bean.setTblLocationId(rs.getString(pos));
                        break;
                    case ID_TBL_ID:
                        ++pos;
                        bean.setTblId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBO_NAMA:
                        ++pos;
                        bean.setTboNama(rs.getString(pos));
                        break;
                    case ID_TBO_PARENT_ID:
                        ++pos;
                        bean.setTboParentId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBO_ID:
                        ++pos;
                        bean.setTboId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBES_NAME:
                        ++pos;
                        bean.setTbesName(rs.getString(pos));
                        break;
                    case ID_TBES_EMPLOYMENT_STATUS_ID:
                        ++pos;
                        bean.setTbesEmploymentStatusId(rs.getString(pos));
                        break;
                    case ID_TBES_ID:
                        ++pos;
                        bean.setTbesId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBJ_JOINED_DATE:
                        ++pos;
                        bean.setTbjJoinedDate(rs.getTimestamp(pos));
                        break;
                    case ID_TBJT_COMMENTS:
                        ++pos;
                        bean.setTbjtComments(rs.getString(pos));
                        break;
                    case ID_TBJT_DESCRIPTION:
                        ++pos;
                        bean.setTbjtDescription(rs.getString(pos));
                        break;
                    case ID_TBJT_NAME:
                        ++pos;
                        bean.setTbjtName(rs.getString(pos));
                        break;
                    case ID_TBJT_JOB_TITLE_ID:
                        ++pos;
                        bean.setTbjtJobTitleId(rs.getString(pos));
                        break;
                    case ID_TBJT_ID:
                        ++pos;
                        bean.setTbjtId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_JOINED_DATE:
                        ++pos;
                        bean.setTbeJoinedDate(rs.getTimestamp(pos));
                        break;
                    case ID_TBE_STATUS:
                        ++pos;
                        bean.setTbeStatus(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_DRIVER_LICENSE_EXPIRY:
                        ++pos;
                        bean.setTbeDriverLicenseExpiry(rs.getTimestamp(pos));
                        break;
                    case ID_TBE_DRIVER_LICENSE_NO:
                        ++pos;
                        bean.setTbeDriverLicenseNo(rs.getString(pos));
                        break;
                    case ID_TBE_GENDER:
                        ++pos;
                        bean.setTbeGender(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_SMOKER:
                        ++pos;
                        bean.setTbeSmoker(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_MARITAL_STATUS:
                        ++pos;
                        bean.setTbeMaritalStatus(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_DOB:
                        ++pos;
                        bean.setTbeDob(rs.getTimestamp(pos));
                        break;
                    case ID_TBE_ID_NO:
                        ++pos;
                        bean.setTbeIdNo(rs.getString(pos));
                        break;
                    case ID_TBE_PHOTO_FILE_NAME:
                        ++pos;
                        bean.setTbePhotoFileName(rs.getString(pos));
                        break;
                    case ID_TBE_NAME:
                        ++pos;
                        bean.setTbeName(rs.getString(pos));
                        break;
                    case ID_TBE_NICK_NAME:
                        ++pos;
                        bean.setTbeNickName(rs.getString(pos));
                        break;
                    case ID_TBE_LAST_NAME:
                        ++pos;
                        bean.setTbeLastName(rs.getString(pos));
                        break;
                    case ID_TBE_MIDDLE_NAME:
                        ++pos;
                        bean.setTbeMiddleName(rs.getString(pos));
                        break;
                    case ID_TBE_FIRST_NAME:
                        ++pos;
                        bean.setTbeFirstName(rs.getString(pos));
                        break;
                    case ID_TBE_EMPLOYEE_ID:
                        ++pos;
                        bean.setTbeEmployeeId(rs.getString(pos));
                        break;
                    case ID_TBE_EMAIL:
                        ++pos;
                        bean.setTbeEmail(rs.getString(pos));
                        break;
                    case ID_TBE_ID:
                        ++pos;
                        bean.setTbeId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the view_employee_information on a ViewEmployeeInformationBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewEmployeeInformationBean bean
     * @throws DAOException
     */
    //31
    public ViewEmployeeInformationBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        ViewEmployeeInformationBean bean = this.createViewEmployeeInformationBean();
        try
        {
            bean.setTbpName(rs.getString("tbp_name"));
            bean.setTbpPerusahaanId(rs.getString("tbp_perusahaan_id"));
            bean.setTbpId(Manager.getInteger(rs, "tbp_id"));
            bean.setTblComments(rs.getString("tbl_comments"));
            bean.setTblFax(rs.getString("tbl_fax"));
            bean.setTblPhone(rs.getString("tbl_phone"));
            bean.setTblZipCode(rs.getString("tbl_zip_code"));
            bean.setTblAddress(rs.getString("tbl_address"));
            bean.setTblCity(rs.getString("tbl_city"));
            bean.setTblProvince(rs.getString("tbl_province"));
            bean.setTblCountry(rs.getString("tbl_country"));
            bean.setTblName(rs.getString("tbl_name"));
            bean.setTblLocationId(rs.getString("tbl_location_id"));
            bean.setTblId(Manager.getInteger(rs, "tbl_id"));
            bean.setTboNama(rs.getString("tbo_nama"));
            bean.setTboParentId(Manager.getInteger(rs, "tbo_parent_id"));
            bean.setTboId(Manager.getInteger(rs, "tbo_id"));
            bean.setTbesName(rs.getString("tbes_name"));
            bean.setTbesEmploymentStatusId(rs.getString("tbes_employment_status_id"));
            bean.setTbesId(Manager.getInteger(rs, "tbes_id"));
            bean.setTbjJoinedDate(rs.getTimestamp("tbj_joined_date"));
            bean.setTbjtComments(rs.getString("tbjt_comments"));
            bean.setTbjtDescription(rs.getString("tbjt_description"));
            bean.setTbjtName(rs.getString("tbjt_name"));
            bean.setTbjtJobTitleId(rs.getString("tbjt_job_title_id"));
            bean.setTbjtId(Manager.getInteger(rs, "tbjt_id"));
            bean.setTbeJoinedDate(rs.getTimestamp("tbe_joined_date"));
            bean.setTbeStatus(Manager.getInteger(rs, "tbe_status"));
            bean.setTbeDriverLicenseExpiry(rs.getTimestamp("tbe_driver_license_expiry"));
            bean.setTbeDriverLicenseNo(rs.getString("tbe_driver_license_no"));
            bean.setTbeGender(Manager.getInteger(rs, "tbe_gender"));
            bean.setTbeSmoker(Manager.getInteger(rs, "tbe_smoker"));
            bean.setTbeMaritalStatus(Manager.getInteger(rs, "tbe_marital_status"));
            bean.setTbeDob(rs.getTimestamp("tbe_dob"));
            bean.setTbeIdNo(rs.getString("tbe_id_no"));
            bean.setTbePhotoFileName(rs.getString("tbe_photo_file_name"));
            bean.setTbeName(rs.getString("tbe_name"));
            bean.setTbeNickName(rs.getString("tbe_nick_name"));
            bean.setTbeLastName(rs.getString("tbe_last_name"));
            bean.setTbeMiddleName(rs.getString("tbe_middle_name"));
            bean.setTbeFirstName(rs.getString("tbe_first_name"));
            bean.setTbeEmployeeId(rs.getString("tbe_employee_id"));
            bean.setTbeEmail(rs.getString("tbe_email"));
            bean.setTbeId(Manager.getInteger(rs, "tbe_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ViewEmployeeInformationBean
     * @throws DAOException
     */
    //32
    public ViewEmployeeInformationBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ViewEmployeeInformationBean
     * @throws DAOException
     */
    //33
    public ViewEmployeeInformationBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (ViewEmployeeInformationBean[])v.toArray(new ViewEmployeeInformationBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of ViewEmployeeInformationBean
     * @throws DAOException
     */
    //34
    public ViewEmployeeInformationBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private ViewEmployeeInformationListener listener = null;

    /**
     * Registers a unique ViewEmployeeInformationListener listener.
     */
    //35
    public void registerListener(ViewEmployeeInformationListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the ViewEmployeeInformationBean bean.
     *
     * @param bean the ViewEmployeeInformationBean bean to be saved
     */
    //36
    private void beforeInsert(ViewEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the ViewEmployeeInformationBean bean.
     *
     * @param bean the ViewEmployeeInformationBean bean to be saved
     */
    //37
    private void afterInsert(ViewEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the ViewEmployeeInformationBean bean.
     *
     * @param bean the ViewEmployeeInformationBean bean to be updated
     */
    //38
    private void beforeUpdate(ViewEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the ViewEmployeeInformationBean bean.
     *
     * @param bean the ViewEmployeeInformationBean bean to be updated
     */
    //39
    private void afterUpdate(ViewEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the ViewEmployeeInformationBean bean.
     *
     * @param bean the ViewEmployeeInformationBean bean to be deleted
     */
    private void beforeDelete(ViewEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the ViewEmployeeInformationBean bean.
     *
     * @param bean the ViewEmployeeInformationBean bean to be deleted
     */
    private void afterDelete(ViewEmployeeInformationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
