// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewEmployeeLicensesBean is a mapping of view_employee_licenses Table.
 * @author sql2java
*/
public class ViewEmployeeLicensesBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 7803573393794460435L;
	
    private java.sql.Timestamp tbalEndDate;

    private boolean tbalEndDateIsModified = false;
    private boolean tbalEndDateIsInitialized = false;

    private java.sql.Timestamp tbalStartDate;

    private boolean tbalStartDateIsModified = false;
    private boolean tbalStartDateIsInitialized = false;

    private Integer tbalId;

    private boolean tbalIdIsModified = false;
    private boolean tbalIdIsInitialized = false;

    private String tblDescription;

    private boolean tblDescriptionIsModified = false;
    private boolean tblDescriptionIsInitialized = false;

    private String tblName;

    private boolean tblNameIsModified = false;
    private boolean tblNameIsInitialized = false;

    private String tblLicensesId;

    private boolean tblLicensesIdIsModified = false;
    private boolean tblLicensesIdIsInitialized = false;

    private Integer tblId;

    private boolean tblIdIsModified = false;
    private boolean tblIdIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private String tbeNickName;

    private boolean tbeNickNameIsModified = false;
    private boolean tbeNickNameIsInitialized = false;

    private String tbeLastName;

    private boolean tbeLastNameIsModified = false;
    private boolean tbeLastNameIsInitialized = false;

    private String tbeMiddleName;

    private boolean tbeMiddleNameIsModified = false;
    private boolean tbeMiddleNameIsInitialized = false;

    private String tbeFirstName;

    private boolean tbeFirstNameIsModified = false;
    private boolean tbeFirstNameIsInitialized = false;

    private String tbeEmployeeId;

    private boolean tbeEmployeeIdIsModified = false;
    private boolean tbeEmployeeIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewEmployeeLicensesBean is via the createViewEmployeeLicensesBean method in ViewEmployeeLicensesManager or
     * via the factory class ViewEmployeeLicensesFactory create method
     */
    protected ViewEmployeeLicensesBean()
    {
    }

    /**
     * Getter method for tbalEndDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbal_end_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbalEndDate
     */
    public java.sql.Timestamp getTbalEndDate()
    {
        return tbalEndDate;
    }

    /**
     * Setter method for tbalEndDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbalEndDate
     */
    public void setTbalEndDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbalEndDate != null && (newVal.compareTo(tbalEndDate) == 0)) ||
            (newVal == null && tbalEndDate == null && tbalEndDateIsInitialized)) {
            return;
        }
        tbalEndDate = newVal;
        tbalEndDateIsModified = true;
        tbalEndDateIsInitialized = true;
    }

    /**
     * Setter method for tbalEndDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbalEndDate
     */
    public void setTbalEndDate(long newVal)
    {
        setTbalEndDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbalEndDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbalEndDateModified()
    {
        return tbalEndDateIsModified;
    }

    /**
     * Determines if the tbalEndDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbalEndDateInitialized()
    {
        return tbalEndDateIsInitialized;
    }

    /**
     * Getter method for tbalStartDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbal_start_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbalStartDate
     */
    public java.sql.Timestamp getTbalStartDate()
    {
        return tbalStartDate;
    }

    /**
     * Setter method for tbalStartDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbalStartDate
     */
    public void setTbalStartDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbalStartDate != null && (newVal.compareTo(tbalStartDate) == 0)) ||
            (newVal == null && tbalStartDate == null && tbalStartDateIsInitialized)) {
            return;
        }
        tbalStartDate = newVal;
        tbalStartDateIsModified = true;
        tbalStartDateIsInitialized = true;
    }

    /**
     * Setter method for tbalStartDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbalStartDate
     */
    public void setTbalStartDate(long newVal)
    {
        setTbalStartDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbalStartDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbalStartDateModified()
    {
        return tbalStartDateIsModified;
    }

    /**
     * Determines if the tbalStartDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbalStartDateInitialized()
    {
        return tbalStartDateIsInitialized;
    }

    /**
     * Getter method for tbalId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbal_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbalId
     */
    public Integer getTbalId()
    {
        return tbalId;
    }

    /**
     * Setter method for tbalId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbalId
     */
    public void setTbalId(Integer newVal)
    {
        if ((newVal != null && tbalId != null && (newVal.compareTo(tbalId) == 0)) ||
            (newVal == null && tbalId == null && tbalIdIsInitialized)) {
            return;
        }
        tbalId = newVal;
        tbalIdIsModified = true;
        tbalIdIsInitialized = true;
    }

    /**
     * Setter method for tbalId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbalId
     */
    public void setTbalId(int newVal)
    {
        setTbalId(new Integer(newVal));
    }

    /**
     * Determines if the tbalId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbalIdModified()
    {
        return tbalIdIsModified;
    }

    /**
     * Determines if the tbalId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbalIdInitialized()
    {
        return tbalIdIsInitialized;
    }

    /**
     * Getter method for tblDescription.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbl_description</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblDescription
     */
    public String getTblDescription()
    {
        return tblDescription;
    }

    /**
     * Setter method for tblDescription.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblDescription
     */
    public void setTblDescription(String newVal)
    {
        if ((newVal != null && tblDescription != null && (newVal.compareTo(tblDescription) == 0)) ||
            (newVal == null && tblDescription == null && tblDescriptionIsInitialized)) {
            return;
        }
        tblDescription = newVal;
        tblDescriptionIsModified = true;
        tblDescriptionIsInitialized = true;
    }

    /**
     * Determines if the tblDescription has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblDescriptionModified()
    {
        return tblDescriptionIsModified;
    }

    /**
     * Determines if the tblDescription has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblDescriptionInitialized()
    {
        return tblDescriptionIsInitialized;
    }

    /**
     * Getter method for tblName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbl_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblName
     */
    public String getTblName()
    {
        return tblName;
    }

    /**
     * Setter method for tblName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblName
     */
    public void setTblName(String newVal)
    {
        if ((newVal != null && tblName != null && (newVal.compareTo(tblName) == 0)) ||
            (newVal == null && tblName == null && tblNameIsInitialized)) {
            return;
        }
        tblName = newVal;
        tblNameIsModified = true;
        tblNameIsInitialized = true;
    }

    /**
     * Determines if the tblName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblNameModified()
    {
        return tblNameIsModified;
    }

    /**
     * Determines if the tblName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblNameInitialized()
    {
        return tblNameIsInitialized;
    }

    /**
     * Getter method for tblLicensesId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbl_licenses_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblLicensesId
     */
    public String getTblLicensesId()
    {
        return tblLicensesId;
    }

    /**
     * Setter method for tblLicensesId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblLicensesId
     */
    public void setTblLicensesId(String newVal)
    {
        if ((newVal != null && tblLicensesId != null && (newVal.compareTo(tblLicensesId) == 0)) ||
            (newVal == null && tblLicensesId == null && tblLicensesIdIsInitialized)) {
            return;
        }
        tblLicensesId = newVal;
        tblLicensesIdIsModified = true;
        tblLicensesIdIsInitialized = true;
    }

    /**
     * Determines if the tblLicensesId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblLicensesIdModified()
    {
        return tblLicensesIdIsModified;
    }

    /**
     * Determines if the tblLicensesId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblLicensesIdInitialized()
    {
        return tblLicensesIdIsInitialized;
    }

    /**
     * Getter method for tblId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbl_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tblId
     */
    public Integer getTblId()
    {
        return tblId;
    }

    /**
     * Setter method for tblId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblId
     */
    public void setTblId(Integer newVal)
    {
        if ((newVal != null && tblId != null && (newVal.compareTo(tblId) == 0)) ||
            (newVal == null && tblId == null && tblIdIsInitialized)) {
            return;
        }
        tblId = newVal;
        tblIdIsModified = true;
        tblIdIsInitialized = true;
    }

    /**
     * Setter method for tblId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tblId
     */
    public void setTblId(int newVal)
    {
        setTblId(new Integer(newVal));
    }

    /**
     * Determines if the tblId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblIdModified()
    {
        return tblIdIsModified;
    }

    /**
     * Determines if the tblId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblIdInitialized()
    {
        return tblIdIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeNickName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbe_nick_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeNickName
     */
    public String getTbeNickName()
    {
        return tbeNickName;
    }

    /**
     * Setter method for tbeNickName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeNickName
     */
    public void setTbeNickName(String newVal)
    {
        if ((newVal != null && tbeNickName != null && (newVal.compareTo(tbeNickName) == 0)) ||
            (newVal == null && tbeNickName == null && tbeNickNameIsInitialized)) {
            return;
        }
        tbeNickName = newVal;
        tbeNickNameIsModified = true;
        tbeNickNameIsInitialized = true;
    }

    /**
     * Determines if the tbeNickName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNickNameModified()
    {
        return tbeNickNameIsModified;
    }

    /**
     * Determines if the tbeNickName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNickNameInitialized()
    {
        return tbeNickNameIsInitialized;
    }

    /**
     * Getter method for tbeLastName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbe_last_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeLastName
     */
    public String getTbeLastName()
    {
        return tbeLastName;
    }

    /**
     * Setter method for tbeLastName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeLastName
     */
    public void setTbeLastName(String newVal)
    {
        if ((newVal != null && tbeLastName != null && (newVal.compareTo(tbeLastName) == 0)) ||
            (newVal == null && tbeLastName == null && tbeLastNameIsInitialized)) {
            return;
        }
        tbeLastName = newVal;
        tbeLastNameIsModified = true;
        tbeLastNameIsInitialized = true;
    }

    /**
     * Determines if the tbeLastName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeLastNameModified()
    {
        return tbeLastNameIsModified;
    }

    /**
     * Determines if the tbeLastName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeLastNameInitialized()
    {
        return tbeLastNameIsInitialized;
    }

    /**
     * Getter method for tbeMiddleName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbe_middle_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeMiddleName
     */
    public String getTbeMiddleName()
    {
        return tbeMiddleName;
    }

    /**
     * Setter method for tbeMiddleName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeMiddleName
     */
    public void setTbeMiddleName(String newVal)
    {
        if ((newVal != null && tbeMiddleName != null && (newVal.compareTo(tbeMiddleName) == 0)) ||
            (newVal == null && tbeMiddleName == null && tbeMiddleNameIsInitialized)) {
            return;
        }
        tbeMiddleName = newVal;
        tbeMiddleNameIsModified = true;
        tbeMiddleNameIsInitialized = true;
    }

    /**
     * Determines if the tbeMiddleName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeMiddleNameModified()
    {
        return tbeMiddleNameIsModified;
    }

    /**
     * Determines if the tbeMiddleName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeMiddleNameInitialized()
    {
        return tbeMiddleNameIsInitialized;
    }

    /**
     * Getter method for tbeFirstName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbe_first_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeFirstName
     */
    public String getTbeFirstName()
    {
        return tbeFirstName;
    }

    /**
     * Setter method for tbeFirstName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeFirstName
     */
    public void setTbeFirstName(String newVal)
    {
        if ((newVal != null && tbeFirstName != null && (newVal.compareTo(tbeFirstName) == 0)) ||
            (newVal == null && tbeFirstName == null && tbeFirstNameIsInitialized)) {
            return;
        }
        tbeFirstName = newVal;
        tbeFirstNameIsModified = true;
        tbeFirstNameIsInitialized = true;
    }

    /**
     * Determines if the tbeFirstName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeFirstNameModified()
    {
        return tbeFirstNameIsModified;
    }

    /**
     * Determines if the tbeFirstName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeFirstNameInitialized()
    {
        return tbeFirstNameIsInitialized;
    }

    /**
     * Getter method for tbeEmployeeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbe_employee_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEmployeeId
     */
    public String getTbeEmployeeId()
    {
        return tbeEmployeeId;
    }

    /**
     * Setter method for tbeEmployeeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEmployeeId
     */
    public void setTbeEmployeeId(String newVal)
    {
        if ((newVal != null && tbeEmployeeId != null && (newVal.compareTo(tbeEmployeeId) == 0)) ||
            (newVal == null && tbeEmployeeId == null && tbeEmployeeIdIsInitialized)) {
            return;
        }
        tbeEmployeeId = newVal;
        tbeEmployeeIdIsModified = true;
        tbeEmployeeIdIsInitialized = true;
    }

    /**
     * Determines if the tbeEmployeeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEmployeeIdModified()
    {
        return tbeEmployeeIdIsModified;
    }

    /**
     * Determines if the tbeEmployeeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEmployeeIdInitialized()
    {
        return tbeEmployeeIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_licenses.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbalEndDateIsModified 		|| tbalStartDateIsModified  		|| tbalIdIsModified  		|| tblDescriptionIsModified  		|| tblNameIsModified  		|| tblLicensesIdIsModified  		|| tblIdIsModified  		|| tbeNameIsModified  		|| tbeNickNameIsModified  		|| tbeLastNameIsModified  		|| tbeMiddleNameIsModified  		|| tbeFirstNameIsModified  		|| tbeEmployeeIdIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbalEndDateIsModified = false;
        tbalStartDateIsModified = false;
        tbalIdIsModified = false;
        tblDescriptionIsModified = false;
        tblNameIsModified = false;
        tblLicensesIdIsModified = false;
        tblIdIsModified = false;
        tbeNameIsModified = false;
        tbeNickNameIsModified = false;
        tbeLastNameIsModified = false;
        tbeMiddleNameIsModified = false;
        tbeFirstNameIsModified = false;
        tbeEmployeeIdIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewEmployeeLicensesBean bean)
    {
        setTbalEndDate(bean.getTbalEndDate());
        setTbalStartDate(bean.getTbalStartDate());
        setTbalId(bean.getTbalId());
        setTblDescription(bean.getTblDescription());
        setTblName(bean.getTblName());
        setTblLicensesId(bean.getTblLicensesId());
        setTblId(bean.getTblId());
        setTbeName(bean.getTbeName());
        setTbeNickName(bean.getTbeNickName());
        setTbeLastName(bean.getTbeLastName());
        setTbeMiddleName(bean.getTbeMiddleName());
        setTbeFirstName(bean.getTbeFirstName());
        setTbeEmployeeId(bean.getTbeEmployeeId());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbal_end_date", getTbalEndDate() == null ? "" : getTbalEndDate().toString());
        dictionnary.put("tbal_start_date", getTbalStartDate() == null ? "" : getTbalStartDate().toString());
        dictionnary.put("tbal_id", getTbalId() == null ? "" : getTbalId().toString());
        dictionnary.put("tbl_description", getTblDescription() == null ? "" : getTblDescription().toString());
        dictionnary.put("tbl_name", getTblName() == null ? "" : getTblName().toString());
        dictionnary.put("tbl_licenses_id", getTblLicensesId() == null ? "" : getTblLicensesId().toString());
        dictionnary.put("tbl_id", getTblId() == null ? "" : getTblId().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_nick_name", getTbeNickName() == null ? "" : getTbeNickName().toString());
        dictionnary.put("tbe_last_name", getTbeLastName() == null ? "" : getTbeLastName().toString());
        dictionnary.put("tbe_middle_name", getTbeMiddleName() == null ? "" : getTbeMiddleName().toString());
        dictionnary.put("tbe_first_name", getTbeFirstName() == null ? "" : getTbeFirstName().toString());
        dictionnary.put("tbe_employee_id", getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbal_end_date".equalsIgnoreCase(column) || "tbalEndDate".equalsIgnoreCase(column)) {
            return getTbalEndDate() == null ? "" : getTbalEndDate().toString();
        } else if ("tbal_start_date".equalsIgnoreCase(column) || "tbalStartDate".equalsIgnoreCase(column)) {
            return getTbalStartDate() == null ? "" : getTbalStartDate().toString();
        } else if ("tbal_id".equalsIgnoreCase(column) || "tbalId".equalsIgnoreCase(column)) {
            return getTbalId() == null ? "" : getTbalId().toString();
        } else if ("tbl_description".equalsIgnoreCase(column) || "tblDescription".equalsIgnoreCase(column)) {
            return getTblDescription() == null ? "" : getTblDescription().toString();
        } else if ("tbl_name".equalsIgnoreCase(column) || "tblName".equalsIgnoreCase(column)) {
            return getTblName() == null ? "" : getTblName().toString();
        } else if ("tbl_licenses_id".equalsIgnoreCase(column) || "tblLicensesId".equalsIgnoreCase(column)) {
            return getTblLicensesId() == null ? "" : getTblLicensesId().toString();
        } else if ("tbl_id".equalsIgnoreCase(column) || "tblId".equalsIgnoreCase(column)) {
            return getTblId() == null ? "" : getTblId().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_nick_name".equalsIgnoreCase(column) || "tbeNickName".equalsIgnoreCase(column)) {
            return getTbeNickName() == null ? "" : getTbeNickName().toString();
        } else if ("tbe_last_name".equalsIgnoreCase(column) || "tbeLastName".equalsIgnoreCase(column)) {
            return getTbeLastName() == null ? "" : getTbeLastName().toString();
        } else if ("tbe_middle_name".equalsIgnoreCase(column) || "tbeMiddleName".equalsIgnoreCase(column)) {
            return getTbeMiddleName() == null ? "" : getTbeMiddleName().toString();
        } else if ("tbe_first_name".equalsIgnoreCase(column) || "tbeFirstName".equalsIgnoreCase(column)) {
            return getTbeFirstName() == null ? "" : getTbeFirstName().toString();
        } else if ("tbe_employee_id".equalsIgnoreCase(column) || "tbeEmployeeId".equalsIgnoreCase(column)) {
            return getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewEmployeeLicensesBean)) {
            return false;
        }

		ViewEmployeeLicensesBean obj = (ViewEmployeeLicensesBean) object;
		return new EqualsBuilder()
            .append(getTbalEndDate(), obj.getTbalEndDate())
            .append(getTbalStartDate(), obj.getTbalStartDate())
            .append(getTbalId(), obj.getTbalId())
            .append(getTblDescription(), obj.getTblDescription())
            .append(getTblName(), obj.getTblName())
            .append(getTblLicensesId(), obj.getTblLicensesId())
            .append(getTblId(), obj.getTblId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeNickName(), obj.getTbeNickName())
            .append(getTbeLastName(), obj.getTbeLastName())
            .append(getTbeMiddleName(), obj.getTbeMiddleName())
            .append(getTbeFirstName(), obj.getTbeFirstName())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbalEndDate())
            .append(getTbalStartDate())
            .append(getTbalId())
            .append(getTblDescription())
            .append(getTblName())
            .append(getTblLicensesId())
            .append(getTblId())
            .append(getTbeName())
            .append(getTbeNickName())
            .append(getTbeLastName())
            .append(getTbeMiddleName())
            .append(getTbeFirstName())
            .append(getTbeEmployeeId())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbal_end_date", getTbalEndDate())
            .append("tbal_start_date", getTbalStartDate())
            .append("tbal_id", getTbalId())
            .append("tbl_description", getTblDescription())
            .append("tbl_name", getTblName())
            .append("tbl_licenses_id", getTblLicensesId())
            .append("tbl_id", getTblId())
            .append("tbe_name", getTbeName())
            .append("tbe_nick_name", getTbeNickName())
            .append("tbe_last_name", getTbeLastName())
            .append("tbe_middle_name", getTbeMiddleName())
            .append("tbe_first_name", getTbeFirstName())
            .append("tbe_employee_id", getTbeEmployeeId())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewEmployeeLicensesBean obj = (ViewEmployeeLicensesBean) object;
        return new CompareToBuilder()
            .append(getTbalEndDate(), obj.getTbalEndDate())
            .append(getTbalStartDate(), obj.getTbalStartDate())
            .append(getTbalId(), obj.getTbalId())
            .append(getTblDescription(), obj.getTblDescription())
            .append(getTblName(), obj.getTblName())
            .append(getTblLicensesId(), obj.getTblLicensesId())
            .append(getTblId(), obj.getTblId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeNickName(), obj.getTbeNickName())
            .append(getTbeLastName(), obj.getTbeLastName())
            .append(getTbeMiddleName(), obj.getTbeMiddleName())
            .append(getTbeFirstName(), obj.getTbeFirstName())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
