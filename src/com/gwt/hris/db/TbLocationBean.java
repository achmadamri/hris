// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbLocationBean is a mapping of tb_location Table.
 * @author sql2java
*/
public class TbLocationBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 1229980767026324598L;
	
    private String tblComments;

    private boolean tblCommentsIsModified = false;
    private boolean tblCommentsIsInitialized = false;

    private String tblFax;

    private boolean tblFaxIsModified = false;
    private boolean tblFaxIsInitialized = false;

    private String tblPhone;

    private boolean tblPhoneIsModified = false;
    private boolean tblPhoneIsInitialized = false;

    private String tblZipCode;

    private boolean tblZipCodeIsModified = false;
    private boolean tblZipCodeIsInitialized = false;

    private String tblAddress;

    private boolean tblAddressIsModified = false;
    private boolean tblAddressIsInitialized = false;

    private String tblCity;

    private boolean tblCityIsModified = false;
    private boolean tblCityIsInitialized = false;

    private String tblProvince;

    private boolean tblProvinceIsModified = false;
    private boolean tblProvinceIsInitialized = false;

    private Integer fkTbnId;

    private boolean fkTbnIdIsModified = false;
    private boolean fkTbnIdIsInitialized = false;

    private String tblCountry;

    private boolean tblCountryIsModified = false;
    private boolean tblCountryIsInitialized = false;

    private String tblName;

    private boolean tblNameIsModified = false;
    private boolean tblNameIsInitialized = false;

    private String tblLocationId;

    private boolean tblLocationIdIsModified = false;
    private boolean tblLocationIdIsInitialized = false;

    private Integer tbpId;

    private boolean tbpIdIsModified = false;
    private boolean tbpIdIsInitialized = false;

    private Integer tblId;

    private boolean tblIdIsModified = false;
    private boolean tblIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbLocationBean is via the createTbLocationBean method in TbLocationManager or
     * via the factory class TbLocationFactory create method
     */
    protected TbLocationBean()
    {
    }

    /**
     * Getter method for tblComments.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbl_comments</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblComments
     */
    public String getTblComments()
    {
        return tblComments;
    }

    /**
     * Setter method for tblComments.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblComments
     */
    public void setTblComments(String newVal)
    {
        if ((newVal != null && tblComments != null && (newVal.compareTo(tblComments) == 0)) ||
            (newVal == null && tblComments == null && tblCommentsIsInitialized)) {
            return;
        }
        tblComments = newVal;
        tblCommentsIsModified = true;
        tblCommentsIsInitialized = true;
    }

    /**
     * Determines if the tblComments has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblCommentsModified()
    {
        return tblCommentsIsModified;
    }

    /**
     * Determines if the tblComments has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblCommentsInitialized()
    {
        return tblCommentsIsInitialized;
    }

    /**
     * Getter method for tblFax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbl_fax</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblFax
     */
    public String getTblFax()
    {
        return tblFax;
    }

    /**
     * Setter method for tblFax.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblFax
     */
    public void setTblFax(String newVal)
    {
        if ((newVal != null && tblFax != null && (newVal.compareTo(tblFax) == 0)) ||
            (newVal == null && tblFax == null && tblFaxIsInitialized)) {
            return;
        }
        tblFax = newVal;
        tblFaxIsModified = true;
        tblFaxIsInitialized = true;
    }

    /**
     * Determines if the tblFax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblFaxModified()
    {
        return tblFaxIsModified;
    }

    /**
     * Determines if the tblFax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblFaxInitialized()
    {
        return tblFaxIsInitialized;
    }

    /**
     * Getter method for tblPhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbl_phone</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblPhone
     */
    public String getTblPhone()
    {
        return tblPhone;
    }

    /**
     * Setter method for tblPhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblPhone
     */
    public void setTblPhone(String newVal)
    {
        if ((newVal != null && tblPhone != null && (newVal.compareTo(tblPhone) == 0)) ||
            (newVal == null && tblPhone == null && tblPhoneIsInitialized)) {
            return;
        }
        tblPhone = newVal;
        tblPhoneIsModified = true;
        tblPhoneIsInitialized = true;
    }

    /**
     * Determines if the tblPhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblPhoneModified()
    {
        return tblPhoneIsModified;
    }

    /**
     * Determines if the tblPhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblPhoneInitialized()
    {
        return tblPhoneIsInitialized;
    }

    /**
     * Getter method for tblZipCode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbl_zip_code</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblZipCode
     */
    public String getTblZipCode()
    {
        return tblZipCode;
    }

    /**
     * Setter method for tblZipCode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblZipCode
     */
    public void setTblZipCode(String newVal)
    {
        if ((newVal != null && tblZipCode != null && (newVal.compareTo(tblZipCode) == 0)) ||
            (newVal == null && tblZipCode == null && tblZipCodeIsInitialized)) {
            return;
        }
        tblZipCode = newVal;
        tblZipCodeIsModified = true;
        tblZipCodeIsInitialized = true;
    }

    /**
     * Determines if the tblZipCode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblZipCodeModified()
    {
        return tblZipCodeIsModified;
    }

    /**
     * Determines if the tblZipCode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblZipCodeInitialized()
    {
        return tblZipCodeIsInitialized;
    }

    /**
     * Getter method for tblAddress.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbl_address</li>
     * <li>column size: 200</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblAddress
     */
    public String getTblAddress()
    {
        return tblAddress;
    }

    /**
     * Setter method for tblAddress.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblAddress
     */
    public void setTblAddress(String newVal)
    {
        if ((newVal != null && tblAddress != null && (newVal.compareTo(tblAddress) == 0)) ||
            (newVal == null && tblAddress == null && tblAddressIsInitialized)) {
            return;
        }
        tblAddress = newVal;
        tblAddressIsModified = true;
        tblAddressIsInitialized = true;
    }

    /**
     * Determines if the tblAddress has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblAddressModified()
    {
        return tblAddressIsModified;
    }

    /**
     * Determines if the tblAddress has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblAddressInitialized()
    {
        return tblAddressIsInitialized;
    }

    /**
     * Getter method for tblCity.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbl_city</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblCity
     */
    public String getTblCity()
    {
        return tblCity;
    }

    /**
     * Setter method for tblCity.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblCity
     */
    public void setTblCity(String newVal)
    {
        if ((newVal != null && tblCity != null && (newVal.compareTo(tblCity) == 0)) ||
            (newVal == null && tblCity == null && tblCityIsInitialized)) {
            return;
        }
        tblCity = newVal;
        tblCityIsModified = true;
        tblCityIsInitialized = true;
    }

    /**
     * Determines if the tblCity has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblCityModified()
    {
        return tblCityIsModified;
    }

    /**
     * Determines if the tblCity has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblCityInitialized()
    {
        return tblCityIsInitialized;
    }

    /**
     * Getter method for tblProvince.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbl_province</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblProvince
     */
    public String getTblProvince()
    {
        return tblProvince;
    }

    /**
     * Setter method for tblProvince.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblProvince
     */
    public void setTblProvince(String newVal)
    {
        if ((newVal != null && tblProvince != null && (newVal.compareTo(tblProvince) == 0)) ||
            (newVal == null && tblProvince == null && tblProvinceIsInitialized)) {
            return;
        }
        tblProvince = newVal;
        tblProvinceIsModified = true;
        tblProvinceIsInitialized = true;
    }

    /**
     * Determines if the tblProvince has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblProvinceModified()
    {
        return tblProvinceIsModified;
    }

    /**
     * Determines if the tblProvince has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblProvinceInitialized()
    {
        return tblProvinceIsInitialized;
    }

    /**
     * Getter method for fkTbnId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.fk_tbn_id</li>
     * <li> foreign key: tb_negara.tbn_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of fkTbnId
     */
    public Integer getFkTbnId()
    {
        return fkTbnId;
    }

    /**
     * Setter method for fkTbnId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to fkTbnId
     */
    public void setFkTbnId(Integer newVal)
    {
        if ((newVal != null && fkTbnId != null && (newVal.compareTo(fkTbnId) == 0)) ||
            (newVal == null && fkTbnId == null && fkTbnIdIsInitialized)) {
            return;
        }
        fkTbnId = newVal;
        fkTbnIdIsModified = true;
        fkTbnIdIsInitialized = true;
    }

    /**
     * Setter method for fkTbnId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to fkTbnId
     */
    public void setFkTbnId(int newVal)
    {
        setFkTbnId(new Integer(newVal));
    }

    /**
     * Determines if the fkTbnId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isFkTbnIdModified()
    {
        return fkTbnIdIsModified;
    }

    /**
     * Determines if the fkTbnId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isFkTbnIdInitialized()
    {
        return fkTbnIdIsInitialized;
    }

    /**
     * Getter method for tblCountry.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbl_country</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblCountry
     */
    public String getTblCountry()
    {
        return tblCountry;
    }

    /**
     * Setter method for tblCountry.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblCountry
     */
    public void setTblCountry(String newVal)
    {
        if ((newVal != null && tblCountry != null && (newVal.compareTo(tblCountry) == 0)) ||
            (newVal == null && tblCountry == null && tblCountryIsInitialized)) {
            return;
        }
        tblCountry = newVal;
        tblCountryIsModified = true;
        tblCountryIsInitialized = true;
    }

    /**
     * Determines if the tblCountry has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblCountryModified()
    {
        return tblCountryIsModified;
    }

    /**
     * Determines if the tblCountry has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblCountryInitialized()
    {
        return tblCountryIsInitialized;
    }

    /**
     * Getter method for tblName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbl_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblName
     */
    public String getTblName()
    {
        return tblName;
    }

    /**
     * Setter method for tblName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblName
     */
    public void setTblName(String newVal)
    {
        if ((newVal != null && tblName != null && (newVal.compareTo(tblName) == 0)) ||
            (newVal == null && tblName == null && tblNameIsInitialized)) {
            return;
        }
        tblName = newVal;
        tblNameIsModified = true;
        tblNameIsInitialized = true;
    }

    /**
     * Determines if the tblName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblNameModified()
    {
        return tblNameIsModified;
    }

    /**
     * Determines if the tblName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblNameInitialized()
    {
        return tblNameIsInitialized;
    }

    /**
     * Getter method for tblLocationId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbl_location_id</li>
     * <li>comments: NAME+ID</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblLocationId
     */
    public String getTblLocationId()
    {
        return tblLocationId;
    }

    /**
     * Setter method for tblLocationId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblLocationId
     */
    public void setTblLocationId(String newVal)
    {
        if ((newVal != null && tblLocationId != null && (newVal.compareTo(tblLocationId) == 0)) ||
            (newVal == null && tblLocationId == null && tblLocationIdIsInitialized)) {
            return;
        }
        tblLocationId = newVal;
        tblLocationIdIsModified = true;
        tblLocationIdIsInitialized = true;
    }

    /**
     * Determines if the tblLocationId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblLocationIdModified()
    {
        return tblLocationIdIsModified;
    }

    /**
     * Determines if the tblLocationId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblLocationIdInitialized()
    {
        return tblLocationIdIsInitialized;
    }

    /**
     * Getter method for tbpId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbp_id</li>
     * <li> foreign key: tb_perusahaan.tbp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpId
     */
    public Integer getTbpId()
    {
        return tbpId;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(Integer newVal)
    {
        if ((newVal != null && tbpId != null && (newVal.compareTo(tbpId) == 0)) ||
            (newVal == null && tbpId == null && tbpIdIsInitialized)) {
            return;
        }
        tbpId = newVal;
        tbpIdIsModified = true;
        tbpIdIsInitialized = true;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(int newVal)
    {
        setTbpId(new Integer(newVal));
    }

    /**
     * Determines if the tbpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpIdModified()
    {
        return tbpIdIsModified;
    }

    /**
     * Determines if the tbpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpIdInitialized()
    {
        return tbpIdIsInitialized;
    }

    /**
     * Getter method for tblId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_location.tbl_id</li>
     * <li> imported key: tb_job.tbl_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tblId
     */
    public Integer getTblId()
    {
        return tblId;
    }

    /**
     * Setter method for tblId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblId
     */
    public void setTblId(Integer newVal)
    {
        if ((newVal != null && tblId != null && (newVal.compareTo(tblId) == 0)) ||
            (newVal == null && tblId == null && tblIdIsInitialized)) {
            return;
        }
        tblId = newVal;
        tblIdIsModified = true;
        tblIdIsInitialized = true;
    }

    /**
     * Setter method for tblId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tblId
     */
    public void setTblId(int newVal)
    {
        setTblId(new Integer(newVal));
    }

    /**
     * Determines if the tblId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblIdModified()
    {
        return tblIdIsModified;
    }

    /**
     * Determines if the tblId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblIdInitialized()
    {
        return tblIdIsInitialized;
    }

    /** The TbNegara referenced by this bean. */
    private TbNegaraBean referencedTbNegara;
    /** Getter method for TbNegaraBean. */
    public TbNegaraBean getTbNegaraBean() {
        return this.referencedTbNegara;
    }
    /** Setter method for TbNegaraBean. */
    public void setTbNegaraBean(TbNegaraBean reference) {
        this.referencedTbNegara = reference;
    }
    
    /** The TbPerusahaan referenced by this bean. */
    private TbPerusahaanBean referencedTbPerusahaan;
    /** Getter method for TbPerusahaanBean. */
    public TbPerusahaanBean getTbPerusahaanBean() {
        return this.referencedTbPerusahaan;
    }
    /** Setter method for TbPerusahaanBean. */
    public void setTbPerusahaanBean(TbPerusahaanBean reference) {
        this.referencedTbPerusahaan = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tblCommentsIsModified 		|| tblFaxIsModified  		|| tblPhoneIsModified  		|| tblZipCodeIsModified  		|| tblAddressIsModified  		|| tblCityIsModified  		|| tblProvinceIsModified  		|| fkTbnIdIsModified  		|| tblCountryIsModified  		|| tblNameIsModified  		|| tblLocationIdIsModified  		|| tbpIdIsModified  		|| tblIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tblCommentsIsModified = false;
        tblFaxIsModified = false;
        tblPhoneIsModified = false;
        tblZipCodeIsModified = false;
        tblAddressIsModified = false;
        tblCityIsModified = false;
        tblProvinceIsModified = false;
        fkTbnIdIsModified = false;
        tblCountryIsModified = false;
        tblNameIsModified = false;
        tblLocationIdIsModified = false;
        tbpIdIsModified = false;
        tblIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbLocationBean bean)
    {
        setTblComments(bean.getTblComments());
        setTblFax(bean.getTblFax());
        setTblPhone(bean.getTblPhone());
        setTblZipCode(bean.getTblZipCode());
        setTblAddress(bean.getTblAddress());
        setTblCity(bean.getTblCity());
        setTblProvince(bean.getTblProvince());
        setFkTbnId(bean.getFkTbnId());
        setTblCountry(bean.getTblCountry());
        setTblName(bean.getTblName());
        setTblLocationId(bean.getTblLocationId());
        setTbpId(bean.getTbpId());
        setTblId(bean.getTblId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbl_comments", getTblComments() == null ? "" : getTblComments().toString());
        dictionnary.put("tbl_fax", getTblFax() == null ? "" : getTblFax().toString());
        dictionnary.put("tbl_phone", getTblPhone() == null ? "" : getTblPhone().toString());
        dictionnary.put("tbl_zip_code", getTblZipCode() == null ? "" : getTblZipCode().toString());
        dictionnary.put("tbl_address", getTblAddress() == null ? "" : getTblAddress().toString());
        dictionnary.put("tbl_city", getTblCity() == null ? "" : getTblCity().toString());
        dictionnary.put("tbl_province", getTblProvince() == null ? "" : getTblProvince().toString());
        dictionnary.put("fk_tbn_id", getFkTbnId() == null ? "" : getFkTbnId().toString());
        dictionnary.put("tbl_country", getTblCountry() == null ? "" : getTblCountry().toString());
        dictionnary.put("tbl_name", getTblName() == null ? "" : getTblName().toString());
        dictionnary.put("tbl_location_id", getTblLocationId() == null ? "" : getTblLocationId().toString());
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        dictionnary.put("tbl_id", getTblId() == null ? "" : getTblId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbl_id", getTblId() == null ? "" : getTblId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbl_comments".equalsIgnoreCase(column) || "tblComments".equalsIgnoreCase(column)) {
            return getTblComments() == null ? "" : getTblComments().toString();
        } else if ("tbl_fax".equalsIgnoreCase(column) || "tblFax".equalsIgnoreCase(column)) {
            return getTblFax() == null ? "" : getTblFax().toString();
        } else if ("tbl_phone".equalsIgnoreCase(column) || "tblPhone".equalsIgnoreCase(column)) {
            return getTblPhone() == null ? "" : getTblPhone().toString();
        } else if ("tbl_zip_code".equalsIgnoreCase(column) || "tblZipCode".equalsIgnoreCase(column)) {
            return getTblZipCode() == null ? "" : getTblZipCode().toString();
        } else if ("tbl_address".equalsIgnoreCase(column) || "tblAddress".equalsIgnoreCase(column)) {
            return getTblAddress() == null ? "" : getTblAddress().toString();
        } else if ("tbl_city".equalsIgnoreCase(column) || "tblCity".equalsIgnoreCase(column)) {
            return getTblCity() == null ? "" : getTblCity().toString();
        } else if ("tbl_province".equalsIgnoreCase(column) || "tblProvince".equalsIgnoreCase(column)) {
            return getTblProvince() == null ? "" : getTblProvince().toString();
        } else if ("fk_tbn_id".equalsIgnoreCase(column) || "fkTbnId".equalsIgnoreCase(column)) {
            return getFkTbnId() == null ? "" : getFkTbnId().toString();
        } else if ("tbl_country".equalsIgnoreCase(column) || "tblCountry".equalsIgnoreCase(column)) {
            return getTblCountry() == null ? "" : getTblCountry().toString();
        } else if ("tbl_name".equalsIgnoreCase(column) || "tblName".equalsIgnoreCase(column)) {
            return getTblName() == null ? "" : getTblName().toString();
        } else if ("tbl_location_id".equalsIgnoreCase(column) || "tblLocationId".equalsIgnoreCase(column)) {
            return getTblLocationId() == null ? "" : getTblLocationId().toString();
        } else if ("tbp_id".equalsIgnoreCase(column) || "tbpId".equalsIgnoreCase(column)) {
            return getTbpId() == null ? "" : getTbpId().toString();
        } else if ("tbl_id".equalsIgnoreCase(column) || "tblId".equalsIgnoreCase(column)) {
            return getTblId() == null ? "" : getTblId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbLocationBean)) {
            return false;
        }

		TbLocationBean obj = (TbLocationBean) object;
		return new EqualsBuilder()
            .append(getTblComments(), obj.getTblComments())
            .append(getTblFax(), obj.getTblFax())
            .append(getTblPhone(), obj.getTblPhone())
            .append(getTblZipCode(), obj.getTblZipCode())
            .append(getTblAddress(), obj.getTblAddress())
            .append(getTblCity(), obj.getTblCity())
            .append(getTblProvince(), obj.getTblProvince())
            .append(getFkTbnId(), obj.getFkTbnId())
            .append(getTblCountry(), obj.getTblCountry())
            .append(getTblName(), obj.getTblName())
            .append(getTblLocationId(), obj.getTblLocationId())
            .append(getTbpId(), obj.getTbpId())
            .append(getTblId(), obj.getTblId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTblComments())
            .append(getTblFax())
            .append(getTblPhone())
            .append(getTblZipCode())
            .append(getTblAddress())
            .append(getTblCity())
            .append(getTblProvince())
            .append(getFkTbnId())
            .append(getTblCountry())
            .append(getTblName())
            .append(getTblLocationId())
            .append(getTbpId())
            .append(getTblId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbl_comments", getTblComments())
            .append("tbl_fax", getTblFax())
            .append("tbl_phone", getTblPhone())
            .append("tbl_zip_code", getTblZipCode())
            .append("tbl_address", getTblAddress())
            .append("tbl_city", getTblCity())
            .append("tbl_province", getTblProvince())
            .append("fk_tbn_id", getFkTbnId())
            .append("tbl_country", getTblCountry())
            .append("tbl_name", getTblName())
            .append("tbl_location_id", getTblLocationId())
            .append("tbp_id", getTbpId())
            .append("tbl_id", getTblId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbLocationBean obj = (TbLocationBean) object;
        return new CompareToBuilder()
            .append(getTblComments(), obj.getTblComments())
            .append(getTblFax(), obj.getTblFax())
            .append(getTblPhone(), obj.getTblPhone())
            .append(getTblZipCode(), obj.getTblZipCode())
            .append(getTblAddress(), obj.getTblAddress())
            .append(getTblCity(), obj.getTblCity())
            .append(getTblProvince(), obj.getTblProvince())
            .append(getFkTbnId(), obj.getFkTbnId())
            .append(getTblCountry(), obj.getTblCountry())
            .append(getTblName(), obj.getTblName())
            .append(getTblLocationId(), obj.getTblLocationId())
            .append(getTbpId(), obj.getTbpId())
            .append(getTblId(), obj.getTblId())
            .toComparison();
   }
}
