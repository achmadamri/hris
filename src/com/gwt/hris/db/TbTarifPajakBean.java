// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbTarifPajakBean is a mapping of tb_tarif_pajak Table.
 * @author sql2java
*/
public class TbTarifPajakBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -4706594956444383291L;
	
    private Integer tbtpNonNpwp;

    private boolean tbtpNonNpwpIsModified = false;
    private boolean tbtpNonNpwpIsInitialized = false;

    private Integer tbtpNpwp;

    private boolean tbtpNpwpIsModified = false;
    private boolean tbtpNpwpIsInitialized = false;

    private Double tbtpPkpSampai;

    private boolean tbtpPkpSampaiIsModified = false;
    private boolean tbtpPkpSampaiIsInitialized = false;

    private Double tbtpPkpDari;

    private boolean tbtpPkpDariIsModified = false;
    private boolean tbtpPkpDariIsInitialized = false;

    private Integer tbtpId;

    private boolean tbtpIdIsModified = false;
    private boolean tbtpIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbTarifPajakBean is via the createTbTarifPajakBean method in TbTarifPajakManager or
     * via the factory class TbTarifPajakFactory create method
     */
    protected TbTarifPajakBean()
    {
    }

    /**
     * Getter method for tbtpNonNpwp.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_tarif_pajak.tbtp_non_npwp</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbtpNonNpwp
     */
    public Integer getTbtpNonNpwp()
    {
        return tbtpNonNpwp;
    }

    /**
     * Setter method for tbtpNonNpwp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbtpNonNpwp
     */
    public void setTbtpNonNpwp(Integer newVal)
    {
        if ((newVal != null && tbtpNonNpwp != null && (newVal.compareTo(tbtpNonNpwp) == 0)) ||
            (newVal == null && tbtpNonNpwp == null && tbtpNonNpwpIsInitialized)) {
            return;
        }
        tbtpNonNpwp = newVal;
        tbtpNonNpwpIsModified = true;
        tbtpNonNpwpIsInitialized = true;
    }

    /**
     * Setter method for tbtpNonNpwp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbtpNonNpwp
     */
    public void setTbtpNonNpwp(int newVal)
    {
        setTbtpNonNpwp(new Integer(newVal));
    }

    /**
     * Determines if the tbtpNonNpwp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbtpNonNpwpModified()
    {
        return tbtpNonNpwpIsModified;
    }

    /**
     * Determines if the tbtpNonNpwp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbtpNonNpwpInitialized()
    {
        return tbtpNonNpwpIsInitialized;
    }

    /**
     * Getter method for tbtpNpwp.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_tarif_pajak.tbtp_npwp</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbtpNpwp
     */
    public Integer getTbtpNpwp()
    {
        return tbtpNpwp;
    }

    /**
     * Setter method for tbtpNpwp.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbtpNpwp
     */
    public void setTbtpNpwp(Integer newVal)
    {
        if ((newVal != null && tbtpNpwp != null && (newVal.compareTo(tbtpNpwp) == 0)) ||
            (newVal == null && tbtpNpwp == null && tbtpNpwpIsInitialized)) {
            return;
        }
        tbtpNpwp = newVal;
        tbtpNpwpIsModified = true;
        tbtpNpwpIsInitialized = true;
    }

    /**
     * Setter method for tbtpNpwp.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbtpNpwp
     */
    public void setTbtpNpwp(int newVal)
    {
        setTbtpNpwp(new Integer(newVal));
    }

    /**
     * Determines if the tbtpNpwp has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbtpNpwpModified()
    {
        return tbtpNpwpIsModified;
    }

    /**
     * Determines if the tbtpNpwp has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbtpNpwpInitialized()
    {
        return tbtpNpwpIsInitialized;
    }

    /**
     * Getter method for tbtpPkpSampai.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_tarif_pajak.tbtp_pkp_sampai</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbtpPkpSampai
     */
    public Double getTbtpPkpSampai()
    {
        return tbtpPkpSampai;
    }

    /**
     * Setter method for tbtpPkpSampai.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbtpPkpSampai
     */
    public void setTbtpPkpSampai(Double newVal)
    {
        if ((newVal != null && tbtpPkpSampai != null && (newVal.compareTo(tbtpPkpSampai) == 0)) ||
            (newVal == null && tbtpPkpSampai == null && tbtpPkpSampaiIsInitialized)) {
            return;
        }
        tbtpPkpSampai = newVal;
        tbtpPkpSampaiIsModified = true;
        tbtpPkpSampaiIsInitialized = true;
    }

    /**
     * Setter method for tbtpPkpSampai.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbtpPkpSampai
     */
    public void setTbtpPkpSampai(double newVal)
    {
        setTbtpPkpSampai(new Double(newVal));
    }

    /**
     * Determines if the tbtpPkpSampai has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbtpPkpSampaiModified()
    {
        return tbtpPkpSampaiIsModified;
    }

    /**
     * Determines if the tbtpPkpSampai has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbtpPkpSampaiInitialized()
    {
        return tbtpPkpSampaiIsInitialized;
    }

    /**
     * Getter method for tbtpPkpDari.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_tarif_pajak.tbtp_pkp_dari</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbtpPkpDari
     */
    public Double getTbtpPkpDari()
    {
        return tbtpPkpDari;
    }

    /**
     * Setter method for tbtpPkpDari.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbtpPkpDari
     */
    public void setTbtpPkpDari(Double newVal)
    {
        if ((newVal != null && tbtpPkpDari != null && (newVal.compareTo(tbtpPkpDari) == 0)) ||
            (newVal == null && tbtpPkpDari == null && tbtpPkpDariIsInitialized)) {
            return;
        }
        tbtpPkpDari = newVal;
        tbtpPkpDariIsModified = true;
        tbtpPkpDariIsInitialized = true;
    }

    /**
     * Setter method for tbtpPkpDari.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbtpPkpDari
     */
    public void setTbtpPkpDari(double newVal)
    {
        setTbtpPkpDari(new Double(newVal));
    }

    /**
     * Determines if the tbtpPkpDari has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbtpPkpDariModified()
    {
        return tbtpPkpDariIsModified;
    }

    /**
     * Determines if the tbtpPkpDari has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbtpPkpDariInitialized()
    {
        return tbtpPkpDariIsInitialized;
    }

    /**
     * Getter method for tbtpId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_tarif_pajak.tbtp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbtpId
     */
    public Integer getTbtpId()
    {
        return tbtpId;
    }

    /**
     * Setter method for tbtpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbtpId
     */
    public void setTbtpId(Integer newVal)
    {
        if ((newVal != null && tbtpId != null && (newVal.compareTo(tbtpId) == 0)) ||
            (newVal == null && tbtpId == null && tbtpIdIsInitialized)) {
            return;
        }
        tbtpId = newVal;
        tbtpIdIsModified = true;
        tbtpIdIsInitialized = true;
    }

    /**
     * Setter method for tbtpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbtpId
     */
    public void setTbtpId(int newVal)
    {
        setTbtpId(new Integer(newVal));
    }

    /**
     * Determines if the tbtpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbtpIdModified()
    {
        return tbtpIdIsModified;
    }

    /**
     * Determines if the tbtpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbtpIdInitialized()
    {
        return tbtpIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbtpNonNpwpIsModified 		|| tbtpNpwpIsModified  		|| tbtpPkpSampaiIsModified  		|| tbtpPkpDariIsModified  		|| tbtpIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbtpNonNpwpIsModified = false;
        tbtpNpwpIsModified = false;
        tbtpPkpSampaiIsModified = false;
        tbtpPkpDariIsModified = false;
        tbtpIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbTarifPajakBean bean)
    {
        setTbtpNonNpwp(bean.getTbtpNonNpwp());
        setTbtpNpwp(bean.getTbtpNpwp());
        setTbtpPkpSampai(bean.getTbtpPkpSampai());
        setTbtpPkpDari(bean.getTbtpPkpDari());
        setTbtpId(bean.getTbtpId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbtp_non_npwp", getTbtpNonNpwp() == null ? "" : getTbtpNonNpwp().toString());
        dictionnary.put("tbtp_npwp", getTbtpNpwp() == null ? "" : getTbtpNpwp().toString());
        dictionnary.put("tbtp_pkp_sampai", getTbtpPkpSampai() == null ? "" : getTbtpPkpSampai().toString());
        dictionnary.put("tbtp_pkp_dari", getTbtpPkpDari() == null ? "" : getTbtpPkpDari().toString());
        dictionnary.put("tbtp_id", getTbtpId() == null ? "" : getTbtpId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbtp_id", getTbtpId() == null ? "" : getTbtpId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbtp_non_npwp".equalsIgnoreCase(column) || "tbtpNonNpwp".equalsIgnoreCase(column)) {
            return getTbtpNonNpwp() == null ? "" : getTbtpNonNpwp().toString();
        } else if ("tbtp_npwp".equalsIgnoreCase(column) || "tbtpNpwp".equalsIgnoreCase(column)) {
            return getTbtpNpwp() == null ? "" : getTbtpNpwp().toString();
        } else if ("tbtp_pkp_sampai".equalsIgnoreCase(column) || "tbtpPkpSampai".equalsIgnoreCase(column)) {
            return getTbtpPkpSampai() == null ? "" : getTbtpPkpSampai().toString();
        } else if ("tbtp_pkp_dari".equalsIgnoreCase(column) || "tbtpPkpDari".equalsIgnoreCase(column)) {
            return getTbtpPkpDari() == null ? "" : getTbtpPkpDari().toString();
        } else if ("tbtp_id".equalsIgnoreCase(column) || "tbtpId".equalsIgnoreCase(column)) {
            return getTbtpId() == null ? "" : getTbtpId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbTarifPajakBean)) {
            return false;
        }

		TbTarifPajakBean obj = (TbTarifPajakBean) object;
		return new EqualsBuilder()
            .append(getTbtpNonNpwp(), obj.getTbtpNonNpwp())
            .append(getTbtpNpwp(), obj.getTbtpNpwp())
            .append(getTbtpPkpSampai(), obj.getTbtpPkpSampai())
            .append(getTbtpPkpDari(), obj.getTbtpPkpDari())
            .append(getTbtpId(), obj.getTbtpId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbtpNonNpwp())
            .append(getTbtpNpwp())
            .append(getTbtpPkpSampai())
            .append(getTbtpPkpDari())
            .append(getTbtpId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbtp_non_npwp", getTbtpNonNpwp())
            .append("tbtp_npwp", getTbtpNpwp())
            .append("tbtp_pkp_sampai", getTbtpPkpSampai())
            .append("tbtp_pkp_dari", getTbtpPkpDari())
            .append("tbtp_id", getTbtpId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbTarifPajakBean obj = (TbTarifPajakBean) object;
        return new CompareToBuilder()
            .append(getTbtpNonNpwp(), obj.getTbtpNonNpwp())
            .append(getTbtpNpwp(), obj.getTbtpNpwp())
            .append(getTbtpPkpSampai(), obj.getTbtpPkpSampai())
            .append(getTbtpPkpDari(), obj.getTbtpPkpDari())
            .append(getTbtpId(), obj.getTbtpId())
            .toComparison();
   }
}
