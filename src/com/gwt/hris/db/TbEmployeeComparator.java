// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbEmployeeBean objects.
 * @author sql2java
 */
public class TbEmployeeComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbEmployeeComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbEmployeeComparator(TbEmployeeManager.ID_TBPTKP_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbEmployeeManager.ID_TBPTKP_ID
     *   <li>TbEmployeeManager.ID_TBER_ID
     *   <li>TbEmployeeManager.ID_TBN_ID
     *   <li>TbEmployeeManager.ID_TBE_JOINED_DATE
     *   <li>TbEmployeeManager.ID_TBE_STATUS
     *   <li>TbEmployeeManager.ID_TBE_DRIVER_LICENSE_EXPIRY
     *   <li>TbEmployeeManager.ID_TBE_PHONE
     *   <li>TbEmployeeManager.ID_TBE_MOBILE
     *   <li>TbEmployeeManager.ID_TBE_DRIVER_LICENSE_NO
     *   <li>TbEmployeeManager.ID_TBE_GENDER
     *   <li>TbEmployeeManager.ID_TBE_SMOKER
     *   <li>TbEmployeeManager.ID_TBE_MARITAL_STATUS
     *   <li>TbEmployeeManager.ID_TBE_DOB
     *   <li>TbEmployeeManager.ID_TBE_TAX_NO_DATE
     *   <li>TbEmployeeManager.ID_TBE_TAX_NO
     *   <li>TbEmployeeManager.ID_TBE_ID_NO
     *   <li>TbEmployeeManager.ID_TBE_PHOTO_FILE_NAME
     *   <li>TbEmployeeManager.ID_TBE_NAME
     *   <li>TbEmployeeManager.ID_TBE_NICK_NAME
     *   <li>TbEmployeeManager.ID_TBE_LAST_NAME
     *   <li>TbEmployeeManager.ID_TBE_MIDDLE_NAME
     *   <li>TbEmployeeManager.ID_TBE_FIRST_NAME
     *   <li>TbEmployeeManager.ID_TBE_EMAIL
     *   <li>TbEmployeeManager.ID_TBE_EMPLOYEE_ID
     *   <li>TbEmployeeManager.ID_TBE_ID
     * </ul>
     */
    public TbEmployeeComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbEmployeeComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbEmployeeComparator(TbEmployeeManager.ID_TBPTKP_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbEmployeeManager.ID_TBPTKP_ID
     *   <li>TbEmployeeManager.ID_TBER_ID
     *   <li>TbEmployeeManager.ID_TBN_ID
     *   <li>TbEmployeeManager.ID_TBE_JOINED_DATE
     *   <li>TbEmployeeManager.ID_TBE_STATUS
     *   <li>TbEmployeeManager.ID_TBE_DRIVER_LICENSE_EXPIRY
     *   <li>TbEmployeeManager.ID_TBE_PHONE
     *   <li>TbEmployeeManager.ID_TBE_MOBILE
     *   <li>TbEmployeeManager.ID_TBE_DRIVER_LICENSE_NO
     *   <li>TbEmployeeManager.ID_TBE_GENDER
     *   <li>TbEmployeeManager.ID_TBE_SMOKER
     *   <li>TbEmployeeManager.ID_TBE_MARITAL_STATUS
     *   <li>TbEmployeeManager.ID_TBE_DOB
     *   <li>TbEmployeeManager.ID_TBE_TAX_NO_DATE
     *   <li>TbEmployeeManager.ID_TBE_TAX_NO
     *   <li>TbEmployeeManager.ID_TBE_ID_NO
     *   <li>TbEmployeeManager.ID_TBE_PHOTO_FILE_NAME
     *   <li>TbEmployeeManager.ID_TBE_NAME
     *   <li>TbEmployeeManager.ID_TBE_NICK_NAME
     *   <li>TbEmployeeManager.ID_TBE_LAST_NAME
     *   <li>TbEmployeeManager.ID_TBE_MIDDLE_NAME
     *   <li>TbEmployeeManager.ID_TBE_FIRST_NAME
     *   <li>TbEmployeeManager.ID_TBE_EMAIL
     *   <li>TbEmployeeManager.ID_TBE_EMPLOYEE_ID
     *   <li>TbEmployeeManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbEmployeeComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbEmployeeBean b1 = (TbEmployeeBean)pObj1;
        TbEmployeeBean b2 = (TbEmployeeBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbEmployeeManager.ID_TBPTKP_ID:
                if (b1.getTbptkpId() == null && b2.getTbptkpId() != null) {
                    iReturn = -1;
                } else if (b1.getTbptkpId() == null && b2.getTbptkpId() == null) {
                    iReturn = 0;
                } else if (b1.getTbptkpId() != null && b2.getTbptkpId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbptkpId().compareTo(b2.getTbptkpId());
                }
                break;
            case TbEmployeeManager.ID_TBER_ID:
                if (b1.getTberId() == null && b2.getTberId() != null) {
                    iReturn = -1;
                } else if (b1.getTberId() == null && b2.getTberId() == null) {
                    iReturn = 0;
                } else if (b1.getTberId() != null && b2.getTberId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTberId().compareTo(b2.getTberId());
                }
                break;
            case TbEmployeeManager.ID_TBN_ID:
                if (b1.getTbnId() == null && b2.getTbnId() != null) {
                    iReturn = -1;
                } else if (b1.getTbnId() == null && b2.getTbnId() == null) {
                    iReturn = 0;
                } else if (b1.getTbnId() != null && b2.getTbnId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbnId().compareTo(b2.getTbnId());
                }
                break;
            case TbEmployeeManager.ID_TBE_JOINED_DATE:
                if (b1.getTbeJoinedDate() == null && b2.getTbeJoinedDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbeJoinedDate() == null && b2.getTbeJoinedDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbeJoinedDate() != null && b2.getTbeJoinedDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeJoinedDate().compareTo(b2.getTbeJoinedDate());
                }
                break;
            case TbEmployeeManager.ID_TBE_STATUS:
                if (b1.getTbeStatus() == null && b2.getTbeStatus() != null) {
                    iReturn = -1;
                } else if (b1.getTbeStatus() == null && b2.getTbeStatus() == null) {
                    iReturn = 0;
                } else if (b1.getTbeStatus() != null && b2.getTbeStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeStatus().compareTo(b2.getTbeStatus());
                }
                break;
            case TbEmployeeManager.ID_TBE_DRIVER_LICENSE_EXPIRY:
                if (b1.getTbeDriverLicenseExpiry() == null && b2.getTbeDriverLicenseExpiry() != null) {
                    iReturn = -1;
                } else if (b1.getTbeDriverLicenseExpiry() == null && b2.getTbeDriverLicenseExpiry() == null) {
                    iReturn = 0;
                } else if (b1.getTbeDriverLicenseExpiry() != null && b2.getTbeDriverLicenseExpiry() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeDriverLicenseExpiry().compareTo(b2.getTbeDriverLicenseExpiry());
                }
                break;
            case TbEmployeeManager.ID_TBE_PHONE:
                if (b1.getTbePhone() == null && b2.getTbePhone() != null) {
                    iReturn = -1;
                } else if (b1.getTbePhone() == null && b2.getTbePhone() == null) {
                    iReturn = 0;
                } else if (b1.getTbePhone() != null && b2.getTbePhone() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbePhone().compareTo(b2.getTbePhone());
                }
                break;
            case TbEmployeeManager.ID_TBE_MOBILE:
                if (b1.getTbeMobile() == null && b2.getTbeMobile() != null) {
                    iReturn = -1;
                } else if (b1.getTbeMobile() == null && b2.getTbeMobile() == null) {
                    iReturn = 0;
                } else if (b1.getTbeMobile() != null && b2.getTbeMobile() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeMobile().compareTo(b2.getTbeMobile());
                }
                break;
            case TbEmployeeManager.ID_TBE_DRIVER_LICENSE_NO:
                if (b1.getTbeDriverLicenseNo() == null && b2.getTbeDriverLicenseNo() != null) {
                    iReturn = -1;
                } else if (b1.getTbeDriverLicenseNo() == null && b2.getTbeDriverLicenseNo() == null) {
                    iReturn = 0;
                } else if (b1.getTbeDriverLicenseNo() != null && b2.getTbeDriverLicenseNo() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeDriverLicenseNo().compareTo(b2.getTbeDriverLicenseNo());
                }
                break;
            case TbEmployeeManager.ID_TBE_GENDER:
                if (b1.getTbeGender() == null && b2.getTbeGender() != null) {
                    iReturn = -1;
                } else if (b1.getTbeGender() == null && b2.getTbeGender() == null) {
                    iReturn = 0;
                } else if (b1.getTbeGender() != null && b2.getTbeGender() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeGender().compareTo(b2.getTbeGender());
                }
                break;
            case TbEmployeeManager.ID_TBE_SMOKER:
                if (b1.getTbeSmoker() == null && b2.getTbeSmoker() != null) {
                    iReturn = -1;
                } else if (b1.getTbeSmoker() == null && b2.getTbeSmoker() == null) {
                    iReturn = 0;
                } else if (b1.getTbeSmoker() != null && b2.getTbeSmoker() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeSmoker().compareTo(b2.getTbeSmoker());
                }
                break;
            case TbEmployeeManager.ID_TBE_MARITAL_STATUS:
                if (b1.getTbeMaritalStatus() == null && b2.getTbeMaritalStatus() != null) {
                    iReturn = -1;
                } else if (b1.getTbeMaritalStatus() == null && b2.getTbeMaritalStatus() == null) {
                    iReturn = 0;
                } else if (b1.getTbeMaritalStatus() != null && b2.getTbeMaritalStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeMaritalStatus().compareTo(b2.getTbeMaritalStatus());
                }
                break;
            case TbEmployeeManager.ID_TBE_DOB:
                if (b1.getTbeDob() == null && b2.getTbeDob() != null) {
                    iReturn = -1;
                } else if (b1.getTbeDob() == null && b2.getTbeDob() == null) {
                    iReturn = 0;
                } else if (b1.getTbeDob() != null && b2.getTbeDob() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeDob().compareTo(b2.getTbeDob());
                }
                break;
            case TbEmployeeManager.ID_TBE_TAX_NO_DATE:
                if (b1.getTbeTaxNoDate() == null && b2.getTbeTaxNoDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbeTaxNoDate() == null && b2.getTbeTaxNoDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbeTaxNoDate() != null && b2.getTbeTaxNoDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeTaxNoDate().compareTo(b2.getTbeTaxNoDate());
                }
                break;
            case TbEmployeeManager.ID_TBE_TAX_NO:
                if (b1.getTbeTaxNo() == null && b2.getTbeTaxNo() != null) {
                    iReturn = -1;
                } else if (b1.getTbeTaxNo() == null && b2.getTbeTaxNo() == null) {
                    iReturn = 0;
                } else if (b1.getTbeTaxNo() != null && b2.getTbeTaxNo() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeTaxNo().compareTo(b2.getTbeTaxNo());
                }
                break;
            case TbEmployeeManager.ID_TBE_ID_NO:
                if (b1.getTbeIdNo() == null && b2.getTbeIdNo() != null) {
                    iReturn = -1;
                } else if (b1.getTbeIdNo() == null && b2.getTbeIdNo() == null) {
                    iReturn = 0;
                } else if (b1.getTbeIdNo() != null && b2.getTbeIdNo() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeIdNo().compareTo(b2.getTbeIdNo());
                }
                break;
            case TbEmployeeManager.ID_TBE_PHOTO_FILE_NAME:
                if (b1.getTbePhotoFileName() == null && b2.getTbePhotoFileName() != null) {
                    iReturn = -1;
                } else if (b1.getTbePhotoFileName() == null && b2.getTbePhotoFileName() == null) {
                    iReturn = 0;
                } else if (b1.getTbePhotoFileName() != null && b2.getTbePhotoFileName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbePhotoFileName().compareTo(b2.getTbePhotoFileName());
                }
                break;
            case TbEmployeeManager.ID_TBE_NAME:
                if (b1.getTbeName() == null && b2.getTbeName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeName() == null && b2.getTbeName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeName() != null && b2.getTbeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeName().compareTo(b2.getTbeName());
                }
                break;
            case TbEmployeeManager.ID_TBE_NICK_NAME:
                if (b1.getTbeNickName() == null && b2.getTbeNickName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeNickName() == null && b2.getTbeNickName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeNickName() != null && b2.getTbeNickName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeNickName().compareTo(b2.getTbeNickName());
                }
                break;
            case TbEmployeeManager.ID_TBE_LAST_NAME:
                if (b1.getTbeLastName() == null && b2.getTbeLastName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeLastName() == null && b2.getTbeLastName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeLastName() != null && b2.getTbeLastName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeLastName().compareTo(b2.getTbeLastName());
                }
                break;
            case TbEmployeeManager.ID_TBE_MIDDLE_NAME:
                if (b1.getTbeMiddleName() == null && b2.getTbeMiddleName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeMiddleName() == null && b2.getTbeMiddleName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeMiddleName() != null && b2.getTbeMiddleName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeMiddleName().compareTo(b2.getTbeMiddleName());
                }
                break;
            case TbEmployeeManager.ID_TBE_FIRST_NAME:
                if (b1.getTbeFirstName() == null && b2.getTbeFirstName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeFirstName() == null && b2.getTbeFirstName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeFirstName() != null && b2.getTbeFirstName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeFirstName().compareTo(b2.getTbeFirstName());
                }
                break;
            case TbEmployeeManager.ID_TBE_EMAIL:
                if (b1.getTbeEmail() == null && b2.getTbeEmail() != null) {
                    iReturn = -1;
                } else if (b1.getTbeEmail() == null && b2.getTbeEmail() == null) {
                    iReturn = 0;
                } else if (b1.getTbeEmail() != null && b2.getTbeEmail() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeEmail().compareTo(b2.getTbeEmail());
                }
                break;
            case TbEmployeeManager.ID_TBE_EMPLOYEE_ID:
                if (b1.getTbeEmployeeId() == null && b2.getTbeEmployeeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeEmployeeId() == null && b2.getTbeEmployeeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeEmployeeId() != null && b2.getTbeEmployeeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeEmployeeId().compareTo(b2.getTbeEmployeeId());
                }
                break;
            case TbEmployeeManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
