// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewEmployeeInformationBean is a mapping of view_employee_information Table.
 * @author sql2java
*/
public class ViewEmployeeInformationBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 7803573393794460435L;
	
    private String tbpName;

    private boolean tbpNameIsModified = false;
    private boolean tbpNameIsInitialized = false;

    private String tbpPerusahaanId;

    private boolean tbpPerusahaanIdIsModified = false;
    private boolean tbpPerusahaanIdIsInitialized = false;

    private Integer tbpId;

    private boolean tbpIdIsModified = false;
    private boolean tbpIdIsInitialized = false;

    private String tblComments;

    private boolean tblCommentsIsModified = false;
    private boolean tblCommentsIsInitialized = false;

    private String tblFax;

    private boolean tblFaxIsModified = false;
    private boolean tblFaxIsInitialized = false;

    private String tblPhone;

    private boolean tblPhoneIsModified = false;
    private boolean tblPhoneIsInitialized = false;

    private String tblZipCode;

    private boolean tblZipCodeIsModified = false;
    private boolean tblZipCodeIsInitialized = false;

    private String tblAddress;

    private boolean tblAddressIsModified = false;
    private boolean tblAddressIsInitialized = false;

    private String tblCity;

    private boolean tblCityIsModified = false;
    private boolean tblCityIsInitialized = false;

    private String tblProvince;

    private boolean tblProvinceIsModified = false;
    private boolean tblProvinceIsInitialized = false;

    private String tblCountry;

    private boolean tblCountryIsModified = false;
    private boolean tblCountryIsInitialized = false;

    private String tblName;

    private boolean tblNameIsModified = false;
    private boolean tblNameIsInitialized = false;

    private String tblLocationId;

    private boolean tblLocationIdIsModified = false;
    private boolean tblLocationIdIsInitialized = false;

    private Integer tblId;

    private boolean tblIdIsModified = false;
    private boolean tblIdIsInitialized = false;

    private String tboNama;

    private boolean tboNamaIsModified = false;
    private boolean tboNamaIsInitialized = false;

    private Integer tboParentId;

    private boolean tboParentIdIsModified = false;
    private boolean tboParentIdIsInitialized = false;

    private Integer tboId;

    private boolean tboIdIsModified = false;
    private boolean tboIdIsInitialized = false;

    private String tbesName;

    private boolean tbesNameIsModified = false;
    private boolean tbesNameIsInitialized = false;

    private String tbesEmploymentStatusId;

    private boolean tbesEmploymentStatusIdIsModified = false;
    private boolean tbesEmploymentStatusIdIsInitialized = false;

    private Integer tbesId;

    private boolean tbesIdIsModified = false;
    private boolean tbesIdIsInitialized = false;

    private java.sql.Timestamp tbjJoinedDate;

    private boolean tbjJoinedDateIsModified = false;
    private boolean tbjJoinedDateIsInitialized = false;

    private String tbjtComments;

    private boolean tbjtCommentsIsModified = false;
    private boolean tbjtCommentsIsInitialized = false;

    private String tbjtDescription;

    private boolean tbjtDescriptionIsModified = false;
    private boolean tbjtDescriptionIsInitialized = false;

    private String tbjtName;

    private boolean tbjtNameIsModified = false;
    private boolean tbjtNameIsInitialized = false;

    private String tbjtJobTitleId;

    private boolean tbjtJobTitleIdIsModified = false;
    private boolean tbjtJobTitleIdIsInitialized = false;

    private Integer tbjtId;

    private boolean tbjtIdIsModified = false;
    private boolean tbjtIdIsInitialized = false;

    private java.sql.Timestamp tbeJoinedDate;

    private boolean tbeJoinedDateIsModified = false;
    private boolean tbeJoinedDateIsInitialized = false;

    private Integer tbeStatus;

    private boolean tbeStatusIsModified = false;
    private boolean tbeStatusIsInitialized = false;

    private java.sql.Timestamp tbeDriverLicenseExpiry;

    private boolean tbeDriverLicenseExpiryIsModified = false;
    private boolean tbeDriverLicenseExpiryIsInitialized = false;

    private String tbeDriverLicenseNo;

    private boolean tbeDriverLicenseNoIsModified = false;
    private boolean tbeDriverLicenseNoIsInitialized = false;

    private Integer tbeGender;

    private boolean tbeGenderIsModified = false;
    private boolean tbeGenderIsInitialized = false;

    private Integer tbeSmoker;

    private boolean tbeSmokerIsModified = false;
    private boolean tbeSmokerIsInitialized = false;

    private Integer tbeMaritalStatus;

    private boolean tbeMaritalStatusIsModified = false;
    private boolean tbeMaritalStatusIsInitialized = false;

    private java.sql.Timestamp tbeDob;

    private boolean tbeDobIsModified = false;
    private boolean tbeDobIsInitialized = false;

    private String tbeIdNo;

    private boolean tbeIdNoIsModified = false;
    private boolean tbeIdNoIsInitialized = false;

    private String tbePhotoFileName;

    private boolean tbePhotoFileNameIsModified = false;
    private boolean tbePhotoFileNameIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private String tbeNickName;

    private boolean tbeNickNameIsModified = false;
    private boolean tbeNickNameIsInitialized = false;

    private String tbeLastName;

    private boolean tbeLastNameIsModified = false;
    private boolean tbeLastNameIsInitialized = false;

    private String tbeMiddleName;

    private boolean tbeMiddleNameIsModified = false;
    private boolean tbeMiddleNameIsInitialized = false;

    private String tbeFirstName;

    private boolean tbeFirstNameIsModified = false;
    private boolean tbeFirstNameIsInitialized = false;

    private String tbeEmployeeId;

    private boolean tbeEmployeeIdIsModified = false;
    private boolean tbeEmployeeIdIsInitialized = false;

    private String tbeEmail;

    private boolean tbeEmailIsModified = false;
    private boolean tbeEmailIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewEmployeeInformationBean is via the createViewEmployeeInformationBean method in ViewEmployeeInformationManager or
     * via the factory class ViewEmployeeInformationFactory create method
     */
    protected ViewEmployeeInformationBean()
    {
    }

    /**
     * Getter method for tbpName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbp_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpName
     */
    public String getTbpName()
    {
        return tbpName;
    }

    /**
     * Setter method for tbpName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpName
     */
    public void setTbpName(String newVal)
    {
        if ((newVal != null && tbpName != null && (newVal.compareTo(tbpName) == 0)) ||
            (newVal == null && tbpName == null && tbpNameIsInitialized)) {
            return;
        }
        tbpName = newVal;
        tbpNameIsModified = true;
        tbpNameIsInitialized = true;
    }

    /**
     * Determines if the tbpName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpNameModified()
    {
        return tbpNameIsModified;
    }

    /**
     * Determines if the tbpName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpNameInitialized()
    {
        return tbpNameIsInitialized;
    }

    /**
     * Getter method for tbpPerusahaanId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbp_perusahaan_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpPerusahaanId
     */
    public String getTbpPerusahaanId()
    {
        return tbpPerusahaanId;
    }

    /**
     * Setter method for tbpPerusahaanId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpPerusahaanId
     */
    public void setTbpPerusahaanId(String newVal)
    {
        if ((newVal != null && tbpPerusahaanId != null && (newVal.compareTo(tbpPerusahaanId) == 0)) ||
            (newVal == null && tbpPerusahaanId == null && tbpPerusahaanIdIsInitialized)) {
            return;
        }
        tbpPerusahaanId = newVal;
        tbpPerusahaanIdIsModified = true;
        tbpPerusahaanIdIsInitialized = true;
    }

    /**
     * Determines if the tbpPerusahaanId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpPerusahaanIdModified()
    {
        return tbpPerusahaanIdIsModified;
    }

    /**
     * Determines if the tbpPerusahaanId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpPerusahaanIdInitialized()
    {
        return tbpPerusahaanIdIsInitialized;
    }

    /**
     * Getter method for tbpId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpId
     */
    public Integer getTbpId()
    {
        return tbpId;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(Integer newVal)
    {
        if ((newVal != null && tbpId != null && (newVal.compareTo(tbpId) == 0)) ||
            (newVal == null && tbpId == null && tbpIdIsInitialized)) {
            return;
        }
        tbpId = newVal;
        tbpIdIsModified = true;
        tbpIdIsInitialized = true;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(int newVal)
    {
        setTbpId(new Integer(newVal));
    }

    /**
     * Determines if the tbpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpIdModified()
    {
        return tbpIdIsModified;
    }

    /**
     * Determines if the tbpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpIdInitialized()
    {
        return tbpIdIsInitialized;
    }

    /**
     * Getter method for tblComments.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbl_comments</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblComments
     */
    public String getTblComments()
    {
        return tblComments;
    }

    /**
     * Setter method for tblComments.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblComments
     */
    public void setTblComments(String newVal)
    {
        if ((newVal != null && tblComments != null && (newVal.compareTo(tblComments) == 0)) ||
            (newVal == null && tblComments == null && tblCommentsIsInitialized)) {
            return;
        }
        tblComments = newVal;
        tblCommentsIsModified = true;
        tblCommentsIsInitialized = true;
    }

    /**
     * Determines if the tblComments has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblCommentsModified()
    {
        return tblCommentsIsModified;
    }

    /**
     * Determines if the tblComments has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblCommentsInitialized()
    {
        return tblCommentsIsInitialized;
    }

    /**
     * Getter method for tblFax.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbl_fax</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblFax
     */
    public String getTblFax()
    {
        return tblFax;
    }

    /**
     * Setter method for tblFax.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblFax
     */
    public void setTblFax(String newVal)
    {
        if ((newVal != null && tblFax != null && (newVal.compareTo(tblFax) == 0)) ||
            (newVal == null && tblFax == null && tblFaxIsInitialized)) {
            return;
        }
        tblFax = newVal;
        tblFaxIsModified = true;
        tblFaxIsInitialized = true;
    }

    /**
     * Determines if the tblFax has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblFaxModified()
    {
        return tblFaxIsModified;
    }

    /**
     * Determines if the tblFax has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblFaxInitialized()
    {
        return tblFaxIsInitialized;
    }

    /**
     * Getter method for tblPhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbl_phone</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblPhone
     */
    public String getTblPhone()
    {
        return tblPhone;
    }

    /**
     * Setter method for tblPhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblPhone
     */
    public void setTblPhone(String newVal)
    {
        if ((newVal != null && tblPhone != null && (newVal.compareTo(tblPhone) == 0)) ||
            (newVal == null && tblPhone == null && tblPhoneIsInitialized)) {
            return;
        }
        tblPhone = newVal;
        tblPhoneIsModified = true;
        tblPhoneIsInitialized = true;
    }

    /**
     * Determines if the tblPhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblPhoneModified()
    {
        return tblPhoneIsModified;
    }

    /**
     * Determines if the tblPhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblPhoneInitialized()
    {
        return tblPhoneIsInitialized;
    }

    /**
     * Getter method for tblZipCode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbl_zip_code</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblZipCode
     */
    public String getTblZipCode()
    {
        return tblZipCode;
    }

    /**
     * Setter method for tblZipCode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblZipCode
     */
    public void setTblZipCode(String newVal)
    {
        if ((newVal != null && tblZipCode != null && (newVal.compareTo(tblZipCode) == 0)) ||
            (newVal == null && tblZipCode == null && tblZipCodeIsInitialized)) {
            return;
        }
        tblZipCode = newVal;
        tblZipCodeIsModified = true;
        tblZipCodeIsInitialized = true;
    }

    /**
     * Determines if the tblZipCode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblZipCodeModified()
    {
        return tblZipCodeIsModified;
    }

    /**
     * Determines if the tblZipCode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblZipCodeInitialized()
    {
        return tblZipCodeIsInitialized;
    }

    /**
     * Getter method for tblAddress.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbl_address</li>
     * <li>column size: 200</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblAddress
     */
    public String getTblAddress()
    {
        return tblAddress;
    }

    /**
     * Setter method for tblAddress.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblAddress
     */
    public void setTblAddress(String newVal)
    {
        if ((newVal != null && tblAddress != null && (newVal.compareTo(tblAddress) == 0)) ||
            (newVal == null && tblAddress == null && tblAddressIsInitialized)) {
            return;
        }
        tblAddress = newVal;
        tblAddressIsModified = true;
        tblAddressIsInitialized = true;
    }

    /**
     * Determines if the tblAddress has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblAddressModified()
    {
        return tblAddressIsModified;
    }

    /**
     * Determines if the tblAddress has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblAddressInitialized()
    {
        return tblAddressIsInitialized;
    }

    /**
     * Getter method for tblCity.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbl_city</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblCity
     */
    public String getTblCity()
    {
        return tblCity;
    }

    /**
     * Setter method for tblCity.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblCity
     */
    public void setTblCity(String newVal)
    {
        if ((newVal != null && tblCity != null && (newVal.compareTo(tblCity) == 0)) ||
            (newVal == null && tblCity == null && tblCityIsInitialized)) {
            return;
        }
        tblCity = newVal;
        tblCityIsModified = true;
        tblCityIsInitialized = true;
    }

    /**
     * Determines if the tblCity has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblCityModified()
    {
        return tblCityIsModified;
    }

    /**
     * Determines if the tblCity has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblCityInitialized()
    {
        return tblCityIsInitialized;
    }

    /**
     * Getter method for tblProvince.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbl_province</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblProvince
     */
    public String getTblProvince()
    {
        return tblProvince;
    }

    /**
     * Setter method for tblProvince.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblProvince
     */
    public void setTblProvince(String newVal)
    {
        if ((newVal != null && tblProvince != null && (newVal.compareTo(tblProvince) == 0)) ||
            (newVal == null && tblProvince == null && tblProvinceIsInitialized)) {
            return;
        }
        tblProvince = newVal;
        tblProvinceIsModified = true;
        tblProvinceIsInitialized = true;
    }

    /**
     * Determines if the tblProvince has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblProvinceModified()
    {
        return tblProvinceIsModified;
    }

    /**
     * Determines if the tblProvince has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblProvinceInitialized()
    {
        return tblProvinceIsInitialized;
    }

    /**
     * Getter method for tblCountry.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbl_country</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblCountry
     */
    public String getTblCountry()
    {
        return tblCountry;
    }

    /**
     * Setter method for tblCountry.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblCountry
     */
    public void setTblCountry(String newVal)
    {
        if ((newVal != null && tblCountry != null && (newVal.compareTo(tblCountry) == 0)) ||
            (newVal == null && tblCountry == null && tblCountryIsInitialized)) {
            return;
        }
        tblCountry = newVal;
        tblCountryIsModified = true;
        tblCountryIsInitialized = true;
    }

    /**
     * Determines if the tblCountry has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblCountryModified()
    {
        return tblCountryIsModified;
    }

    /**
     * Determines if the tblCountry has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblCountryInitialized()
    {
        return tblCountryIsInitialized;
    }

    /**
     * Getter method for tblName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbl_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblName
     */
    public String getTblName()
    {
        return tblName;
    }

    /**
     * Setter method for tblName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblName
     */
    public void setTblName(String newVal)
    {
        if ((newVal != null && tblName != null && (newVal.compareTo(tblName) == 0)) ||
            (newVal == null && tblName == null && tblNameIsInitialized)) {
            return;
        }
        tblName = newVal;
        tblNameIsModified = true;
        tblNameIsInitialized = true;
    }

    /**
     * Determines if the tblName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblNameModified()
    {
        return tblNameIsModified;
    }

    /**
     * Determines if the tblName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblNameInitialized()
    {
        return tblNameIsInitialized;
    }

    /**
     * Getter method for tblLocationId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbl_location_id</li>
     * <li>comments: NAME+ID</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblLocationId
     */
    public String getTblLocationId()
    {
        return tblLocationId;
    }

    /**
     * Setter method for tblLocationId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblLocationId
     */
    public void setTblLocationId(String newVal)
    {
        if ((newVal != null && tblLocationId != null && (newVal.compareTo(tblLocationId) == 0)) ||
            (newVal == null && tblLocationId == null && tblLocationIdIsInitialized)) {
            return;
        }
        tblLocationId = newVal;
        tblLocationIdIsModified = true;
        tblLocationIdIsInitialized = true;
    }

    /**
     * Determines if the tblLocationId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblLocationIdModified()
    {
        return tblLocationIdIsModified;
    }

    /**
     * Determines if the tblLocationId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblLocationIdInitialized()
    {
        return tblLocationIdIsInitialized;
    }

    /**
     * Getter method for tblId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbl_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tblId
     */
    public Integer getTblId()
    {
        return tblId;
    }

    /**
     * Setter method for tblId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblId
     */
    public void setTblId(Integer newVal)
    {
        if ((newVal != null && tblId != null && (newVal.compareTo(tblId) == 0)) ||
            (newVal == null && tblId == null && tblIdIsInitialized)) {
            return;
        }
        tblId = newVal;
        tblIdIsModified = true;
        tblIdIsInitialized = true;
    }

    /**
     * Setter method for tblId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tblId
     */
    public void setTblId(int newVal)
    {
        setTblId(new Integer(newVal));
    }

    /**
     * Determines if the tblId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblIdModified()
    {
        return tblIdIsModified;
    }

    /**
     * Determines if the tblId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblIdInitialized()
    {
        return tblIdIsInitialized;
    }

    /**
     * Getter method for tboNama.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbo_nama</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tboNama
     */
    public String getTboNama()
    {
        return tboNama;
    }

    /**
     * Setter method for tboNama.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tboNama
     */
    public void setTboNama(String newVal)
    {
        if ((newVal != null && tboNama != null && (newVal.compareTo(tboNama) == 0)) ||
            (newVal == null && tboNama == null && tboNamaIsInitialized)) {
            return;
        }
        tboNama = newVal;
        tboNamaIsModified = true;
        tboNamaIsInitialized = true;
    }

    /**
     * Determines if the tboNama has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTboNamaModified()
    {
        return tboNamaIsModified;
    }

    /**
     * Determines if the tboNama has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTboNamaInitialized()
    {
        return tboNamaIsInitialized;
    }

    /**
     * Getter method for tboParentId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbo_parent_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tboParentId
     */
    public Integer getTboParentId()
    {
        return tboParentId;
    }

    /**
     * Setter method for tboParentId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tboParentId
     */
    public void setTboParentId(Integer newVal)
    {
        if ((newVal != null && tboParentId != null && (newVal.compareTo(tboParentId) == 0)) ||
            (newVal == null && tboParentId == null && tboParentIdIsInitialized)) {
            return;
        }
        tboParentId = newVal;
        tboParentIdIsModified = true;
        tboParentIdIsInitialized = true;
    }

    /**
     * Setter method for tboParentId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tboParentId
     */
    public void setTboParentId(int newVal)
    {
        setTboParentId(new Integer(newVal));
    }

    /**
     * Determines if the tboParentId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTboParentIdModified()
    {
        return tboParentIdIsModified;
    }

    /**
     * Determines if the tboParentId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTboParentIdInitialized()
    {
        return tboParentIdIsInitialized;
    }

    /**
     * Getter method for tboId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbo_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tboId
     */
    public Integer getTboId()
    {
        return tboId;
    }

    /**
     * Setter method for tboId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tboId
     */
    public void setTboId(Integer newVal)
    {
        if ((newVal != null && tboId != null && (newVal.compareTo(tboId) == 0)) ||
            (newVal == null && tboId == null && tboIdIsInitialized)) {
            return;
        }
        tboId = newVal;
        tboIdIsModified = true;
        tboIdIsInitialized = true;
    }

    /**
     * Setter method for tboId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tboId
     */
    public void setTboId(int newVal)
    {
        setTboId(new Integer(newVal));
    }

    /**
     * Determines if the tboId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTboIdModified()
    {
        return tboIdIsModified;
    }

    /**
     * Determines if the tboId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTboIdInitialized()
    {
        return tboIdIsInitialized;
    }

    /**
     * Getter method for tbesName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbes_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbesName
     */
    public String getTbesName()
    {
        return tbesName;
    }

    /**
     * Setter method for tbesName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesName
     */
    public void setTbesName(String newVal)
    {
        if ((newVal != null && tbesName != null && (newVal.compareTo(tbesName) == 0)) ||
            (newVal == null && tbesName == null && tbesNameIsInitialized)) {
            return;
        }
        tbesName = newVal;
        tbesNameIsModified = true;
        tbesNameIsInitialized = true;
    }

    /**
     * Determines if the tbesName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesNameModified()
    {
        return tbesNameIsModified;
    }

    /**
     * Determines if the tbesName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesNameInitialized()
    {
        return tbesNameIsInitialized;
    }

    /**
     * Getter method for tbesEmploymentStatusId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbes_employment_status_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbesEmploymentStatusId
     */
    public String getTbesEmploymentStatusId()
    {
        return tbesEmploymentStatusId;
    }

    /**
     * Setter method for tbesEmploymentStatusId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesEmploymentStatusId
     */
    public void setTbesEmploymentStatusId(String newVal)
    {
        if ((newVal != null && tbesEmploymentStatusId != null && (newVal.compareTo(tbesEmploymentStatusId) == 0)) ||
            (newVal == null && tbesEmploymentStatusId == null && tbesEmploymentStatusIdIsInitialized)) {
            return;
        }
        tbesEmploymentStatusId = newVal;
        tbesEmploymentStatusIdIsModified = true;
        tbesEmploymentStatusIdIsInitialized = true;
    }

    /**
     * Determines if the tbesEmploymentStatusId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesEmploymentStatusIdModified()
    {
        return tbesEmploymentStatusIdIsModified;
    }

    /**
     * Determines if the tbesEmploymentStatusId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesEmploymentStatusIdInitialized()
    {
        return tbesEmploymentStatusIdIsInitialized;
    }

    /**
     * Getter method for tbesId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbes_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbesId
     */
    public Integer getTbesId()
    {
        return tbesId;
    }

    /**
     * Setter method for tbesId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesId
     */
    public void setTbesId(Integer newVal)
    {
        if ((newVal != null && tbesId != null && (newVal.compareTo(tbesId) == 0)) ||
            (newVal == null && tbesId == null && tbesIdIsInitialized)) {
            return;
        }
        tbesId = newVal;
        tbesIdIsModified = true;
        tbesIdIsInitialized = true;
    }

    /**
     * Setter method for tbesId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesId
     */
    public void setTbesId(int newVal)
    {
        setTbesId(new Integer(newVal));
    }

    /**
     * Determines if the tbesId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesIdModified()
    {
        return tbesIdIsModified;
    }

    /**
     * Determines if the tbesId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesIdInitialized()
    {
        return tbesIdIsInitialized;
    }

    /**
     * Getter method for tbjJoinedDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbj_joined_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbjJoinedDate
     */
    public java.sql.Timestamp getTbjJoinedDate()
    {
        return tbjJoinedDate;
    }

    /**
     * Setter method for tbjJoinedDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjJoinedDate
     */
    public void setTbjJoinedDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbjJoinedDate != null && (newVal.compareTo(tbjJoinedDate) == 0)) ||
            (newVal == null && tbjJoinedDate == null && tbjJoinedDateIsInitialized)) {
            return;
        }
        tbjJoinedDate = newVal;
        tbjJoinedDateIsModified = true;
        tbjJoinedDateIsInitialized = true;
    }

    /**
     * Setter method for tbjJoinedDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjJoinedDate
     */
    public void setTbjJoinedDate(long newVal)
    {
        setTbjJoinedDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbjJoinedDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjJoinedDateModified()
    {
        return tbjJoinedDateIsModified;
    }

    /**
     * Determines if the tbjJoinedDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjJoinedDateInitialized()
    {
        return tbjJoinedDateIsInitialized;
    }

    /**
     * Getter method for tbjtComments.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbjt_comments</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtComments
     */
    public String getTbjtComments()
    {
        return tbjtComments;
    }

    /**
     * Setter method for tbjtComments.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtComments
     */
    public void setTbjtComments(String newVal)
    {
        if ((newVal != null && tbjtComments != null && (newVal.compareTo(tbjtComments) == 0)) ||
            (newVal == null && tbjtComments == null && tbjtCommentsIsInitialized)) {
            return;
        }
        tbjtComments = newVal;
        tbjtCommentsIsModified = true;
        tbjtCommentsIsInitialized = true;
    }

    /**
     * Determines if the tbjtComments has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtCommentsModified()
    {
        return tbjtCommentsIsModified;
    }

    /**
     * Determines if the tbjtComments has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtCommentsInitialized()
    {
        return tbjtCommentsIsInitialized;
    }

    /**
     * Getter method for tbjtDescription.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbjt_description</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtDescription
     */
    public String getTbjtDescription()
    {
        return tbjtDescription;
    }

    /**
     * Setter method for tbjtDescription.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtDescription
     */
    public void setTbjtDescription(String newVal)
    {
        if ((newVal != null && tbjtDescription != null && (newVal.compareTo(tbjtDescription) == 0)) ||
            (newVal == null && tbjtDescription == null && tbjtDescriptionIsInitialized)) {
            return;
        }
        tbjtDescription = newVal;
        tbjtDescriptionIsModified = true;
        tbjtDescriptionIsInitialized = true;
    }

    /**
     * Determines if the tbjtDescription has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtDescriptionModified()
    {
        return tbjtDescriptionIsModified;
    }

    /**
     * Determines if the tbjtDescription has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtDescriptionInitialized()
    {
        return tbjtDescriptionIsInitialized;
    }

    /**
     * Getter method for tbjtName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbjt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtName
     */
    public String getTbjtName()
    {
        return tbjtName;
    }

    /**
     * Setter method for tbjtName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtName
     */
    public void setTbjtName(String newVal)
    {
        if ((newVal != null && tbjtName != null && (newVal.compareTo(tbjtName) == 0)) ||
            (newVal == null && tbjtName == null && tbjtNameIsInitialized)) {
            return;
        }
        tbjtName = newVal;
        tbjtNameIsModified = true;
        tbjtNameIsInitialized = true;
    }

    /**
     * Determines if the tbjtName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtNameModified()
    {
        return tbjtNameIsModified;
    }

    /**
     * Determines if the tbjtName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtNameInitialized()
    {
        return tbjtNameIsInitialized;
    }

    /**
     * Getter method for tbjtJobTitleId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbjt_job_title_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtJobTitleId
     */
    public String getTbjtJobTitleId()
    {
        return tbjtJobTitleId;
    }

    /**
     * Setter method for tbjtJobTitleId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtJobTitleId
     */
    public void setTbjtJobTitleId(String newVal)
    {
        if ((newVal != null && tbjtJobTitleId != null && (newVal.compareTo(tbjtJobTitleId) == 0)) ||
            (newVal == null && tbjtJobTitleId == null && tbjtJobTitleIdIsInitialized)) {
            return;
        }
        tbjtJobTitleId = newVal;
        tbjtJobTitleIdIsModified = true;
        tbjtJobTitleIdIsInitialized = true;
    }

    /**
     * Determines if the tbjtJobTitleId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtJobTitleIdModified()
    {
        return tbjtJobTitleIdIsModified;
    }

    /**
     * Determines if the tbjtJobTitleId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtJobTitleIdInitialized()
    {
        return tbjtJobTitleIdIsInitialized;
    }

    /**
     * Getter method for tbjtId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbjt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtId
     */
    public Integer getTbjtId()
    {
        return tbjtId;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(Integer newVal)
    {
        if ((newVal != null && tbjtId != null && (newVal.compareTo(tbjtId) == 0)) ||
            (newVal == null && tbjtId == null && tbjtIdIsInitialized)) {
            return;
        }
        tbjtId = newVal;
        tbjtIdIsModified = true;
        tbjtIdIsInitialized = true;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(int newVal)
    {
        setTbjtId(new Integer(newVal));
    }

    /**
     * Determines if the tbjtId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtIdModified()
    {
        return tbjtIdIsModified;
    }

    /**
     * Determines if the tbjtId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtIdInitialized()
    {
        return tbjtIdIsInitialized;
    }

    /**
     * Getter method for tbeJoinedDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_joined_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbeJoinedDate
     */
    public java.sql.Timestamp getTbeJoinedDate()
    {
        return tbeJoinedDate;
    }

    /**
     * Setter method for tbeJoinedDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeJoinedDate
     */
    public void setTbeJoinedDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbeJoinedDate != null && (newVal.compareTo(tbeJoinedDate) == 0)) ||
            (newVal == null && tbeJoinedDate == null && tbeJoinedDateIsInitialized)) {
            return;
        }
        tbeJoinedDate = newVal;
        tbeJoinedDateIsModified = true;
        tbeJoinedDateIsInitialized = true;
    }

    /**
     * Setter method for tbeJoinedDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeJoinedDate
     */
    public void setTbeJoinedDate(long newVal)
    {
        setTbeJoinedDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbeJoinedDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeJoinedDateModified()
    {
        return tbeJoinedDateIsModified;
    }

    /**
     * Determines if the tbeJoinedDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeJoinedDateInitialized()
    {
        return tbeJoinedDateIsInitialized;
    }

    /**
     * Getter method for tbeStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_status</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeStatus
     */
    public Integer getTbeStatus()
    {
        return tbeStatus;
    }

    /**
     * Setter method for tbeStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeStatus
     */
    public void setTbeStatus(Integer newVal)
    {
        if ((newVal != null && tbeStatus != null && (newVal.compareTo(tbeStatus) == 0)) ||
            (newVal == null && tbeStatus == null && tbeStatusIsInitialized)) {
            return;
        }
        tbeStatus = newVal;
        tbeStatusIsModified = true;
        tbeStatusIsInitialized = true;
    }

    /**
     * Setter method for tbeStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeStatus
     */
    public void setTbeStatus(int newVal)
    {
        setTbeStatus(new Integer(newVal));
    }

    /**
     * Determines if the tbeStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeStatusModified()
    {
        return tbeStatusIsModified;
    }

    /**
     * Determines if the tbeStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeStatusInitialized()
    {
        return tbeStatusIsInitialized;
    }

    /**
     * Getter method for tbeDriverLicenseExpiry.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_driver_license_expiry</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbeDriverLicenseExpiry
     */
    public java.sql.Timestamp getTbeDriverLicenseExpiry()
    {
        return tbeDriverLicenseExpiry;
    }

    /**
     * Setter method for tbeDriverLicenseExpiry.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeDriverLicenseExpiry
     */
    public void setTbeDriverLicenseExpiry(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbeDriverLicenseExpiry != null && (newVal.compareTo(tbeDriverLicenseExpiry) == 0)) ||
            (newVal == null && tbeDriverLicenseExpiry == null && tbeDriverLicenseExpiryIsInitialized)) {
            return;
        }
        tbeDriverLicenseExpiry = newVal;
        tbeDriverLicenseExpiryIsModified = true;
        tbeDriverLicenseExpiryIsInitialized = true;
    }

    /**
     * Setter method for tbeDriverLicenseExpiry.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeDriverLicenseExpiry
     */
    public void setTbeDriverLicenseExpiry(long newVal)
    {
        setTbeDriverLicenseExpiry(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbeDriverLicenseExpiry has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeDriverLicenseExpiryModified()
    {
        return tbeDriverLicenseExpiryIsModified;
    }

    /**
     * Determines if the tbeDriverLicenseExpiry has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeDriverLicenseExpiryInitialized()
    {
        return tbeDriverLicenseExpiryIsInitialized;
    }

    /**
     * Getter method for tbeDriverLicenseNo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_driver_license_no</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeDriverLicenseNo
     */
    public String getTbeDriverLicenseNo()
    {
        return tbeDriverLicenseNo;
    }

    /**
     * Setter method for tbeDriverLicenseNo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeDriverLicenseNo
     */
    public void setTbeDriverLicenseNo(String newVal)
    {
        if ((newVal != null && tbeDriverLicenseNo != null && (newVal.compareTo(tbeDriverLicenseNo) == 0)) ||
            (newVal == null && tbeDriverLicenseNo == null && tbeDriverLicenseNoIsInitialized)) {
            return;
        }
        tbeDriverLicenseNo = newVal;
        tbeDriverLicenseNoIsModified = true;
        tbeDriverLicenseNoIsInitialized = true;
    }

    /**
     * Determines if the tbeDriverLicenseNo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeDriverLicenseNoModified()
    {
        return tbeDriverLicenseNoIsModified;
    }

    /**
     * Determines if the tbeDriverLicenseNo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeDriverLicenseNoInitialized()
    {
        return tbeDriverLicenseNoIsInitialized;
    }

    /**
     * Getter method for tbeGender.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_gender</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeGender
     */
    public Integer getTbeGender()
    {
        return tbeGender;
    }

    /**
     * Setter method for tbeGender.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeGender
     */
    public void setTbeGender(Integer newVal)
    {
        if ((newVal != null && tbeGender != null && (newVal.compareTo(tbeGender) == 0)) ||
            (newVal == null && tbeGender == null && tbeGenderIsInitialized)) {
            return;
        }
        tbeGender = newVal;
        tbeGenderIsModified = true;
        tbeGenderIsInitialized = true;
    }

    /**
     * Setter method for tbeGender.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeGender
     */
    public void setTbeGender(int newVal)
    {
        setTbeGender(new Integer(newVal));
    }

    /**
     * Determines if the tbeGender has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeGenderModified()
    {
        return tbeGenderIsModified;
    }

    /**
     * Determines if the tbeGender has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeGenderInitialized()
    {
        return tbeGenderIsInitialized;
    }

    /**
     * Getter method for tbeSmoker.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_smoker</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeSmoker
     */
    public Integer getTbeSmoker()
    {
        return tbeSmoker;
    }

    /**
     * Setter method for tbeSmoker.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeSmoker
     */
    public void setTbeSmoker(Integer newVal)
    {
        if ((newVal != null && tbeSmoker != null && (newVal.compareTo(tbeSmoker) == 0)) ||
            (newVal == null && tbeSmoker == null && tbeSmokerIsInitialized)) {
            return;
        }
        tbeSmoker = newVal;
        tbeSmokerIsModified = true;
        tbeSmokerIsInitialized = true;
    }

    /**
     * Setter method for tbeSmoker.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeSmoker
     */
    public void setTbeSmoker(int newVal)
    {
        setTbeSmoker(new Integer(newVal));
    }

    /**
     * Determines if the tbeSmoker has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeSmokerModified()
    {
        return tbeSmokerIsModified;
    }

    /**
     * Determines if the tbeSmoker has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeSmokerInitialized()
    {
        return tbeSmokerIsInitialized;
    }

    /**
     * Getter method for tbeMaritalStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_marital_status</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeMaritalStatus
     */
    public Integer getTbeMaritalStatus()
    {
        return tbeMaritalStatus;
    }

    /**
     * Setter method for tbeMaritalStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeMaritalStatus
     */
    public void setTbeMaritalStatus(Integer newVal)
    {
        if ((newVal != null && tbeMaritalStatus != null && (newVal.compareTo(tbeMaritalStatus) == 0)) ||
            (newVal == null && tbeMaritalStatus == null && tbeMaritalStatusIsInitialized)) {
            return;
        }
        tbeMaritalStatus = newVal;
        tbeMaritalStatusIsModified = true;
        tbeMaritalStatusIsInitialized = true;
    }

    /**
     * Setter method for tbeMaritalStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeMaritalStatus
     */
    public void setTbeMaritalStatus(int newVal)
    {
        setTbeMaritalStatus(new Integer(newVal));
    }

    /**
     * Determines if the tbeMaritalStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeMaritalStatusModified()
    {
        return tbeMaritalStatusIsModified;
    }

    /**
     * Determines if the tbeMaritalStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeMaritalStatusInitialized()
    {
        return tbeMaritalStatusIsInitialized;
    }

    /**
     * Getter method for tbeDob.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_dob</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbeDob
     */
    public java.sql.Timestamp getTbeDob()
    {
        return tbeDob;
    }

    /**
     * Setter method for tbeDob.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeDob
     */
    public void setTbeDob(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbeDob != null && (newVal.compareTo(tbeDob) == 0)) ||
            (newVal == null && tbeDob == null && tbeDobIsInitialized)) {
            return;
        }
        tbeDob = newVal;
        tbeDobIsModified = true;
        tbeDobIsInitialized = true;
    }

    /**
     * Setter method for tbeDob.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeDob
     */
    public void setTbeDob(long newVal)
    {
        setTbeDob(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbeDob has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeDobModified()
    {
        return tbeDobIsModified;
    }

    /**
     * Determines if the tbeDob has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeDobInitialized()
    {
        return tbeDobIsInitialized;
    }

    /**
     * Getter method for tbeIdNo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_id_no</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeIdNo
     */
    public String getTbeIdNo()
    {
        return tbeIdNo;
    }

    /**
     * Setter method for tbeIdNo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeIdNo
     */
    public void setTbeIdNo(String newVal)
    {
        if ((newVal != null && tbeIdNo != null && (newVal.compareTo(tbeIdNo) == 0)) ||
            (newVal == null && tbeIdNo == null && tbeIdNoIsInitialized)) {
            return;
        }
        tbeIdNo = newVal;
        tbeIdNoIsModified = true;
        tbeIdNoIsInitialized = true;
    }

    /**
     * Determines if the tbeIdNo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdNoModified()
    {
        return tbeIdNoIsModified;
    }

    /**
     * Determines if the tbeIdNo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdNoInitialized()
    {
        return tbeIdNoIsInitialized;
    }

    /**
     * Getter method for tbePhotoFileName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_photo_file_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbePhotoFileName
     */
    public String getTbePhotoFileName()
    {
        return tbePhotoFileName;
    }

    /**
     * Setter method for tbePhotoFileName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbePhotoFileName
     */
    public void setTbePhotoFileName(String newVal)
    {
        if ((newVal != null && tbePhotoFileName != null && (newVal.compareTo(tbePhotoFileName) == 0)) ||
            (newVal == null && tbePhotoFileName == null && tbePhotoFileNameIsInitialized)) {
            return;
        }
        tbePhotoFileName = newVal;
        tbePhotoFileNameIsModified = true;
        tbePhotoFileNameIsInitialized = true;
    }

    /**
     * Determines if the tbePhotoFileName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbePhotoFileNameModified()
    {
        return tbePhotoFileNameIsModified;
    }

    /**
     * Determines if the tbePhotoFileName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbePhotoFileNameInitialized()
    {
        return tbePhotoFileNameIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeNickName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_nick_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeNickName
     */
    public String getTbeNickName()
    {
        return tbeNickName;
    }

    /**
     * Setter method for tbeNickName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeNickName
     */
    public void setTbeNickName(String newVal)
    {
        if ((newVal != null && tbeNickName != null && (newVal.compareTo(tbeNickName) == 0)) ||
            (newVal == null && tbeNickName == null && tbeNickNameIsInitialized)) {
            return;
        }
        tbeNickName = newVal;
        tbeNickNameIsModified = true;
        tbeNickNameIsInitialized = true;
    }

    /**
     * Determines if the tbeNickName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNickNameModified()
    {
        return tbeNickNameIsModified;
    }

    /**
     * Determines if the tbeNickName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNickNameInitialized()
    {
        return tbeNickNameIsInitialized;
    }

    /**
     * Getter method for tbeLastName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_last_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeLastName
     */
    public String getTbeLastName()
    {
        return tbeLastName;
    }

    /**
     * Setter method for tbeLastName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeLastName
     */
    public void setTbeLastName(String newVal)
    {
        if ((newVal != null && tbeLastName != null && (newVal.compareTo(tbeLastName) == 0)) ||
            (newVal == null && tbeLastName == null && tbeLastNameIsInitialized)) {
            return;
        }
        tbeLastName = newVal;
        tbeLastNameIsModified = true;
        tbeLastNameIsInitialized = true;
    }

    /**
     * Determines if the tbeLastName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeLastNameModified()
    {
        return tbeLastNameIsModified;
    }

    /**
     * Determines if the tbeLastName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeLastNameInitialized()
    {
        return tbeLastNameIsInitialized;
    }

    /**
     * Getter method for tbeMiddleName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_middle_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeMiddleName
     */
    public String getTbeMiddleName()
    {
        return tbeMiddleName;
    }

    /**
     * Setter method for tbeMiddleName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeMiddleName
     */
    public void setTbeMiddleName(String newVal)
    {
        if ((newVal != null && tbeMiddleName != null && (newVal.compareTo(tbeMiddleName) == 0)) ||
            (newVal == null && tbeMiddleName == null && tbeMiddleNameIsInitialized)) {
            return;
        }
        tbeMiddleName = newVal;
        tbeMiddleNameIsModified = true;
        tbeMiddleNameIsInitialized = true;
    }

    /**
     * Determines if the tbeMiddleName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeMiddleNameModified()
    {
        return tbeMiddleNameIsModified;
    }

    /**
     * Determines if the tbeMiddleName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeMiddleNameInitialized()
    {
        return tbeMiddleNameIsInitialized;
    }

    /**
     * Getter method for tbeFirstName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_first_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeFirstName
     */
    public String getTbeFirstName()
    {
        return tbeFirstName;
    }

    /**
     * Setter method for tbeFirstName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeFirstName
     */
    public void setTbeFirstName(String newVal)
    {
        if ((newVal != null && tbeFirstName != null && (newVal.compareTo(tbeFirstName) == 0)) ||
            (newVal == null && tbeFirstName == null && tbeFirstNameIsInitialized)) {
            return;
        }
        tbeFirstName = newVal;
        tbeFirstNameIsModified = true;
        tbeFirstNameIsInitialized = true;
    }

    /**
     * Determines if the tbeFirstName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeFirstNameModified()
    {
        return tbeFirstNameIsModified;
    }

    /**
     * Determines if the tbeFirstName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeFirstNameInitialized()
    {
        return tbeFirstNameIsInitialized;
    }

    /**
     * Getter method for tbeEmployeeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_employee_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEmployeeId
     */
    public String getTbeEmployeeId()
    {
        return tbeEmployeeId;
    }

    /**
     * Setter method for tbeEmployeeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEmployeeId
     */
    public void setTbeEmployeeId(String newVal)
    {
        if ((newVal != null && tbeEmployeeId != null && (newVal.compareTo(tbeEmployeeId) == 0)) ||
            (newVal == null && tbeEmployeeId == null && tbeEmployeeIdIsInitialized)) {
            return;
        }
        tbeEmployeeId = newVal;
        tbeEmployeeIdIsModified = true;
        tbeEmployeeIdIsInitialized = true;
    }

    /**
     * Determines if the tbeEmployeeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEmployeeIdModified()
    {
        return tbeEmployeeIdIsModified;
    }

    /**
     * Determines if the tbeEmployeeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEmployeeIdInitialized()
    {
        return tbeEmployeeIdIsInitialized;
    }

    /**
     * Getter method for tbeEmail.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_email</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEmail
     */
    public String getTbeEmail()
    {
        return tbeEmail;
    }

    /**
     * Setter method for tbeEmail.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEmail
     */
    public void setTbeEmail(String newVal)
    {
        if ((newVal != null && tbeEmail != null && (newVal.compareTo(tbeEmail) == 0)) ||
            (newVal == null && tbeEmail == null && tbeEmailIsInitialized)) {
            return;
        }
        tbeEmail = newVal;
        tbeEmailIsModified = true;
        tbeEmailIsInitialized = true;
    }

    /**
     * Determines if the tbeEmail has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEmailModified()
    {
        return tbeEmailIsModified;
    }

    /**
     * Determines if the tbeEmail has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEmailInitialized()
    {
        return tbeEmailIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_information.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbpNameIsModified 		|| tbpPerusahaanIdIsModified  		|| tbpIdIsModified  		|| tblCommentsIsModified  		|| tblFaxIsModified  		|| tblPhoneIsModified  		|| tblZipCodeIsModified  		|| tblAddressIsModified  		|| tblCityIsModified  		|| tblProvinceIsModified  		|| tblCountryIsModified  		|| tblNameIsModified  		|| tblLocationIdIsModified  		|| tblIdIsModified  		|| tboNamaIsModified  		|| tboParentIdIsModified  		|| tboIdIsModified  		|| tbesNameIsModified  		|| tbesEmploymentStatusIdIsModified  		|| tbesIdIsModified  		|| tbjJoinedDateIsModified  		|| tbjtCommentsIsModified  		|| tbjtDescriptionIsModified  		|| tbjtNameIsModified  		|| tbjtJobTitleIdIsModified  		|| tbjtIdIsModified  		|| tbeJoinedDateIsModified  		|| tbeStatusIsModified  		|| tbeDriverLicenseExpiryIsModified  		|| tbeDriverLicenseNoIsModified  		|| tbeGenderIsModified  		|| tbeSmokerIsModified  		|| tbeMaritalStatusIsModified  		|| tbeDobIsModified  		|| tbeIdNoIsModified  		|| tbePhotoFileNameIsModified  		|| tbeNameIsModified  		|| tbeNickNameIsModified  		|| tbeLastNameIsModified  		|| tbeMiddleNameIsModified  		|| tbeFirstNameIsModified  		|| tbeEmployeeIdIsModified  		|| tbeEmailIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbpNameIsModified = false;
        tbpPerusahaanIdIsModified = false;
        tbpIdIsModified = false;
        tblCommentsIsModified = false;
        tblFaxIsModified = false;
        tblPhoneIsModified = false;
        tblZipCodeIsModified = false;
        tblAddressIsModified = false;
        tblCityIsModified = false;
        tblProvinceIsModified = false;
        tblCountryIsModified = false;
        tblNameIsModified = false;
        tblLocationIdIsModified = false;
        tblIdIsModified = false;
        tboNamaIsModified = false;
        tboParentIdIsModified = false;
        tboIdIsModified = false;
        tbesNameIsModified = false;
        tbesEmploymentStatusIdIsModified = false;
        tbesIdIsModified = false;
        tbjJoinedDateIsModified = false;
        tbjtCommentsIsModified = false;
        tbjtDescriptionIsModified = false;
        tbjtNameIsModified = false;
        tbjtJobTitleIdIsModified = false;
        tbjtIdIsModified = false;
        tbeJoinedDateIsModified = false;
        tbeStatusIsModified = false;
        tbeDriverLicenseExpiryIsModified = false;
        tbeDriverLicenseNoIsModified = false;
        tbeGenderIsModified = false;
        tbeSmokerIsModified = false;
        tbeMaritalStatusIsModified = false;
        tbeDobIsModified = false;
        tbeIdNoIsModified = false;
        tbePhotoFileNameIsModified = false;
        tbeNameIsModified = false;
        tbeNickNameIsModified = false;
        tbeLastNameIsModified = false;
        tbeMiddleNameIsModified = false;
        tbeFirstNameIsModified = false;
        tbeEmployeeIdIsModified = false;
        tbeEmailIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewEmployeeInformationBean bean)
    {
        setTbpName(bean.getTbpName());
        setTbpPerusahaanId(bean.getTbpPerusahaanId());
        setTbpId(bean.getTbpId());
        setTblComments(bean.getTblComments());
        setTblFax(bean.getTblFax());
        setTblPhone(bean.getTblPhone());
        setTblZipCode(bean.getTblZipCode());
        setTblAddress(bean.getTblAddress());
        setTblCity(bean.getTblCity());
        setTblProvince(bean.getTblProvince());
        setTblCountry(bean.getTblCountry());
        setTblName(bean.getTblName());
        setTblLocationId(bean.getTblLocationId());
        setTblId(bean.getTblId());
        setTboNama(bean.getTboNama());
        setTboParentId(bean.getTboParentId());
        setTboId(bean.getTboId());
        setTbesName(bean.getTbesName());
        setTbesEmploymentStatusId(bean.getTbesEmploymentStatusId());
        setTbesId(bean.getTbesId());
        setTbjJoinedDate(bean.getTbjJoinedDate());
        setTbjtComments(bean.getTbjtComments());
        setTbjtDescription(bean.getTbjtDescription());
        setTbjtName(bean.getTbjtName());
        setTbjtJobTitleId(bean.getTbjtJobTitleId());
        setTbjtId(bean.getTbjtId());
        setTbeJoinedDate(bean.getTbeJoinedDate());
        setTbeStatus(bean.getTbeStatus());
        setTbeDriverLicenseExpiry(bean.getTbeDriverLicenseExpiry());
        setTbeDriverLicenseNo(bean.getTbeDriverLicenseNo());
        setTbeGender(bean.getTbeGender());
        setTbeSmoker(bean.getTbeSmoker());
        setTbeMaritalStatus(bean.getTbeMaritalStatus());
        setTbeDob(bean.getTbeDob());
        setTbeIdNo(bean.getTbeIdNo());
        setTbePhotoFileName(bean.getTbePhotoFileName());
        setTbeName(bean.getTbeName());
        setTbeNickName(bean.getTbeNickName());
        setTbeLastName(bean.getTbeLastName());
        setTbeMiddleName(bean.getTbeMiddleName());
        setTbeFirstName(bean.getTbeFirstName());
        setTbeEmployeeId(bean.getTbeEmployeeId());
        setTbeEmail(bean.getTbeEmail());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbp_name", getTbpName() == null ? "" : getTbpName().toString());
        dictionnary.put("tbp_perusahaan_id", getTbpPerusahaanId() == null ? "" : getTbpPerusahaanId().toString());
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        dictionnary.put("tbl_comments", getTblComments() == null ? "" : getTblComments().toString());
        dictionnary.put("tbl_fax", getTblFax() == null ? "" : getTblFax().toString());
        dictionnary.put("tbl_phone", getTblPhone() == null ? "" : getTblPhone().toString());
        dictionnary.put("tbl_zip_code", getTblZipCode() == null ? "" : getTblZipCode().toString());
        dictionnary.put("tbl_address", getTblAddress() == null ? "" : getTblAddress().toString());
        dictionnary.put("tbl_city", getTblCity() == null ? "" : getTblCity().toString());
        dictionnary.put("tbl_province", getTblProvince() == null ? "" : getTblProvince().toString());
        dictionnary.put("tbl_country", getTblCountry() == null ? "" : getTblCountry().toString());
        dictionnary.put("tbl_name", getTblName() == null ? "" : getTblName().toString());
        dictionnary.put("tbl_location_id", getTblLocationId() == null ? "" : getTblLocationId().toString());
        dictionnary.put("tbl_id", getTblId() == null ? "" : getTblId().toString());
        dictionnary.put("tbo_nama", getTboNama() == null ? "" : getTboNama().toString());
        dictionnary.put("tbo_parent_id", getTboParentId() == null ? "" : getTboParentId().toString());
        dictionnary.put("tbo_id", getTboId() == null ? "" : getTboId().toString());
        dictionnary.put("tbes_name", getTbesName() == null ? "" : getTbesName().toString());
        dictionnary.put("tbes_employment_status_id", getTbesEmploymentStatusId() == null ? "" : getTbesEmploymentStatusId().toString());
        dictionnary.put("tbes_id", getTbesId() == null ? "" : getTbesId().toString());
        dictionnary.put("tbj_joined_date", getTbjJoinedDate() == null ? "" : getTbjJoinedDate().toString());
        dictionnary.put("tbjt_comments", getTbjtComments() == null ? "" : getTbjtComments().toString());
        dictionnary.put("tbjt_description", getTbjtDescription() == null ? "" : getTbjtDescription().toString());
        dictionnary.put("tbjt_name", getTbjtName() == null ? "" : getTbjtName().toString());
        dictionnary.put("tbjt_job_title_id", getTbjtJobTitleId() == null ? "" : getTbjtJobTitleId().toString());
        dictionnary.put("tbjt_id", getTbjtId() == null ? "" : getTbjtId().toString());
        dictionnary.put("tbe_joined_date", getTbeJoinedDate() == null ? "" : getTbeJoinedDate().toString());
        dictionnary.put("tbe_status", getTbeStatus() == null ? "" : getTbeStatus().toString());
        dictionnary.put("tbe_driver_license_expiry", getTbeDriverLicenseExpiry() == null ? "" : getTbeDriverLicenseExpiry().toString());
        dictionnary.put("tbe_driver_license_no", getTbeDriverLicenseNo() == null ? "" : getTbeDriverLicenseNo().toString());
        dictionnary.put("tbe_gender", getTbeGender() == null ? "" : getTbeGender().toString());
        dictionnary.put("tbe_smoker", getTbeSmoker() == null ? "" : getTbeSmoker().toString());
        dictionnary.put("tbe_marital_status", getTbeMaritalStatus() == null ? "" : getTbeMaritalStatus().toString());
        dictionnary.put("tbe_dob", getTbeDob() == null ? "" : getTbeDob().toString());
        dictionnary.put("tbe_id_no", getTbeIdNo() == null ? "" : getTbeIdNo().toString());
        dictionnary.put("tbe_photo_file_name", getTbePhotoFileName() == null ? "" : getTbePhotoFileName().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_nick_name", getTbeNickName() == null ? "" : getTbeNickName().toString());
        dictionnary.put("tbe_last_name", getTbeLastName() == null ? "" : getTbeLastName().toString());
        dictionnary.put("tbe_middle_name", getTbeMiddleName() == null ? "" : getTbeMiddleName().toString());
        dictionnary.put("tbe_first_name", getTbeFirstName() == null ? "" : getTbeFirstName().toString());
        dictionnary.put("tbe_employee_id", getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString());
        dictionnary.put("tbe_email", getTbeEmail() == null ? "" : getTbeEmail().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbp_name".equalsIgnoreCase(column) || "tbpName".equalsIgnoreCase(column)) {
            return getTbpName() == null ? "" : getTbpName().toString();
        } else if ("tbp_perusahaan_id".equalsIgnoreCase(column) || "tbpPerusahaanId".equalsIgnoreCase(column)) {
            return getTbpPerusahaanId() == null ? "" : getTbpPerusahaanId().toString();
        } else if ("tbp_id".equalsIgnoreCase(column) || "tbpId".equalsIgnoreCase(column)) {
            return getTbpId() == null ? "" : getTbpId().toString();
        } else if ("tbl_comments".equalsIgnoreCase(column) || "tblComments".equalsIgnoreCase(column)) {
            return getTblComments() == null ? "" : getTblComments().toString();
        } else if ("tbl_fax".equalsIgnoreCase(column) || "tblFax".equalsIgnoreCase(column)) {
            return getTblFax() == null ? "" : getTblFax().toString();
        } else if ("tbl_phone".equalsIgnoreCase(column) || "tblPhone".equalsIgnoreCase(column)) {
            return getTblPhone() == null ? "" : getTblPhone().toString();
        } else if ("tbl_zip_code".equalsIgnoreCase(column) || "tblZipCode".equalsIgnoreCase(column)) {
            return getTblZipCode() == null ? "" : getTblZipCode().toString();
        } else if ("tbl_address".equalsIgnoreCase(column) || "tblAddress".equalsIgnoreCase(column)) {
            return getTblAddress() == null ? "" : getTblAddress().toString();
        } else if ("tbl_city".equalsIgnoreCase(column) || "tblCity".equalsIgnoreCase(column)) {
            return getTblCity() == null ? "" : getTblCity().toString();
        } else if ("tbl_province".equalsIgnoreCase(column) || "tblProvince".equalsIgnoreCase(column)) {
            return getTblProvince() == null ? "" : getTblProvince().toString();
        } else if ("tbl_country".equalsIgnoreCase(column) || "tblCountry".equalsIgnoreCase(column)) {
            return getTblCountry() == null ? "" : getTblCountry().toString();
        } else if ("tbl_name".equalsIgnoreCase(column) || "tblName".equalsIgnoreCase(column)) {
            return getTblName() == null ? "" : getTblName().toString();
        } else if ("tbl_location_id".equalsIgnoreCase(column) || "tblLocationId".equalsIgnoreCase(column)) {
            return getTblLocationId() == null ? "" : getTblLocationId().toString();
        } else if ("tbl_id".equalsIgnoreCase(column) || "tblId".equalsIgnoreCase(column)) {
            return getTblId() == null ? "" : getTblId().toString();
        } else if ("tbo_nama".equalsIgnoreCase(column) || "tboNama".equalsIgnoreCase(column)) {
            return getTboNama() == null ? "" : getTboNama().toString();
        } else if ("tbo_parent_id".equalsIgnoreCase(column) || "tboParentId".equalsIgnoreCase(column)) {
            return getTboParentId() == null ? "" : getTboParentId().toString();
        } else if ("tbo_id".equalsIgnoreCase(column) || "tboId".equalsIgnoreCase(column)) {
            return getTboId() == null ? "" : getTboId().toString();
        } else if ("tbes_name".equalsIgnoreCase(column) || "tbesName".equalsIgnoreCase(column)) {
            return getTbesName() == null ? "" : getTbesName().toString();
        } else if ("tbes_employment_status_id".equalsIgnoreCase(column) || "tbesEmploymentStatusId".equalsIgnoreCase(column)) {
            return getTbesEmploymentStatusId() == null ? "" : getTbesEmploymentStatusId().toString();
        } else if ("tbes_id".equalsIgnoreCase(column) || "tbesId".equalsIgnoreCase(column)) {
            return getTbesId() == null ? "" : getTbesId().toString();
        } else if ("tbj_joined_date".equalsIgnoreCase(column) || "tbjJoinedDate".equalsIgnoreCase(column)) {
            return getTbjJoinedDate() == null ? "" : getTbjJoinedDate().toString();
        } else if ("tbjt_comments".equalsIgnoreCase(column) || "tbjtComments".equalsIgnoreCase(column)) {
            return getTbjtComments() == null ? "" : getTbjtComments().toString();
        } else if ("tbjt_description".equalsIgnoreCase(column) || "tbjtDescription".equalsIgnoreCase(column)) {
            return getTbjtDescription() == null ? "" : getTbjtDescription().toString();
        } else if ("tbjt_name".equalsIgnoreCase(column) || "tbjtName".equalsIgnoreCase(column)) {
            return getTbjtName() == null ? "" : getTbjtName().toString();
        } else if ("tbjt_job_title_id".equalsIgnoreCase(column) || "tbjtJobTitleId".equalsIgnoreCase(column)) {
            return getTbjtJobTitleId() == null ? "" : getTbjtJobTitleId().toString();
        } else if ("tbjt_id".equalsIgnoreCase(column) || "tbjtId".equalsIgnoreCase(column)) {
            return getTbjtId() == null ? "" : getTbjtId().toString();
        } else if ("tbe_joined_date".equalsIgnoreCase(column) || "tbeJoinedDate".equalsIgnoreCase(column)) {
            return getTbeJoinedDate() == null ? "" : getTbeJoinedDate().toString();
        } else if ("tbe_status".equalsIgnoreCase(column) || "tbeStatus".equalsIgnoreCase(column)) {
            return getTbeStatus() == null ? "" : getTbeStatus().toString();
        } else if ("tbe_driver_license_expiry".equalsIgnoreCase(column) || "tbeDriverLicenseExpiry".equalsIgnoreCase(column)) {
            return getTbeDriverLicenseExpiry() == null ? "" : getTbeDriverLicenseExpiry().toString();
        } else if ("tbe_driver_license_no".equalsIgnoreCase(column) || "tbeDriverLicenseNo".equalsIgnoreCase(column)) {
            return getTbeDriverLicenseNo() == null ? "" : getTbeDriverLicenseNo().toString();
        } else if ("tbe_gender".equalsIgnoreCase(column) || "tbeGender".equalsIgnoreCase(column)) {
            return getTbeGender() == null ? "" : getTbeGender().toString();
        } else if ("tbe_smoker".equalsIgnoreCase(column) || "tbeSmoker".equalsIgnoreCase(column)) {
            return getTbeSmoker() == null ? "" : getTbeSmoker().toString();
        } else if ("tbe_marital_status".equalsIgnoreCase(column) || "tbeMaritalStatus".equalsIgnoreCase(column)) {
            return getTbeMaritalStatus() == null ? "" : getTbeMaritalStatus().toString();
        } else if ("tbe_dob".equalsIgnoreCase(column) || "tbeDob".equalsIgnoreCase(column)) {
            return getTbeDob() == null ? "" : getTbeDob().toString();
        } else if ("tbe_id_no".equalsIgnoreCase(column) || "tbeIdNo".equalsIgnoreCase(column)) {
            return getTbeIdNo() == null ? "" : getTbeIdNo().toString();
        } else if ("tbe_photo_file_name".equalsIgnoreCase(column) || "tbePhotoFileName".equalsIgnoreCase(column)) {
            return getTbePhotoFileName() == null ? "" : getTbePhotoFileName().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_nick_name".equalsIgnoreCase(column) || "tbeNickName".equalsIgnoreCase(column)) {
            return getTbeNickName() == null ? "" : getTbeNickName().toString();
        } else if ("tbe_last_name".equalsIgnoreCase(column) || "tbeLastName".equalsIgnoreCase(column)) {
            return getTbeLastName() == null ? "" : getTbeLastName().toString();
        } else if ("tbe_middle_name".equalsIgnoreCase(column) || "tbeMiddleName".equalsIgnoreCase(column)) {
            return getTbeMiddleName() == null ? "" : getTbeMiddleName().toString();
        } else if ("tbe_first_name".equalsIgnoreCase(column) || "tbeFirstName".equalsIgnoreCase(column)) {
            return getTbeFirstName() == null ? "" : getTbeFirstName().toString();
        } else if ("tbe_employee_id".equalsIgnoreCase(column) || "tbeEmployeeId".equalsIgnoreCase(column)) {
            return getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString();
        } else if ("tbe_email".equalsIgnoreCase(column) || "tbeEmail".equalsIgnoreCase(column)) {
            return getTbeEmail() == null ? "" : getTbeEmail().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewEmployeeInformationBean)) {
            return false;
        }

		ViewEmployeeInformationBean obj = (ViewEmployeeInformationBean) object;
		return new EqualsBuilder()
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpPerusahaanId(), obj.getTbpPerusahaanId())
            .append(getTbpId(), obj.getTbpId())
            .append(getTblComments(), obj.getTblComments())
            .append(getTblFax(), obj.getTblFax())
            .append(getTblPhone(), obj.getTblPhone())
            .append(getTblZipCode(), obj.getTblZipCode())
            .append(getTblAddress(), obj.getTblAddress())
            .append(getTblCity(), obj.getTblCity())
            .append(getTblProvince(), obj.getTblProvince())
            .append(getTblCountry(), obj.getTblCountry())
            .append(getTblName(), obj.getTblName())
            .append(getTblLocationId(), obj.getTblLocationId())
            .append(getTblId(), obj.getTblId())
            .append(getTboNama(), obj.getTboNama())
            .append(getTboParentId(), obj.getTboParentId())
            .append(getTboId(), obj.getTboId())
            .append(getTbesName(), obj.getTbesName())
            .append(getTbesEmploymentStatusId(), obj.getTbesEmploymentStatusId())
            .append(getTbesId(), obj.getTbesId())
            .append(getTbjJoinedDate(), obj.getTbjJoinedDate())
            .append(getTbjtComments(), obj.getTbjtComments())
            .append(getTbjtDescription(), obj.getTbjtDescription())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjtJobTitleId(), obj.getTbjtJobTitleId())
            .append(getTbjtId(), obj.getTbjtId())
            .append(getTbeJoinedDate(), obj.getTbeJoinedDate())
            .append(getTbeStatus(), obj.getTbeStatus())
            .append(getTbeDriverLicenseExpiry(), obj.getTbeDriverLicenseExpiry())
            .append(getTbeDriverLicenseNo(), obj.getTbeDriverLicenseNo())
            .append(getTbeGender(), obj.getTbeGender())
            .append(getTbeSmoker(), obj.getTbeSmoker())
            .append(getTbeMaritalStatus(), obj.getTbeMaritalStatus())
            .append(getTbeDob(), obj.getTbeDob())
            .append(getTbeIdNo(), obj.getTbeIdNo())
            .append(getTbePhotoFileName(), obj.getTbePhotoFileName())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeNickName(), obj.getTbeNickName())
            .append(getTbeLastName(), obj.getTbeLastName())
            .append(getTbeMiddleName(), obj.getTbeMiddleName())
            .append(getTbeFirstName(), obj.getTbeFirstName())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeEmail(), obj.getTbeEmail())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbpName())
            .append(getTbpPerusahaanId())
            .append(getTbpId())
            .append(getTblComments())
            .append(getTblFax())
            .append(getTblPhone())
            .append(getTblZipCode())
            .append(getTblAddress())
            .append(getTblCity())
            .append(getTblProvince())
            .append(getTblCountry())
            .append(getTblName())
            .append(getTblLocationId())
            .append(getTblId())
            .append(getTboNama())
            .append(getTboParentId())
            .append(getTboId())
            .append(getTbesName())
            .append(getTbesEmploymentStatusId())
            .append(getTbesId())
            .append(getTbjJoinedDate())
            .append(getTbjtComments())
            .append(getTbjtDescription())
            .append(getTbjtName())
            .append(getTbjtJobTitleId())
            .append(getTbjtId())
            .append(getTbeJoinedDate())
            .append(getTbeStatus())
            .append(getTbeDriverLicenseExpiry())
            .append(getTbeDriverLicenseNo())
            .append(getTbeGender())
            .append(getTbeSmoker())
            .append(getTbeMaritalStatus())
            .append(getTbeDob())
            .append(getTbeIdNo())
            .append(getTbePhotoFileName())
            .append(getTbeName())
            .append(getTbeNickName())
            .append(getTbeLastName())
            .append(getTbeMiddleName())
            .append(getTbeFirstName())
            .append(getTbeEmployeeId())
            .append(getTbeEmail())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbp_name", getTbpName())
            .append("tbp_perusahaan_id", getTbpPerusahaanId())
            .append("tbp_id", getTbpId())
            .append("tbl_comments", getTblComments())
            .append("tbl_fax", getTblFax())
            .append("tbl_phone", getTblPhone())
            .append("tbl_zip_code", getTblZipCode())
            .append("tbl_address", getTblAddress())
            .append("tbl_city", getTblCity())
            .append("tbl_province", getTblProvince())
            .append("tbl_country", getTblCountry())
            .append("tbl_name", getTblName())
            .append("tbl_location_id", getTblLocationId())
            .append("tbl_id", getTblId())
            .append("tbo_nama", getTboNama())
            .append("tbo_parent_id", getTboParentId())
            .append("tbo_id", getTboId())
            .append("tbes_name", getTbesName())
            .append("tbes_employment_status_id", getTbesEmploymentStatusId())
            .append("tbes_id", getTbesId())
            .append("tbj_joined_date", getTbjJoinedDate())
            .append("tbjt_comments", getTbjtComments())
            .append("tbjt_description", getTbjtDescription())
            .append("tbjt_name", getTbjtName())
            .append("tbjt_job_title_id", getTbjtJobTitleId())
            .append("tbjt_id", getTbjtId())
            .append("tbe_joined_date", getTbeJoinedDate())
            .append("tbe_status", getTbeStatus())
            .append("tbe_driver_license_expiry", getTbeDriverLicenseExpiry())
            .append("tbe_driver_license_no", getTbeDriverLicenseNo())
            .append("tbe_gender", getTbeGender())
            .append("tbe_smoker", getTbeSmoker())
            .append("tbe_marital_status", getTbeMaritalStatus())
            .append("tbe_dob", getTbeDob())
            .append("tbe_id_no", getTbeIdNo())
            .append("tbe_photo_file_name", getTbePhotoFileName())
            .append("tbe_name", getTbeName())
            .append("tbe_nick_name", getTbeNickName())
            .append("tbe_last_name", getTbeLastName())
            .append("tbe_middle_name", getTbeMiddleName())
            .append("tbe_first_name", getTbeFirstName())
            .append("tbe_employee_id", getTbeEmployeeId())
            .append("tbe_email", getTbeEmail())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewEmployeeInformationBean obj = (ViewEmployeeInformationBean) object;
        return new CompareToBuilder()
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpPerusahaanId(), obj.getTbpPerusahaanId())
            .append(getTbpId(), obj.getTbpId())
            .append(getTblComments(), obj.getTblComments())
            .append(getTblFax(), obj.getTblFax())
            .append(getTblPhone(), obj.getTblPhone())
            .append(getTblZipCode(), obj.getTblZipCode())
            .append(getTblAddress(), obj.getTblAddress())
            .append(getTblCity(), obj.getTblCity())
            .append(getTblProvince(), obj.getTblProvince())
            .append(getTblCountry(), obj.getTblCountry())
            .append(getTblName(), obj.getTblName())
            .append(getTblLocationId(), obj.getTblLocationId())
            .append(getTblId(), obj.getTblId())
            .append(getTboNama(), obj.getTboNama())
            .append(getTboParentId(), obj.getTboParentId())
            .append(getTboId(), obj.getTboId())
            .append(getTbesName(), obj.getTbesName())
            .append(getTbesEmploymentStatusId(), obj.getTbesEmploymentStatusId())
            .append(getTbesId(), obj.getTbesId())
            .append(getTbjJoinedDate(), obj.getTbjJoinedDate())
            .append(getTbjtComments(), obj.getTbjtComments())
            .append(getTbjtDescription(), obj.getTbjtDescription())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjtJobTitleId(), obj.getTbjtJobTitleId())
            .append(getTbjtId(), obj.getTbjtId())
            .append(getTbeJoinedDate(), obj.getTbeJoinedDate())
            .append(getTbeStatus(), obj.getTbeStatus())
            .append(getTbeDriverLicenseExpiry(), obj.getTbeDriverLicenseExpiry())
            .append(getTbeDriverLicenseNo(), obj.getTbeDriverLicenseNo())
            .append(getTbeGender(), obj.getTbeGender())
            .append(getTbeSmoker(), obj.getTbeSmoker())
            .append(getTbeMaritalStatus(), obj.getTbeMaritalStatus())
            .append(getTbeDob(), obj.getTbeDob())
            .append(getTbeIdNo(), obj.getTbeIdNo())
            .append(getTbePhotoFileName(), obj.getTbePhotoFileName())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeNickName(), obj.getTbeNickName())
            .append(getTbeLastName(), obj.getTbeLastName())
            .append(getTbeMiddleName(), obj.getTbeMiddleName())
            .append(getTbeFirstName(), obj.getTbeFirstName())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeEmail(), obj.getTbeEmail())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
