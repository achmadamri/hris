// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewPphTambahanBean is a mapping of view_pph_tambahan Table.
 * @author sql2java
*/
public class ViewPphTambahanBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -1260544415088474738L;
	
    private Double tbpphtNominal;

    private boolean tbpphtNominalIsModified = false;
    private boolean tbpphtNominalIsInitialized = false;

    private String tbpphtName;

    private boolean tbpphtNameIsModified = false;
    private boolean tbpphtNameIsInitialized = false;

    private Integer tbpphtId;

    private boolean tbpphtIdIsModified = false;
    private boolean tbpphtIdIsInitialized = false;

    private java.sql.Timestamp tbpphDate;

    private boolean tbpphDateIsModified = false;
    private boolean tbpphDateIsInitialized = false;

    private Integer tbpphId;

    private boolean tbpphIdIsModified = false;
    private boolean tbpphIdIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewPphTambahanBean is via the createViewPphTambahanBean method in ViewPphTambahanManager or
     * via the factory class ViewPphTambahanFactory create method
     */
    protected ViewPphTambahanBean()
    {
    }

    /**
     * Getter method for tbpphtNominal.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph_tambahan.tbppht_nominal</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphtNominal
     */
    public Double getTbpphtNominal()
    {
        return tbpphtNominal;
    }

    /**
     * Setter method for tbpphtNominal.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphtNominal
     */
    public void setTbpphtNominal(Double newVal)
    {
        if ((newVal != null && tbpphtNominal != null && (newVal.compareTo(tbpphtNominal) == 0)) ||
            (newVal == null && tbpphtNominal == null && tbpphtNominalIsInitialized)) {
            return;
        }
        tbpphtNominal = newVal;
        tbpphtNominalIsModified = true;
        tbpphtNominalIsInitialized = true;
    }

    /**
     * Setter method for tbpphtNominal.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphtNominal
     */
    public void setTbpphtNominal(double newVal)
    {
        setTbpphtNominal(new Double(newVal));
    }

    /**
     * Determines if the tbpphtNominal has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphtNominalModified()
    {
        return tbpphtNominalIsModified;
    }

    /**
     * Determines if the tbpphtNominal has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphtNominalInitialized()
    {
        return tbpphtNominalIsInitialized;
    }

    /**
     * Getter method for tbpphtName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph_tambahan.tbppht_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpphtName
     */
    public String getTbpphtName()
    {
        return tbpphtName;
    }

    /**
     * Setter method for tbpphtName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphtName
     */
    public void setTbpphtName(String newVal)
    {
        if ((newVal != null && tbpphtName != null && (newVal.compareTo(tbpphtName) == 0)) ||
            (newVal == null && tbpphtName == null && tbpphtNameIsInitialized)) {
            return;
        }
        tbpphtName = newVal;
        tbpphtNameIsModified = true;
        tbpphtNameIsInitialized = true;
    }

    /**
     * Determines if the tbpphtName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphtNameModified()
    {
        return tbpphtNameIsModified;
    }

    /**
     * Determines if the tbpphtName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphtNameInitialized()
    {
        return tbpphtNameIsInitialized;
    }

    /**
     * Getter method for tbpphtId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph_tambahan.tbppht_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpphtId
     */
    public Integer getTbpphtId()
    {
        return tbpphtId;
    }

    /**
     * Setter method for tbpphtId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphtId
     */
    public void setTbpphtId(Integer newVal)
    {
        if ((newVal != null && tbpphtId != null && (newVal.compareTo(tbpphtId) == 0)) ||
            (newVal == null && tbpphtId == null && tbpphtIdIsInitialized)) {
            return;
        }
        tbpphtId = newVal;
        tbpphtIdIsModified = true;
        tbpphtIdIsInitialized = true;
    }

    /**
     * Setter method for tbpphtId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphtId
     */
    public void setTbpphtId(int newVal)
    {
        setTbpphtId(new Integer(newVal));
    }

    /**
     * Determines if the tbpphtId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphtIdModified()
    {
        return tbpphtIdIsModified;
    }

    /**
     * Determines if the tbpphtId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphtIdInitialized()
    {
        return tbpphtIdIsInitialized;
    }

    /**
     * Getter method for tbpphDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph_tambahan.tbpph_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbpphDate
     */
    public java.sql.Timestamp getTbpphDate()
    {
        return tbpphDate;
    }

    /**
     * Setter method for tbpphDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphDate
     */
    public void setTbpphDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbpphDate != null && (newVal.compareTo(tbpphDate) == 0)) ||
            (newVal == null && tbpphDate == null && tbpphDateIsInitialized)) {
            return;
        }
        tbpphDate = newVal;
        tbpphDateIsModified = true;
        tbpphDateIsInitialized = true;
    }

    /**
     * Setter method for tbpphDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphDate
     */
    public void setTbpphDate(long newVal)
    {
        setTbpphDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbpphDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphDateModified()
    {
        return tbpphDateIsModified;
    }

    /**
     * Determines if the tbpphDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphDateInitialized()
    {
        return tbpphDateIsInitialized;
    }

    /**
     * Getter method for tbpphId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph_tambahan.tbpph_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpphId
     */
    public Integer getTbpphId()
    {
        return tbpphId;
    }

    /**
     * Setter method for tbpphId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphId
     */
    public void setTbpphId(Integer newVal)
    {
        if ((newVal != null && tbpphId != null && (newVal.compareTo(tbpphId) == 0)) ||
            (newVal == null && tbpphId == null && tbpphIdIsInitialized)) {
            return;
        }
        tbpphId = newVal;
        tbpphIdIsModified = true;
        tbpphIdIsInitialized = true;
    }

    /**
     * Setter method for tbpphId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphId
     */
    public void setTbpphId(int newVal)
    {
        setTbpphId(new Integer(newVal));
    }

    /**
     * Determines if the tbpphId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphIdModified()
    {
        return tbpphIdIsModified;
    }

    /**
     * Determines if the tbpphId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphIdInitialized()
    {
        return tbpphIdIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph_tambahan.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_pph_tambahan.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbpphtNominalIsModified 		|| tbpphtNameIsModified  		|| tbpphtIdIsModified  		|| tbpphDateIsModified  		|| tbpphIdIsModified  		|| tbeNameIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbpphtNominalIsModified = false;
        tbpphtNameIsModified = false;
        tbpphtIdIsModified = false;
        tbpphDateIsModified = false;
        tbpphIdIsModified = false;
        tbeNameIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewPphTambahanBean bean)
    {
        setTbpphtNominal(bean.getTbpphtNominal());
        setTbpphtName(bean.getTbpphtName());
        setTbpphtId(bean.getTbpphtId());
        setTbpphDate(bean.getTbpphDate());
        setTbpphId(bean.getTbpphId());
        setTbeName(bean.getTbeName());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbppht_nominal", getTbpphtNominal() == null ? "" : getTbpphtNominal().toString());
        dictionnary.put("tbppht_name", getTbpphtName() == null ? "" : getTbpphtName().toString());
        dictionnary.put("tbppht_id", getTbpphtId() == null ? "" : getTbpphtId().toString());
        dictionnary.put("tbpph_date", getTbpphDate() == null ? "" : getTbpphDate().toString());
        dictionnary.put("tbpph_id", getTbpphId() == null ? "" : getTbpphId().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbppht_nominal".equalsIgnoreCase(column) || "tbpphtNominal".equalsIgnoreCase(column)) {
            return getTbpphtNominal() == null ? "" : getTbpphtNominal().toString();
        } else if ("tbppht_name".equalsIgnoreCase(column) || "tbpphtName".equalsIgnoreCase(column)) {
            return getTbpphtName() == null ? "" : getTbpphtName().toString();
        } else if ("tbppht_id".equalsIgnoreCase(column) || "tbpphtId".equalsIgnoreCase(column)) {
            return getTbpphtId() == null ? "" : getTbpphtId().toString();
        } else if ("tbpph_date".equalsIgnoreCase(column) || "tbpphDate".equalsIgnoreCase(column)) {
            return getTbpphDate() == null ? "" : getTbpphDate().toString();
        } else if ("tbpph_id".equalsIgnoreCase(column) || "tbpphId".equalsIgnoreCase(column)) {
            return getTbpphId() == null ? "" : getTbpphId().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewPphTambahanBean)) {
            return false;
        }

		ViewPphTambahanBean obj = (ViewPphTambahanBean) object;
		return new EqualsBuilder()
            .append(getTbpphtNominal(), obj.getTbpphtNominal())
            .append(getTbpphtName(), obj.getTbpphtName())
            .append(getTbpphtId(), obj.getTbpphtId())
            .append(getTbpphDate(), obj.getTbpphDate())
            .append(getTbpphId(), obj.getTbpphId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbpphtNominal())
            .append(getTbpphtName())
            .append(getTbpphtId())
            .append(getTbpphDate())
            .append(getTbpphId())
            .append(getTbeName())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbppht_nominal", getTbpphtNominal())
            .append("tbppht_name", getTbpphtName())
            .append("tbppht_id", getTbpphtId())
            .append("tbpph_date", getTbpphDate())
            .append("tbpph_id", getTbpphId())
            .append("tbe_name", getTbeName())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewPphTambahanBean obj = (ViewPphTambahanBean) object;
        return new CompareToBuilder()
            .append(getTbpphtNominal(), obj.getTbpphtNominal())
            .append(getTbpphtName(), obj.getTbpphtName())
            .append(getTbpphtId(), obj.getTbpphtId())
            .append(getTbpphDate(), obj.getTbpphDate())
            .append(getTbpphId(), obj.getTbpphId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
