// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbLeaveTypesBean is a mapping of tb_leave_types Table.
 * @author sql2java
*/
public class TbLeaveTypesBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -1897561318385902685L;
	
    private Integer tbltReduction;

    private boolean tbltReductionIsModified = false;
    private boolean tbltReductionIsInitialized = false;

    private String tbltName;

    private boolean tbltNameIsModified = false;
    private boolean tbltNameIsInitialized = false;

    private String tbltLeaveTypesId;

    private boolean tbltLeaveTypesIdIsModified = false;
    private boolean tbltLeaveTypesIdIsInitialized = false;

    private Integer tbltId;

    private boolean tbltIdIsModified = false;
    private boolean tbltIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbLeaveTypesBean is via the createTbLeaveTypesBean method in TbLeaveTypesManager or
     * via the factory class TbLeaveTypesFactory create method
     */
    protected TbLeaveTypesBean()
    {
    }

    /**
     * Getter method for tbltReduction.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_leave_types.tblt_reduction</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbltReduction
     */
    public Integer getTbltReduction()
    {
        return tbltReduction;
    }

    /**
     * Setter method for tbltReduction.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltReduction
     */
    public void setTbltReduction(Integer newVal)
    {
        if ((newVal != null && tbltReduction != null && (newVal.compareTo(tbltReduction) == 0)) ||
            (newVal == null && tbltReduction == null && tbltReductionIsInitialized)) {
            return;
        }
        tbltReduction = newVal;
        tbltReductionIsModified = true;
        tbltReductionIsInitialized = true;
    }

    /**
     * Setter method for tbltReduction.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbltReduction
     */
    public void setTbltReduction(int newVal)
    {
        setTbltReduction(new Integer(newVal));
    }

    /**
     * Determines if the tbltReduction has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltReductionModified()
    {
        return tbltReductionIsModified;
    }

    /**
     * Determines if the tbltReduction has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltReductionInitialized()
    {
        return tbltReductionIsInitialized;
    }

    /**
     * Getter method for tbltName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_leave_types.tblt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbltName
     */
    public String getTbltName()
    {
        return tbltName;
    }

    /**
     * Setter method for tbltName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltName
     */
    public void setTbltName(String newVal)
    {
        if ((newVal != null && tbltName != null && (newVal.compareTo(tbltName) == 0)) ||
            (newVal == null && tbltName == null && tbltNameIsInitialized)) {
            return;
        }
        tbltName = newVal;
        tbltNameIsModified = true;
        tbltNameIsInitialized = true;
    }

    /**
     * Determines if the tbltName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltNameModified()
    {
        return tbltNameIsModified;
    }

    /**
     * Determines if the tbltName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltNameInitialized()
    {
        return tbltNameIsInitialized;
    }

    /**
     * Getter method for tbltLeaveTypesId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_leave_types.tblt_leave_types_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbltLeaveTypesId
     */
    public String getTbltLeaveTypesId()
    {
        return tbltLeaveTypesId;
    }

    /**
     * Setter method for tbltLeaveTypesId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltLeaveTypesId
     */
    public void setTbltLeaveTypesId(String newVal)
    {
        if ((newVal != null && tbltLeaveTypesId != null && (newVal.compareTo(tbltLeaveTypesId) == 0)) ||
            (newVal == null && tbltLeaveTypesId == null && tbltLeaveTypesIdIsInitialized)) {
            return;
        }
        tbltLeaveTypesId = newVal;
        tbltLeaveTypesIdIsModified = true;
        tbltLeaveTypesIdIsInitialized = true;
    }

    /**
     * Determines if the tbltLeaveTypesId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltLeaveTypesIdModified()
    {
        return tbltLeaveTypesIdIsModified;
    }

    /**
     * Determines if the tbltLeaveTypesId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltLeaveTypesIdInitialized()
    {
        return tbltLeaveTypesIdIsInitialized;
    }

    /**
     * Getter method for tbltId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_leave_types.tblt_id</li>
     * <li> imported key: tb_assigned_leaves.tblt_id</li>
     * <li> imported key: tb_job_title_leave.tblt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbltId
     */
    public Integer getTbltId()
    {
        return tbltId;
    }

    /**
     * Setter method for tbltId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltId
     */
    public void setTbltId(Integer newVal)
    {
        if ((newVal != null && tbltId != null && (newVal.compareTo(tbltId) == 0)) ||
            (newVal == null && tbltId == null && tbltIdIsInitialized)) {
            return;
        }
        tbltId = newVal;
        tbltIdIsModified = true;
        tbltIdIsInitialized = true;
    }

    /**
     * Setter method for tbltId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbltId
     */
    public void setTbltId(int newVal)
    {
        setTbltId(new Integer(newVal));
    }

    /**
     * Determines if the tbltId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltIdModified()
    {
        return tbltIdIsModified;
    }

    /**
     * Determines if the tbltId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltIdInitialized()
    {
        return tbltIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbltReductionIsModified 		|| tbltNameIsModified  		|| tbltLeaveTypesIdIsModified  		|| tbltIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbltReductionIsModified = false;
        tbltNameIsModified = false;
        tbltLeaveTypesIdIsModified = false;
        tbltIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbLeaveTypesBean bean)
    {
        setTbltReduction(bean.getTbltReduction());
        setTbltName(bean.getTbltName());
        setTbltLeaveTypesId(bean.getTbltLeaveTypesId());
        setTbltId(bean.getTbltId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tblt_reduction", getTbltReduction() == null ? "" : getTbltReduction().toString());
        dictionnary.put("tblt_name", getTbltName() == null ? "" : getTbltName().toString());
        dictionnary.put("tblt_leave_types_id", getTbltLeaveTypesId() == null ? "" : getTbltLeaveTypesId().toString());
        dictionnary.put("tblt_id", getTbltId() == null ? "" : getTbltId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tblt_id", getTbltId() == null ? "" : getTbltId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tblt_reduction".equalsIgnoreCase(column) || "tbltReduction".equalsIgnoreCase(column)) {
            return getTbltReduction() == null ? "" : getTbltReduction().toString();
        } else if ("tblt_name".equalsIgnoreCase(column) || "tbltName".equalsIgnoreCase(column)) {
            return getTbltName() == null ? "" : getTbltName().toString();
        } else if ("tblt_leave_types_id".equalsIgnoreCase(column) || "tbltLeaveTypesId".equalsIgnoreCase(column)) {
            return getTbltLeaveTypesId() == null ? "" : getTbltLeaveTypesId().toString();
        } else if ("tblt_id".equalsIgnoreCase(column) || "tbltId".equalsIgnoreCase(column)) {
            return getTbltId() == null ? "" : getTbltId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbLeaveTypesBean)) {
            return false;
        }

		TbLeaveTypesBean obj = (TbLeaveTypesBean) object;
		return new EqualsBuilder()
            .append(getTbltReduction(), obj.getTbltReduction())
            .append(getTbltName(), obj.getTbltName())
            .append(getTbltLeaveTypesId(), obj.getTbltLeaveTypesId())
            .append(getTbltId(), obj.getTbltId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbltReduction())
            .append(getTbltName())
            .append(getTbltLeaveTypesId())
            .append(getTbltId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tblt_reduction", getTbltReduction())
            .append("tblt_name", getTbltName())
            .append("tblt_leave_types_id", getTbltLeaveTypesId())
            .append("tblt_id", getTbltId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbLeaveTypesBean obj = (TbLeaveTypesBean) object;
        return new CompareToBuilder()
            .append(getTbltReduction(), obj.getTbltReduction())
            .append(getTbltName(), obj.getTbltName())
            .append(getTbltLeaveTypesId(), obj.getTbltLeaveTypesId())
            .append(getTbltId(), obj.getTbltId())
            .toComparison();
   }
}
