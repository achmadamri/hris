// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the ViewReportEmployeeAttendanceBean objects.
 * @author sql2java
 */
public class ViewReportEmployeeAttendanceComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ViewReportEmployeeAttendanceComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewReportEmployeeAttendanceComparator(ViewReportEmployeeAttendanceManager.ID_TBS_OUT_TIME, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBS_OUT_TIME
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBS_IN_TIME
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBS_NAME
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBS_SHIFT_ID
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_NOTE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_NOTE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_PHOTO
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_PHOTO
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_LATITUDE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_LONGITUDE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_LATITUDE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_LONGITUDE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_TIME_DIFF
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_TIME
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_TIME_DIFF
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_TIME
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_DATE
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBE_NAME
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBE_ID
     * </ul>
     */
    public ViewReportEmployeeAttendanceComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ViewReportEmployeeAttendanceComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewReportEmployeeAttendanceComparator(ViewReportEmployeeAttendanceManager.ID_TBS_OUT_TIME, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBS_OUT_TIME
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBS_IN_TIME
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBS_NAME
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBS_SHIFT_ID
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_NOTE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_NOTE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_PHOTO
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_PHOTO
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_LATITUDE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_LONGITUDE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_LATITUDE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_LONGITUDE
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_TIME_DIFF
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_TIME
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_TIME_DIFF
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_IN_TIME
     *   <li>ViewReportEmployeeAttendanceManager.ID_RTBA_DATE
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBE_NAME
     *   <li>ViewReportEmployeeAttendanceManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ViewReportEmployeeAttendanceComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ViewReportEmployeeAttendanceBean b1 = (ViewReportEmployeeAttendanceBean)pObj1;
        ViewReportEmployeeAttendanceBean b2 = (ViewReportEmployeeAttendanceBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ViewReportEmployeeAttendanceManager.ID_TBS_OUT_TIME:
                if (b1.getTbsOutTime() == null && b2.getTbsOutTime() != null) {
                    iReturn = -1;
                } else if (b1.getTbsOutTime() == null && b2.getTbsOutTime() == null) {
                    iReturn = 0;
                } else if (b1.getTbsOutTime() != null && b2.getTbsOutTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbsOutTime().compareTo(b2.getTbsOutTime());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_TBS_IN_TIME:
                if (b1.getTbsInTime() == null && b2.getTbsInTime() != null) {
                    iReturn = -1;
                } else if (b1.getTbsInTime() == null && b2.getTbsInTime() == null) {
                    iReturn = 0;
                } else if (b1.getTbsInTime() != null && b2.getTbsInTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbsInTime().compareTo(b2.getTbsInTime());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_TBS_NAME:
                if (b1.getTbsName() == null && b2.getTbsName() != null) {
                    iReturn = -1;
                } else if (b1.getTbsName() == null && b2.getTbsName() == null) {
                    iReturn = 0;
                } else if (b1.getTbsName() != null && b2.getTbsName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbsName().compareTo(b2.getTbsName());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_TBS_SHIFT_ID:
                if (b1.getTbsShiftId() == null && b2.getTbsShiftId() != null) {
                    iReturn = -1;
                } else if (b1.getTbsShiftId() == null && b2.getTbsShiftId() == null) {
                    iReturn = 0;
                } else if (b1.getTbsShiftId() != null && b2.getTbsShiftId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbsShiftId().compareTo(b2.getTbsShiftId());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_NOTE:
                if (b1.getRtbaOutNote() == null && b2.getRtbaOutNote() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaOutNote() == null && b2.getRtbaOutNote() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaOutNote() != null && b2.getRtbaOutNote() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaOutNote().compareTo(b2.getRtbaOutNote());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_IN_NOTE:
                if (b1.getRtbaInNote() == null && b2.getRtbaInNote() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaInNote() == null && b2.getRtbaInNote() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaInNote() != null && b2.getRtbaInNote() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaInNote().compareTo(b2.getRtbaInNote());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_PHOTO:
                if (b1.getRtbaOutPhoto() == null && b2.getRtbaOutPhoto() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaOutPhoto() == null && b2.getRtbaOutPhoto() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaOutPhoto() != null && b2.getRtbaOutPhoto() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaOutPhoto().compareTo(b2.getRtbaOutPhoto());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_IN_PHOTO:
                if (b1.getRtbaInPhoto() == null && b2.getRtbaInPhoto() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaInPhoto() == null && b2.getRtbaInPhoto() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaInPhoto() != null && b2.getRtbaInPhoto() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaInPhoto().compareTo(b2.getRtbaInPhoto());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_LATITUDE:
                if (b1.getRtbaOutLatitude() == null && b2.getRtbaOutLatitude() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaOutLatitude() == null && b2.getRtbaOutLatitude() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaOutLatitude() != null && b2.getRtbaOutLatitude() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaOutLatitude().compareTo(b2.getRtbaOutLatitude());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_LONGITUDE:
                if (b1.getRtbaOutLongitude() == null && b2.getRtbaOutLongitude() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaOutLongitude() == null && b2.getRtbaOutLongitude() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaOutLongitude() != null && b2.getRtbaOutLongitude() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaOutLongitude().compareTo(b2.getRtbaOutLongitude());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_IN_LATITUDE:
                if (b1.getRtbaInLatitude() == null && b2.getRtbaInLatitude() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaInLatitude() == null && b2.getRtbaInLatitude() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaInLatitude() != null && b2.getRtbaInLatitude() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaInLatitude().compareTo(b2.getRtbaInLatitude());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_IN_LONGITUDE:
                if (b1.getRtbaInLongitude() == null && b2.getRtbaInLongitude() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaInLongitude() == null && b2.getRtbaInLongitude() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaInLongitude() != null && b2.getRtbaInLongitude() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaInLongitude().compareTo(b2.getRtbaInLongitude());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_TIME_DIFF:
                if (b1.getRtbaOutTimeDiff() == null && b2.getRtbaOutTimeDiff() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaOutTimeDiff() == null && b2.getRtbaOutTimeDiff() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaOutTimeDiff() != null && b2.getRtbaOutTimeDiff() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaOutTimeDiff().compareTo(b2.getRtbaOutTimeDiff());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_OUT_TIME:
                if (b1.getRtbaOutTime() == null && b2.getRtbaOutTime() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaOutTime() == null && b2.getRtbaOutTime() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaOutTime() != null && b2.getRtbaOutTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaOutTime().compareTo(b2.getRtbaOutTime());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_IN_TIME_DIFF:
                if (b1.getRtbaInTimeDiff() == null && b2.getRtbaInTimeDiff() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaInTimeDiff() == null && b2.getRtbaInTimeDiff() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaInTimeDiff() != null && b2.getRtbaInTimeDiff() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaInTimeDiff().compareTo(b2.getRtbaInTimeDiff());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_IN_TIME:
                if (b1.getRtbaInTime() == null && b2.getRtbaInTime() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaInTime() == null && b2.getRtbaInTime() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaInTime() != null && b2.getRtbaInTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaInTime().compareTo(b2.getRtbaInTime());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_RTBA_DATE:
                if (b1.getRtbaDate() == null && b2.getRtbaDate() != null) {
                    iReturn = -1;
                } else if (b1.getRtbaDate() == null && b2.getRtbaDate() == null) {
                    iReturn = 0;
                } else if (b1.getRtbaDate() != null && b2.getRtbaDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getRtbaDate().compareTo(b2.getRtbaDate());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_TBE_NAME:
                if (b1.getTbeName() == null && b2.getTbeName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeName() == null && b2.getTbeName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeName() != null && b2.getTbeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeName().compareTo(b2.getTbeName());
                }
                break;
            case ViewReportEmployeeAttendanceManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
