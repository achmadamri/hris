// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.TbProjectEmployeeBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the tb_project_employee table.
 * @author sql2java
 */
public class TbProjectEmployeeManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbe_id field.
     */
    public static final int ID_TBE_ID = 0;

    /**
     * Identify the tbp_id field.
     */
    public static final int ID_TBP_ID = 1;

    /**
     * Identify the tbpe_id field.
     */
    public static final int ID_TBPE_ID = 2;

    /**
     * Contains all the full fields of the tb_project_employee table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "tb_project_employee.tbe_id"
        ,"tb_project_employee.tbp_id"
        ,"tb_project_employee.tbpe_id"
    };

    /**
     * Contains all the fields of the tb_project_employee table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbe_id"
        ,"tbp_id"
        ,"tbpe_id"
    };

    /**
     * Field that contains the comma separated fields of the tb_project_employee table.
     */
    public static final String ALL_FULL_FIELDS = "tb_project_employee.tbe_id"
                            + ",tb_project_employee.tbp_id"
                            + ",tb_project_employee.tbpe_id";

    /**
     * Field that contains the comma separated fields of the tb_project_employee table.
     */
    public static final String ALL_FIELDS = "tbe_id"
                            + ",tbp_id"
                            + ",tbpe_id";

    private static TbProjectEmployeeManager singleton = new TbProjectEmployeeManager();

    /**
     * Get the TbProjectEmployeeManager singleton.
     *
     * @return TbProjectEmployeeManager
     */
    public static TbProjectEmployeeManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new TbProjectEmployeeBean instance.
     *
     * @return the new TbProjectEmployeeBean
     */
    public TbProjectEmployeeBean createTbProjectEmployeeBean()
    {
        return new TbProjectEmployeeBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////
	
    /**
     * Loads a TbProjectEmployeeBean from the tb_project_employee using its key fields.
     *
     * @param tbpeId Integer - PK# 1
     * @return a unique TbProjectEmployeeBean
     * @throws DAOException
     */
    //1
    public TbProjectEmployeeBean loadByPrimaryKey(Integer tbpeId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("SELECT " + ALL_FIELDS + " FROM tb_project_employee WHERE tbpe_id=?");
            log.debug("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbpeId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbpeId); }
            TbProjectEmployeeBean pReturn[] = this.loadByPreparedStatement(ps);
            if (pReturn.length < 1) {
                // throw new ObjectRetrievalException();
				return null;
            } else {
                return pReturn[0];
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
		
	//1WS
    //public TbProjectEmployeeBean loadByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return fromBeanWsToBean(Util.getInstance().getDAOServiceV1().tbXLoadByPrimaryKey(id));
    //}
    
    //2WS
    //public int deleteByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return Util.getInstance().getDAOServiceV1().tbXDeleteByPrimaryKey(id);
    //}

    /**
     * Deletes rows according to its keys.
     *
     * @param tbpeId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer tbpeId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_project_employee WHERE tbpe_id=?");
            log.debug("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbpeId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbpeId); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }


    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the TbEmployeeBean object from the tb_project_employee.tbe_id field.
     *
     * @param bean the TbProjectEmployeeBean
     * @return the associated TbEmployeeBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbEmployeeBean getTbEmployeeBean(TbProjectEmployeeBean bean) throws DAOException
    {
        TbEmployeeBean other = TbEmployeeManager.getInstance().createTbEmployeeBean();
        other.setTbeId(bean.getTbeId()); 
        bean.setTbEmployeeBean(TbEmployeeManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbEmployeeBean();
    }

    /**
     * Associates the TbProjectEmployeeBean object to the TbEmployeeBean object.
     *
     * @param bean the TbProjectEmployeeBean object to use
     * @param beanToSet the TbEmployeeBean object to associate to the TbProjectEmployeeBean
     * @return the associated TbEmployeeBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbEmployeeBean addTbEmployeeBean(TbEmployeeBean beanToSet, TbProjectEmployeeBean bean) throws Exception
    {
        beanToSet.setTbeId(bean.getTbeId());
        return TbEmployeeManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbProjectEmployeeBean object to the TbEmployeeBean object.
     *
     * @param bean the TbProjectEmployeeBean object to use
     * @param beanToSet the TbEmployeeBean object to associate to the TbProjectEmployeeBean
     * @return the associated TbEmployeeBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbEmployeeBean setTbEmployeeBean(TbProjectEmployeeBean bean, TbEmployeeBean beanToSet) throws Exception
    {
        bean.setTbeId(beanToSet.getTbeId());
        return TbEmployeeManager.getInstance().save(beanToSet);
    }

    /**
     * Retrieves the TbProjectBean object from the tb_project_employee.tbp_id field.
     *
     * @param bean the TbProjectEmployeeBean
     * @return the associated TbProjectBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbProjectBean getTbProjectBean(TbProjectEmployeeBean bean) throws DAOException
    {
        TbProjectBean other = TbProjectManager.getInstance().createTbProjectBean();
        other.setTbpId(bean.getTbpId()); 
        bean.setTbProjectBean(TbProjectManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbProjectBean();
    }

    /**
     * Associates the TbProjectEmployeeBean object to the TbProjectBean object.
     *
     * @param bean the TbProjectEmployeeBean object to use
     * @param beanToSet the TbProjectBean object to associate to the TbProjectEmployeeBean
     * @return the associated TbProjectBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbProjectBean addTbProjectBean(TbProjectBean beanToSet, TbProjectEmployeeBean bean) throws Exception
    {
        beanToSet.setTbpId(bean.getTbpId());
        return TbProjectManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbProjectEmployeeBean object to the TbProjectBean object.
     *
     * @param bean the TbProjectEmployeeBean object to use
     * @param beanToSet the TbProjectBean object to associate to the TbProjectEmployeeBean
     * @return the associated TbProjectBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbProjectBean setTbProjectBean(TbProjectEmployeeBean bean, TbProjectBean beanToSet) throws Exception
    {
        bean.setTbpId(beanToSet.getTbpId());
        return TbProjectManager.getInstance().save(beanToSet);
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from tb_project_employee.
     *
     * @return an array of TbProjectEmployeeManager bean
     * @throws DAOException
     */
    //5
    public TbProjectEmployeeBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from tb_project_employee, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of TbProjectEmployeeManager bean
     * @throws DAOException
     */
    //6
    public TbProjectEmployeeBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TbProjectEmployeeBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TbProjectEmployeeBean table
     * @throws DAOException
     */
    //7
    public TbProjectEmployeeBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TbProjectEmployeeBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting TbProjectEmployeeBean table
     * @throws DAOException
     */
    //8
    public TbProjectEmployeeBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of TbProjectEmployeeBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting TbProjectEmployeeBean table
     * @throws DAOException
     */
    //9
    public TbProjectEmployeeBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_project_employee ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM tb_project_employee ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the tb_project_employee table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_project_employee " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the TbProjectEmployeeBean bean into the database.
     *
     * @param bean the TbProjectEmployeeBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public TbProjectEmployeeBean save(TbProjectEmployeeBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the TbProjectEmployeeBean bean into the database.
     *
     * @param bean the TbProjectEmployeeBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public TbProjectEmployeeBean insert(TbProjectEmployeeBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into tb_project_employee (");

            if (bean.isTbeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id");
                _dirtyCount++;
            }

            if (bean.isTbpIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_id");
                _dirtyCount++;
            }

            if (bean.isTbpeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpe_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();
            if (!bean.isTbpeIdModified())
            {
                ResultSet rs = ps.getGeneratedKeys();
                try {
                    if(rs.next()) {
                        bean.setTbpeId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve auto generated key!");
                    }
                } finally {
                    this.getManager().close(rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the TbProjectEmployeeBean bean record in the database according to the changes.
     *
     * @param bean the TbProjectEmployeeBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public TbProjectEmployeeBean update(TbProjectEmployeeBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE tb_project_employee SET ");
            boolean useComma=false;

            if (bean.isTbeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id=?");
            }

            if (bean.isTbpIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_id=?");
            }

            if (bean.isTbpeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpe_id=?");
            }
            sql.append(" WHERE ");
            sql.append("tbpe_id=?");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getTbpeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpeId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of TbProjectEmployeeBean beans into the database.
     *
     * @param beans the TbProjectEmployeeBean bean table to be saved
     * @return the saved TbProjectEmployeeBean array.
     * @throws DAOException
     */
    //15
    public TbProjectEmployeeBean[] save(TbProjectEmployeeBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of TbProjectEmployeeBean beans into the database.
     *
     * @param beans the TbProjectEmployeeBean bean table to be inserted
     * @return the saved TbProjectEmployeeBean array.
     * @throws DAOException
     */
    //16
    public TbProjectEmployeeBean[] insert(TbProjectEmployeeBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of TbProjectEmployeeBean beans into the database.
     *
     * @param beans the TbProjectEmployeeBean bean table to be inserted
     * @return the saved TbProjectEmployeeBean array.
     * @throws DAOException
     */
    //17
    public TbProjectEmployeeBean[] update(TbProjectEmployeeBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique TbProjectEmployeeBean bean from a template one giving a c
     *
     * @param bean the TbProjectEmployeeBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public TbProjectEmployeeBean loadUniqueUsingTemplate(TbProjectEmployeeBean bean) throws DAOException
    {
         TbProjectEmployeeBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of TbProjectEmployeeBean from a template one.
     *
     * @param bean the TbProjectEmployeeBean template to look for
     * @return all the TbProjectEmployeeBean matching the template
     * @throws DAOException
     */
    //19
    public TbProjectEmployeeBean[] loadUsingTemplate(TbProjectEmployeeBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of TbProjectEmployeeBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbProjectEmployeeBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the TbProjectEmployeeBean matching the template
     * @throws DAOException
     */
    //20
    public TbProjectEmployeeBean[] loadUsingTemplate(TbProjectEmployeeBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of TbProjectEmployeeBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbProjectEmployeeBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the TbProjectEmployeeBean matching the template
     * @throws DAOException
     */
    //20
    public TbProjectEmployeeBean[] loadUsingTemplate(TbProjectEmployeeBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_project_employee ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a TbProjectEmployeeBean template.
     *
     * @param bean the TbProjectEmployeeBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(TbProjectEmployeeBean bean) throws DAOException
    {
        if (bean.isTbpeIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getTbpeId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM tb_project_employee ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

    /**
     * Retrieves an array of TbProjectEmployeeBean using the tbpe_fk_1 index.
     *
     * @param tbeId the tbe_id column's value filter.
     * @return an array of TbProjectEmployeeBean
     * @throws DAOException
     */
    public TbProjectEmployeeBean[] loadBytbpe_fk_1(Integer tbeId) throws DAOException
    {
        TbProjectEmployeeBean bean = this.createTbProjectEmployeeBean();
        bean.setTbeId(tbeId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbpe_fk_1 index.
     *
     * @param tbeId the tbe_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbpe_fk_1(Integer tbeId) throws DAOException
    {
        TbProjectEmployeeBean bean = this.createTbProjectEmployeeBean();
        bean.setTbeId(tbeId);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an array of TbProjectEmployeeBean using the tbpe_fk_2 index.
     *
     * @param tbpId the tbp_id column's value filter.
     * @return an array of TbProjectEmployeeBean
     * @throws DAOException
     */
    public TbProjectEmployeeBean[] loadBytbpe_fk_2(Integer tbpId) throws DAOException
    {
        TbProjectEmployeeBean bean = this.createTbProjectEmployeeBean();
        bean.setTbpId(tbpId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbpe_fk_2 index.
     *
     * @param tbpId the tbp_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbpe_fk_2(Integer tbpId) throws DAOException
    {
        TbProjectEmployeeBean bean = this.createTbProjectEmployeeBean();
        bean.setTbpId(tbpId);
        return deleteUsingTemplate(bean);
    }
    


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table tb_project_employee.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table tb_project_employee with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM tb_project_employee " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table tb_project_employee with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific TbProjectEmployeeBean bean
     *
     * @param bean the TbProjectEmployeeBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(TbProjectEmployeeBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific TbProjectEmployeeBean bean , given the start row and number of rows.
     *
     * @param bean the TbProjectEmployeeBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbProjectEmployeeBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific TbProjectEmployeeBean bean given the start row and number of rows and the search type
     *
     * @param bean the TbProjectEmployeeBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbProjectEmployeeBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM tb_project_employee");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, TbProjectEmployeeBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id = ?");
                }
            }
            if (bean.isTbpIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id = ?");
                }
            }
            if (bean.isTbpeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpe_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpe_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, TbProjectEmployeeBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeId() + "]");
                if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            }
            if (bean.isTbpIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpId() + "]");
                if (bean.getTbpId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpId()); }
            }
            if (bean.isTbpeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpeId() + "]");
                if (bean.getTbpeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpeId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of TbProjectEmployeeBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting TbProjectEmployeeBean table
     * @throws DAOException
     */
    //28
    public TbProjectEmployeeBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (TbProjectEmployeeBean[])v.toArray(new TbProjectEmployeeBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the tb_project_employee on a TbProjectEmployeeBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbProjectEmployeeBean bean
     * @throws DAOException
     */
    //29
    public TbProjectEmployeeBean decodeRow(ResultSet rs) throws DAOException
    {
        TbProjectEmployeeBean bean = this.createTbProjectEmployeeBean();
        try
        {
            bean.setTbeId(Manager.getInteger(rs, 1));
            bean.setTbpId(Manager.getInteger(rs, 2));
            bean.setTbpeId(Manager.getInteger(rs, 3));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public TbProjectEmployeeBean toBean(TbProjectEmployeeBeanModel beanModel, TbProjectEmployeeBean bean)
    {
		if (beanModel.getTbeId() != null)
			bean.setTbeId(beanModel.getTbeId());

		if (bean.getTbeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeId().getClass().getName()))
			bean.setTbeId(beanModel.getTbeId());
		
		if (beanModel.getTbpId() != null)
			bean.setTbpId(beanModel.getTbpId());

		if (bean.getTbpId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpId().getClass().getName()))
			bean.setTbpId(beanModel.getTbpId());
		
		if (beanModel.getTbpeId() != null)
			bean.setTbpeId(beanModel.getTbpeId());

		if (bean.getTbpeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpeId().getClass().getName()))
			bean.setTbpeId(beanModel.getTbpeId());
		
        return bean;
    }
	
    //29AA
    public TbProjectEmployeeBean[] toBeans(TbProjectEmployeeBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	TbProjectEmployeeBean beans[] = new TbProjectEmployeeBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public TbProjectEmployeeBeanModel toBeanModel(TbProjectEmployeeBean bean)
    {
    	TbProjectEmployeeBeanModel beanModel = new TbProjectEmployeeBeanModel();
		beanModel.setTbeId(bean.getTbeId());
		beanModel.setTbpId(bean.getTbpId());
		beanModel.setTbpeId(bean.getTbpeId());
		return beanModel;
    }
    
    //29CC
    public TbProjectEmployeeBeanModel[] toBeanModels(TbProjectEmployeeBean beans[])
    {
    	int beansCount = beans.length;
    	TbProjectEmployeeBeanModel beanModels[] = new TbProjectEmployeeBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the tb_project_employee table on a TbProjectEmployeeBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting TbProjectEmployeeBean bean
     * @throws DAOException
     */
    //30
    public TbProjectEmployeeBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        TbProjectEmployeeBean bean = this.createTbProjectEmployeeBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBE_ID:
                        ++pos;
                        bean.setTbeId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBP_ID:
                        ++pos;
                        bean.setTbpId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBPE_ID:
                        ++pos;
                        bean.setTbpeId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the tb_project_employee on a TbProjectEmployeeBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbProjectEmployeeBean bean
     * @throws DAOException
     */
    //31
    public TbProjectEmployeeBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        TbProjectEmployeeBean bean = this.createTbProjectEmployeeBean();
        try
        {
            bean.setTbeId(Manager.getInteger(rs, "tbe_id"));
            bean.setTbpId(Manager.getInteger(rs, "tbp_id"));
            bean.setTbpeId(Manager.getInteger(rs, "tbpe_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TbProjectEmployeeBean
     * @throws DAOException
     */
    //32
    public TbProjectEmployeeBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TbProjectEmployeeBean
     * @throws DAOException
     */
    //33
    public TbProjectEmployeeBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (TbProjectEmployeeBean[])v.toArray(new TbProjectEmployeeBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of TbProjectEmployeeBean
     * @throws DAOException
     */
    //34
    public TbProjectEmployeeBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private TbProjectEmployeeListener listener = null;

    /**
     * Registers a unique TbProjectEmployeeListener listener.
     */
    //35
    public void registerListener(TbProjectEmployeeListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the TbProjectEmployeeBean bean.
     *
     * @param bean the TbProjectEmployeeBean bean to be saved
     */
    //36
    private void beforeInsert(TbProjectEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the TbProjectEmployeeBean bean.
     *
     * @param bean the TbProjectEmployeeBean bean to be saved
     */
    //37
    private void afterInsert(TbProjectEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the TbProjectEmployeeBean bean.
     *
     * @param bean the TbProjectEmployeeBean bean to be updated
     */
    //38
    private void beforeUpdate(TbProjectEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the TbProjectEmployeeBean bean.
     *
     * @param bean the TbProjectEmployeeBean bean to be updated
     */
    //39
    private void afterUpdate(TbProjectEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the TbProjectEmployeeBean bean.
     *
     * @param bean the TbProjectEmployeeBean bean to be deleted
     */
    private void beforeDelete(TbProjectEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the TbProjectEmployeeBean bean.
     *
     * @param bean the TbProjectEmployeeBean bean to be deleted
     */
    private void afterDelete(TbProjectEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
