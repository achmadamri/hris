// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbContactDetailsBean is a mapping of tb_contact_details Table.
 * @author sql2java
*/
public class TbContactDetailsBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -3432561154144494692L;
	
    private String tbcdOtherEmail;

    private boolean tbcdOtherEmailIsModified = false;
    private boolean tbcdOtherEmailIsInitialized = false;

    private String tbcdWorkPhone;

    private boolean tbcdWorkPhoneIsModified = false;
    private boolean tbcdWorkPhoneIsInitialized = false;

    private String tbcdMobilePhone;

    private boolean tbcdMobilePhoneIsModified = false;
    private boolean tbcdMobilePhoneIsInitialized = false;

    private String tbcdHomePhone;

    private boolean tbcdHomePhoneIsModified = false;
    private boolean tbcdHomePhoneIsInitialized = false;

    private String tbcdZipCode;

    private boolean tbcdZipCodeIsModified = false;
    private boolean tbcdZipCodeIsInitialized = false;

    private String tbcdProvince;

    private boolean tbcdProvinceIsModified = false;
    private boolean tbcdProvinceIsInitialized = false;

    private String tbcdCity;

    private boolean tbcdCityIsModified = false;
    private boolean tbcdCityIsInitialized = false;

    private String tbcdStreet;

    private boolean tbcdStreetIsModified = false;
    private boolean tbcdStreetIsInitialized = false;

    private Integer tbnId;

    private boolean tbnIdIsModified = false;
    private boolean tbnIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbContactDetailsBean is via the createTbContactDetailsBean method in TbContactDetailsManager or
     * via the factory class TbContactDetailsFactory create method
     */
    protected TbContactDetailsBean()
    {
    }

    /**
     * Getter method for tbcdOtherEmail.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_contact_details.tbcd_other_email</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdOtherEmail
     */
    public String getTbcdOtherEmail()
    {
        return tbcdOtherEmail;
    }

    /**
     * Setter method for tbcdOtherEmail.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdOtherEmail
     */
    public void setTbcdOtherEmail(String newVal)
    {
        if ((newVal != null && tbcdOtherEmail != null && (newVal.compareTo(tbcdOtherEmail) == 0)) ||
            (newVal == null && tbcdOtherEmail == null && tbcdOtherEmailIsInitialized)) {
            return;
        }
        tbcdOtherEmail = newVal;
        tbcdOtherEmailIsModified = true;
        tbcdOtherEmailIsInitialized = true;
    }

    /**
     * Determines if the tbcdOtherEmail has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdOtherEmailModified()
    {
        return tbcdOtherEmailIsModified;
    }

    /**
     * Determines if the tbcdOtherEmail has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdOtherEmailInitialized()
    {
        return tbcdOtherEmailIsInitialized;
    }

    /**
     * Getter method for tbcdWorkPhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_contact_details.tbcd_work_phone</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdWorkPhone
     */
    public String getTbcdWorkPhone()
    {
        return tbcdWorkPhone;
    }

    /**
     * Setter method for tbcdWorkPhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdWorkPhone
     */
    public void setTbcdWorkPhone(String newVal)
    {
        if ((newVal != null && tbcdWorkPhone != null && (newVal.compareTo(tbcdWorkPhone) == 0)) ||
            (newVal == null && tbcdWorkPhone == null && tbcdWorkPhoneIsInitialized)) {
            return;
        }
        tbcdWorkPhone = newVal;
        tbcdWorkPhoneIsModified = true;
        tbcdWorkPhoneIsInitialized = true;
    }

    /**
     * Determines if the tbcdWorkPhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdWorkPhoneModified()
    {
        return tbcdWorkPhoneIsModified;
    }

    /**
     * Determines if the tbcdWorkPhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdWorkPhoneInitialized()
    {
        return tbcdWorkPhoneIsInitialized;
    }

    /**
     * Getter method for tbcdMobilePhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_contact_details.tbcd_mobile_phone</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdMobilePhone
     */
    public String getTbcdMobilePhone()
    {
        return tbcdMobilePhone;
    }

    /**
     * Setter method for tbcdMobilePhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdMobilePhone
     */
    public void setTbcdMobilePhone(String newVal)
    {
        if ((newVal != null && tbcdMobilePhone != null && (newVal.compareTo(tbcdMobilePhone) == 0)) ||
            (newVal == null && tbcdMobilePhone == null && tbcdMobilePhoneIsInitialized)) {
            return;
        }
        tbcdMobilePhone = newVal;
        tbcdMobilePhoneIsModified = true;
        tbcdMobilePhoneIsInitialized = true;
    }

    /**
     * Determines if the tbcdMobilePhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdMobilePhoneModified()
    {
        return tbcdMobilePhoneIsModified;
    }

    /**
     * Determines if the tbcdMobilePhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdMobilePhoneInitialized()
    {
        return tbcdMobilePhoneIsInitialized;
    }

    /**
     * Getter method for tbcdHomePhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_contact_details.tbcd_home_phone</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdHomePhone
     */
    public String getTbcdHomePhone()
    {
        return tbcdHomePhone;
    }

    /**
     * Setter method for tbcdHomePhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdHomePhone
     */
    public void setTbcdHomePhone(String newVal)
    {
        if ((newVal != null && tbcdHomePhone != null && (newVal.compareTo(tbcdHomePhone) == 0)) ||
            (newVal == null && tbcdHomePhone == null && tbcdHomePhoneIsInitialized)) {
            return;
        }
        tbcdHomePhone = newVal;
        tbcdHomePhoneIsModified = true;
        tbcdHomePhoneIsInitialized = true;
    }

    /**
     * Determines if the tbcdHomePhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdHomePhoneModified()
    {
        return tbcdHomePhoneIsModified;
    }

    /**
     * Determines if the tbcdHomePhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdHomePhoneInitialized()
    {
        return tbcdHomePhoneIsInitialized;
    }

    /**
     * Getter method for tbcdZipCode.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_contact_details.tbcd_zip_code</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdZipCode
     */
    public String getTbcdZipCode()
    {
        return tbcdZipCode;
    }

    /**
     * Setter method for tbcdZipCode.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdZipCode
     */
    public void setTbcdZipCode(String newVal)
    {
        if ((newVal != null && tbcdZipCode != null && (newVal.compareTo(tbcdZipCode) == 0)) ||
            (newVal == null && tbcdZipCode == null && tbcdZipCodeIsInitialized)) {
            return;
        }
        tbcdZipCode = newVal;
        tbcdZipCodeIsModified = true;
        tbcdZipCodeIsInitialized = true;
    }

    /**
     * Determines if the tbcdZipCode has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdZipCodeModified()
    {
        return tbcdZipCodeIsModified;
    }

    /**
     * Determines if the tbcdZipCode has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdZipCodeInitialized()
    {
        return tbcdZipCodeIsInitialized;
    }

    /**
     * Getter method for tbcdProvince.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_contact_details.tbcd_province</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdProvince
     */
    public String getTbcdProvince()
    {
        return tbcdProvince;
    }

    /**
     * Setter method for tbcdProvince.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdProvince
     */
    public void setTbcdProvince(String newVal)
    {
        if ((newVal != null && tbcdProvince != null && (newVal.compareTo(tbcdProvince) == 0)) ||
            (newVal == null && tbcdProvince == null && tbcdProvinceIsInitialized)) {
            return;
        }
        tbcdProvince = newVal;
        tbcdProvinceIsModified = true;
        tbcdProvinceIsInitialized = true;
    }

    /**
     * Determines if the tbcdProvince has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdProvinceModified()
    {
        return tbcdProvinceIsModified;
    }

    /**
     * Determines if the tbcdProvince has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdProvinceInitialized()
    {
        return tbcdProvinceIsInitialized;
    }

    /**
     * Getter method for tbcdCity.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_contact_details.tbcd_city</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdCity
     */
    public String getTbcdCity()
    {
        return tbcdCity;
    }

    /**
     * Setter method for tbcdCity.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdCity
     */
    public void setTbcdCity(String newVal)
    {
        if ((newVal != null && tbcdCity != null && (newVal.compareTo(tbcdCity) == 0)) ||
            (newVal == null && tbcdCity == null && tbcdCityIsInitialized)) {
            return;
        }
        tbcdCity = newVal;
        tbcdCityIsModified = true;
        tbcdCityIsInitialized = true;
    }

    /**
     * Determines if the tbcdCity has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdCityModified()
    {
        return tbcdCityIsModified;
    }

    /**
     * Determines if the tbcdCity has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdCityInitialized()
    {
        return tbcdCityIsInitialized;
    }

    /**
     * Getter method for tbcdStreet.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_contact_details.tbcd_street</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdStreet
     */
    public String getTbcdStreet()
    {
        return tbcdStreet;
    }

    /**
     * Setter method for tbcdStreet.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdStreet
     */
    public void setTbcdStreet(String newVal)
    {
        if ((newVal != null && tbcdStreet != null && (newVal.compareTo(tbcdStreet) == 0)) ||
            (newVal == null && tbcdStreet == null && tbcdStreetIsInitialized)) {
            return;
        }
        tbcdStreet = newVal;
        tbcdStreetIsModified = true;
        tbcdStreetIsInitialized = true;
    }

    /**
     * Determines if the tbcdStreet has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdStreetModified()
    {
        return tbcdStreetIsModified;
    }

    /**
     * Determines if the tbcdStreet has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdStreetInitialized()
    {
        return tbcdStreetIsInitialized;
    }

    /**
     * Getter method for tbnId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_contact_details.tbn_id</li>
     * <li> foreign key: tb_negara.tbn_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbnId
     */
    public Integer getTbnId()
    {
        return tbnId;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(Integer newVal)
    {
        if ((newVal != null && tbnId != null && (newVal.compareTo(tbnId) == 0)) ||
            (newVal == null && tbnId == null && tbnIdIsInitialized)) {
            return;
        }
        tbnId = newVal;
        tbnIdIsModified = true;
        tbnIdIsInitialized = true;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(int newVal)
    {
        setTbnId(new Integer(newVal));
    }

    /**
     * Determines if the tbnId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnIdModified()
    {
        return tbnIdIsModified;
    }

    /**
     * Determines if the tbnId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnIdInitialized()
    {
        return tbnIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_contact_details.tbe_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /** The TbNegara referenced by this bean. */
    private TbNegaraBean referencedTbNegara;
    /** Getter method for TbNegaraBean. */
    public TbNegaraBean getTbNegaraBean() {
        return this.referencedTbNegara;
    }
    /** Setter method for TbNegaraBean. */
    public void setTbNegaraBean(TbNegaraBean reference) {
        this.referencedTbNegara = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbcdOtherEmailIsModified 		|| tbcdWorkPhoneIsModified  		|| tbcdMobilePhoneIsModified  		|| tbcdHomePhoneIsModified  		|| tbcdZipCodeIsModified  		|| tbcdProvinceIsModified  		|| tbcdCityIsModified  		|| tbcdStreetIsModified  		|| tbnIdIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbcdOtherEmailIsModified = false;
        tbcdWorkPhoneIsModified = false;
        tbcdMobilePhoneIsModified = false;
        tbcdHomePhoneIsModified = false;
        tbcdZipCodeIsModified = false;
        tbcdProvinceIsModified = false;
        tbcdCityIsModified = false;
        tbcdStreetIsModified = false;
        tbnIdIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbContactDetailsBean bean)
    {
        setTbcdOtherEmail(bean.getTbcdOtherEmail());
        setTbcdWorkPhone(bean.getTbcdWorkPhone());
        setTbcdMobilePhone(bean.getTbcdMobilePhone());
        setTbcdHomePhone(bean.getTbcdHomePhone());
        setTbcdZipCode(bean.getTbcdZipCode());
        setTbcdProvince(bean.getTbcdProvince());
        setTbcdCity(bean.getTbcdCity());
        setTbcdStreet(bean.getTbcdStreet());
        setTbnId(bean.getTbnId());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbcd_other_email", getTbcdOtherEmail() == null ? "" : getTbcdOtherEmail().toString());
        dictionnary.put("tbcd_work_phone", getTbcdWorkPhone() == null ? "" : getTbcdWorkPhone().toString());
        dictionnary.put("tbcd_mobile_phone", getTbcdMobilePhone() == null ? "" : getTbcdMobilePhone().toString());
        dictionnary.put("tbcd_home_phone", getTbcdHomePhone() == null ? "" : getTbcdHomePhone().toString());
        dictionnary.put("tbcd_zip_code", getTbcdZipCode() == null ? "" : getTbcdZipCode().toString());
        dictionnary.put("tbcd_province", getTbcdProvince() == null ? "" : getTbcdProvince().toString());
        dictionnary.put("tbcd_city", getTbcdCity() == null ? "" : getTbcdCity().toString());
        dictionnary.put("tbcd_street", getTbcdStreet() == null ? "" : getTbcdStreet().toString());
        dictionnary.put("tbn_id", getTbnId() == null ? "" : getTbnId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbcd_other_email".equalsIgnoreCase(column) || "tbcdOtherEmail".equalsIgnoreCase(column)) {
            return getTbcdOtherEmail() == null ? "" : getTbcdOtherEmail().toString();
        } else if ("tbcd_work_phone".equalsIgnoreCase(column) || "tbcdWorkPhone".equalsIgnoreCase(column)) {
            return getTbcdWorkPhone() == null ? "" : getTbcdWorkPhone().toString();
        } else if ("tbcd_mobile_phone".equalsIgnoreCase(column) || "tbcdMobilePhone".equalsIgnoreCase(column)) {
            return getTbcdMobilePhone() == null ? "" : getTbcdMobilePhone().toString();
        } else if ("tbcd_home_phone".equalsIgnoreCase(column) || "tbcdHomePhone".equalsIgnoreCase(column)) {
            return getTbcdHomePhone() == null ? "" : getTbcdHomePhone().toString();
        } else if ("tbcd_zip_code".equalsIgnoreCase(column) || "tbcdZipCode".equalsIgnoreCase(column)) {
            return getTbcdZipCode() == null ? "" : getTbcdZipCode().toString();
        } else if ("tbcd_province".equalsIgnoreCase(column) || "tbcdProvince".equalsIgnoreCase(column)) {
            return getTbcdProvince() == null ? "" : getTbcdProvince().toString();
        } else if ("tbcd_city".equalsIgnoreCase(column) || "tbcdCity".equalsIgnoreCase(column)) {
            return getTbcdCity() == null ? "" : getTbcdCity().toString();
        } else if ("tbcd_street".equalsIgnoreCase(column) || "tbcdStreet".equalsIgnoreCase(column)) {
            return getTbcdStreet() == null ? "" : getTbcdStreet().toString();
        } else if ("tbn_id".equalsIgnoreCase(column) || "tbnId".equalsIgnoreCase(column)) {
            return getTbnId() == null ? "" : getTbnId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbContactDetailsBean)) {
            return false;
        }

		TbContactDetailsBean obj = (TbContactDetailsBean) object;
		return new EqualsBuilder()
            .append(getTbcdOtherEmail(), obj.getTbcdOtherEmail())
            .append(getTbcdWorkPhone(), obj.getTbcdWorkPhone())
            .append(getTbcdMobilePhone(), obj.getTbcdMobilePhone())
            .append(getTbcdHomePhone(), obj.getTbcdHomePhone())
            .append(getTbcdZipCode(), obj.getTbcdZipCode())
            .append(getTbcdProvince(), obj.getTbcdProvince())
            .append(getTbcdCity(), obj.getTbcdCity())
            .append(getTbcdStreet(), obj.getTbcdStreet())
            .append(getTbnId(), obj.getTbnId())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbcdOtherEmail())
            .append(getTbcdWorkPhone())
            .append(getTbcdMobilePhone())
            .append(getTbcdHomePhone())
            .append(getTbcdZipCode())
            .append(getTbcdProvince())
            .append(getTbcdCity())
            .append(getTbcdStreet())
            .append(getTbnId())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbcd_other_email", getTbcdOtherEmail())
            .append("tbcd_work_phone", getTbcdWorkPhone())
            .append("tbcd_mobile_phone", getTbcdMobilePhone())
            .append("tbcd_home_phone", getTbcdHomePhone())
            .append("tbcd_zip_code", getTbcdZipCode())
            .append("tbcd_province", getTbcdProvince())
            .append("tbcd_city", getTbcdCity())
            .append("tbcd_street", getTbcdStreet())
            .append("tbn_id", getTbnId())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbContactDetailsBean obj = (TbContactDetailsBean) object;
        return new CompareToBuilder()
            .append(getTbcdOtherEmail(), obj.getTbcdOtherEmail())
            .append(getTbcdWorkPhone(), obj.getTbcdWorkPhone())
            .append(getTbcdMobilePhone(), obj.getTbcdMobilePhone())
            .append(getTbcdHomePhone(), obj.getTbcdHomePhone())
            .append(getTbcdZipCode(), obj.getTbcdZipCode())
            .append(getTbcdProvince(), obj.getTbcdProvince())
            .append(getTbcdCity(), obj.getTbcdCity())
            .append(getTbcdStreet(), obj.getTbcdStreet())
            .append(getTbnId(), obj.getTbnId())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
