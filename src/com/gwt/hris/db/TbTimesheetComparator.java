// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbTimesheetBean objects.
 * @author sql2java
 */
public class TbTimesheetComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbTimesheetComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbTimesheetComparator(TbTimesheetManager.ID_TBT_APPROVAL_STATUS, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbTimesheetManager.ID_TBT_APPROVAL_STATUS
     *   <li>TbTimesheetManager.ID_TBT_GRAND_TOTAL_HOUR
     *   <li>TbTimesheetManager.ID_TBT_TOTAL_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_7_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_6_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_5_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_4_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_3_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_2_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_1_HOUR
     *   <li>TbTimesheetManager.ID_TBT_START_OF_WEEK
     *   <li>TbTimesheetManager.ID_TBT_UPDATE_TIME
     *   <li>TbTimesheetManager.ID_TBPA_ID
     *   <li>TbTimesheetManager.ID_TBPAG_ID
     *   <li>TbTimesheetManager.ID_TBP_ID
     *   <li>TbTimesheetManager.ID_TBC_ID
     *   <li>TbTimesheetManager.ID_TBE_ID
     *   <li>TbTimesheetManager.ID_TBT_ID
     * </ul>
     */
    public TbTimesheetComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbTimesheetComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbTimesheetComparator(TbTimesheetManager.ID_TBT_APPROVAL_STATUS, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbTimesheetManager.ID_TBT_APPROVAL_STATUS
     *   <li>TbTimesheetManager.ID_TBT_GRAND_TOTAL_HOUR
     *   <li>TbTimesheetManager.ID_TBT_TOTAL_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_7_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_6_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_5_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_4_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_3_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_2_HOUR
     *   <li>TbTimesheetManager.ID_TBT_DAY_1_HOUR
     *   <li>TbTimesheetManager.ID_TBT_START_OF_WEEK
     *   <li>TbTimesheetManager.ID_TBT_UPDATE_TIME
     *   <li>TbTimesheetManager.ID_TBPA_ID
     *   <li>TbTimesheetManager.ID_TBPAG_ID
     *   <li>TbTimesheetManager.ID_TBP_ID
     *   <li>TbTimesheetManager.ID_TBC_ID
     *   <li>TbTimesheetManager.ID_TBE_ID
     *   <li>TbTimesheetManager.ID_TBT_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbTimesheetComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbTimesheetBean b1 = (TbTimesheetBean)pObj1;
        TbTimesheetBean b2 = (TbTimesheetBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbTimesheetManager.ID_TBT_APPROVAL_STATUS:
                if (b1.getTbtApprovalStatus() == null && b2.getTbtApprovalStatus() != null) {
                    iReturn = -1;
                } else if (b1.getTbtApprovalStatus() == null && b2.getTbtApprovalStatus() == null) {
                    iReturn = 0;
                } else if (b1.getTbtApprovalStatus() != null && b2.getTbtApprovalStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtApprovalStatus().compareTo(b2.getTbtApprovalStatus());
                }
                break;
            case TbTimesheetManager.ID_TBT_GRAND_TOTAL_HOUR:
                if (b1.getTbtGrandTotalHour() == null && b2.getTbtGrandTotalHour() != null) {
                    iReturn = -1;
                } else if (b1.getTbtGrandTotalHour() == null && b2.getTbtGrandTotalHour() == null) {
                    iReturn = 0;
                } else if (b1.getTbtGrandTotalHour() != null && b2.getTbtGrandTotalHour() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtGrandTotalHour().compareTo(b2.getTbtGrandTotalHour());
                }
                break;
            case TbTimesheetManager.ID_TBT_TOTAL_HOUR:
                if (b1.getTbtTotalHour() == null && b2.getTbtTotalHour() != null) {
                    iReturn = -1;
                } else if (b1.getTbtTotalHour() == null && b2.getTbtTotalHour() == null) {
                    iReturn = 0;
                } else if (b1.getTbtTotalHour() != null && b2.getTbtTotalHour() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtTotalHour().compareTo(b2.getTbtTotalHour());
                }
                break;
            case TbTimesheetManager.ID_TBT_DAY_7_HOUR:
                if (b1.getTbtDay7Hour() == null && b2.getTbtDay7Hour() != null) {
                    iReturn = -1;
                } else if (b1.getTbtDay7Hour() == null && b2.getTbtDay7Hour() == null) {
                    iReturn = 0;
                } else if (b1.getTbtDay7Hour() != null && b2.getTbtDay7Hour() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtDay7Hour().compareTo(b2.getTbtDay7Hour());
                }
                break;
            case TbTimesheetManager.ID_TBT_DAY_6_HOUR:
                if (b1.getTbtDay6Hour() == null && b2.getTbtDay6Hour() != null) {
                    iReturn = -1;
                } else if (b1.getTbtDay6Hour() == null && b2.getTbtDay6Hour() == null) {
                    iReturn = 0;
                } else if (b1.getTbtDay6Hour() != null && b2.getTbtDay6Hour() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtDay6Hour().compareTo(b2.getTbtDay6Hour());
                }
                break;
            case TbTimesheetManager.ID_TBT_DAY_5_HOUR:
                if (b1.getTbtDay5Hour() == null && b2.getTbtDay5Hour() != null) {
                    iReturn = -1;
                } else if (b1.getTbtDay5Hour() == null && b2.getTbtDay5Hour() == null) {
                    iReturn = 0;
                } else if (b1.getTbtDay5Hour() != null && b2.getTbtDay5Hour() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtDay5Hour().compareTo(b2.getTbtDay5Hour());
                }
                break;
            case TbTimesheetManager.ID_TBT_DAY_4_HOUR:
                if (b1.getTbtDay4Hour() == null && b2.getTbtDay4Hour() != null) {
                    iReturn = -1;
                } else if (b1.getTbtDay4Hour() == null && b2.getTbtDay4Hour() == null) {
                    iReturn = 0;
                } else if (b1.getTbtDay4Hour() != null && b2.getTbtDay4Hour() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtDay4Hour().compareTo(b2.getTbtDay4Hour());
                }
                break;
            case TbTimesheetManager.ID_TBT_DAY_3_HOUR:
                if (b1.getTbtDay3Hour() == null && b2.getTbtDay3Hour() != null) {
                    iReturn = -1;
                } else if (b1.getTbtDay3Hour() == null && b2.getTbtDay3Hour() == null) {
                    iReturn = 0;
                } else if (b1.getTbtDay3Hour() != null && b2.getTbtDay3Hour() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtDay3Hour().compareTo(b2.getTbtDay3Hour());
                }
                break;
            case TbTimesheetManager.ID_TBT_DAY_2_HOUR:
                if (b1.getTbtDay2Hour() == null && b2.getTbtDay2Hour() != null) {
                    iReturn = -1;
                } else if (b1.getTbtDay2Hour() == null && b2.getTbtDay2Hour() == null) {
                    iReturn = 0;
                } else if (b1.getTbtDay2Hour() != null && b2.getTbtDay2Hour() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtDay2Hour().compareTo(b2.getTbtDay2Hour());
                }
                break;
            case TbTimesheetManager.ID_TBT_DAY_1_HOUR:
                if (b1.getTbtDay1Hour() == null && b2.getTbtDay1Hour() != null) {
                    iReturn = -1;
                } else if (b1.getTbtDay1Hour() == null && b2.getTbtDay1Hour() == null) {
                    iReturn = 0;
                } else if (b1.getTbtDay1Hour() != null && b2.getTbtDay1Hour() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtDay1Hour().compareTo(b2.getTbtDay1Hour());
                }
                break;
            case TbTimesheetManager.ID_TBT_START_OF_WEEK:
                if (b1.getTbtStartOfWeek() == null && b2.getTbtStartOfWeek() != null) {
                    iReturn = -1;
                } else if (b1.getTbtStartOfWeek() == null && b2.getTbtStartOfWeek() == null) {
                    iReturn = 0;
                } else if (b1.getTbtStartOfWeek() != null && b2.getTbtStartOfWeek() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtStartOfWeek().compareTo(b2.getTbtStartOfWeek());
                }
                break;
            case TbTimesheetManager.ID_TBT_UPDATE_TIME:
                if (b1.getTbtUpdateTime() == null && b2.getTbtUpdateTime() != null) {
                    iReturn = -1;
                } else if (b1.getTbtUpdateTime() == null && b2.getTbtUpdateTime() == null) {
                    iReturn = 0;
                } else if (b1.getTbtUpdateTime() != null && b2.getTbtUpdateTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtUpdateTime().compareTo(b2.getTbtUpdateTime());
                }
                break;
            case TbTimesheetManager.ID_TBPA_ID:
                if (b1.getTbpaId() == null && b2.getTbpaId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpaId() == null && b2.getTbpaId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpaId() != null && b2.getTbpaId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpaId().compareTo(b2.getTbpaId());
                }
                break;
            case TbTimesheetManager.ID_TBPAG_ID:
                if (b1.getTbpagId() == null && b2.getTbpagId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpagId() == null && b2.getTbpagId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpagId() != null && b2.getTbpagId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpagId().compareTo(b2.getTbpagId());
                }
                break;
            case TbTimesheetManager.ID_TBP_ID:
                if (b1.getTbpId() == null && b2.getTbpId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpId() == null && b2.getTbpId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpId() != null && b2.getTbpId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpId().compareTo(b2.getTbpId());
                }
                break;
            case TbTimesheetManager.ID_TBC_ID:
                if (b1.getTbcId() == null && b2.getTbcId() != null) {
                    iReturn = -1;
                } else if (b1.getTbcId() == null && b2.getTbcId() == null) {
                    iReturn = 0;
                } else if (b1.getTbcId() != null && b2.getTbcId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcId().compareTo(b2.getTbcId());
                }
                break;
            case TbTimesheetManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            case TbTimesheetManager.ID_TBT_ID:
                if (b1.getTbtId() == null && b2.getTbtId() != null) {
                    iReturn = -1;
                } else if (b1.getTbtId() == null && b2.getTbtId() == null) {
                    iReturn = 0;
                } else if (b1.getTbtId() != null && b2.getTbtId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtId().compareTo(b2.getTbtId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
