// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbAttendanceBean objects.
 * @author sql2java
 */
public class TbAttendanceComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbAttendanceComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbAttendanceComparator(TbAttendanceManager.ID_TBA_OUT_PHOTO, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbAttendanceManager.ID_TBA_OUT_PHOTO
     *   <li>TbAttendanceManager.ID_TBA_IN_PHOTO
     *   <li>TbAttendanceManager.ID_TBA_OUT_LATITUDE
     *   <li>TbAttendanceManager.ID_TBA_OUT_LONGITUDE
     *   <li>TbAttendanceManager.ID_TBA_IN_LATITUDE
     *   <li>TbAttendanceManager.ID_TBA_IN_LONGITUDE
     *   <li>TbAttendanceManager.ID_TBA_OUT_NOTE
     *   <li>TbAttendanceManager.ID_TBA_IN_NOTE
     *   <li>TbAttendanceManager.ID_TBA_OUT_TIME_DIFF
     *   <li>TbAttendanceManager.ID_TBA_OUT_TIME
     *   <li>TbAttendanceManager.ID_TBA_IN_TIME_DIFF
     *   <li>TbAttendanceManager.ID_TBA_IN_TIME
     *   <li>TbAttendanceManager.ID_TBA_DATE
     *   <li>TbAttendanceManager.ID_TBE_ID
     *   <li>TbAttendanceManager.ID_TBA_ID
     * </ul>
     */
    public TbAttendanceComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbAttendanceComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbAttendanceComparator(TbAttendanceManager.ID_TBA_OUT_PHOTO, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbAttendanceManager.ID_TBA_OUT_PHOTO
     *   <li>TbAttendanceManager.ID_TBA_IN_PHOTO
     *   <li>TbAttendanceManager.ID_TBA_OUT_LATITUDE
     *   <li>TbAttendanceManager.ID_TBA_OUT_LONGITUDE
     *   <li>TbAttendanceManager.ID_TBA_IN_LATITUDE
     *   <li>TbAttendanceManager.ID_TBA_IN_LONGITUDE
     *   <li>TbAttendanceManager.ID_TBA_OUT_NOTE
     *   <li>TbAttendanceManager.ID_TBA_IN_NOTE
     *   <li>TbAttendanceManager.ID_TBA_OUT_TIME_DIFF
     *   <li>TbAttendanceManager.ID_TBA_OUT_TIME
     *   <li>TbAttendanceManager.ID_TBA_IN_TIME_DIFF
     *   <li>TbAttendanceManager.ID_TBA_IN_TIME
     *   <li>TbAttendanceManager.ID_TBA_DATE
     *   <li>TbAttendanceManager.ID_TBE_ID
     *   <li>TbAttendanceManager.ID_TBA_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbAttendanceComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbAttendanceBean b1 = (TbAttendanceBean)pObj1;
        TbAttendanceBean b2 = (TbAttendanceBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbAttendanceManager.ID_TBA_OUT_PHOTO:
                if (b1.getTbaOutPhoto() == null && b2.getTbaOutPhoto() != null) {
                    iReturn = -1;
                } else if (b1.getTbaOutPhoto() == null && b2.getTbaOutPhoto() == null) {
                    iReturn = 0;
                } else if (b1.getTbaOutPhoto() != null && b2.getTbaOutPhoto() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaOutPhoto().compareTo(b2.getTbaOutPhoto());
                }
                break;
            case TbAttendanceManager.ID_TBA_IN_PHOTO:
                if (b1.getTbaInPhoto() == null && b2.getTbaInPhoto() != null) {
                    iReturn = -1;
                } else if (b1.getTbaInPhoto() == null && b2.getTbaInPhoto() == null) {
                    iReturn = 0;
                } else if (b1.getTbaInPhoto() != null && b2.getTbaInPhoto() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaInPhoto().compareTo(b2.getTbaInPhoto());
                }
                break;
            case TbAttendanceManager.ID_TBA_OUT_LATITUDE:
                if (b1.getTbaOutLatitude() == null && b2.getTbaOutLatitude() != null) {
                    iReturn = -1;
                } else if (b1.getTbaOutLatitude() == null && b2.getTbaOutLatitude() == null) {
                    iReturn = 0;
                } else if (b1.getTbaOutLatitude() != null && b2.getTbaOutLatitude() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaOutLatitude().compareTo(b2.getTbaOutLatitude());
                }
                break;
            case TbAttendanceManager.ID_TBA_OUT_LONGITUDE:
                if (b1.getTbaOutLongitude() == null && b2.getTbaOutLongitude() != null) {
                    iReturn = -1;
                } else if (b1.getTbaOutLongitude() == null && b2.getTbaOutLongitude() == null) {
                    iReturn = 0;
                } else if (b1.getTbaOutLongitude() != null && b2.getTbaOutLongitude() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaOutLongitude().compareTo(b2.getTbaOutLongitude());
                }
                break;
            case TbAttendanceManager.ID_TBA_IN_LATITUDE:
                if (b1.getTbaInLatitude() == null && b2.getTbaInLatitude() != null) {
                    iReturn = -1;
                } else if (b1.getTbaInLatitude() == null && b2.getTbaInLatitude() == null) {
                    iReturn = 0;
                } else if (b1.getTbaInLatitude() != null && b2.getTbaInLatitude() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaInLatitude().compareTo(b2.getTbaInLatitude());
                }
                break;
            case TbAttendanceManager.ID_TBA_IN_LONGITUDE:
                if (b1.getTbaInLongitude() == null && b2.getTbaInLongitude() != null) {
                    iReturn = -1;
                } else if (b1.getTbaInLongitude() == null && b2.getTbaInLongitude() == null) {
                    iReturn = 0;
                } else if (b1.getTbaInLongitude() != null && b2.getTbaInLongitude() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaInLongitude().compareTo(b2.getTbaInLongitude());
                }
                break;
            case TbAttendanceManager.ID_TBA_OUT_NOTE:
                if (b1.getTbaOutNote() == null && b2.getTbaOutNote() != null) {
                    iReturn = -1;
                } else if (b1.getTbaOutNote() == null && b2.getTbaOutNote() == null) {
                    iReturn = 0;
                } else if (b1.getTbaOutNote() != null && b2.getTbaOutNote() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaOutNote().compareTo(b2.getTbaOutNote());
                }
                break;
            case TbAttendanceManager.ID_TBA_IN_NOTE:
                if (b1.getTbaInNote() == null && b2.getTbaInNote() != null) {
                    iReturn = -1;
                } else if (b1.getTbaInNote() == null && b2.getTbaInNote() == null) {
                    iReturn = 0;
                } else if (b1.getTbaInNote() != null && b2.getTbaInNote() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaInNote().compareTo(b2.getTbaInNote());
                }
                break;
            case TbAttendanceManager.ID_TBA_OUT_TIME_DIFF:
                if (b1.getTbaOutTimeDiff() == null && b2.getTbaOutTimeDiff() != null) {
                    iReturn = -1;
                } else if (b1.getTbaOutTimeDiff() == null && b2.getTbaOutTimeDiff() == null) {
                    iReturn = 0;
                } else if (b1.getTbaOutTimeDiff() != null && b2.getTbaOutTimeDiff() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaOutTimeDiff().compareTo(b2.getTbaOutTimeDiff());
                }
                break;
            case TbAttendanceManager.ID_TBA_OUT_TIME:
                if (b1.getTbaOutTime() == null && b2.getTbaOutTime() != null) {
                    iReturn = -1;
                } else if (b1.getTbaOutTime() == null && b2.getTbaOutTime() == null) {
                    iReturn = 0;
                } else if (b1.getTbaOutTime() != null && b2.getTbaOutTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaOutTime().compareTo(b2.getTbaOutTime());
                }
                break;
            case TbAttendanceManager.ID_TBA_IN_TIME_DIFF:
                if (b1.getTbaInTimeDiff() == null && b2.getTbaInTimeDiff() != null) {
                    iReturn = -1;
                } else if (b1.getTbaInTimeDiff() == null && b2.getTbaInTimeDiff() == null) {
                    iReturn = 0;
                } else if (b1.getTbaInTimeDiff() != null && b2.getTbaInTimeDiff() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaInTimeDiff().compareTo(b2.getTbaInTimeDiff());
                }
                break;
            case TbAttendanceManager.ID_TBA_IN_TIME:
                if (b1.getTbaInTime() == null && b2.getTbaInTime() != null) {
                    iReturn = -1;
                } else if (b1.getTbaInTime() == null && b2.getTbaInTime() == null) {
                    iReturn = 0;
                } else if (b1.getTbaInTime() != null && b2.getTbaInTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaInTime().compareTo(b2.getTbaInTime());
                }
                break;
            case TbAttendanceManager.ID_TBA_DATE:
                if (b1.getTbaDate() == null && b2.getTbaDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbaDate() == null && b2.getTbaDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbaDate() != null && b2.getTbaDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaDate().compareTo(b2.getTbaDate());
                }
                break;
            case TbAttendanceManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            case TbAttendanceManager.ID_TBA_ID:
                if (b1.getTbaId() == null && b2.getTbaId() != null) {
                    iReturn = -1;
                } else if (b1.getTbaId() == null && b2.getTbaId() == null) {
                    iReturn = 0;
                } else if (b1.getTbaId() != null && b2.getTbaId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaId().compareTo(b2.getTbaId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
