// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbImmigrationBean is a mapping of tb_immigration Table.
 * @author sql2java
*/
public class TbImmigrationBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 7485064946440713757L;
	
    private String tbiComments;

    private boolean tbiCommentsIsModified = false;
    private boolean tbiCommentsIsInitialized = false;

    private java.sql.Timestamp tbiExpiryDate;

    private boolean tbiExpiryDateIsModified = false;
    private boolean tbiExpiryDateIsInitialized = false;

    private java.sql.Timestamp tbiIssuedDate;

    private boolean tbiIssuedDateIsModified = false;
    private boolean tbiIssuedDateIsInitialized = false;

    private Integer tbnId;

    private boolean tbnIdIsModified = false;
    private boolean tbnIdIsInitialized = false;

    private java.sql.Timestamp tbiL9ReviewDate;

    private boolean tbiL9ReviewDateIsModified = false;
    private boolean tbiL9ReviewDateIsInitialized = false;

    private String tbiL9Status;

    private boolean tbiL9StatusIsModified = false;
    private boolean tbiL9StatusIsInitialized = false;

    private String tbiImmigrationNo;

    private boolean tbiImmigrationNoIsModified = false;
    private boolean tbiImmigrationNoIsInitialized = false;

    private Integer tbiImmigrationType;

    private boolean tbiImmigrationTypeIsModified = false;
    private boolean tbiImmigrationTypeIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbImmigrationBean is via the createTbImmigrationBean method in TbImmigrationManager or
     * via the factory class TbImmigrationFactory create method
     */
    protected TbImmigrationBean()
    {
    }

    /**
     * Getter method for tbiComments.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_immigration.tbi_comments</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbiComments
     */
    public String getTbiComments()
    {
        return tbiComments;
    }

    /**
     * Setter method for tbiComments.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbiComments
     */
    public void setTbiComments(String newVal)
    {
        if ((newVal != null && tbiComments != null && (newVal.compareTo(tbiComments) == 0)) ||
            (newVal == null && tbiComments == null && tbiCommentsIsInitialized)) {
            return;
        }
        tbiComments = newVal;
        tbiCommentsIsModified = true;
        tbiCommentsIsInitialized = true;
    }

    /**
     * Determines if the tbiComments has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbiCommentsModified()
    {
        return tbiCommentsIsModified;
    }

    /**
     * Determines if the tbiComments has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbiCommentsInitialized()
    {
        return tbiCommentsIsInitialized;
    }

    /**
     * Getter method for tbiExpiryDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_immigration.tbi_expiry_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbiExpiryDate
     */
    public java.sql.Timestamp getTbiExpiryDate()
    {
        return tbiExpiryDate;
    }

    /**
     * Setter method for tbiExpiryDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbiExpiryDate
     */
    public void setTbiExpiryDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbiExpiryDate != null && (newVal.compareTo(tbiExpiryDate) == 0)) ||
            (newVal == null && tbiExpiryDate == null && tbiExpiryDateIsInitialized)) {
            return;
        }
        tbiExpiryDate = newVal;
        tbiExpiryDateIsModified = true;
        tbiExpiryDateIsInitialized = true;
    }

    /**
     * Setter method for tbiExpiryDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbiExpiryDate
     */
    public void setTbiExpiryDate(long newVal)
    {
        setTbiExpiryDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbiExpiryDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbiExpiryDateModified()
    {
        return tbiExpiryDateIsModified;
    }

    /**
     * Determines if the tbiExpiryDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbiExpiryDateInitialized()
    {
        return tbiExpiryDateIsInitialized;
    }

    /**
     * Getter method for tbiIssuedDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_immigration.tbi_issued_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbiIssuedDate
     */
    public java.sql.Timestamp getTbiIssuedDate()
    {
        return tbiIssuedDate;
    }

    /**
     * Setter method for tbiIssuedDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbiIssuedDate
     */
    public void setTbiIssuedDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbiIssuedDate != null && (newVal.compareTo(tbiIssuedDate) == 0)) ||
            (newVal == null && tbiIssuedDate == null && tbiIssuedDateIsInitialized)) {
            return;
        }
        tbiIssuedDate = newVal;
        tbiIssuedDateIsModified = true;
        tbiIssuedDateIsInitialized = true;
    }

    /**
     * Setter method for tbiIssuedDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbiIssuedDate
     */
    public void setTbiIssuedDate(long newVal)
    {
        setTbiIssuedDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbiIssuedDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbiIssuedDateModified()
    {
        return tbiIssuedDateIsModified;
    }

    /**
     * Determines if the tbiIssuedDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbiIssuedDateInitialized()
    {
        return tbiIssuedDateIsInitialized;
    }

    /**
     * Getter method for tbnId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_immigration.tbn_id</li>
     * <li> foreign key: tb_negara.tbn_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbnId
     */
    public Integer getTbnId()
    {
        return tbnId;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(Integer newVal)
    {
        if ((newVal != null && tbnId != null && (newVal.compareTo(tbnId) == 0)) ||
            (newVal == null && tbnId == null && tbnIdIsInitialized)) {
            return;
        }
        tbnId = newVal;
        tbnIdIsModified = true;
        tbnIdIsInitialized = true;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(int newVal)
    {
        setTbnId(new Integer(newVal));
    }

    /**
     * Determines if the tbnId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnIdModified()
    {
        return tbnIdIsModified;
    }

    /**
     * Determines if the tbnId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnIdInitialized()
    {
        return tbnIdIsInitialized;
    }

    /**
     * Getter method for tbiL9ReviewDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_immigration.tbi_l9_review_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbiL9ReviewDate
     */
    public java.sql.Timestamp getTbiL9ReviewDate()
    {
        return tbiL9ReviewDate;
    }

    /**
     * Setter method for tbiL9ReviewDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbiL9ReviewDate
     */
    public void setTbiL9ReviewDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbiL9ReviewDate != null && (newVal.compareTo(tbiL9ReviewDate) == 0)) ||
            (newVal == null && tbiL9ReviewDate == null && tbiL9ReviewDateIsInitialized)) {
            return;
        }
        tbiL9ReviewDate = newVal;
        tbiL9ReviewDateIsModified = true;
        tbiL9ReviewDateIsInitialized = true;
    }

    /**
     * Setter method for tbiL9ReviewDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbiL9ReviewDate
     */
    public void setTbiL9ReviewDate(long newVal)
    {
        setTbiL9ReviewDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbiL9ReviewDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbiL9ReviewDateModified()
    {
        return tbiL9ReviewDateIsModified;
    }

    /**
     * Determines if the tbiL9ReviewDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbiL9ReviewDateInitialized()
    {
        return tbiL9ReviewDateIsInitialized;
    }

    /**
     * Getter method for tbiL9Status.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_immigration.tbi_l9_status</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbiL9Status
     */
    public String getTbiL9Status()
    {
        return tbiL9Status;
    }

    /**
     * Setter method for tbiL9Status.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbiL9Status
     */
    public void setTbiL9Status(String newVal)
    {
        if ((newVal != null && tbiL9Status != null && (newVal.compareTo(tbiL9Status) == 0)) ||
            (newVal == null && tbiL9Status == null && tbiL9StatusIsInitialized)) {
            return;
        }
        tbiL9Status = newVal;
        tbiL9StatusIsModified = true;
        tbiL9StatusIsInitialized = true;
    }

    /**
     * Determines if the tbiL9Status has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbiL9StatusModified()
    {
        return tbiL9StatusIsModified;
    }

    /**
     * Determines if the tbiL9Status has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbiL9StatusInitialized()
    {
        return tbiL9StatusIsInitialized;
    }

    /**
     * Getter method for tbiImmigrationNo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_immigration.tbi_immigration_no</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbiImmigrationNo
     */
    public String getTbiImmigrationNo()
    {
        return tbiImmigrationNo;
    }

    /**
     * Setter method for tbiImmigrationNo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbiImmigrationNo
     */
    public void setTbiImmigrationNo(String newVal)
    {
        if ((newVal != null && tbiImmigrationNo != null && (newVal.compareTo(tbiImmigrationNo) == 0)) ||
            (newVal == null && tbiImmigrationNo == null && tbiImmigrationNoIsInitialized)) {
            return;
        }
        tbiImmigrationNo = newVal;
        tbiImmigrationNoIsModified = true;
        tbiImmigrationNoIsInitialized = true;
    }

    /**
     * Determines if the tbiImmigrationNo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbiImmigrationNoModified()
    {
        return tbiImmigrationNoIsModified;
    }

    /**
     * Determines if the tbiImmigrationNo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbiImmigrationNoInitialized()
    {
        return tbiImmigrationNoIsInitialized;
    }

    /**
     * Getter method for tbiImmigrationType.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_immigration.tbi_immigration_type</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbiImmigrationType
     */
    public Integer getTbiImmigrationType()
    {
        return tbiImmigrationType;
    }

    /**
     * Setter method for tbiImmigrationType.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbiImmigrationType
     */
    public void setTbiImmigrationType(Integer newVal)
    {
        if ((newVal != null && tbiImmigrationType != null && (newVal.compareTo(tbiImmigrationType) == 0)) ||
            (newVal == null && tbiImmigrationType == null && tbiImmigrationTypeIsInitialized)) {
            return;
        }
        tbiImmigrationType = newVal;
        tbiImmigrationTypeIsModified = true;
        tbiImmigrationTypeIsInitialized = true;
    }

    /**
     * Setter method for tbiImmigrationType.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbiImmigrationType
     */
    public void setTbiImmigrationType(int newVal)
    {
        setTbiImmigrationType(new Integer(newVal));
    }

    /**
     * Determines if the tbiImmigrationType has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbiImmigrationTypeModified()
    {
        return tbiImmigrationTypeIsModified;
    }

    /**
     * Determines if the tbiImmigrationType has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbiImmigrationTypeInitialized()
    {
        return tbiImmigrationTypeIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_immigration.tbe_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /** The TbNegara referenced by this bean. */
    private TbNegaraBean referencedTbNegara;
    /** Getter method for TbNegaraBean. */
    public TbNegaraBean getTbNegaraBean() {
        return this.referencedTbNegara;
    }
    /** Setter method for TbNegaraBean. */
    public void setTbNegaraBean(TbNegaraBean reference) {
        this.referencedTbNegara = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbiCommentsIsModified 		|| tbiExpiryDateIsModified  		|| tbiIssuedDateIsModified  		|| tbnIdIsModified  		|| tbiL9ReviewDateIsModified  		|| tbiL9StatusIsModified  		|| tbiImmigrationNoIsModified  		|| tbiImmigrationTypeIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbiCommentsIsModified = false;
        tbiExpiryDateIsModified = false;
        tbiIssuedDateIsModified = false;
        tbnIdIsModified = false;
        tbiL9ReviewDateIsModified = false;
        tbiL9StatusIsModified = false;
        tbiImmigrationNoIsModified = false;
        tbiImmigrationTypeIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbImmigrationBean bean)
    {
        setTbiComments(bean.getTbiComments());
        setTbiExpiryDate(bean.getTbiExpiryDate());
        setTbiIssuedDate(bean.getTbiIssuedDate());
        setTbnId(bean.getTbnId());
        setTbiL9ReviewDate(bean.getTbiL9ReviewDate());
        setTbiL9Status(bean.getTbiL9Status());
        setTbiImmigrationNo(bean.getTbiImmigrationNo());
        setTbiImmigrationType(bean.getTbiImmigrationType());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbi_comments", getTbiComments() == null ? "" : getTbiComments().toString());
        dictionnary.put("tbi_expiry_date", getTbiExpiryDate() == null ? "" : getTbiExpiryDate().toString());
        dictionnary.put("tbi_issued_date", getTbiIssuedDate() == null ? "" : getTbiIssuedDate().toString());
        dictionnary.put("tbn_id", getTbnId() == null ? "" : getTbnId().toString());
        dictionnary.put("tbi_l9_review_date", getTbiL9ReviewDate() == null ? "" : getTbiL9ReviewDate().toString());
        dictionnary.put("tbi_l9_status", getTbiL9Status() == null ? "" : getTbiL9Status().toString());
        dictionnary.put("tbi_immigration_no", getTbiImmigrationNo() == null ? "" : getTbiImmigrationNo().toString());
        dictionnary.put("tbi_immigration_type", getTbiImmigrationType() == null ? "" : getTbiImmigrationType().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbi_comments".equalsIgnoreCase(column) || "tbiComments".equalsIgnoreCase(column)) {
            return getTbiComments() == null ? "" : getTbiComments().toString();
        } else if ("tbi_expiry_date".equalsIgnoreCase(column) || "tbiExpiryDate".equalsIgnoreCase(column)) {
            return getTbiExpiryDate() == null ? "" : getTbiExpiryDate().toString();
        } else if ("tbi_issued_date".equalsIgnoreCase(column) || "tbiIssuedDate".equalsIgnoreCase(column)) {
            return getTbiIssuedDate() == null ? "" : getTbiIssuedDate().toString();
        } else if ("tbn_id".equalsIgnoreCase(column) || "tbnId".equalsIgnoreCase(column)) {
            return getTbnId() == null ? "" : getTbnId().toString();
        } else if ("tbi_l9_review_date".equalsIgnoreCase(column) || "tbiL9ReviewDate".equalsIgnoreCase(column)) {
            return getTbiL9ReviewDate() == null ? "" : getTbiL9ReviewDate().toString();
        } else if ("tbi_l9_status".equalsIgnoreCase(column) || "tbiL9Status".equalsIgnoreCase(column)) {
            return getTbiL9Status() == null ? "" : getTbiL9Status().toString();
        } else if ("tbi_immigration_no".equalsIgnoreCase(column) || "tbiImmigrationNo".equalsIgnoreCase(column)) {
            return getTbiImmigrationNo() == null ? "" : getTbiImmigrationNo().toString();
        } else if ("tbi_immigration_type".equalsIgnoreCase(column) || "tbiImmigrationType".equalsIgnoreCase(column)) {
            return getTbiImmigrationType() == null ? "" : getTbiImmigrationType().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbImmigrationBean)) {
            return false;
        }

		TbImmigrationBean obj = (TbImmigrationBean) object;
		return new EqualsBuilder()
            .append(getTbiComments(), obj.getTbiComments())
            .append(getTbiExpiryDate(), obj.getTbiExpiryDate())
            .append(getTbiIssuedDate(), obj.getTbiIssuedDate())
            .append(getTbnId(), obj.getTbnId())
            .append(getTbiL9ReviewDate(), obj.getTbiL9ReviewDate())
            .append(getTbiL9Status(), obj.getTbiL9Status())
            .append(getTbiImmigrationNo(), obj.getTbiImmigrationNo())
            .append(getTbiImmigrationType(), obj.getTbiImmigrationType())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbiComments())
            .append(getTbiExpiryDate())
            .append(getTbiIssuedDate())
            .append(getTbnId())
            .append(getTbiL9ReviewDate())
            .append(getTbiL9Status())
            .append(getTbiImmigrationNo())
            .append(getTbiImmigrationType())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbi_comments", getTbiComments())
            .append("tbi_expiry_date", getTbiExpiryDate())
            .append("tbi_issued_date", getTbiIssuedDate())
            .append("tbn_id", getTbnId())
            .append("tbi_l9_review_date", getTbiL9ReviewDate())
            .append("tbi_l9_status", getTbiL9Status())
            .append("tbi_immigration_no", getTbiImmigrationNo())
            .append("tbi_immigration_type", getTbiImmigrationType())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbImmigrationBean obj = (TbImmigrationBean) object;
        return new CompareToBuilder()
            .append(getTbiComments(), obj.getTbiComments())
            .append(getTbiExpiryDate(), obj.getTbiExpiryDate())
            .append(getTbiIssuedDate(), obj.getTbiIssuedDate())
            .append(getTbnId(), obj.getTbnId())
            .append(getTbiL9ReviewDate(), obj.getTbiL9ReviewDate())
            .append(getTbiL9Status(), obj.getTbiL9Status())
            .append(getTbiImmigrationNo(), obj.getTbiImmigrationNo())
            .append(getTbiImmigrationType(), obj.getTbiImmigrationType())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
