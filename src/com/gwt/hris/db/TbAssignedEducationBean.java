// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbAssignedEducationBean is a mapping of tb_assigned_education Table.
 * @author sql2java
*/
public class TbAssignedEducationBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 2822523016679959875L;
	
    private java.sql.Timestamp tbaeEndDate;

    private boolean tbaeEndDateIsModified = false;
    private boolean tbaeEndDateIsInitialized = false;

    private java.sql.Timestamp tbaeStartDate;

    private boolean tbaeStartDateIsModified = false;
    private boolean tbaeStartDateIsInitialized = false;

    private String tbaeMajor;

    private boolean tbaeMajorIsModified = false;
    private boolean tbaeMajorIsInitialized = false;

    private Double tbaeGpa;

    private boolean tbaeGpaIsModified = false;
    private boolean tbaeGpaIsInitialized = false;

    private Integer tbeduId;

    private boolean tbeduIdIsModified = false;
    private boolean tbeduIdIsInitialized = false;

    private Integer tbempId;

    private boolean tbempIdIsModified = false;
    private boolean tbempIdIsInitialized = false;

    private Integer tbaeId;

    private boolean tbaeIdIsModified = false;
    private boolean tbaeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbAssignedEducationBean is via the createTbAssignedEducationBean method in TbAssignedEducationManager or
     * via the factory class TbAssignedEducationFactory create method
     */
    protected TbAssignedEducationBean()
    {
    }

    /**
     * Getter method for tbaeEndDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_education.tbae_end_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaeEndDate
     */
    public java.sql.Timestamp getTbaeEndDate()
    {
        return tbaeEndDate;
    }

    /**
     * Setter method for tbaeEndDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaeEndDate
     */
    public void setTbaeEndDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaeEndDate != null && (newVal.compareTo(tbaeEndDate) == 0)) ||
            (newVal == null && tbaeEndDate == null && tbaeEndDateIsInitialized)) {
            return;
        }
        tbaeEndDate = newVal;
        tbaeEndDateIsModified = true;
        tbaeEndDateIsInitialized = true;
    }

    /**
     * Setter method for tbaeEndDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaeEndDate
     */
    public void setTbaeEndDate(long newVal)
    {
        setTbaeEndDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaeEndDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaeEndDateModified()
    {
        return tbaeEndDateIsModified;
    }

    /**
     * Determines if the tbaeEndDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaeEndDateInitialized()
    {
        return tbaeEndDateIsInitialized;
    }

    /**
     * Getter method for tbaeStartDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_education.tbae_start_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaeStartDate
     */
    public java.sql.Timestamp getTbaeStartDate()
    {
        return tbaeStartDate;
    }

    /**
     * Setter method for tbaeStartDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaeStartDate
     */
    public void setTbaeStartDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaeStartDate != null && (newVal.compareTo(tbaeStartDate) == 0)) ||
            (newVal == null && tbaeStartDate == null && tbaeStartDateIsInitialized)) {
            return;
        }
        tbaeStartDate = newVal;
        tbaeStartDateIsModified = true;
        tbaeStartDateIsInitialized = true;
    }

    /**
     * Setter method for tbaeStartDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaeStartDate
     */
    public void setTbaeStartDate(long newVal)
    {
        setTbaeStartDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaeStartDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaeStartDateModified()
    {
        return tbaeStartDateIsModified;
    }

    /**
     * Determines if the tbaeStartDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaeStartDateInitialized()
    {
        return tbaeStartDateIsInitialized;
    }

    /**
     * Getter method for tbaeMajor.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_education.tbae_major</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaeMajor
     */
    public String getTbaeMajor()
    {
        return tbaeMajor;
    }

    /**
     * Setter method for tbaeMajor.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaeMajor
     */
    public void setTbaeMajor(String newVal)
    {
        if ((newVal != null && tbaeMajor != null && (newVal.compareTo(tbaeMajor) == 0)) ||
            (newVal == null && tbaeMajor == null && tbaeMajorIsInitialized)) {
            return;
        }
        tbaeMajor = newVal;
        tbaeMajorIsModified = true;
        tbaeMajorIsInitialized = true;
    }

    /**
     * Determines if the tbaeMajor has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaeMajorModified()
    {
        return tbaeMajorIsModified;
    }

    /**
     * Determines if the tbaeMajor has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaeMajorInitialized()
    {
        return tbaeMajorIsInitialized;
    }

    /**
     * Getter method for tbaeGpa.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_education.tbae_gpa</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbaeGpa
     */
    public Double getTbaeGpa()
    {
        return tbaeGpa;
    }

    /**
     * Setter method for tbaeGpa.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaeGpa
     */
    public void setTbaeGpa(Double newVal)
    {
        if ((newVal != null && tbaeGpa != null && (newVal.compareTo(tbaeGpa) == 0)) ||
            (newVal == null && tbaeGpa == null && tbaeGpaIsInitialized)) {
            return;
        }
        tbaeGpa = newVal;
        tbaeGpaIsModified = true;
        tbaeGpaIsInitialized = true;
    }

    /**
     * Setter method for tbaeGpa.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaeGpa
     */
    public void setTbaeGpa(double newVal)
    {
        setTbaeGpa(new Double(newVal));
    }

    /**
     * Determines if the tbaeGpa has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaeGpaModified()
    {
        return tbaeGpaIsModified;
    }

    /**
     * Determines if the tbaeGpa has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaeGpaInitialized()
    {
        return tbaeGpaIsInitialized;
    }

    /**
     * Getter method for tbeduId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_education.tbedu_id</li>
     * <li> foreign key: tb_education.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeduId
     */
    public Integer getTbeduId()
    {
        return tbeduId;
    }

    /**
     * Setter method for tbeduId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeduId
     */
    public void setTbeduId(Integer newVal)
    {
        if ((newVal != null && tbeduId != null && (newVal.compareTo(tbeduId) == 0)) ||
            (newVal == null && tbeduId == null && tbeduIdIsInitialized)) {
            return;
        }
        tbeduId = newVal;
        tbeduIdIsModified = true;
        tbeduIdIsInitialized = true;
    }

    /**
     * Setter method for tbeduId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeduId
     */
    public void setTbeduId(int newVal)
    {
        setTbeduId(new Integer(newVal));
    }

    /**
     * Determines if the tbeduId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeduIdModified()
    {
        return tbeduIdIsModified;
    }

    /**
     * Determines if the tbeduId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeduIdInitialized()
    {
        return tbeduIdIsInitialized;
    }

    /**
     * Getter method for tbempId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_education.tbemp_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbempId
     */
    public Integer getTbempId()
    {
        return tbempId;
    }

    /**
     * Setter method for tbempId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbempId
     */
    public void setTbempId(Integer newVal)
    {
        if ((newVal != null && tbempId != null && (newVal.compareTo(tbempId) == 0)) ||
            (newVal == null && tbempId == null && tbempIdIsInitialized)) {
            return;
        }
        tbempId = newVal;
        tbempIdIsModified = true;
        tbempIdIsInitialized = true;
    }

    /**
     * Setter method for tbempId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbempId
     */
    public void setTbempId(int newVal)
    {
        setTbempId(new Integer(newVal));
    }

    /**
     * Determines if the tbempId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbempIdModified()
    {
        return tbempIdIsModified;
    }

    /**
     * Determines if the tbempId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbempIdInitialized()
    {
        return tbempIdIsInitialized;
    }

    /**
     * Getter method for tbaeId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_education.tbae_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaeId
     */
    public Integer getTbaeId()
    {
        return tbaeId;
    }

    /**
     * Setter method for tbaeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaeId
     */
    public void setTbaeId(Integer newVal)
    {
        if ((newVal != null && tbaeId != null && (newVal.compareTo(tbaeId) == 0)) ||
            (newVal == null && tbaeId == null && tbaeIdIsInitialized)) {
            return;
        }
        tbaeId = newVal;
        tbaeIdIsModified = true;
        tbaeIdIsInitialized = true;
    }

    /**
     * Setter method for tbaeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaeId
     */
    public void setTbaeId(int newVal)
    {
        setTbaeId(new Integer(newVal));
    }

    /**
     * Determines if the tbaeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaeIdModified()
    {
        return tbaeIdIsModified;
    }

    /**
     * Determines if the tbaeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaeIdInitialized()
    {
        return tbaeIdIsInitialized;
    }

    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /** The TbEducation referenced by this bean. */
    private TbEducationBean referencedTbEducation;
    /** Getter method for TbEducationBean. */
    public TbEducationBean getTbEducationBean() {
        return this.referencedTbEducation;
    }
    /** Setter method for TbEducationBean. */
    public void setTbEducationBean(TbEducationBean reference) {
        this.referencedTbEducation = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbaeEndDateIsModified 		|| tbaeStartDateIsModified  		|| tbaeMajorIsModified  		|| tbaeGpaIsModified  		|| tbeduIdIsModified  		|| tbempIdIsModified  		|| tbaeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbaeEndDateIsModified = false;
        tbaeStartDateIsModified = false;
        tbaeMajorIsModified = false;
        tbaeGpaIsModified = false;
        tbeduIdIsModified = false;
        tbempIdIsModified = false;
        tbaeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbAssignedEducationBean bean)
    {
        setTbaeEndDate(bean.getTbaeEndDate());
        setTbaeStartDate(bean.getTbaeStartDate());
        setTbaeMajor(bean.getTbaeMajor());
        setTbaeGpa(bean.getTbaeGpa());
        setTbeduId(bean.getTbeduId());
        setTbempId(bean.getTbempId());
        setTbaeId(bean.getTbaeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbae_end_date", getTbaeEndDate() == null ? "" : getTbaeEndDate().toString());
        dictionnary.put("tbae_start_date", getTbaeStartDate() == null ? "" : getTbaeStartDate().toString());
        dictionnary.put("tbae_major", getTbaeMajor() == null ? "" : getTbaeMajor().toString());
        dictionnary.put("tbae_gpa", getTbaeGpa() == null ? "" : getTbaeGpa().toString());
        dictionnary.put("tbedu_id", getTbeduId() == null ? "" : getTbeduId().toString());
        dictionnary.put("tbemp_id", getTbempId() == null ? "" : getTbempId().toString());
        dictionnary.put("tbae_id", getTbaeId() == null ? "" : getTbaeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbae_id", getTbaeId() == null ? "" : getTbaeId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbae_end_date".equalsIgnoreCase(column) || "tbaeEndDate".equalsIgnoreCase(column)) {
            return getTbaeEndDate() == null ? "" : getTbaeEndDate().toString();
        } else if ("tbae_start_date".equalsIgnoreCase(column) || "tbaeStartDate".equalsIgnoreCase(column)) {
            return getTbaeStartDate() == null ? "" : getTbaeStartDate().toString();
        } else if ("tbae_major".equalsIgnoreCase(column) || "tbaeMajor".equalsIgnoreCase(column)) {
            return getTbaeMajor() == null ? "" : getTbaeMajor().toString();
        } else if ("tbae_gpa".equalsIgnoreCase(column) || "tbaeGpa".equalsIgnoreCase(column)) {
            return getTbaeGpa() == null ? "" : getTbaeGpa().toString();
        } else if ("tbedu_id".equalsIgnoreCase(column) || "tbeduId".equalsIgnoreCase(column)) {
            return getTbeduId() == null ? "" : getTbeduId().toString();
        } else if ("tbemp_id".equalsIgnoreCase(column) || "tbempId".equalsIgnoreCase(column)) {
            return getTbempId() == null ? "" : getTbempId().toString();
        } else if ("tbae_id".equalsIgnoreCase(column) || "tbaeId".equalsIgnoreCase(column)) {
            return getTbaeId() == null ? "" : getTbaeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbAssignedEducationBean)) {
            return false;
        }

		TbAssignedEducationBean obj = (TbAssignedEducationBean) object;
		return new EqualsBuilder()
            .append(getTbaeEndDate(), obj.getTbaeEndDate())
            .append(getTbaeStartDate(), obj.getTbaeStartDate())
            .append(getTbaeMajor(), obj.getTbaeMajor())
            .append(getTbaeGpa(), obj.getTbaeGpa())
            .append(getTbeduId(), obj.getTbeduId())
            .append(getTbempId(), obj.getTbempId())
            .append(getTbaeId(), obj.getTbaeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbaeEndDate())
            .append(getTbaeStartDate())
            .append(getTbaeMajor())
            .append(getTbaeGpa())
            .append(getTbeduId())
            .append(getTbempId())
            .append(getTbaeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbae_end_date", getTbaeEndDate())
            .append("tbae_start_date", getTbaeStartDate())
            .append("tbae_major", getTbaeMajor())
            .append("tbae_gpa", getTbaeGpa())
            .append("tbedu_id", getTbeduId())
            .append("tbemp_id", getTbempId())
            .append("tbae_id", getTbaeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbAssignedEducationBean obj = (TbAssignedEducationBean) object;
        return new CompareToBuilder()
            .append(getTbaeEndDate(), obj.getTbaeEndDate())
            .append(getTbaeStartDate(), obj.getTbaeStartDate())
            .append(getTbaeMajor(), obj.getTbaeMajor())
            .append(getTbaeGpa(), obj.getTbaeGpa())
            .append(getTbeduId(), obj.getTbeduId())
            .append(getTbempId(), obj.getTbempId())
            .append(getTbaeId(), obj.getTbaeId())
            .toComparison();
   }
}
