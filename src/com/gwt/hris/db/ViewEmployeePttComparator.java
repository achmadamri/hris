// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the ViewEmployeePttBean objects.
 * @author sql2java
 */
public class ViewEmployeePttComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ViewEmployeePttComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewEmployeePttComparator(ViewEmployeePttManager.ID_TBPTT_NAME, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewEmployeePttManager.ID_TBPTT_NAME
     *   <li>ViewEmployeePttManager.ID_TBPTT_PTT_ID
     *   <li>ViewEmployeePttManager.ID_TBPTT_ID
     *   <li>ViewEmployeePttManager.ID_TBEPTT_ID
     *   <li>ViewEmployeePttManager.ID_TBEPTT_NOMINAL
     *   <li>ViewEmployeePttManager.ID_TBC_LOCAL_CURRENCY_KURS
     *   <li>ViewEmployeePttManager.ID_TBC_NAME
     *   <li>ViewEmployeePttManager.ID_TBC_CURRENCY_ID
     *   <li>ViewEmployeePttManager.ID_TBC_ID
     *   <li>ViewEmployeePttManager.ID_TBEPTT_INSERT_TIME
     *   <li>ViewEmployeePttManager.ID_TBE_NAME
     *   <li>ViewEmployeePttManager.ID_TBE_ID
     * </ul>
     */
    public ViewEmployeePttComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ViewEmployeePttComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewEmployeePttComparator(ViewEmployeePttManager.ID_TBPTT_NAME, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewEmployeePttManager.ID_TBPTT_NAME
     *   <li>ViewEmployeePttManager.ID_TBPTT_PTT_ID
     *   <li>ViewEmployeePttManager.ID_TBPTT_ID
     *   <li>ViewEmployeePttManager.ID_TBEPTT_ID
     *   <li>ViewEmployeePttManager.ID_TBEPTT_NOMINAL
     *   <li>ViewEmployeePttManager.ID_TBC_LOCAL_CURRENCY_KURS
     *   <li>ViewEmployeePttManager.ID_TBC_NAME
     *   <li>ViewEmployeePttManager.ID_TBC_CURRENCY_ID
     *   <li>ViewEmployeePttManager.ID_TBC_ID
     *   <li>ViewEmployeePttManager.ID_TBEPTT_INSERT_TIME
     *   <li>ViewEmployeePttManager.ID_TBE_NAME
     *   <li>ViewEmployeePttManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ViewEmployeePttComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ViewEmployeePttBean b1 = (ViewEmployeePttBean)pObj1;
        ViewEmployeePttBean b2 = (ViewEmployeePttBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ViewEmployeePttManager.ID_TBPTT_NAME:
                if (b1.getTbpttName() == null && b2.getTbpttName() != null) {
                    iReturn = -1;
                } else if (b1.getTbpttName() == null && b2.getTbpttName() == null) {
                    iReturn = 0;
                } else if (b1.getTbpttName() != null && b2.getTbpttName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpttName().compareTo(b2.getTbpttName());
                }
                break;
            case ViewEmployeePttManager.ID_TBPTT_PTT_ID:
                if (b1.getTbpttPttId() == null && b2.getTbpttPttId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpttPttId() == null && b2.getTbpttPttId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpttPttId() != null && b2.getTbpttPttId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpttPttId().compareTo(b2.getTbpttPttId());
                }
                break;
            case ViewEmployeePttManager.ID_TBPTT_ID:
                if (b1.getTbpttId() == null && b2.getTbpttId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpttId() == null && b2.getTbpttId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpttId() != null && b2.getTbpttId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpttId().compareTo(b2.getTbpttId());
                }
                break;
            case ViewEmployeePttManager.ID_TBEPTT_ID:
                if (b1.getTbepttId() == null && b2.getTbepttId() != null) {
                    iReturn = -1;
                } else if (b1.getTbepttId() == null && b2.getTbepttId() == null) {
                    iReturn = 0;
                } else if (b1.getTbepttId() != null && b2.getTbepttId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbepttId().compareTo(b2.getTbepttId());
                }
                break;
            case ViewEmployeePttManager.ID_TBEPTT_NOMINAL:
                if (b1.getTbepttNominal() == null && b2.getTbepttNominal() != null) {
                    iReturn = -1;
                } else if (b1.getTbepttNominal() == null && b2.getTbepttNominal() == null) {
                    iReturn = 0;
                } else if (b1.getTbepttNominal() != null && b2.getTbepttNominal() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbepttNominal().compareTo(b2.getTbepttNominal());
                }
                break;
            case ViewEmployeePttManager.ID_TBC_LOCAL_CURRENCY_KURS:
                if (b1.getTbcLocalCurrencyKurs() == null && b2.getTbcLocalCurrencyKurs() != null) {
                    iReturn = -1;
                } else if (b1.getTbcLocalCurrencyKurs() == null && b2.getTbcLocalCurrencyKurs() == null) {
                    iReturn = 0;
                } else if (b1.getTbcLocalCurrencyKurs() != null && b2.getTbcLocalCurrencyKurs() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcLocalCurrencyKurs().compareTo(b2.getTbcLocalCurrencyKurs());
                }
                break;
            case ViewEmployeePttManager.ID_TBC_NAME:
                if (b1.getTbcName() == null && b2.getTbcName() != null) {
                    iReturn = -1;
                } else if (b1.getTbcName() == null && b2.getTbcName() == null) {
                    iReturn = 0;
                } else if (b1.getTbcName() != null && b2.getTbcName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcName().compareTo(b2.getTbcName());
                }
                break;
            case ViewEmployeePttManager.ID_TBC_CURRENCY_ID:
                if (b1.getTbcCurrencyId() == null && b2.getTbcCurrencyId() != null) {
                    iReturn = -1;
                } else if (b1.getTbcCurrencyId() == null && b2.getTbcCurrencyId() == null) {
                    iReturn = 0;
                } else if (b1.getTbcCurrencyId() != null && b2.getTbcCurrencyId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcCurrencyId().compareTo(b2.getTbcCurrencyId());
                }
                break;
            case ViewEmployeePttManager.ID_TBC_ID:
                if (b1.getTbcId() == null && b2.getTbcId() != null) {
                    iReturn = -1;
                } else if (b1.getTbcId() == null && b2.getTbcId() == null) {
                    iReturn = 0;
                } else if (b1.getTbcId() != null && b2.getTbcId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcId().compareTo(b2.getTbcId());
                }
                break;
            case ViewEmployeePttManager.ID_TBEPTT_INSERT_TIME:
                if (b1.getTbepttInsertTime() == null && b2.getTbepttInsertTime() != null) {
                    iReturn = -1;
                } else if (b1.getTbepttInsertTime() == null && b2.getTbepttInsertTime() == null) {
                    iReturn = 0;
                } else if (b1.getTbepttInsertTime() != null && b2.getTbepttInsertTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbepttInsertTime().compareTo(b2.getTbepttInsertTime());
                }
                break;
            case ViewEmployeePttManager.ID_TBE_NAME:
                if (b1.getTbeName() == null && b2.getTbeName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeName() == null && b2.getTbeName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeName() != null && b2.getTbeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeName().compareTo(b2.getTbeName());
                }
                break;
            case ViewEmployeePttManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
