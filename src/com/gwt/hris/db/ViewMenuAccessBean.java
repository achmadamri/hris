// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewMenuAccessBean is a mapping of view_menu_access Table.
 * @author sql2java
*/
public class ViewMenuAccessBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 8122081845443174409L;
	
    private Integer tbmaApprove;

    private boolean tbmaApproveIsModified = false;
    private boolean tbmaApproveIsInitialized = false;

    private Integer tbmaView;

    private boolean tbmaViewIsModified = false;
    private boolean tbmaViewIsInitialized = false;

    private Integer tbmaDelete;

    private boolean tbmaDeleteIsModified = false;
    private boolean tbmaDeleteIsInitialized = false;

    private Integer tbmaUpdate;

    private boolean tbmaUpdateIsModified = false;
    private boolean tbmaUpdateIsInitialized = false;

    private Integer tbmaInsert;

    private boolean tbmaInsertIsModified = false;
    private boolean tbmaInsertIsInitialized = false;

    private Integer tbmaEnabled;

    private boolean tbmaEnabledIsModified = false;
    private boolean tbmaEnabledIsInitialized = false;

    private Integer tbmaId;

    private boolean tbmaIdIsModified = false;
    private boolean tbmaIdIsInitialized = false;

    private String tbmNamaParent;

    private boolean tbmNamaParentIsModified = false;
    private boolean tbmNamaParentIsInitialized = false;

    private Integer tbmParentIdParent;

    private boolean tbmParentIdParentIsModified = false;
    private boolean tbmParentIdParentIsInitialized = false;

    private Integer tbmIdParent;

    private boolean tbmIdParentIsModified = false;
    private boolean tbmIdParentIsInitialized = false;

    private Integer tbmDisabled;

    private boolean tbmDisabledIsModified = false;
    private boolean tbmDisabledIsInitialized = false;

    private String tbmNama;

    private boolean tbmNamaIsModified = false;
    private boolean tbmNamaIsInitialized = false;

    private Integer tbmId;

    private boolean tbmIdIsModified = false;
    private boolean tbmIdIsInitialized = false;

    private String tbjtName;

    private boolean tbjtNameIsModified = false;
    private boolean tbjtNameIsInitialized = false;

    private Integer tbjtId;

    private boolean tbjtIdIsModified = false;
    private boolean tbjtIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewMenuAccessBean is via the createViewMenuAccessBean method in ViewMenuAccessManager or
     * via the factory class ViewMenuAccessFactory create method
     */
    protected ViewMenuAccessBean()
    {
    }

    /**
     * Getter method for tbmaApprove.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbma_approve</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaApprove
     */
    public Integer getTbmaApprove()
    {
        return tbmaApprove;
    }

    /**
     * Setter method for tbmaApprove.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaApprove
     */
    public void setTbmaApprove(Integer newVal)
    {
        if ((newVal != null && tbmaApprove != null && (newVal.compareTo(tbmaApprove) == 0)) ||
            (newVal == null && tbmaApprove == null && tbmaApproveIsInitialized)) {
            return;
        }
        tbmaApprove = newVal;
        tbmaApproveIsModified = true;
        tbmaApproveIsInitialized = true;
    }

    /**
     * Setter method for tbmaApprove.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaApprove
     */
    public void setTbmaApprove(int newVal)
    {
        setTbmaApprove(new Integer(newVal));
    }

    /**
     * Determines if the tbmaApprove has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaApproveModified()
    {
        return tbmaApproveIsModified;
    }

    /**
     * Determines if the tbmaApprove has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaApproveInitialized()
    {
        return tbmaApproveIsInitialized;
    }

    /**
     * Getter method for tbmaView.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbma_view</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaView
     */
    public Integer getTbmaView()
    {
        return tbmaView;
    }

    /**
     * Setter method for tbmaView.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaView
     */
    public void setTbmaView(Integer newVal)
    {
        if ((newVal != null && tbmaView != null && (newVal.compareTo(tbmaView) == 0)) ||
            (newVal == null && tbmaView == null && tbmaViewIsInitialized)) {
            return;
        }
        tbmaView = newVal;
        tbmaViewIsModified = true;
        tbmaViewIsInitialized = true;
    }

    /**
     * Setter method for tbmaView.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaView
     */
    public void setTbmaView(int newVal)
    {
        setTbmaView(new Integer(newVal));
    }

    /**
     * Determines if the tbmaView has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaViewModified()
    {
        return tbmaViewIsModified;
    }

    /**
     * Determines if the tbmaView has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaViewInitialized()
    {
        return tbmaViewIsInitialized;
    }

    /**
     * Getter method for tbmaDelete.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbma_delete</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaDelete
     */
    public Integer getTbmaDelete()
    {
        return tbmaDelete;
    }

    /**
     * Setter method for tbmaDelete.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaDelete
     */
    public void setTbmaDelete(Integer newVal)
    {
        if ((newVal != null && tbmaDelete != null && (newVal.compareTo(tbmaDelete) == 0)) ||
            (newVal == null && tbmaDelete == null && tbmaDeleteIsInitialized)) {
            return;
        }
        tbmaDelete = newVal;
        tbmaDeleteIsModified = true;
        tbmaDeleteIsInitialized = true;
    }

    /**
     * Setter method for tbmaDelete.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaDelete
     */
    public void setTbmaDelete(int newVal)
    {
        setTbmaDelete(new Integer(newVal));
    }

    /**
     * Determines if the tbmaDelete has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaDeleteModified()
    {
        return tbmaDeleteIsModified;
    }

    /**
     * Determines if the tbmaDelete has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaDeleteInitialized()
    {
        return tbmaDeleteIsInitialized;
    }

    /**
     * Getter method for tbmaUpdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbma_update</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaUpdate
     */
    public Integer getTbmaUpdate()
    {
        return tbmaUpdate;
    }

    /**
     * Setter method for tbmaUpdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaUpdate
     */
    public void setTbmaUpdate(Integer newVal)
    {
        if ((newVal != null && tbmaUpdate != null && (newVal.compareTo(tbmaUpdate) == 0)) ||
            (newVal == null && tbmaUpdate == null && tbmaUpdateIsInitialized)) {
            return;
        }
        tbmaUpdate = newVal;
        tbmaUpdateIsModified = true;
        tbmaUpdateIsInitialized = true;
    }

    /**
     * Setter method for tbmaUpdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaUpdate
     */
    public void setTbmaUpdate(int newVal)
    {
        setTbmaUpdate(new Integer(newVal));
    }

    /**
     * Determines if the tbmaUpdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaUpdateModified()
    {
        return tbmaUpdateIsModified;
    }

    /**
     * Determines if the tbmaUpdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaUpdateInitialized()
    {
        return tbmaUpdateIsInitialized;
    }

    /**
     * Getter method for tbmaInsert.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbma_insert</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaInsert
     */
    public Integer getTbmaInsert()
    {
        return tbmaInsert;
    }

    /**
     * Setter method for tbmaInsert.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaInsert
     */
    public void setTbmaInsert(Integer newVal)
    {
        if ((newVal != null && tbmaInsert != null && (newVal.compareTo(tbmaInsert) == 0)) ||
            (newVal == null && tbmaInsert == null && tbmaInsertIsInitialized)) {
            return;
        }
        tbmaInsert = newVal;
        tbmaInsertIsModified = true;
        tbmaInsertIsInitialized = true;
    }

    /**
     * Setter method for tbmaInsert.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaInsert
     */
    public void setTbmaInsert(int newVal)
    {
        setTbmaInsert(new Integer(newVal));
    }

    /**
     * Determines if the tbmaInsert has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaInsertModified()
    {
        return tbmaInsertIsModified;
    }

    /**
     * Determines if the tbmaInsert has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaInsertInitialized()
    {
        return tbmaInsertIsInitialized;
    }

    /**
     * Getter method for tbmaEnabled.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbma_enabled</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaEnabled
     */
    public Integer getTbmaEnabled()
    {
        return tbmaEnabled;
    }

    /**
     * Setter method for tbmaEnabled.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaEnabled
     */
    public void setTbmaEnabled(Integer newVal)
    {
        if ((newVal != null && tbmaEnabled != null && (newVal.compareTo(tbmaEnabled) == 0)) ||
            (newVal == null && tbmaEnabled == null && tbmaEnabledIsInitialized)) {
            return;
        }
        tbmaEnabled = newVal;
        tbmaEnabledIsModified = true;
        tbmaEnabledIsInitialized = true;
    }

    /**
     * Setter method for tbmaEnabled.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaEnabled
     */
    public void setTbmaEnabled(int newVal)
    {
        setTbmaEnabled(new Integer(newVal));
    }

    /**
     * Determines if the tbmaEnabled has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaEnabledModified()
    {
        return tbmaEnabledIsModified;
    }

    /**
     * Determines if the tbmaEnabled has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaEnabledInitialized()
    {
        return tbmaEnabledIsInitialized;
    }

    /**
     * Getter method for tbmaId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbma_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaId
     */
    public Integer getTbmaId()
    {
        return tbmaId;
    }

    /**
     * Setter method for tbmaId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaId
     */
    public void setTbmaId(Integer newVal)
    {
        if ((newVal != null && tbmaId != null && (newVal.compareTo(tbmaId) == 0)) ||
            (newVal == null && tbmaId == null && tbmaIdIsInitialized)) {
            return;
        }
        tbmaId = newVal;
        tbmaIdIsModified = true;
        tbmaIdIsInitialized = true;
    }

    /**
     * Setter method for tbmaId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaId
     */
    public void setTbmaId(int newVal)
    {
        setTbmaId(new Integer(newVal));
    }

    /**
     * Determines if the tbmaId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaIdModified()
    {
        return tbmaIdIsModified;
    }

    /**
     * Determines if the tbmaId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaIdInitialized()
    {
        return tbmaIdIsInitialized;
    }

    /**
     * Getter method for tbmNamaParent.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbm_nama_parent</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbmNamaParent
     */
    public String getTbmNamaParent()
    {
        return tbmNamaParent;
    }

    /**
     * Setter method for tbmNamaParent.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmNamaParent
     */
    public void setTbmNamaParent(String newVal)
    {
        if ((newVal != null && tbmNamaParent != null && (newVal.compareTo(tbmNamaParent) == 0)) ||
            (newVal == null && tbmNamaParent == null && tbmNamaParentIsInitialized)) {
            return;
        }
        tbmNamaParent = newVal;
        tbmNamaParentIsModified = true;
        tbmNamaParentIsInitialized = true;
    }

    /**
     * Determines if the tbmNamaParent has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmNamaParentModified()
    {
        return tbmNamaParentIsModified;
    }

    /**
     * Determines if the tbmNamaParent has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmNamaParentInitialized()
    {
        return tbmNamaParentIsInitialized;
    }

    /**
     * Getter method for tbmParentIdParent.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbm_parent_id_parent</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmParentIdParent
     */
    public Integer getTbmParentIdParent()
    {
        return tbmParentIdParent;
    }

    /**
     * Setter method for tbmParentIdParent.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmParentIdParent
     */
    public void setTbmParentIdParent(Integer newVal)
    {
        if ((newVal != null && tbmParentIdParent != null && (newVal.compareTo(tbmParentIdParent) == 0)) ||
            (newVal == null && tbmParentIdParent == null && tbmParentIdParentIsInitialized)) {
            return;
        }
        tbmParentIdParent = newVal;
        tbmParentIdParentIsModified = true;
        tbmParentIdParentIsInitialized = true;
    }

    /**
     * Setter method for tbmParentIdParent.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmParentIdParent
     */
    public void setTbmParentIdParent(int newVal)
    {
        setTbmParentIdParent(new Integer(newVal));
    }

    /**
     * Determines if the tbmParentIdParent has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmParentIdParentModified()
    {
        return tbmParentIdParentIsModified;
    }

    /**
     * Determines if the tbmParentIdParent has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmParentIdParentInitialized()
    {
        return tbmParentIdParentIsInitialized;
    }

    /**
     * Getter method for tbmIdParent.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbm_id_parent</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmIdParent
     */
    public Integer getTbmIdParent()
    {
        return tbmIdParent;
    }

    /**
     * Setter method for tbmIdParent.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmIdParent
     */
    public void setTbmIdParent(Integer newVal)
    {
        if ((newVal != null && tbmIdParent != null && (newVal.compareTo(tbmIdParent) == 0)) ||
            (newVal == null && tbmIdParent == null && tbmIdParentIsInitialized)) {
            return;
        }
        tbmIdParent = newVal;
        tbmIdParentIsModified = true;
        tbmIdParentIsInitialized = true;
    }

    /**
     * Setter method for tbmIdParent.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmIdParent
     */
    public void setTbmIdParent(int newVal)
    {
        setTbmIdParent(new Integer(newVal));
    }

    /**
     * Determines if the tbmIdParent has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmIdParentModified()
    {
        return tbmIdParentIsModified;
    }

    /**
     * Determines if the tbmIdParent has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmIdParentInitialized()
    {
        return tbmIdParentIsInitialized;
    }

    /**
     * Getter method for tbmDisabled.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbm_disabled</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmDisabled
     */
    public Integer getTbmDisabled()
    {
        return tbmDisabled;
    }

    /**
     * Setter method for tbmDisabled.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmDisabled
     */
    public void setTbmDisabled(Integer newVal)
    {
        if ((newVal != null && tbmDisabled != null && (newVal.compareTo(tbmDisabled) == 0)) ||
            (newVal == null && tbmDisabled == null && tbmDisabledIsInitialized)) {
            return;
        }
        tbmDisabled = newVal;
        tbmDisabledIsModified = true;
        tbmDisabledIsInitialized = true;
    }

    /**
     * Setter method for tbmDisabled.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmDisabled
     */
    public void setTbmDisabled(int newVal)
    {
        setTbmDisabled(new Integer(newVal));
    }

    /**
     * Determines if the tbmDisabled has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmDisabledModified()
    {
        return tbmDisabledIsModified;
    }

    /**
     * Determines if the tbmDisabled has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmDisabledInitialized()
    {
        return tbmDisabledIsInitialized;
    }

    /**
     * Getter method for tbmNama.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbm_nama</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbmNama
     */
    public String getTbmNama()
    {
        return tbmNama;
    }

    /**
     * Setter method for tbmNama.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmNama
     */
    public void setTbmNama(String newVal)
    {
        if ((newVal != null && tbmNama != null && (newVal.compareTo(tbmNama) == 0)) ||
            (newVal == null && tbmNama == null && tbmNamaIsInitialized)) {
            return;
        }
        tbmNama = newVal;
        tbmNamaIsModified = true;
        tbmNamaIsInitialized = true;
    }

    /**
     * Determines if the tbmNama has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmNamaModified()
    {
        return tbmNamaIsModified;
    }

    /**
     * Determines if the tbmNama has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmNamaInitialized()
    {
        return tbmNamaIsInitialized;
    }

    /**
     * Getter method for tbmId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbm_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmId
     */
    public Integer getTbmId()
    {
        return tbmId;
    }

    /**
     * Setter method for tbmId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmId
     */
    public void setTbmId(Integer newVal)
    {
        if ((newVal != null && tbmId != null && (newVal.compareTo(tbmId) == 0)) ||
            (newVal == null && tbmId == null && tbmIdIsInitialized)) {
            return;
        }
        tbmId = newVal;
        tbmIdIsModified = true;
        tbmIdIsInitialized = true;
    }

    /**
     * Setter method for tbmId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmId
     */
    public void setTbmId(int newVal)
    {
        setTbmId(new Integer(newVal));
    }

    /**
     * Determines if the tbmId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmIdModified()
    {
        return tbmIdIsModified;
    }

    /**
     * Determines if the tbmId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmIdInitialized()
    {
        return tbmIdIsInitialized;
    }

    /**
     * Getter method for tbjtName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbjt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtName
     */
    public String getTbjtName()
    {
        return tbjtName;
    }

    /**
     * Setter method for tbjtName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtName
     */
    public void setTbjtName(String newVal)
    {
        if ((newVal != null && tbjtName != null && (newVal.compareTo(tbjtName) == 0)) ||
            (newVal == null && tbjtName == null && tbjtNameIsInitialized)) {
            return;
        }
        tbjtName = newVal;
        tbjtNameIsModified = true;
        tbjtNameIsInitialized = true;
    }

    /**
     * Determines if the tbjtName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtNameModified()
    {
        return tbjtNameIsModified;
    }

    /**
     * Determines if the tbjtName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtNameInitialized()
    {
        return tbjtNameIsInitialized;
    }

    /**
     * Getter method for tbjtId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access.tbjt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtId
     */
    public Integer getTbjtId()
    {
        return tbjtId;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(Integer newVal)
    {
        if ((newVal != null && tbjtId != null && (newVal.compareTo(tbjtId) == 0)) ||
            (newVal == null && tbjtId == null && tbjtIdIsInitialized)) {
            return;
        }
        tbjtId = newVal;
        tbjtIdIsModified = true;
        tbjtIdIsInitialized = true;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(int newVal)
    {
        setTbjtId(new Integer(newVal));
    }

    /**
     * Determines if the tbjtId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtIdModified()
    {
        return tbjtIdIsModified;
    }

    /**
     * Determines if the tbjtId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtIdInitialized()
    {
        return tbjtIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbmaApproveIsModified 		|| tbmaViewIsModified  		|| tbmaDeleteIsModified  		|| tbmaUpdateIsModified  		|| tbmaInsertIsModified  		|| tbmaEnabledIsModified  		|| tbmaIdIsModified  		|| tbmNamaParentIsModified  		|| tbmParentIdParentIsModified  		|| tbmIdParentIsModified  		|| tbmDisabledIsModified  		|| tbmNamaIsModified  		|| tbmIdIsModified  		|| tbjtNameIsModified  		|| tbjtIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbmaApproveIsModified = false;
        tbmaViewIsModified = false;
        tbmaDeleteIsModified = false;
        tbmaUpdateIsModified = false;
        tbmaInsertIsModified = false;
        tbmaEnabledIsModified = false;
        tbmaIdIsModified = false;
        tbmNamaParentIsModified = false;
        tbmParentIdParentIsModified = false;
        tbmIdParentIsModified = false;
        tbmDisabledIsModified = false;
        tbmNamaIsModified = false;
        tbmIdIsModified = false;
        tbjtNameIsModified = false;
        tbjtIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewMenuAccessBean bean)
    {
        setTbmaApprove(bean.getTbmaApprove());
        setTbmaView(bean.getTbmaView());
        setTbmaDelete(bean.getTbmaDelete());
        setTbmaUpdate(bean.getTbmaUpdate());
        setTbmaInsert(bean.getTbmaInsert());
        setTbmaEnabled(bean.getTbmaEnabled());
        setTbmaId(bean.getTbmaId());
        setTbmNamaParent(bean.getTbmNamaParent());
        setTbmParentIdParent(bean.getTbmParentIdParent());
        setTbmIdParent(bean.getTbmIdParent());
        setTbmDisabled(bean.getTbmDisabled());
        setTbmNama(bean.getTbmNama());
        setTbmId(bean.getTbmId());
        setTbjtName(bean.getTbjtName());
        setTbjtId(bean.getTbjtId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbma_approve", getTbmaApprove() == null ? "" : getTbmaApprove().toString());
        dictionnary.put("tbma_view", getTbmaView() == null ? "" : getTbmaView().toString());
        dictionnary.put("tbma_delete", getTbmaDelete() == null ? "" : getTbmaDelete().toString());
        dictionnary.put("tbma_update", getTbmaUpdate() == null ? "" : getTbmaUpdate().toString());
        dictionnary.put("tbma_insert", getTbmaInsert() == null ? "" : getTbmaInsert().toString());
        dictionnary.put("tbma_enabled", getTbmaEnabled() == null ? "" : getTbmaEnabled().toString());
        dictionnary.put("tbma_id", getTbmaId() == null ? "" : getTbmaId().toString());
        dictionnary.put("tbm_nama_parent", getTbmNamaParent() == null ? "" : getTbmNamaParent().toString());
        dictionnary.put("tbm_parent_id_parent", getTbmParentIdParent() == null ? "" : getTbmParentIdParent().toString());
        dictionnary.put("tbm_id_parent", getTbmIdParent() == null ? "" : getTbmIdParent().toString());
        dictionnary.put("tbm_disabled", getTbmDisabled() == null ? "" : getTbmDisabled().toString());
        dictionnary.put("tbm_nama", getTbmNama() == null ? "" : getTbmNama().toString());
        dictionnary.put("tbm_id", getTbmId() == null ? "" : getTbmId().toString());
        dictionnary.put("tbjt_name", getTbjtName() == null ? "" : getTbjtName().toString());
        dictionnary.put("tbjt_id", getTbjtId() == null ? "" : getTbjtId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbma_approve".equalsIgnoreCase(column) || "tbmaApprove".equalsIgnoreCase(column)) {
            return getTbmaApprove() == null ? "" : getTbmaApprove().toString();
        } else if ("tbma_view".equalsIgnoreCase(column) || "tbmaView".equalsIgnoreCase(column)) {
            return getTbmaView() == null ? "" : getTbmaView().toString();
        } else if ("tbma_delete".equalsIgnoreCase(column) || "tbmaDelete".equalsIgnoreCase(column)) {
            return getTbmaDelete() == null ? "" : getTbmaDelete().toString();
        } else if ("tbma_update".equalsIgnoreCase(column) || "tbmaUpdate".equalsIgnoreCase(column)) {
            return getTbmaUpdate() == null ? "" : getTbmaUpdate().toString();
        } else if ("tbma_insert".equalsIgnoreCase(column) || "tbmaInsert".equalsIgnoreCase(column)) {
            return getTbmaInsert() == null ? "" : getTbmaInsert().toString();
        } else if ("tbma_enabled".equalsIgnoreCase(column) || "tbmaEnabled".equalsIgnoreCase(column)) {
            return getTbmaEnabled() == null ? "" : getTbmaEnabled().toString();
        } else if ("tbma_id".equalsIgnoreCase(column) || "tbmaId".equalsIgnoreCase(column)) {
            return getTbmaId() == null ? "" : getTbmaId().toString();
        } else if ("tbm_nama_parent".equalsIgnoreCase(column) || "tbmNamaParent".equalsIgnoreCase(column)) {
            return getTbmNamaParent() == null ? "" : getTbmNamaParent().toString();
        } else if ("tbm_parent_id_parent".equalsIgnoreCase(column) || "tbmParentIdParent".equalsIgnoreCase(column)) {
            return getTbmParentIdParent() == null ? "" : getTbmParentIdParent().toString();
        } else if ("tbm_id_parent".equalsIgnoreCase(column) || "tbmIdParent".equalsIgnoreCase(column)) {
            return getTbmIdParent() == null ? "" : getTbmIdParent().toString();
        } else if ("tbm_disabled".equalsIgnoreCase(column) || "tbmDisabled".equalsIgnoreCase(column)) {
            return getTbmDisabled() == null ? "" : getTbmDisabled().toString();
        } else if ("tbm_nama".equalsIgnoreCase(column) || "tbmNama".equalsIgnoreCase(column)) {
            return getTbmNama() == null ? "" : getTbmNama().toString();
        } else if ("tbm_id".equalsIgnoreCase(column) || "tbmId".equalsIgnoreCase(column)) {
            return getTbmId() == null ? "" : getTbmId().toString();
        } else if ("tbjt_name".equalsIgnoreCase(column) || "tbjtName".equalsIgnoreCase(column)) {
            return getTbjtName() == null ? "" : getTbjtName().toString();
        } else if ("tbjt_id".equalsIgnoreCase(column) || "tbjtId".equalsIgnoreCase(column)) {
            return getTbjtId() == null ? "" : getTbjtId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewMenuAccessBean)) {
            return false;
        }

		ViewMenuAccessBean obj = (ViewMenuAccessBean) object;
		return new EqualsBuilder()
            .append(getTbmaApprove(), obj.getTbmaApprove())
            .append(getTbmaView(), obj.getTbmaView())
            .append(getTbmaDelete(), obj.getTbmaDelete())
            .append(getTbmaUpdate(), obj.getTbmaUpdate())
            .append(getTbmaInsert(), obj.getTbmaInsert())
            .append(getTbmaEnabled(), obj.getTbmaEnabled())
            .append(getTbmaId(), obj.getTbmaId())
            .append(getTbmNamaParent(), obj.getTbmNamaParent())
            .append(getTbmParentIdParent(), obj.getTbmParentIdParent())
            .append(getTbmIdParent(), obj.getTbmIdParent())
            .append(getTbmDisabled(), obj.getTbmDisabled())
            .append(getTbmNama(), obj.getTbmNama())
            .append(getTbmId(), obj.getTbmId())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjtId(), obj.getTbjtId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbmaApprove())
            .append(getTbmaView())
            .append(getTbmaDelete())
            .append(getTbmaUpdate())
            .append(getTbmaInsert())
            .append(getTbmaEnabled())
            .append(getTbmaId())
            .append(getTbmNamaParent())
            .append(getTbmParentIdParent())
            .append(getTbmIdParent())
            .append(getTbmDisabled())
            .append(getTbmNama())
            .append(getTbmId())
            .append(getTbjtName())
            .append(getTbjtId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbma_approve", getTbmaApprove())
            .append("tbma_view", getTbmaView())
            .append("tbma_delete", getTbmaDelete())
            .append("tbma_update", getTbmaUpdate())
            .append("tbma_insert", getTbmaInsert())
            .append("tbma_enabled", getTbmaEnabled())
            .append("tbma_id", getTbmaId())
            .append("tbm_nama_parent", getTbmNamaParent())
            .append("tbm_parent_id_parent", getTbmParentIdParent())
            .append("tbm_id_parent", getTbmIdParent())
            .append("tbm_disabled", getTbmDisabled())
            .append("tbm_nama", getTbmNama())
            .append("tbm_id", getTbmId())
            .append("tbjt_name", getTbjtName())
            .append("tbjt_id", getTbjtId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewMenuAccessBean obj = (ViewMenuAccessBean) object;
        return new CompareToBuilder()
            .append(getTbmaApprove(), obj.getTbmaApprove())
            .append(getTbmaView(), obj.getTbmaView())
            .append(getTbmaDelete(), obj.getTbmaDelete())
            .append(getTbmaUpdate(), obj.getTbmaUpdate())
            .append(getTbmaInsert(), obj.getTbmaInsert())
            .append(getTbmaEnabled(), obj.getTbmaEnabled())
            .append(getTbmaId(), obj.getTbmaId())
            .append(getTbmNamaParent(), obj.getTbmNamaParent())
            .append(getTbmParentIdParent(), obj.getTbmParentIdParent())
            .append(getTbmIdParent(), obj.getTbmIdParent())
            .append(getTbmDisabled(), obj.getTbmDisabled())
            .append(getTbmNama(), obj.getTbmNama())
            .append(getTbmId(), obj.getTbmId())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjtId(), obj.getTbjtId())
            .toComparison();
   }
}
