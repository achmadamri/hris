// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbPtkpBean is a mapping of tb_ptkp Table.
 * @author sql2java
*/
public class TbPtkpBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -7834137041856610575L;
	
    private Double tbptkpJumlah;

    private boolean tbptkpJumlahIsModified = false;
    private boolean tbptkpJumlahIsInitialized = false;

    private String tbptkpKeterangan;

    private boolean tbptkpKeteranganIsModified = false;
    private boolean tbptkpKeteranganIsInitialized = false;

    private String tbptkpStatus;

    private boolean tbptkpStatusIsModified = false;
    private boolean tbptkpStatusIsInitialized = false;

    private Integer tbptkpId;

    private boolean tbptkpIdIsModified = false;
    private boolean tbptkpIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbPtkpBean is via the createTbPtkpBean method in TbPtkpManager or
     * via the factory class TbPtkpFactory create method
     */
    protected TbPtkpBean()
    {
    }

    /**
     * Getter method for tbptkpJumlah.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_ptkp.tbptkp_jumlah</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbptkpJumlah
     */
    public Double getTbptkpJumlah()
    {
        return tbptkpJumlah;
    }

    /**
     * Setter method for tbptkpJumlah.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbptkpJumlah
     */
    public void setTbptkpJumlah(Double newVal)
    {
        if ((newVal != null && tbptkpJumlah != null && (newVal.compareTo(tbptkpJumlah) == 0)) ||
            (newVal == null && tbptkpJumlah == null && tbptkpJumlahIsInitialized)) {
            return;
        }
        tbptkpJumlah = newVal;
        tbptkpJumlahIsModified = true;
        tbptkpJumlahIsInitialized = true;
    }

    /**
     * Setter method for tbptkpJumlah.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbptkpJumlah
     */
    public void setTbptkpJumlah(double newVal)
    {
        setTbptkpJumlah(new Double(newVal));
    }

    /**
     * Determines if the tbptkpJumlah has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbptkpJumlahModified()
    {
        return tbptkpJumlahIsModified;
    }

    /**
     * Determines if the tbptkpJumlah has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbptkpJumlahInitialized()
    {
        return tbptkpJumlahIsInitialized;
    }

    /**
     * Getter method for tbptkpKeterangan.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_ptkp.tbptkp_keterangan</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbptkpKeterangan
     */
    public String getTbptkpKeterangan()
    {
        return tbptkpKeterangan;
    }

    /**
     * Setter method for tbptkpKeterangan.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbptkpKeterangan
     */
    public void setTbptkpKeterangan(String newVal)
    {
        if ((newVal != null && tbptkpKeterangan != null && (newVal.compareTo(tbptkpKeterangan) == 0)) ||
            (newVal == null && tbptkpKeterangan == null && tbptkpKeteranganIsInitialized)) {
            return;
        }
        tbptkpKeterangan = newVal;
        tbptkpKeteranganIsModified = true;
        tbptkpKeteranganIsInitialized = true;
    }

    /**
     * Determines if the tbptkpKeterangan has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbptkpKeteranganModified()
    {
        return tbptkpKeteranganIsModified;
    }

    /**
     * Determines if the tbptkpKeterangan has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbptkpKeteranganInitialized()
    {
        return tbptkpKeteranganIsInitialized;
    }

    /**
     * Getter method for tbptkpStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_ptkp.tbptkp_status</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbptkpStatus
     */
    public String getTbptkpStatus()
    {
        return tbptkpStatus;
    }

    /**
     * Setter method for tbptkpStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbptkpStatus
     */
    public void setTbptkpStatus(String newVal)
    {
        if ((newVal != null && tbptkpStatus != null && (newVal.compareTo(tbptkpStatus) == 0)) ||
            (newVal == null && tbptkpStatus == null && tbptkpStatusIsInitialized)) {
            return;
        }
        tbptkpStatus = newVal;
        tbptkpStatusIsModified = true;
        tbptkpStatusIsInitialized = true;
    }

    /**
     * Determines if the tbptkpStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbptkpStatusModified()
    {
        return tbptkpStatusIsModified;
    }

    /**
     * Determines if the tbptkpStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbptkpStatusInitialized()
    {
        return tbptkpStatusIsInitialized;
    }

    /**
     * Getter method for tbptkpId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_ptkp.tbptkp_id</li>
     * <li> imported key: tb_employee.tbptkp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbptkpId
     */
    public Integer getTbptkpId()
    {
        return tbptkpId;
    }

    /**
     * Setter method for tbptkpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbptkpId
     */
    public void setTbptkpId(Integer newVal)
    {
        if ((newVal != null && tbptkpId != null && (newVal.compareTo(tbptkpId) == 0)) ||
            (newVal == null && tbptkpId == null && tbptkpIdIsInitialized)) {
            return;
        }
        tbptkpId = newVal;
        tbptkpIdIsModified = true;
        tbptkpIdIsInitialized = true;
    }

    /**
     * Setter method for tbptkpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbptkpId
     */
    public void setTbptkpId(int newVal)
    {
        setTbptkpId(new Integer(newVal));
    }

    /**
     * Determines if the tbptkpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbptkpIdModified()
    {
        return tbptkpIdIsModified;
    }

    /**
     * Determines if the tbptkpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbptkpIdInitialized()
    {
        return tbptkpIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbptkpJumlahIsModified 		|| tbptkpKeteranganIsModified  		|| tbptkpStatusIsModified  		|| tbptkpIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbptkpJumlahIsModified = false;
        tbptkpKeteranganIsModified = false;
        tbptkpStatusIsModified = false;
        tbptkpIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbPtkpBean bean)
    {
        setTbptkpJumlah(bean.getTbptkpJumlah());
        setTbptkpKeterangan(bean.getTbptkpKeterangan());
        setTbptkpStatus(bean.getTbptkpStatus());
        setTbptkpId(bean.getTbptkpId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbptkp_jumlah", getTbptkpJumlah() == null ? "" : getTbptkpJumlah().toString());
        dictionnary.put("tbptkp_keterangan", getTbptkpKeterangan() == null ? "" : getTbptkpKeterangan().toString());
        dictionnary.put("tbptkp_status", getTbptkpStatus() == null ? "" : getTbptkpStatus().toString());
        dictionnary.put("tbptkp_id", getTbptkpId() == null ? "" : getTbptkpId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbptkp_id", getTbptkpId() == null ? "" : getTbptkpId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbptkp_jumlah".equalsIgnoreCase(column) || "tbptkpJumlah".equalsIgnoreCase(column)) {
            return getTbptkpJumlah() == null ? "" : getTbptkpJumlah().toString();
        } else if ("tbptkp_keterangan".equalsIgnoreCase(column) || "tbptkpKeterangan".equalsIgnoreCase(column)) {
            return getTbptkpKeterangan() == null ? "" : getTbptkpKeterangan().toString();
        } else if ("tbptkp_status".equalsIgnoreCase(column) || "tbptkpStatus".equalsIgnoreCase(column)) {
            return getTbptkpStatus() == null ? "" : getTbptkpStatus().toString();
        } else if ("tbptkp_id".equalsIgnoreCase(column) || "tbptkpId".equalsIgnoreCase(column)) {
            return getTbptkpId() == null ? "" : getTbptkpId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbPtkpBean)) {
            return false;
        }

		TbPtkpBean obj = (TbPtkpBean) object;
		return new EqualsBuilder()
            .append(getTbptkpJumlah(), obj.getTbptkpJumlah())
            .append(getTbptkpKeterangan(), obj.getTbptkpKeterangan())
            .append(getTbptkpStatus(), obj.getTbptkpStatus())
            .append(getTbptkpId(), obj.getTbptkpId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbptkpJumlah())
            .append(getTbptkpKeterangan())
            .append(getTbptkpStatus())
            .append(getTbptkpId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbptkp_jumlah", getTbptkpJumlah())
            .append("tbptkp_keterangan", getTbptkpKeterangan())
            .append("tbptkp_status", getTbptkpStatus())
            .append("tbptkp_id", getTbptkpId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbPtkpBean obj = (TbPtkpBean) object;
        return new CompareToBuilder()
            .append(getTbptkpJumlah(), obj.getTbptkpJumlah())
            .append(getTbptkpKeterangan(), obj.getTbptkpKeterangan())
            .append(getTbptkpStatus(), obj.getTbptkpStatus())
            .append(getTbptkpId(), obj.getTbptkpId())
            .toComparison();
   }
}
