// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewEmployeeLeavesBean is a mapping of view_employee_leaves Table.
 * @author sql2java
*/
public class ViewEmployeeLeavesBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 7803573393794460435L;
	
    private String tbltName;

    private boolean tbltNameIsModified = false;
    private boolean tbltNameIsInitialized = false;

    private String tbltLeaveTypesId;

    private boolean tbltLeaveTypesIdIsModified = false;
    private boolean tbltLeaveTypesIdIsInitialized = false;

    private Integer tbltId;

    private boolean tbltIdIsModified = false;
    private boolean tbltIdIsInitialized = false;

    private Integer tbaleLeaveTaken;

    private boolean tbaleLeaveTakenIsModified = false;
    private boolean tbaleLeaveTakenIsInitialized = false;

    private Integer tbaleStatus;

    private boolean tbaleStatusIsModified = false;
    private boolean tbaleStatusIsInitialized = false;

    private String tbaleComments;

    private boolean tbaleCommentsIsModified = false;
    private boolean tbaleCommentsIsInitialized = false;

    private java.sql.Timestamp tbaleEndDate;

    private boolean tbaleEndDateIsModified = false;
    private boolean tbaleEndDateIsInitialized = false;

    private java.sql.Timestamp tbaleStartDate;

    private boolean tbaleStartDateIsModified = false;
    private boolean tbaleStartDateIsInitialized = false;

    private Integer tbaleId;

    private boolean tbaleIdIsModified = false;
    private boolean tbaleIdIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private String tbeNickName;

    private boolean tbeNickNameIsModified = false;
    private boolean tbeNickNameIsInitialized = false;

    private String tbeLastName;

    private boolean tbeLastNameIsModified = false;
    private boolean tbeLastNameIsInitialized = false;

    private String tbeMiddleName;

    private boolean tbeMiddleNameIsModified = false;
    private boolean tbeMiddleNameIsInitialized = false;

    private String tbeFirstName;

    private boolean tbeFirstNameIsModified = false;
    private boolean tbeFirstNameIsInitialized = false;

    private String tbeEmployeeId;

    private boolean tbeEmployeeIdIsModified = false;
    private boolean tbeEmployeeIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewEmployeeLeavesBean is via the createViewEmployeeLeavesBean method in ViewEmployeeLeavesManager or
     * via the factory class ViewEmployeeLeavesFactory create method
     */
    protected ViewEmployeeLeavesBean()
    {
    }

    /**
     * Getter method for tbltName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tblt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbltName
     */
    public String getTbltName()
    {
        return tbltName;
    }

    /**
     * Setter method for tbltName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltName
     */
    public void setTbltName(String newVal)
    {
        if ((newVal != null && tbltName != null && (newVal.compareTo(tbltName) == 0)) ||
            (newVal == null && tbltName == null && tbltNameIsInitialized)) {
            return;
        }
        tbltName = newVal;
        tbltNameIsModified = true;
        tbltNameIsInitialized = true;
    }

    /**
     * Determines if the tbltName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltNameModified()
    {
        return tbltNameIsModified;
    }

    /**
     * Determines if the tbltName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltNameInitialized()
    {
        return tbltNameIsInitialized;
    }

    /**
     * Getter method for tbltLeaveTypesId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tblt_leave_types_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbltLeaveTypesId
     */
    public String getTbltLeaveTypesId()
    {
        return tbltLeaveTypesId;
    }

    /**
     * Setter method for tbltLeaveTypesId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltLeaveTypesId
     */
    public void setTbltLeaveTypesId(String newVal)
    {
        if ((newVal != null && tbltLeaveTypesId != null && (newVal.compareTo(tbltLeaveTypesId) == 0)) ||
            (newVal == null && tbltLeaveTypesId == null && tbltLeaveTypesIdIsInitialized)) {
            return;
        }
        tbltLeaveTypesId = newVal;
        tbltLeaveTypesIdIsModified = true;
        tbltLeaveTypesIdIsInitialized = true;
    }

    /**
     * Determines if the tbltLeaveTypesId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltLeaveTypesIdModified()
    {
        return tbltLeaveTypesIdIsModified;
    }

    /**
     * Determines if the tbltLeaveTypesId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltLeaveTypesIdInitialized()
    {
        return tbltLeaveTypesIdIsInitialized;
    }

    /**
     * Getter method for tbltId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tblt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbltId
     */
    public Integer getTbltId()
    {
        return tbltId;
    }

    /**
     * Setter method for tbltId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltId
     */
    public void setTbltId(Integer newVal)
    {
        if ((newVal != null && tbltId != null && (newVal.compareTo(tbltId) == 0)) ||
            (newVal == null && tbltId == null && tbltIdIsInitialized)) {
            return;
        }
        tbltId = newVal;
        tbltIdIsModified = true;
        tbltIdIsInitialized = true;
    }

    /**
     * Setter method for tbltId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbltId
     */
    public void setTbltId(int newVal)
    {
        setTbltId(new Integer(newVal));
    }

    /**
     * Determines if the tbltId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltIdModified()
    {
        return tbltIdIsModified;
    }

    /**
     * Determines if the tbltId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltIdInitialized()
    {
        return tbltIdIsInitialized;
    }

    /**
     * Getter method for tbaleLeaveTaken.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbale_leave_taken</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaleLeaveTaken
     */
    public Integer getTbaleLeaveTaken()
    {
        return tbaleLeaveTaken;
    }

    /**
     * Setter method for tbaleLeaveTaken.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleLeaveTaken
     */
    public void setTbaleLeaveTaken(Integer newVal)
    {
        if ((newVal != null && tbaleLeaveTaken != null && (newVal.compareTo(tbaleLeaveTaken) == 0)) ||
            (newVal == null && tbaleLeaveTaken == null && tbaleLeaveTakenIsInitialized)) {
            return;
        }
        tbaleLeaveTaken = newVal;
        tbaleLeaveTakenIsModified = true;
        tbaleLeaveTakenIsInitialized = true;
    }

    /**
     * Setter method for tbaleLeaveTaken.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleLeaveTaken
     */
    public void setTbaleLeaveTaken(int newVal)
    {
        setTbaleLeaveTaken(new Integer(newVal));
    }

    /**
     * Determines if the tbaleLeaveTaken has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleLeaveTakenModified()
    {
        return tbaleLeaveTakenIsModified;
    }

    /**
     * Determines if the tbaleLeaveTaken has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleLeaveTakenInitialized()
    {
        return tbaleLeaveTakenIsInitialized;
    }

    /**
     * Getter method for tbaleStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbale_status</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaleStatus
     */
    public Integer getTbaleStatus()
    {
        return tbaleStatus;
    }

    /**
     * Setter method for tbaleStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleStatus
     */
    public void setTbaleStatus(Integer newVal)
    {
        if ((newVal != null && tbaleStatus != null && (newVal.compareTo(tbaleStatus) == 0)) ||
            (newVal == null && tbaleStatus == null && tbaleStatusIsInitialized)) {
            return;
        }
        tbaleStatus = newVal;
        tbaleStatusIsModified = true;
        tbaleStatusIsInitialized = true;
    }

    /**
     * Setter method for tbaleStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleStatus
     */
    public void setTbaleStatus(int newVal)
    {
        setTbaleStatus(new Integer(newVal));
    }

    /**
     * Determines if the tbaleStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleStatusModified()
    {
        return tbaleStatusIsModified;
    }

    /**
     * Determines if the tbaleStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleStatusInitialized()
    {
        return tbaleStatusIsInitialized;
    }

    /**
     * Getter method for tbaleComments.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbale_comments</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaleComments
     */
    public String getTbaleComments()
    {
        return tbaleComments;
    }

    /**
     * Setter method for tbaleComments.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleComments
     */
    public void setTbaleComments(String newVal)
    {
        if ((newVal != null && tbaleComments != null && (newVal.compareTo(tbaleComments) == 0)) ||
            (newVal == null && tbaleComments == null && tbaleCommentsIsInitialized)) {
            return;
        }
        tbaleComments = newVal;
        tbaleCommentsIsModified = true;
        tbaleCommentsIsInitialized = true;
    }

    /**
     * Determines if the tbaleComments has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleCommentsModified()
    {
        return tbaleCommentsIsModified;
    }

    /**
     * Determines if the tbaleComments has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleCommentsInitialized()
    {
        return tbaleCommentsIsInitialized;
    }

    /**
     * Getter method for tbaleEndDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbale_end_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaleEndDate
     */
    public java.sql.Timestamp getTbaleEndDate()
    {
        return tbaleEndDate;
    }

    /**
     * Setter method for tbaleEndDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleEndDate
     */
    public void setTbaleEndDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaleEndDate != null && (newVal.compareTo(tbaleEndDate) == 0)) ||
            (newVal == null && tbaleEndDate == null && tbaleEndDateIsInitialized)) {
            return;
        }
        tbaleEndDate = newVal;
        tbaleEndDateIsModified = true;
        tbaleEndDateIsInitialized = true;
    }

    /**
     * Setter method for tbaleEndDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleEndDate
     */
    public void setTbaleEndDate(long newVal)
    {
        setTbaleEndDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaleEndDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleEndDateModified()
    {
        return tbaleEndDateIsModified;
    }

    /**
     * Determines if the tbaleEndDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleEndDateInitialized()
    {
        return tbaleEndDateIsInitialized;
    }

    /**
     * Getter method for tbaleStartDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbale_start_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaleStartDate
     */
    public java.sql.Timestamp getTbaleStartDate()
    {
        return tbaleStartDate;
    }

    /**
     * Setter method for tbaleStartDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleStartDate
     */
    public void setTbaleStartDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaleStartDate != null && (newVal.compareTo(tbaleStartDate) == 0)) ||
            (newVal == null && tbaleStartDate == null && tbaleStartDateIsInitialized)) {
            return;
        }
        tbaleStartDate = newVal;
        tbaleStartDateIsModified = true;
        tbaleStartDateIsInitialized = true;
    }

    /**
     * Setter method for tbaleStartDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleStartDate
     */
    public void setTbaleStartDate(long newVal)
    {
        setTbaleStartDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaleStartDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleStartDateModified()
    {
        return tbaleStartDateIsModified;
    }

    /**
     * Determines if the tbaleStartDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleStartDateInitialized()
    {
        return tbaleStartDateIsInitialized;
    }

    /**
     * Getter method for tbaleId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbale_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaleId
     */
    public Integer getTbaleId()
    {
        return tbaleId;
    }

    /**
     * Setter method for tbaleId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleId
     */
    public void setTbaleId(Integer newVal)
    {
        if ((newVal != null && tbaleId != null && (newVal.compareTo(tbaleId) == 0)) ||
            (newVal == null && tbaleId == null && tbaleIdIsInitialized)) {
            return;
        }
        tbaleId = newVal;
        tbaleIdIsModified = true;
        tbaleIdIsInitialized = true;
    }

    /**
     * Setter method for tbaleId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleId
     */
    public void setTbaleId(int newVal)
    {
        setTbaleId(new Integer(newVal));
    }

    /**
     * Determines if the tbaleId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleIdModified()
    {
        return tbaleIdIsModified;
    }

    /**
     * Determines if the tbaleId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleIdInitialized()
    {
        return tbaleIdIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeNickName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbe_nick_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeNickName
     */
    public String getTbeNickName()
    {
        return tbeNickName;
    }

    /**
     * Setter method for tbeNickName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeNickName
     */
    public void setTbeNickName(String newVal)
    {
        if ((newVal != null && tbeNickName != null && (newVal.compareTo(tbeNickName) == 0)) ||
            (newVal == null && tbeNickName == null && tbeNickNameIsInitialized)) {
            return;
        }
        tbeNickName = newVal;
        tbeNickNameIsModified = true;
        tbeNickNameIsInitialized = true;
    }

    /**
     * Determines if the tbeNickName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNickNameModified()
    {
        return tbeNickNameIsModified;
    }

    /**
     * Determines if the tbeNickName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNickNameInitialized()
    {
        return tbeNickNameIsInitialized;
    }

    /**
     * Getter method for tbeLastName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbe_last_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeLastName
     */
    public String getTbeLastName()
    {
        return tbeLastName;
    }

    /**
     * Setter method for tbeLastName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeLastName
     */
    public void setTbeLastName(String newVal)
    {
        if ((newVal != null && tbeLastName != null && (newVal.compareTo(tbeLastName) == 0)) ||
            (newVal == null && tbeLastName == null && tbeLastNameIsInitialized)) {
            return;
        }
        tbeLastName = newVal;
        tbeLastNameIsModified = true;
        tbeLastNameIsInitialized = true;
    }

    /**
     * Determines if the tbeLastName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeLastNameModified()
    {
        return tbeLastNameIsModified;
    }

    /**
     * Determines if the tbeLastName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeLastNameInitialized()
    {
        return tbeLastNameIsInitialized;
    }

    /**
     * Getter method for tbeMiddleName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbe_middle_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeMiddleName
     */
    public String getTbeMiddleName()
    {
        return tbeMiddleName;
    }

    /**
     * Setter method for tbeMiddleName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeMiddleName
     */
    public void setTbeMiddleName(String newVal)
    {
        if ((newVal != null && tbeMiddleName != null && (newVal.compareTo(tbeMiddleName) == 0)) ||
            (newVal == null && tbeMiddleName == null && tbeMiddleNameIsInitialized)) {
            return;
        }
        tbeMiddleName = newVal;
        tbeMiddleNameIsModified = true;
        tbeMiddleNameIsInitialized = true;
    }

    /**
     * Determines if the tbeMiddleName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeMiddleNameModified()
    {
        return tbeMiddleNameIsModified;
    }

    /**
     * Determines if the tbeMiddleName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeMiddleNameInitialized()
    {
        return tbeMiddleNameIsInitialized;
    }

    /**
     * Getter method for tbeFirstName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbe_first_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeFirstName
     */
    public String getTbeFirstName()
    {
        return tbeFirstName;
    }

    /**
     * Setter method for tbeFirstName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeFirstName
     */
    public void setTbeFirstName(String newVal)
    {
        if ((newVal != null && tbeFirstName != null && (newVal.compareTo(tbeFirstName) == 0)) ||
            (newVal == null && tbeFirstName == null && tbeFirstNameIsInitialized)) {
            return;
        }
        tbeFirstName = newVal;
        tbeFirstNameIsModified = true;
        tbeFirstNameIsInitialized = true;
    }

    /**
     * Determines if the tbeFirstName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeFirstNameModified()
    {
        return tbeFirstNameIsModified;
    }

    /**
     * Determines if the tbeFirstName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeFirstNameInitialized()
    {
        return tbeFirstNameIsInitialized;
    }

    /**
     * Getter method for tbeEmployeeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbe_employee_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEmployeeId
     */
    public String getTbeEmployeeId()
    {
        return tbeEmployeeId;
    }

    /**
     * Setter method for tbeEmployeeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEmployeeId
     */
    public void setTbeEmployeeId(String newVal)
    {
        if ((newVal != null && tbeEmployeeId != null && (newVal.compareTo(tbeEmployeeId) == 0)) ||
            (newVal == null && tbeEmployeeId == null && tbeEmployeeIdIsInitialized)) {
            return;
        }
        tbeEmployeeId = newVal;
        tbeEmployeeIdIsModified = true;
        tbeEmployeeIdIsInitialized = true;
    }

    /**
     * Determines if the tbeEmployeeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEmployeeIdModified()
    {
        return tbeEmployeeIdIsModified;
    }

    /**
     * Determines if the tbeEmployeeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEmployeeIdInitialized()
    {
        return tbeEmployeeIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_leaves.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbltNameIsModified 		|| tbltLeaveTypesIdIsModified  		|| tbltIdIsModified  		|| tbaleLeaveTakenIsModified  		|| tbaleStatusIsModified  		|| tbaleCommentsIsModified  		|| tbaleEndDateIsModified  		|| tbaleStartDateIsModified  		|| tbaleIdIsModified  		|| tbeNameIsModified  		|| tbeNickNameIsModified  		|| tbeLastNameIsModified  		|| tbeMiddleNameIsModified  		|| tbeFirstNameIsModified  		|| tbeEmployeeIdIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbltNameIsModified = false;
        tbltLeaveTypesIdIsModified = false;
        tbltIdIsModified = false;
        tbaleLeaveTakenIsModified = false;
        tbaleStatusIsModified = false;
        tbaleCommentsIsModified = false;
        tbaleEndDateIsModified = false;
        tbaleStartDateIsModified = false;
        tbaleIdIsModified = false;
        tbeNameIsModified = false;
        tbeNickNameIsModified = false;
        tbeLastNameIsModified = false;
        tbeMiddleNameIsModified = false;
        tbeFirstNameIsModified = false;
        tbeEmployeeIdIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewEmployeeLeavesBean bean)
    {
        setTbltName(bean.getTbltName());
        setTbltLeaveTypesId(bean.getTbltLeaveTypesId());
        setTbltId(bean.getTbltId());
        setTbaleLeaveTaken(bean.getTbaleLeaveTaken());
        setTbaleStatus(bean.getTbaleStatus());
        setTbaleComments(bean.getTbaleComments());
        setTbaleEndDate(bean.getTbaleEndDate());
        setTbaleStartDate(bean.getTbaleStartDate());
        setTbaleId(bean.getTbaleId());
        setTbeName(bean.getTbeName());
        setTbeNickName(bean.getTbeNickName());
        setTbeLastName(bean.getTbeLastName());
        setTbeMiddleName(bean.getTbeMiddleName());
        setTbeFirstName(bean.getTbeFirstName());
        setTbeEmployeeId(bean.getTbeEmployeeId());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tblt_name", getTbltName() == null ? "" : getTbltName().toString());
        dictionnary.put("tblt_leave_types_id", getTbltLeaveTypesId() == null ? "" : getTbltLeaveTypesId().toString());
        dictionnary.put("tblt_id", getTbltId() == null ? "" : getTbltId().toString());
        dictionnary.put("tbale_leave_taken", getTbaleLeaveTaken() == null ? "" : getTbaleLeaveTaken().toString());
        dictionnary.put("tbale_status", getTbaleStatus() == null ? "" : getTbaleStatus().toString());
        dictionnary.put("tbale_comments", getTbaleComments() == null ? "" : getTbaleComments().toString());
        dictionnary.put("tbale_end_date", getTbaleEndDate() == null ? "" : getTbaleEndDate().toString());
        dictionnary.put("tbale_start_date", getTbaleStartDate() == null ? "" : getTbaleStartDate().toString());
        dictionnary.put("tbale_id", getTbaleId() == null ? "" : getTbaleId().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_nick_name", getTbeNickName() == null ? "" : getTbeNickName().toString());
        dictionnary.put("tbe_last_name", getTbeLastName() == null ? "" : getTbeLastName().toString());
        dictionnary.put("tbe_middle_name", getTbeMiddleName() == null ? "" : getTbeMiddleName().toString());
        dictionnary.put("tbe_first_name", getTbeFirstName() == null ? "" : getTbeFirstName().toString());
        dictionnary.put("tbe_employee_id", getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tblt_name".equalsIgnoreCase(column) || "tbltName".equalsIgnoreCase(column)) {
            return getTbltName() == null ? "" : getTbltName().toString();
        } else if ("tblt_leave_types_id".equalsIgnoreCase(column) || "tbltLeaveTypesId".equalsIgnoreCase(column)) {
            return getTbltLeaveTypesId() == null ? "" : getTbltLeaveTypesId().toString();
        } else if ("tblt_id".equalsIgnoreCase(column) || "tbltId".equalsIgnoreCase(column)) {
            return getTbltId() == null ? "" : getTbltId().toString();
        } else if ("tbale_leave_taken".equalsIgnoreCase(column) || "tbaleLeaveTaken".equalsIgnoreCase(column)) {
            return getTbaleLeaveTaken() == null ? "" : getTbaleLeaveTaken().toString();
        } else if ("tbale_status".equalsIgnoreCase(column) || "tbaleStatus".equalsIgnoreCase(column)) {
            return getTbaleStatus() == null ? "" : getTbaleStatus().toString();
        } else if ("tbale_comments".equalsIgnoreCase(column) || "tbaleComments".equalsIgnoreCase(column)) {
            return getTbaleComments() == null ? "" : getTbaleComments().toString();
        } else if ("tbale_end_date".equalsIgnoreCase(column) || "tbaleEndDate".equalsIgnoreCase(column)) {
            return getTbaleEndDate() == null ? "" : getTbaleEndDate().toString();
        } else if ("tbale_start_date".equalsIgnoreCase(column) || "tbaleStartDate".equalsIgnoreCase(column)) {
            return getTbaleStartDate() == null ? "" : getTbaleStartDate().toString();
        } else if ("tbale_id".equalsIgnoreCase(column) || "tbaleId".equalsIgnoreCase(column)) {
            return getTbaleId() == null ? "" : getTbaleId().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_nick_name".equalsIgnoreCase(column) || "tbeNickName".equalsIgnoreCase(column)) {
            return getTbeNickName() == null ? "" : getTbeNickName().toString();
        } else if ("tbe_last_name".equalsIgnoreCase(column) || "tbeLastName".equalsIgnoreCase(column)) {
            return getTbeLastName() == null ? "" : getTbeLastName().toString();
        } else if ("tbe_middle_name".equalsIgnoreCase(column) || "tbeMiddleName".equalsIgnoreCase(column)) {
            return getTbeMiddleName() == null ? "" : getTbeMiddleName().toString();
        } else if ("tbe_first_name".equalsIgnoreCase(column) || "tbeFirstName".equalsIgnoreCase(column)) {
            return getTbeFirstName() == null ? "" : getTbeFirstName().toString();
        } else if ("tbe_employee_id".equalsIgnoreCase(column) || "tbeEmployeeId".equalsIgnoreCase(column)) {
            return getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewEmployeeLeavesBean)) {
            return false;
        }

		ViewEmployeeLeavesBean obj = (ViewEmployeeLeavesBean) object;
		return new EqualsBuilder()
            .append(getTbltName(), obj.getTbltName())
            .append(getTbltLeaveTypesId(), obj.getTbltLeaveTypesId())
            .append(getTbltId(), obj.getTbltId())
            .append(getTbaleLeaveTaken(), obj.getTbaleLeaveTaken())
            .append(getTbaleStatus(), obj.getTbaleStatus())
            .append(getTbaleComments(), obj.getTbaleComments())
            .append(getTbaleEndDate(), obj.getTbaleEndDate())
            .append(getTbaleStartDate(), obj.getTbaleStartDate())
            .append(getTbaleId(), obj.getTbaleId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeNickName(), obj.getTbeNickName())
            .append(getTbeLastName(), obj.getTbeLastName())
            .append(getTbeMiddleName(), obj.getTbeMiddleName())
            .append(getTbeFirstName(), obj.getTbeFirstName())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbltName())
            .append(getTbltLeaveTypesId())
            .append(getTbltId())
            .append(getTbaleLeaveTaken())
            .append(getTbaleStatus())
            .append(getTbaleComments())
            .append(getTbaleEndDate())
            .append(getTbaleStartDate())
            .append(getTbaleId())
            .append(getTbeName())
            .append(getTbeNickName())
            .append(getTbeLastName())
            .append(getTbeMiddleName())
            .append(getTbeFirstName())
            .append(getTbeEmployeeId())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tblt_name", getTbltName())
            .append("tblt_leave_types_id", getTbltLeaveTypesId())
            .append("tblt_id", getTbltId())
            .append("tbale_leave_taken", getTbaleLeaveTaken())
            .append("tbale_status", getTbaleStatus())
            .append("tbale_comments", getTbaleComments())
            .append("tbale_end_date", getTbaleEndDate())
            .append("tbale_start_date", getTbaleStartDate())
            .append("tbale_id", getTbaleId())
            .append("tbe_name", getTbeName())
            .append("tbe_nick_name", getTbeNickName())
            .append("tbe_last_name", getTbeLastName())
            .append("tbe_middle_name", getTbeMiddleName())
            .append("tbe_first_name", getTbeFirstName())
            .append("tbe_employee_id", getTbeEmployeeId())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewEmployeeLeavesBean obj = (ViewEmployeeLeavesBean) object;
        return new CompareToBuilder()
            .append(getTbltName(), obj.getTbltName())
            .append(getTbltLeaveTypesId(), obj.getTbltLeaveTypesId())
            .append(getTbltId(), obj.getTbltId())
            .append(getTbaleLeaveTaken(), obj.getTbaleLeaveTaken())
            .append(getTbaleStatus(), obj.getTbaleStatus())
            .append(getTbaleComments(), obj.getTbaleComments())
            .append(getTbaleEndDate(), obj.getTbaleEndDate())
            .append(getTbaleStartDate(), obj.getTbaleStartDate())
            .append(getTbaleId(), obj.getTbaleId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeNickName(), obj.getTbeNickName())
            .append(getTbeLastName(), obj.getTbeLastName())
            .append(getTbeMiddleName(), obj.getTbeMiddleName())
            .append(getTbeFirstName(), obj.getTbeFirstName())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
