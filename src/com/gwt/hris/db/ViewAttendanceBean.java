// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewAttendanceBean is a mapping of view_attendance Table.
 * @author sql2java
*/
public class ViewAttendanceBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -8742797435688772777L;
	
    private String tbsOutTime;

    private boolean tbsOutTimeIsModified = false;
    private boolean tbsOutTimeIsInitialized = false;

    private String tbsInTime;

    private boolean tbsInTimeIsModified = false;
    private boolean tbsInTimeIsInitialized = false;

    private String tbsName;

    private boolean tbsNameIsModified = false;
    private boolean tbsNameIsInitialized = false;

    private String tbsShiftId;

    private boolean tbsShiftIdIsModified = false;
    private boolean tbsShiftIdIsInitialized = false;

    private Integer tbsId;

    private boolean tbsIdIsModified = false;
    private boolean tbsIdIsInitialized = false;

    private String tbaOutPhoto;

    private boolean tbaOutPhotoIsModified = false;
    private boolean tbaOutPhotoIsInitialized = false;

    private String tbaInPhoto;

    private boolean tbaInPhotoIsModified = false;
    private boolean tbaInPhotoIsInitialized = false;

    private String tbaOutLatitude;

    private boolean tbaOutLatitudeIsModified = false;
    private boolean tbaOutLatitudeIsInitialized = false;

    private String tbaOutLongitude;

    private boolean tbaOutLongitudeIsModified = false;
    private boolean tbaOutLongitudeIsInitialized = false;

    private String tbaInLatitude;

    private boolean tbaInLatitudeIsModified = false;
    private boolean tbaInLatitudeIsInitialized = false;

    private String tbaInLongitude;

    private boolean tbaInLongitudeIsModified = false;
    private boolean tbaInLongitudeIsInitialized = false;

    private Integer tbaOutTimeDiff;

    private boolean tbaOutTimeDiffIsModified = false;
    private boolean tbaOutTimeDiffIsInitialized = false;

    private Integer tbaInTimeDiff;

    private boolean tbaInTimeDiffIsModified = false;
    private boolean tbaInTimeDiffIsInitialized = false;

    private String tbaOutNote;

    private boolean tbaOutNoteIsModified = false;
    private boolean tbaOutNoteIsInitialized = false;

    private String tbaInNote;

    private boolean tbaInNoteIsModified = false;
    private boolean tbaInNoteIsInitialized = false;

    private String tbaOutTime;

    private boolean tbaOutTimeIsModified = false;
    private boolean tbaOutTimeIsInitialized = false;

    private String tbaInTime;

    private boolean tbaInTimeIsModified = false;
    private boolean tbaInTimeIsInitialized = false;

    private String tbaDate;

    private boolean tbaDateIsModified = false;
    private boolean tbaDateIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewAttendanceBean is via the createViewAttendanceBean method in ViewAttendanceManager or
     * via the factory class ViewAttendanceFactory create method
     */
    protected ViewAttendanceBean()
    {
    }

    /**
     * Getter method for tbsOutTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tbs_out_time</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsOutTime
     */
    public String getTbsOutTime()
    {
        return tbsOutTime;
    }

    /**
     * Setter method for tbsOutTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsOutTime
     */
    public void setTbsOutTime(String newVal)
    {
        if ((newVal != null && tbsOutTime != null && (newVal.compareTo(tbsOutTime) == 0)) ||
            (newVal == null && tbsOutTime == null && tbsOutTimeIsInitialized)) {
            return;
        }
        tbsOutTime = newVal;
        tbsOutTimeIsModified = true;
        tbsOutTimeIsInitialized = true;
    }

    /**
     * Determines if the tbsOutTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsOutTimeModified()
    {
        return tbsOutTimeIsModified;
    }

    /**
     * Determines if the tbsOutTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsOutTimeInitialized()
    {
        return tbsOutTimeIsInitialized;
    }

    /**
     * Getter method for tbsInTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tbs_in_time</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsInTime
     */
    public String getTbsInTime()
    {
        return tbsInTime;
    }

    /**
     * Setter method for tbsInTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsInTime
     */
    public void setTbsInTime(String newVal)
    {
        if ((newVal != null && tbsInTime != null && (newVal.compareTo(tbsInTime) == 0)) ||
            (newVal == null && tbsInTime == null && tbsInTimeIsInitialized)) {
            return;
        }
        tbsInTime = newVal;
        tbsInTimeIsModified = true;
        tbsInTimeIsInitialized = true;
    }

    /**
     * Determines if the tbsInTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsInTimeModified()
    {
        return tbsInTimeIsModified;
    }

    /**
     * Determines if the tbsInTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsInTimeInitialized()
    {
        return tbsInTimeIsInitialized;
    }

    /**
     * Getter method for tbsName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tbs_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsName
     */
    public String getTbsName()
    {
        return tbsName;
    }

    /**
     * Setter method for tbsName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsName
     */
    public void setTbsName(String newVal)
    {
        if ((newVal != null && tbsName != null && (newVal.compareTo(tbsName) == 0)) ||
            (newVal == null && tbsName == null && tbsNameIsInitialized)) {
            return;
        }
        tbsName = newVal;
        tbsNameIsModified = true;
        tbsNameIsInitialized = true;
    }

    /**
     * Determines if the tbsName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsNameModified()
    {
        return tbsNameIsModified;
    }

    /**
     * Determines if the tbsName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsNameInitialized()
    {
        return tbsNameIsInitialized;
    }

    /**
     * Getter method for tbsShiftId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tbs_shift_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsShiftId
     */
    public String getTbsShiftId()
    {
        return tbsShiftId;
    }

    /**
     * Setter method for tbsShiftId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsShiftId
     */
    public void setTbsShiftId(String newVal)
    {
        if ((newVal != null && tbsShiftId != null && (newVal.compareTo(tbsShiftId) == 0)) ||
            (newVal == null && tbsShiftId == null && tbsShiftIdIsInitialized)) {
            return;
        }
        tbsShiftId = newVal;
        tbsShiftIdIsModified = true;
        tbsShiftIdIsInitialized = true;
    }

    /**
     * Determines if the tbsShiftId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsShiftIdModified()
    {
        return tbsShiftIdIsModified;
    }

    /**
     * Determines if the tbsShiftId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsShiftIdInitialized()
    {
        return tbsShiftIdIsInitialized;
    }

    /**
     * Getter method for tbsId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tbs_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbsId
     */
    public Integer getTbsId()
    {
        return tbsId;
    }

    /**
     * Setter method for tbsId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsId
     */
    public void setTbsId(Integer newVal)
    {
        if ((newVal != null && tbsId != null && (newVal.compareTo(tbsId) == 0)) ||
            (newVal == null && tbsId == null && tbsIdIsInitialized)) {
            return;
        }
        tbsId = newVal;
        tbsIdIsModified = true;
        tbsIdIsInitialized = true;
    }

    /**
     * Setter method for tbsId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbsId
     */
    public void setTbsId(int newVal)
    {
        setTbsId(new Integer(newVal));
    }

    /**
     * Determines if the tbsId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsIdModified()
    {
        return tbsIdIsModified;
    }

    /**
     * Determines if the tbsId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsIdInitialized()
    {
        return tbsIdIsInitialized;
    }

    /**
     * Getter method for tbaOutPhoto.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_out_photo</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaOutPhoto
     */
    public String getTbaOutPhoto()
    {
        return tbaOutPhoto;
    }

    /**
     * Setter method for tbaOutPhoto.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaOutPhoto
     */
    public void setTbaOutPhoto(String newVal)
    {
        if ((newVal != null && tbaOutPhoto != null && (newVal.compareTo(tbaOutPhoto) == 0)) ||
            (newVal == null && tbaOutPhoto == null && tbaOutPhotoIsInitialized)) {
            return;
        }
        tbaOutPhoto = newVal;
        tbaOutPhotoIsModified = true;
        tbaOutPhotoIsInitialized = true;
    }

    /**
     * Determines if the tbaOutPhoto has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaOutPhotoModified()
    {
        return tbaOutPhotoIsModified;
    }

    /**
     * Determines if the tbaOutPhoto has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaOutPhotoInitialized()
    {
        return tbaOutPhotoIsInitialized;
    }

    /**
     * Getter method for tbaInPhoto.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_in_photo</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaInPhoto
     */
    public String getTbaInPhoto()
    {
        return tbaInPhoto;
    }

    /**
     * Setter method for tbaInPhoto.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaInPhoto
     */
    public void setTbaInPhoto(String newVal)
    {
        if ((newVal != null && tbaInPhoto != null && (newVal.compareTo(tbaInPhoto) == 0)) ||
            (newVal == null && tbaInPhoto == null && tbaInPhotoIsInitialized)) {
            return;
        }
        tbaInPhoto = newVal;
        tbaInPhotoIsModified = true;
        tbaInPhotoIsInitialized = true;
    }

    /**
     * Determines if the tbaInPhoto has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaInPhotoModified()
    {
        return tbaInPhotoIsModified;
    }

    /**
     * Determines if the tbaInPhoto has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaInPhotoInitialized()
    {
        return tbaInPhotoIsInitialized;
    }

    /**
     * Getter method for tbaOutLatitude.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_out_latitude</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaOutLatitude
     */
    public String getTbaOutLatitude()
    {
        return tbaOutLatitude;
    }

    /**
     * Setter method for tbaOutLatitude.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaOutLatitude
     */
    public void setTbaOutLatitude(String newVal)
    {
        if ((newVal != null && tbaOutLatitude != null && (newVal.compareTo(tbaOutLatitude) == 0)) ||
            (newVal == null && tbaOutLatitude == null && tbaOutLatitudeIsInitialized)) {
            return;
        }
        tbaOutLatitude = newVal;
        tbaOutLatitudeIsModified = true;
        tbaOutLatitudeIsInitialized = true;
    }

    /**
     * Determines if the tbaOutLatitude has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaOutLatitudeModified()
    {
        return tbaOutLatitudeIsModified;
    }

    /**
     * Determines if the tbaOutLatitude has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaOutLatitudeInitialized()
    {
        return tbaOutLatitudeIsInitialized;
    }

    /**
     * Getter method for tbaOutLongitude.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_out_longitude</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaOutLongitude
     */
    public String getTbaOutLongitude()
    {
        return tbaOutLongitude;
    }

    /**
     * Setter method for tbaOutLongitude.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaOutLongitude
     */
    public void setTbaOutLongitude(String newVal)
    {
        if ((newVal != null && tbaOutLongitude != null && (newVal.compareTo(tbaOutLongitude) == 0)) ||
            (newVal == null && tbaOutLongitude == null && tbaOutLongitudeIsInitialized)) {
            return;
        }
        tbaOutLongitude = newVal;
        tbaOutLongitudeIsModified = true;
        tbaOutLongitudeIsInitialized = true;
    }

    /**
     * Determines if the tbaOutLongitude has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaOutLongitudeModified()
    {
        return tbaOutLongitudeIsModified;
    }

    /**
     * Determines if the tbaOutLongitude has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaOutLongitudeInitialized()
    {
        return tbaOutLongitudeIsInitialized;
    }

    /**
     * Getter method for tbaInLatitude.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_in_latitude</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaInLatitude
     */
    public String getTbaInLatitude()
    {
        return tbaInLatitude;
    }

    /**
     * Setter method for tbaInLatitude.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaInLatitude
     */
    public void setTbaInLatitude(String newVal)
    {
        if ((newVal != null && tbaInLatitude != null && (newVal.compareTo(tbaInLatitude) == 0)) ||
            (newVal == null && tbaInLatitude == null && tbaInLatitudeIsInitialized)) {
            return;
        }
        tbaInLatitude = newVal;
        tbaInLatitudeIsModified = true;
        tbaInLatitudeIsInitialized = true;
    }

    /**
     * Determines if the tbaInLatitude has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaInLatitudeModified()
    {
        return tbaInLatitudeIsModified;
    }

    /**
     * Determines if the tbaInLatitude has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaInLatitudeInitialized()
    {
        return tbaInLatitudeIsInitialized;
    }

    /**
     * Getter method for tbaInLongitude.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_in_longitude</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaInLongitude
     */
    public String getTbaInLongitude()
    {
        return tbaInLongitude;
    }

    /**
     * Setter method for tbaInLongitude.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaInLongitude
     */
    public void setTbaInLongitude(String newVal)
    {
        if ((newVal != null && tbaInLongitude != null && (newVal.compareTo(tbaInLongitude) == 0)) ||
            (newVal == null && tbaInLongitude == null && tbaInLongitudeIsInitialized)) {
            return;
        }
        tbaInLongitude = newVal;
        tbaInLongitudeIsModified = true;
        tbaInLongitudeIsInitialized = true;
    }

    /**
     * Determines if the tbaInLongitude has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaInLongitudeModified()
    {
        return tbaInLongitudeIsModified;
    }

    /**
     * Determines if the tbaInLongitude has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaInLongitudeInitialized()
    {
        return tbaInLongitudeIsInitialized;
    }

    /**
     * Getter method for tbaOutTimeDiff.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_out_time_diff</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaOutTimeDiff
     */
    public Integer getTbaOutTimeDiff()
    {
        return tbaOutTimeDiff;
    }

    /**
     * Setter method for tbaOutTimeDiff.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaOutTimeDiff
     */
    public void setTbaOutTimeDiff(Integer newVal)
    {
        if ((newVal != null && tbaOutTimeDiff != null && (newVal.compareTo(tbaOutTimeDiff) == 0)) ||
            (newVal == null && tbaOutTimeDiff == null && tbaOutTimeDiffIsInitialized)) {
            return;
        }
        tbaOutTimeDiff = newVal;
        tbaOutTimeDiffIsModified = true;
        tbaOutTimeDiffIsInitialized = true;
    }

    /**
     * Setter method for tbaOutTimeDiff.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaOutTimeDiff
     */
    public void setTbaOutTimeDiff(int newVal)
    {
        setTbaOutTimeDiff(new Integer(newVal));
    }

    /**
     * Determines if the tbaOutTimeDiff has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaOutTimeDiffModified()
    {
        return tbaOutTimeDiffIsModified;
    }

    /**
     * Determines if the tbaOutTimeDiff has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaOutTimeDiffInitialized()
    {
        return tbaOutTimeDiffIsInitialized;
    }

    /**
     * Getter method for tbaInTimeDiff.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_in_time_diff</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaInTimeDiff
     */
    public Integer getTbaInTimeDiff()
    {
        return tbaInTimeDiff;
    }

    /**
     * Setter method for tbaInTimeDiff.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaInTimeDiff
     */
    public void setTbaInTimeDiff(Integer newVal)
    {
        if ((newVal != null && tbaInTimeDiff != null && (newVal.compareTo(tbaInTimeDiff) == 0)) ||
            (newVal == null && tbaInTimeDiff == null && tbaInTimeDiffIsInitialized)) {
            return;
        }
        tbaInTimeDiff = newVal;
        tbaInTimeDiffIsModified = true;
        tbaInTimeDiffIsInitialized = true;
    }

    /**
     * Setter method for tbaInTimeDiff.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaInTimeDiff
     */
    public void setTbaInTimeDiff(int newVal)
    {
        setTbaInTimeDiff(new Integer(newVal));
    }

    /**
     * Determines if the tbaInTimeDiff has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaInTimeDiffModified()
    {
        return tbaInTimeDiffIsModified;
    }

    /**
     * Determines if the tbaInTimeDiff has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaInTimeDiffInitialized()
    {
        return tbaInTimeDiffIsInitialized;
    }

    /**
     * Getter method for tbaOutNote.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_out_note</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaOutNote
     */
    public String getTbaOutNote()
    {
        return tbaOutNote;
    }

    /**
     * Setter method for tbaOutNote.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaOutNote
     */
    public void setTbaOutNote(String newVal)
    {
        if ((newVal != null && tbaOutNote != null && (newVal.compareTo(tbaOutNote) == 0)) ||
            (newVal == null && tbaOutNote == null && tbaOutNoteIsInitialized)) {
            return;
        }
        tbaOutNote = newVal;
        tbaOutNoteIsModified = true;
        tbaOutNoteIsInitialized = true;
    }

    /**
     * Determines if the tbaOutNote has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaOutNoteModified()
    {
        return tbaOutNoteIsModified;
    }

    /**
     * Determines if the tbaOutNote has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaOutNoteInitialized()
    {
        return tbaOutNoteIsInitialized;
    }

    /**
     * Getter method for tbaInNote.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_in_note</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaInNote
     */
    public String getTbaInNote()
    {
        return tbaInNote;
    }

    /**
     * Setter method for tbaInNote.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaInNote
     */
    public void setTbaInNote(String newVal)
    {
        if ((newVal != null && tbaInNote != null && (newVal.compareTo(tbaInNote) == 0)) ||
            (newVal == null && tbaInNote == null && tbaInNoteIsInitialized)) {
            return;
        }
        tbaInNote = newVal;
        tbaInNoteIsModified = true;
        tbaInNoteIsInitialized = true;
    }

    /**
     * Determines if the tbaInNote has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaInNoteModified()
    {
        return tbaInNoteIsModified;
    }

    /**
     * Determines if the tbaInNote has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaInNoteInitialized()
    {
        return tbaInNoteIsInitialized;
    }

    /**
     * Getter method for tbaOutTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_out_time</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaOutTime
     */
    public String getTbaOutTime()
    {
        return tbaOutTime;
    }

    /**
     * Setter method for tbaOutTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaOutTime
     */
    public void setTbaOutTime(String newVal)
    {
        if ((newVal != null && tbaOutTime != null && (newVal.compareTo(tbaOutTime) == 0)) ||
            (newVal == null && tbaOutTime == null && tbaOutTimeIsInitialized)) {
            return;
        }
        tbaOutTime = newVal;
        tbaOutTimeIsModified = true;
        tbaOutTimeIsInitialized = true;
    }

    /**
     * Determines if the tbaOutTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaOutTimeModified()
    {
        return tbaOutTimeIsModified;
    }

    /**
     * Determines if the tbaOutTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaOutTimeInitialized()
    {
        return tbaOutTimeIsInitialized;
    }

    /**
     * Getter method for tbaInTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_in_time</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaInTime
     */
    public String getTbaInTime()
    {
        return tbaInTime;
    }

    /**
     * Setter method for tbaInTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaInTime
     */
    public void setTbaInTime(String newVal)
    {
        if ((newVal != null && tbaInTime != null && (newVal.compareTo(tbaInTime) == 0)) ||
            (newVal == null && tbaInTime == null && tbaInTimeIsInitialized)) {
            return;
        }
        tbaInTime = newVal;
        tbaInTimeIsModified = true;
        tbaInTimeIsInitialized = true;
    }

    /**
     * Determines if the tbaInTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaInTimeModified()
    {
        return tbaInTimeIsModified;
    }

    /**
     * Determines if the tbaInTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaInTimeInitialized()
    {
        return tbaInTimeIsInitialized;
    }

    /**
     * Getter method for tbaDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tba_date</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaDate
     */
    public String getTbaDate()
    {
        return tbaDate;
    }

    /**
     * Setter method for tbaDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaDate
     */
    public void setTbaDate(String newVal)
    {
        if ((newVal != null && tbaDate != null && (newVal.compareTo(tbaDate) == 0)) ||
            (newVal == null && tbaDate == null && tbaDateIsInitialized)) {
            return;
        }
        tbaDate = newVal;
        tbaDateIsModified = true;
        tbaDateIsInitialized = true;
    }

    /**
     * Determines if the tbaDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaDateModified()
    {
        return tbaDateIsModified;
    }

    /**
     * Determines if the tbaDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaDateInitialized()
    {
        return tbaDateIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_attendance.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbsOutTimeIsModified 		|| tbsInTimeIsModified  		|| tbsNameIsModified  		|| tbsShiftIdIsModified  		|| tbsIdIsModified  		|| tbaOutPhotoIsModified  		|| tbaInPhotoIsModified  		|| tbaOutLatitudeIsModified  		|| tbaOutLongitudeIsModified  		|| tbaInLatitudeIsModified  		|| tbaInLongitudeIsModified  		|| tbaOutTimeDiffIsModified  		|| tbaInTimeDiffIsModified  		|| tbaOutNoteIsModified  		|| tbaInNoteIsModified  		|| tbaOutTimeIsModified  		|| tbaInTimeIsModified  		|| tbaDateIsModified  		|| tbeNameIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbsOutTimeIsModified = false;
        tbsInTimeIsModified = false;
        tbsNameIsModified = false;
        tbsShiftIdIsModified = false;
        tbsIdIsModified = false;
        tbaOutPhotoIsModified = false;
        tbaInPhotoIsModified = false;
        tbaOutLatitudeIsModified = false;
        tbaOutLongitudeIsModified = false;
        tbaInLatitudeIsModified = false;
        tbaInLongitudeIsModified = false;
        tbaOutTimeDiffIsModified = false;
        tbaInTimeDiffIsModified = false;
        tbaOutNoteIsModified = false;
        tbaInNoteIsModified = false;
        tbaOutTimeIsModified = false;
        tbaInTimeIsModified = false;
        tbaDateIsModified = false;
        tbeNameIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewAttendanceBean bean)
    {
        setTbsOutTime(bean.getTbsOutTime());
        setTbsInTime(bean.getTbsInTime());
        setTbsName(bean.getTbsName());
        setTbsShiftId(bean.getTbsShiftId());
        setTbsId(bean.getTbsId());
        setTbaOutPhoto(bean.getTbaOutPhoto());
        setTbaInPhoto(bean.getTbaInPhoto());
        setTbaOutLatitude(bean.getTbaOutLatitude());
        setTbaOutLongitude(bean.getTbaOutLongitude());
        setTbaInLatitude(bean.getTbaInLatitude());
        setTbaInLongitude(bean.getTbaInLongitude());
        setTbaOutTimeDiff(bean.getTbaOutTimeDiff());
        setTbaInTimeDiff(bean.getTbaInTimeDiff());
        setTbaOutNote(bean.getTbaOutNote());
        setTbaInNote(bean.getTbaInNote());
        setTbaOutTime(bean.getTbaOutTime());
        setTbaInTime(bean.getTbaInTime());
        setTbaDate(bean.getTbaDate());
        setTbeName(bean.getTbeName());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbs_out_time", getTbsOutTime() == null ? "" : getTbsOutTime().toString());
        dictionnary.put("tbs_in_time", getTbsInTime() == null ? "" : getTbsInTime().toString());
        dictionnary.put("tbs_name", getTbsName() == null ? "" : getTbsName().toString());
        dictionnary.put("tbs_shift_id", getTbsShiftId() == null ? "" : getTbsShiftId().toString());
        dictionnary.put("tbs_id", getTbsId() == null ? "" : getTbsId().toString());
        dictionnary.put("tba_out_photo", getTbaOutPhoto() == null ? "" : getTbaOutPhoto().toString());
        dictionnary.put("tba_in_photo", getTbaInPhoto() == null ? "" : getTbaInPhoto().toString());
        dictionnary.put("tba_out_latitude", getTbaOutLatitude() == null ? "" : getTbaOutLatitude().toString());
        dictionnary.put("tba_out_longitude", getTbaOutLongitude() == null ? "" : getTbaOutLongitude().toString());
        dictionnary.put("tba_in_latitude", getTbaInLatitude() == null ? "" : getTbaInLatitude().toString());
        dictionnary.put("tba_in_longitude", getTbaInLongitude() == null ? "" : getTbaInLongitude().toString());
        dictionnary.put("tba_out_time_diff", getTbaOutTimeDiff() == null ? "" : getTbaOutTimeDiff().toString());
        dictionnary.put("tba_in_time_diff", getTbaInTimeDiff() == null ? "" : getTbaInTimeDiff().toString());
        dictionnary.put("tba_out_note", getTbaOutNote() == null ? "" : getTbaOutNote().toString());
        dictionnary.put("tba_in_note", getTbaInNote() == null ? "" : getTbaInNote().toString());
        dictionnary.put("tba_out_time", getTbaOutTime() == null ? "" : getTbaOutTime().toString());
        dictionnary.put("tba_in_time", getTbaInTime() == null ? "" : getTbaInTime().toString());
        dictionnary.put("tba_date", getTbaDate() == null ? "" : getTbaDate().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbs_out_time".equalsIgnoreCase(column) || "tbsOutTime".equalsIgnoreCase(column)) {
            return getTbsOutTime() == null ? "" : getTbsOutTime().toString();
        } else if ("tbs_in_time".equalsIgnoreCase(column) || "tbsInTime".equalsIgnoreCase(column)) {
            return getTbsInTime() == null ? "" : getTbsInTime().toString();
        } else if ("tbs_name".equalsIgnoreCase(column) || "tbsName".equalsIgnoreCase(column)) {
            return getTbsName() == null ? "" : getTbsName().toString();
        } else if ("tbs_shift_id".equalsIgnoreCase(column) || "tbsShiftId".equalsIgnoreCase(column)) {
            return getTbsShiftId() == null ? "" : getTbsShiftId().toString();
        } else if ("tbs_id".equalsIgnoreCase(column) || "tbsId".equalsIgnoreCase(column)) {
            return getTbsId() == null ? "" : getTbsId().toString();
        } else if ("tba_out_photo".equalsIgnoreCase(column) || "tbaOutPhoto".equalsIgnoreCase(column)) {
            return getTbaOutPhoto() == null ? "" : getTbaOutPhoto().toString();
        } else if ("tba_in_photo".equalsIgnoreCase(column) || "tbaInPhoto".equalsIgnoreCase(column)) {
            return getTbaInPhoto() == null ? "" : getTbaInPhoto().toString();
        } else if ("tba_out_latitude".equalsIgnoreCase(column) || "tbaOutLatitude".equalsIgnoreCase(column)) {
            return getTbaOutLatitude() == null ? "" : getTbaOutLatitude().toString();
        } else if ("tba_out_longitude".equalsIgnoreCase(column) || "tbaOutLongitude".equalsIgnoreCase(column)) {
            return getTbaOutLongitude() == null ? "" : getTbaOutLongitude().toString();
        } else if ("tba_in_latitude".equalsIgnoreCase(column) || "tbaInLatitude".equalsIgnoreCase(column)) {
            return getTbaInLatitude() == null ? "" : getTbaInLatitude().toString();
        } else if ("tba_in_longitude".equalsIgnoreCase(column) || "tbaInLongitude".equalsIgnoreCase(column)) {
            return getTbaInLongitude() == null ? "" : getTbaInLongitude().toString();
        } else if ("tba_out_time_diff".equalsIgnoreCase(column) || "tbaOutTimeDiff".equalsIgnoreCase(column)) {
            return getTbaOutTimeDiff() == null ? "" : getTbaOutTimeDiff().toString();
        } else if ("tba_in_time_diff".equalsIgnoreCase(column) || "tbaInTimeDiff".equalsIgnoreCase(column)) {
            return getTbaInTimeDiff() == null ? "" : getTbaInTimeDiff().toString();
        } else if ("tba_out_note".equalsIgnoreCase(column) || "tbaOutNote".equalsIgnoreCase(column)) {
            return getTbaOutNote() == null ? "" : getTbaOutNote().toString();
        } else if ("tba_in_note".equalsIgnoreCase(column) || "tbaInNote".equalsIgnoreCase(column)) {
            return getTbaInNote() == null ? "" : getTbaInNote().toString();
        } else if ("tba_out_time".equalsIgnoreCase(column) || "tbaOutTime".equalsIgnoreCase(column)) {
            return getTbaOutTime() == null ? "" : getTbaOutTime().toString();
        } else if ("tba_in_time".equalsIgnoreCase(column) || "tbaInTime".equalsIgnoreCase(column)) {
            return getTbaInTime() == null ? "" : getTbaInTime().toString();
        } else if ("tba_date".equalsIgnoreCase(column) || "tbaDate".equalsIgnoreCase(column)) {
            return getTbaDate() == null ? "" : getTbaDate().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewAttendanceBean)) {
            return false;
        }

		ViewAttendanceBean obj = (ViewAttendanceBean) object;
		return new EqualsBuilder()
            .append(getTbsOutTime(), obj.getTbsOutTime())
            .append(getTbsInTime(), obj.getTbsInTime())
            .append(getTbsName(), obj.getTbsName())
            .append(getTbsShiftId(), obj.getTbsShiftId())
            .append(getTbsId(), obj.getTbsId())
            .append(getTbaOutPhoto(), obj.getTbaOutPhoto())
            .append(getTbaInPhoto(), obj.getTbaInPhoto())
            .append(getTbaOutLatitude(), obj.getTbaOutLatitude())
            .append(getTbaOutLongitude(), obj.getTbaOutLongitude())
            .append(getTbaInLatitude(), obj.getTbaInLatitude())
            .append(getTbaInLongitude(), obj.getTbaInLongitude())
            .append(getTbaOutTimeDiff(), obj.getTbaOutTimeDiff())
            .append(getTbaInTimeDiff(), obj.getTbaInTimeDiff())
            .append(getTbaOutNote(), obj.getTbaOutNote())
            .append(getTbaInNote(), obj.getTbaInNote())
            .append(getTbaOutTime(), obj.getTbaOutTime())
            .append(getTbaInTime(), obj.getTbaInTime())
            .append(getTbaDate(), obj.getTbaDate())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbsOutTime())
            .append(getTbsInTime())
            .append(getTbsName())
            .append(getTbsShiftId())
            .append(getTbsId())
            .append(getTbaOutPhoto())
            .append(getTbaInPhoto())
            .append(getTbaOutLatitude())
            .append(getTbaOutLongitude())
            .append(getTbaInLatitude())
            .append(getTbaInLongitude())
            .append(getTbaOutTimeDiff())
            .append(getTbaInTimeDiff())
            .append(getTbaOutNote())
            .append(getTbaInNote())
            .append(getTbaOutTime())
            .append(getTbaInTime())
            .append(getTbaDate())
            .append(getTbeName())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbs_out_time", getTbsOutTime())
            .append("tbs_in_time", getTbsInTime())
            .append("tbs_name", getTbsName())
            .append("tbs_shift_id", getTbsShiftId())
            .append("tbs_id", getTbsId())
            .append("tba_out_photo", getTbaOutPhoto())
            .append("tba_in_photo", getTbaInPhoto())
            .append("tba_out_latitude", getTbaOutLatitude())
            .append("tba_out_longitude", getTbaOutLongitude())
            .append("tba_in_latitude", getTbaInLatitude())
            .append("tba_in_longitude", getTbaInLongitude())
            .append("tba_out_time_diff", getTbaOutTimeDiff())
            .append("tba_in_time_diff", getTbaInTimeDiff())
            .append("tba_out_note", getTbaOutNote())
            .append("tba_in_note", getTbaInNote())
            .append("tba_out_time", getTbaOutTime())
            .append("tba_in_time", getTbaInTime())
            .append("tba_date", getTbaDate())
            .append("tbe_name", getTbeName())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewAttendanceBean obj = (ViewAttendanceBean) object;
        return new CompareToBuilder()
            .append(getTbsOutTime(), obj.getTbsOutTime())
            .append(getTbsInTime(), obj.getTbsInTime())
            .append(getTbsName(), obj.getTbsName())
            .append(getTbsShiftId(), obj.getTbsShiftId())
            .append(getTbsId(), obj.getTbsId())
            .append(getTbaOutPhoto(), obj.getTbaOutPhoto())
            .append(getTbaInPhoto(), obj.getTbaInPhoto())
            .append(getTbaOutLatitude(), obj.getTbaOutLatitude())
            .append(getTbaOutLongitude(), obj.getTbaOutLongitude())
            .append(getTbaInLatitude(), obj.getTbaInLatitude())
            .append(getTbaInLongitude(), obj.getTbaInLongitude())
            .append(getTbaOutTimeDiff(), obj.getTbaOutTimeDiff())
            .append(getTbaInTimeDiff(), obj.getTbaInTimeDiff())
            .append(getTbaOutNote(), obj.getTbaOutNote())
            .append(getTbaInNote(), obj.getTbaInNote())
            .append(getTbaOutTime(), obj.getTbaOutTime())
            .append(getTbaInTime(), obj.getTbaInTime())
            .append(getTbaDate(), obj.getTbaDate())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
