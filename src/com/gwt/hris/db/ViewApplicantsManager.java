// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.ViewApplicantsBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the view_applicants table.
 * @author sql2java
 */
public class ViewApplicantsManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tba_resume_file_name_existing field.
     */
    public static final int ID_TBA_RESUME_FILE_NAME_EXISTING = 0;

    /**
     * Identify the tba_resume_file_name field.
     */
    public static final int ID_TBA_RESUME_FILE_NAME = 1;

    /**
     * Identify the tba_status field.
     */
    public static final int ID_TBA_STATUS = 2;

    /**
     * Identify the tba_date field.
     */
    public static final int ID_TBA_DATE = 3;

    /**
     * Identify the tba_name field.
     */
    public static final int ID_TBA_NAME = 4;

    /**
     * Identify the tba_applicants_id field.
     */
    public static final int ID_TBA_APPLICANTS_ID = 5;

    /**
     * Identify the tba_id field.
     */
    public static final int ID_TBA_ID = 6;

    /**
     * Identify the tbjt_name field.
     */
    public static final int ID_TBJT_NAME = 7;

    /**
     * Identify the tbjt_id field.
     */
    public static final int ID_TBJT_ID = 8;

    /**
     * Identify the tbv_publish_web field.
     */
    public static final int ID_TBV_PUBLISH_WEB = 9;

    /**
     * Identify the tbv_publish_rss field.
     */
    public static final int ID_TBV_PUBLISH_RSS = 10;

    /**
     * Identify the tbv_active field.
     */
    public static final int ID_TBV_ACTIVE = 11;

    /**
     * Identify the tbv_name field.
     */
    public static final int ID_TBV_NAME = 12;

    /**
     * Identify the tbv_vacancy_id field.
     */
    public static final int ID_TBV_VACANCY_ID = 13;

    /**
     * Identify the tbv_id field.
     */
    public static final int ID_TBV_ID = 14;

    /**
     * Identify the tbe_name field.
     */
    public static final int ID_TBE_NAME = 15;

    /**
     * Identify the tbe_id field.
     */
    public static final int ID_TBE_ID = 16;

    /**
     * Contains all the full fields of the view_applicants table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "view_applicants.tba_resume_file_name_existing"
        ,"view_applicants.tba_resume_file_name"
        ,"view_applicants.tba_status"
        ,"view_applicants.tba_date"
        ,"view_applicants.tba_name"
        ,"view_applicants.tba_applicants_id"
        ,"view_applicants.tba_id"
        ,"view_applicants.tbjt_name"
        ,"view_applicants.tbjt_id"
        ,"view_applicants.tbv_publish_web"
        ,"view_applicants.tbv_publish_rss"
        ,"view_applicants.tbv_active"
        ,"view_applicants.tbv_name"
        ,"view_applicants.tbv_vacancy_id"
        ,"view_applicants.tbv_id"
        ,"view_applicants.tbe_name"
        ,"view_applicants.tbe_id"
    };

    /**
     * Contains all the fields of the view_applicants table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tba_resume_file_name_existing"
        ,"tba_resume_file_name"
        ,"tba_status"
        ,"tba_date"
        ,"tba_name"
        ,"tba_applicants_id"
        ,"tba_id"
        ,"tbjt_name"
        ,"tbjt_id"
        ,"tbv_publish_web"
        ,"tbv_publish_rss"
        ,"tbv_active"
        ,"tbv_name"
        ,"tbv_vacancy_id"
        ,"tbv_id"
        ,"tbe_name"
        ,"tbe_id"
    };

    /**
     * Field that contains the comma separated fields of the view_applicants table.
     */
    public static final String ALL_FULL_FIELDS = "view_applicants.tba_resume_file_name_existing"
                            + ",view_applicants.tba_resume_file_name"
                            + ",view_applicants.tba_status"
                            + ",view_applicants.tba_date"
                            + ",view_applicants.tba_name"
                            + ",view_applicants.tba_applicants_id"
                            + ",view_applicants.tba_id"
                            + ",view_applicants.tbjt_name"
                            + ",view_applicants.tbjt_id"
                            + ",view_applicants.tbv_publish_web"
                            + ",view_applicants.tbv_publish_rss"
                            + ",view_applicants.tbv_active"
                            + ",view_applicants.tbv_name"
                            + ",view_applicants.tbv_vacancy_id"
                            + ",view_applicants.tbv_id"
                            + ",view_applicants.tbe_name"
                            + ",view_applicants.tbe_id";

    /**
     * Field that contains the comma separated fields of the view_applicants table.
     */
    public static final String ALL_FIELDS = "tba_resume_file_name_existing"
                            + ",tba_resume_file_name"
                            + ",tba_status"
                            + ",tba_date"
                            + ",tba_name"
                            + ",tba_applicants_id"
                            + ",tba_id"
                            + ",tbjt_name"
                            + ",tbjt_id"
                            + ",tbv_publish_web"
                            + ",tbv_publish_rss"
                            + ",tbv_active"
                            + ",tbv_name"
                            + ",tbv_vacancy_id"
                            + ",tbv_id"
                            + ",tbe_name"
                            + ",tbe_id";

    private static ViewApplicantsManager singleton = new ViewApplicantsManager();

    /**
     * Get the ViewApplicantsManager singleton.
     *
     * @return ViewApplicantsManager
     */
    public static ViewApplicantsManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new ViewApplicantsBean instance.
     *
     * @return the new ViewApplicantsBean
     */
    public ViewApplicantsBean createViewApplicantsBean()
    {
        return new ViewApplicantsBean();
    }




    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from view_applicants.
     *
     * @return an array of ViewApplicantsManager bean
     * @throws DAOException
     */
    //5
    public ViewApplicantsBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from view_applicants, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of ViewApplicantsManager bean
     * @throws DAOException
     */
    //6
    public ViewApplicantsBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ViewApplicantsBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ViewApplicantsBean table
     * @throws DAOException
     */
    //7
    public ViewApplicantsBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ViewApplicantsBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting ViewApplicantsBean table
     * @throws DAOException
     */
    //8
    public ViewApplicantsBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of ViewApplicantsBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting ViewApplicantsBean table
     * @throws DAOException
     */
    //9
    public ViewApplicantsBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_applicants ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM view_applicants ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the view_applicants table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM view_applicants " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ViewApplicantsBean bean into the database.
     *
     * @param bean the ViewApplicantsBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ViewApplicantsBean save(ViewApplicantsBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the ViewApplicantsBean bean into the database.
     *
     * @param bean the ViewApplicantsBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public ViewApplicantsBean insert(ViewApplicantsBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into view_applicants (");

            if (bean.isTbaResumeFileNameExistingModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_resume_file_name_existing");
                _dirtyCount++;
            }

            if (bean.isTbaResumeFileNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_resume_file_name");
                _dirtyCount++;
            }

            if (bean.isTbaStatusModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_status");
                _dirtyCount++;
            }

            if (bean.isTbaDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_date");
                _dirtyCount++;
            }

            if (bean.isTbaNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_name");
                _dirtyCount++;
            }

            if (bean.isTbaApplicantsIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_applicants_id");
                _dirtyCount++;
            }

            if (bean.isTbaIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_id");
                _dirtyCount++;
            }

            if (bean.isTbjtNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbjt_name");
                _dirtyCount++;
            }

            if (bean.isTbjtIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbjt_id");
                _dirtyCount++;
            }

            if (bean.isTbvPublishWebModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbv_publish_web");
                _dirtyCount++;
            }

            if (bean.isTbvPublishRssModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbv_publish_rss");
                _dirtyCount++;
            }

            if (bean.isTbvActiveModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbv_active");
                _dirtyCount++;
            }

            if (bean.isTbvNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbv_name");
                _dirtyCount++;
            }

            if (bean.isTbvVacancyIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbv_vacancy_id");
                _dirtyCount++;
            }

            if (bean.isTbvIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbv_id");
                _dirtyCount++;
            }

            if (bean.isTbeNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_name");
                _dirtyCount++;
            }

            if (bean.isTbeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the ViewApplicantsBean bean record in the database according to the changes.
     *
     * @param bean the ViewApplicantsBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ViewApplicantsBean update(ViewApplicantsBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();


            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE view_applicants SET ");
            boolean useComma=false;

            if (bean.isTbaResumeFileNameExistingModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_resume_file_name_existing=?");
            }

            if (bean.isTbaResumeFileNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_resume_file_name=?");
            }

            if (bean.isTbaStatusModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_status=?");
            }

            if (bean.isTbaDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_date=?");
            }

            if (bean.isTbaNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_name=?");
            }

            if (bean.isTbaApplicantsIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_applicants_id=?");
            }

            if (bean.isTbaIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_id=?");
            }

            if (bean.isTbjtNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbjt_name=?");
            }

            if (bean.isTbjtIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbjt_id=?");
            }

            if (bean.isTbvPublishWebModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbv_publish_web=?");
            }

            if (bean.isTbvPublishRssModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbv_publish_rss=?");
            }

            if (bean.isTbvActiveModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbv_active=?");
            }

            if (bean.isTbvNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbv_name=?");
            }

            if (bean.isTbvVacancyIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbv_vacancy_id=?");
            }

            if (bean.isTbvIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbv_id=?");
            }

            if (bean.isTbeNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_name=?");
            }

            if (bean.isTbeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id=?");
            }
            sql.append("");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of ViewApplicantsBean beans into the database.
     *
     * @param beans the ViewApplicantsBean bean table to be saved
     * @return the saved ViewApplicantsBean array.
     * @throws DAOException
     */
    //15
    public ViewApplicantsBean[] save(ViewApplicantsBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of ViewApplicantsBean beans into the database.
     *
     * @param beans the ViewApplicantsBean bean table to be inserted
     * @return the saved ViewApplicantsBean array.
     * @throws DAOException
     */
    //16
    public ViewApplicantsBean[] insert(ViewApplicantsBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of ViewApplicantsBean beans into the database.
     *
     * @param beans the ViewApplicantsBean bean table to be inserted
     * @return the saved ViewApplicantsBean array.
     * @throws DAOException
     */
    //17
    public ViewApplicantsBean[] update(ViewApplicantsBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique ViewApplicantsBean bean from a template one giving a c
     *
     * @param bean the ViewApplicantsBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public ViewApplicantsBean loadUniqueUsingTemplate(ViewApplicantsBean bean) throws DAOException
    {
         ViewApplicantsBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of ViewApplicantsBean from a template one.
     *
     * @param bean the ViewApplicantsBean template to look for
     * @return all the ViewApplicantsBean matching the template
     * @throws DAOException
     */
    //19
    public ViewApplicantsBean[] loadUsingTemplate(ViewApplicantsBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of ViewApplicantsBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewApplicantsBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the ViewApplicantsBean matching the template
     * @throws DAOException
     */
    //20
    public ViewApplicantsBean[] loadUsingTemplate(ViewApplicantsBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of ViewApplicantsBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewApplicantsBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the ViewApplicantsBean matching the template
     * @throws DAOException
     */
    //20
    public ViewApplicantsBean[] loadUsingTemplate(ViewApplicantsBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_applicants ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a ViewApplicantsBean template.
     *
     * @param bean the ViewApplicantsBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(ViewApplicantsBean bean) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM view_applicants ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table view_applicants.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table view_applicants with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM view_applicants " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table view_applicants with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific ViewApplicantsBean bean
     *
     * @param bean the ViewApplicantsBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(ViewApplicantsBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific ViewApplicantsBean bean , given the start row and number of rows.
     *
     * @param bean the ViewApplicantsBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewApplicantsBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific ViewApplicantsBean bean given the start row and number of rows and the search type
     *
     * @param bean the ViewApplicantsBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewApplicantsBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM view_applicants");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, ViewApplicantsBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbaResumeFileNameExistingModified()) {
                _dirtyCount ++;
                if (bean.getTbaResumeFileNameExisting() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_resume_file_name_existing IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_resume_file_name_existing ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaResumeFileNameModified()) {
                _dirtyCount ++;
                if (bean.getTbaResumeFileName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_resume_file_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_resume_file_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaStatusModified()) {
                _dirtyCount ++;
                if (bean.getTbaStatus() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_status IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_status = ?");
                }
            }
            if (bean.isTbaDateModified()) {
                _dirtyCount ++;
                if (bean.getTbaDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_date = ?");
                }
            }
            if (bean.isTbaNameModified()) {
                _dirtyCount ++;
                if (bean.getTbaName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaApplicantsIdModified()) {
                _dirtyCount ++;
                if (bean.getTbaApplicantsId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_applicants_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_applicants_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaIdModified()) {
                _dirtyCount ++;
                if (bean.getTbaId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_id = ?");
                }
            }
            if (bean.isTbjtNameModified()) {
                _dirtyCount ++;
                if (bean.getTbjtName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbjtIdModified()) {
                _dirtyCount ++;
                if (bean.getTbjtId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbjt_id = ?");
                }
            }
            if (bean.isTbvPublishWebModified()) {
                _dirtyCount ++;
                if (bean.getTbvPublishWeb() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_publish_web IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_publish_web = ?");
                }
            }
            if (bean.isTbvPublishRssModified()) {
                _dirtyCount ++;
                if (bean.getTbvPublishRss() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_publish_rss IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_publish_rss = ?");
                }
            }
            if (bean.isTbvActiveModified()) {
                _dirtyCount ++;
                if (bean.getTbvActive() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_active IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_active = ?");
                }
            }
            if (bean.isTbvNameModified()) {
                _dirtyCount ++;
                if (bean.getTbvName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbvVacancyIdModified()) {
                _dirtyCount ++;
                if (bean.getTbvVacancyId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_vacancy_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_vacancy_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbvIdModified()) {
                _dirtyCount ++;
                if (bean.getTbvId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_id = ?");
                }
            }
            if (bean.isTbeNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, ViewApplicantsBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbaResumeFileNameExistingModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaResumeFileNameExisting() + "]");
                        if (bean.getTbaResumeFileNameExisting() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaResumeFileNameExisting()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaResumeFileNameExisting() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaResumeFileNameExisting() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaResumeFileNameExisting() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaResumeFileNameExisting());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaResumeFileNameExisting() + "]");
                        if (bean.getTbaResumeFileNameExisting() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaResumeFileNameExisting() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaResumeFileNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaResumeFileName() + "]");
                        if (bean.getTbaResumeFileName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaResumeFileName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaResumeFileName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaResumeFileName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaResumeFileName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaResumeFileName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaResumeFileName() + "]");
                        if (bean.getTbaResumeFileName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaResumeFileName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaStatusModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaStatus() + "]");
                if (bean.getTbaStatus() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbaStatus()); }
            }
            if (bean.isTbaDateModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaDate() + "]");
                if (bean.getTbaDate() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbaDate()); }
            }
            if (bean.isTbaNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaName() + "]");
                        if (bean.getTbaName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaName() + "]");
                        if (bean.getTbaName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaApplicantsIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaApplicantsId() + "]");
                        if (bean.getTbaApplicantsId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaApplicantsId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaApplicantsId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaApplicantsId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaApplicantsId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaApplicantsId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaApplicantsId() + "]");
                        if (bean.getTbaApplicantsId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaApplicantsId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaId() + "]");
                if (bean.getTbaId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbaId()); }
            }
            if (bean.isTbjtNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtName() + "]");
                        if (bean.getTbjtName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbjtName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbjtName() + "]");
                        if (bean.getTbjtName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbjtName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbjtIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbjtId() + "]");
                if (bean.getTbjtId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbjtId()); }
            }
            if (bean.isTbvPublishWebModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbvPublishWeb() + "]");
                if (bean.getTbvPublishWeb() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbvPublishWeb()); }
            }
            if (bean.isTbvPublishRssModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbvPublishRss() + "]");
                if (bean.getTbvPublishRss() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbvPublishRss()); }
            }
            if (bean.isTbvActiveModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbvActive() + "]");
                if (bean.getTbvActive() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbvActive()); }
            }
            if (bean.isTbvNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbvName() + "]");
                        if (bean.getTbvName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbvName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbvName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbvName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbvName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbvName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbvName() + "]");
                        if (bean.getTbvName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbvName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbvVacancyIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbvVacancyId() + "]");
                        if (bean.getTbvVacancyId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbvVacancyId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbvVacancyId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbvVacancyId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbvVacancyId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbvVacancyId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbvVacancyId() + "]");
                        if (bean.getTbvVacancyId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbvVacancyId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbvIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbvId() + "]");
                if (bean.getTbvId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbvId()); }
            }
            if (bean.isTbeNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "]");
                        if (bean.getTbeName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "]");
                        if (bean.getTbeName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeId() + "]");
                if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of ViewApplicantsBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting ViewApplicantsBean table
     * @throws DAOException
     */
    //28
    public ViewApplicantsBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (ViewApplicantsBean[])v.toArray(new ViewApplicantsBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the view_applicants on a ViewApplicantsBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewApplicantsBean bean
     * @throws DAOException
     */
    //29
    public ViewApplicantsBean decodeRow(ResultSet rs) throws DAOException
    {
        ViewApplicantsBean bean = this.createViewApplicantsBean();
        try
        {
            bean.setTbaResumeFileNameExisting(rs.getString(1));
            bean.setTbaResumeFileName(rs.getString(2));
            bean.setTbaStatus(Manager.getInteger(rs, 3));
            bean.setTbaDate(rs.getTimestamp(4));
            bean.setTbaName(rs.getString(5));
            bean.setTbaApplicantsId(rs.getString(6));
            bean.setTbaId(Manager.getInteger(rs, 7));
            bean.setTbjtName(rs.getString(8));
            bean.setTbjtId(Manager.getInteger(rs, 9));
            bean.setTbvPublishWeb(Manager.getInteger(rs, 10));
            bean.setTbvPublishRss(Manager.getInteger(rs, 11));
            bean.setTbvActive(Manager.getInteger(rs, 12));
            bean.setTbvName(rs.getString(13));
            bean.setTbvVacancyId(rs.getString(14));
            bean.setTbvId(Manager.getInteger(rs, 15));
            bean.setTbeName(rs.getString(16));
            bean.setTbeId(Manager.getInteger(rs, 17));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public ViewApplicantsBean toBean(ViewApplicantsBeanModel beanModel, ViewApplicantsBean bean)
    {
		if (beanModel.getTbaResumeFileNameExisting() != null)
			bean.setTbaResumeFileNameExisting(beanModel.getTbaResumeFileNameExisting());

		if (bean.getTbaResumeFileNameExisting() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaResumeFileNameExisting().getClass().getName()))
			bean.setTbaResumeFileNameExisting(beanModel.getTbaResumeFileNameExisting());
		
		if (beanModel.getTbaResumeFileName() != null)
			bean.setTbaResumeFileName(beanModel.getTbaResumeFileName());

		if (bean.getTbaResumeFileName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaResumeFileName().getClass().getName()))
			bean.setTbaResumeFileName(beanModel.getTbaResumeFileName());
		
		if (beanModel.getTbaStatus() != null)
			bean.setTbaStatus(beanModel.getTbaStatus());

		if (bean.getTbaStatus() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaStatus().getClass().getName()))
			bean.setTbaStatus(beanModel.getTbaStatus());
		
		if (beanModel.getTbaDate() != null)
			bean.setTbaDate(beanModel.getTbaDate());

		if (bean.getTbaDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaDate().getClass().getName()))
			bean.setTbaDate(beanModel.getTbaDate());
		
		if (beanModel.getTbaName() != null)
			bean.setTbaName(beanModel.getTbaName());

		if (bean.getTbaName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaName().getClass().getName()))
			bean.setTbaName(beanModel.getTbaName());
		
		if (beanModel.getTbaApplicantsId() != null)
			bean.setTbaApplicantsId(beanModel.getTbaApplicantsId());

		if (bean.getTbaApplicantsId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaApplicantsId().getClass().getName()))
			bean.setTbaApplicantsId(beanModel.getTbaApplicantsId());
		
		if (beanModel.getTbaId() != null)
			bean.setTbaId(beanModel.getTbaId());

		if (bean.getTbaId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaId().getClass().getName()))
			bean.setTbaId(beanModel.getTbaId());
		
		if (beanModel.getTbjtName() != null)
			bean.setTbjtName(beanModel.getTbjtName());

		if (bean.getTbjtName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbjtName().getClass().getName()))
			bean.setTbjtName(beanModel.getTbjtName());
		
		if (beanModel.getTbjtId() != null)
			bean.setTbjtId(beanModel.getTbjtId());

		if (bean.getTbjtId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbjtId().getClass().getName()))
			bean.setTbjtId(beanModel.getTbjtId());
		
		if (beanModel.getTbvPublishWeb() != null)
			bean.setTbvPublishWeb(beanModel.getTbvPublishWeb());

		if (bean.getTbvPublishWeb() != null)
		if ("java.sql.Timestamp".equals(bean.getTbvPublishWeb().getClass().getName()))
			bean.setTbvPublishWeb(beanModel.getTbvPublishWeb());
		
		if (beanModel.getTbvPublishRss() != null)
			bean.setTbvPublishRss(beanModel.getTbvPublishRss());

		if (bean.getTbvPublishRss() != null)
		if ("java.sql.Timestamp".equals(bean.getTbvPublishRss().getClass().getName()))
			bean.setTbvPublishRss(beanModel.getTbvPublishRss());
		
		if (beanModel.getTbvActive() != null)
			bean.setTbvActive(beanModel.getTbvActive());

		if (bean.getTbvActive() != null)
		if ("java.sql.Timestamp".equals(bean.getTbvActive().getClass().getName()))
			bean.setTbvActive(beanModel.getTbvActive());
		
		if (beanModel.getTbvName() != null)
			bean.setTbvName(beanModel.getTbvName());

		if (bean.getTbvName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbvName().getClass().getName()))
			bean.setTbvName(beanModel.getTbvName());
		
		if (beanModel.getTbvVacancyId() != null)
			bean.setTbvVacancyId(beanModel.getTbvVacancyId());

		if (bean.getTbvVacancyId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbvVacancyId().getClass().getName()))
			bean.setTbvVacancyId(beanModel.getTbvVacancyId());
		
		if (beanModel.getTbvId() != null)
			bean.setTbvId(beanModel.getTbvId());

		if (bean.getTbvId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbvId().getClass().getName()))
			bean.setTbvId(beanModel.getTbvId());
		
		if (beanModel.getTbeName() != null)
			bean.setTbeName(beanModel.getTbeName());

		if (bean.getTbeName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeName().getClass().getName()))
			bean.setTbeName(beanModel.getTbeName());
		
		if (beanModel.getTbeId() != null)
			bean.setTbeId(beanModel.getTbeId());

		if (bean.getTbeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeId().getClass().getName()))
			bean.setTbeId(beanModel.getTbeId());
		
        return bean;
    }
	
    //29AA
    public ViewApplicantsBean[] toBeans(ViewApplicantsBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	ViewApplicantsBean beans[] = new ViewApplicantsBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public ViewApplicantsBeanModel toBeanModel(ViewApplicantsBean bean)
    {
    	ViewApplicantsBeanModel beanModel = new ViewApplicantsBeanModel();
		beanModel.setTbaResumeFileNameExisting(bean.getTbaResumeFileNameExisting());
		beanModel.setTbaResumeFileName(bean.getTbaResumeFileName());
		beanModel.setTbaStatus(bean.getTbaStatus());
		beanModel.setTbaDate(bean.getTbaDate());
		beanModel.setTbaName(bean.getTbaName());
		beanModel.setTbaApplicantsId(bean.getTbaApplicantsId());
		beanModel.setTbaId(bean.getTbaId());
		beanModel.setTbjtName(bean.getTbjtName());
		beanModel.setTbjtId(bean.getTbjtId());
		beanModel.setTbvPublishWeb(bean.getTbvPublishWeb());
		beanModel.setTbvPublishRss(bean.getTbvPublishRss());
		beanModel.setTbvActive(bean.getTbvActive());
		beanModel.setTbvName(bean.getTbvName());
		beanModel.setTbvVacancyId(bean.getTbvVacancyId());
		beanModel.setTbvId(bean.getTbvId());
		beanModel.setTbeName(bean.getTbeName());
		beanModel.setTbeId(bean.getTbeId());
		return beanModel;
    }
    
    //29CC
    public ViewApplicantsBeanModel[] toBeanModels(ViewApplicantsBean beans[])
    {
    	int beansCount = beans.length;
    	ViewApplicantsBeanModel beanModels[] = new ViewApplicantsBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the view_applicants table on a ViewApplicantsBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting ViewApplicantsBean bean
     * @throws DAOException
     */
    //30
    public ViewApplicantsBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        ViewApplicantsBean bean = this.createViewApplicantsBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBA_RESUME_FILE_NAME_EXISTING:
                        ++pos;
                        bean.setTbaResumeFileNameExisting(rs.getString(pos));
                        break;
                    case ID_TBA_RESUME_FILE_NAME:
                        ++pos;
                        bean.setTbaResumeFileName(rs.getString(pos));
                        break;
                    case ID_TBA_STATUS:
                        ++pos;
                        bean.setTbaStatus(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBA_DATE:
                        ++pos;
                        bean.setTbaDate(rs.getTimestamp(pos));
                        break;
                    case ID_TBA_NAME:
                        ++pos;
                        bean.setTbaName(rs.getString(pos));
                        break;
                    case ID_TBA_APPLICANTS_ID:
                        ++pos;
                        bean.setTbaApplicantsId(rs.getString(pos));
                        break;
                    case ID_TBA_ID:
                        ++pos;
                        bean.setTbaId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBJT_NAME:
                        ++pos;
                        bean.setTbjtName(rs.getString(pos));
                        break;
                    case ID_TBJT_ID:
                        ++pos;
                        bean.setTbjtId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBV_PUBLISH_WEB:
                        ++pos;
                        bean.setTbvPublishWeb(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBV_PUBLISH_RSS:
                        ++pos;
                        bean.setTbvPublishRss(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBV_ACTIVE:
                        ++pos;
                        bean.setTbvActive(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBV_NAME:
                        ++pos;
                        bean.setTbvName(rs.getString(pos));
                        break;
                    case ID_TBV_VACANCY_ID:
                        ++pos;
                        bean.setTbvVacancyId(rs.getString(pos));
                        break;
                    case ID_TBV_ID:
                        ++pos;
                        bean.setTbvId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_NAME:
                        ++pos;
                        bean.setTbeName(rs.getString(pos));
                        break;
                    case ID_TBE_ID:
                        ++pos;
                        bean.setTbeId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the view_applicants on a ViewApplicantsBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewApplicantsBean bean
     * @throws DAOException
     */
    //31
    public ViewApplicantsBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        ViewApplicantsBean bean = this.createViewApplicantsBean();
        try
        {
            bean.setTbaResumeFileNameExisting(rs.getString("tba_resume_file_name_existing"));
            bean.setTbaResumeFileName(rs.getString("tba_resume_file_name"));
            bean.setTbaStatus(Manager.getInteger(rs, "tba_status"));
            bean.setTbaDate(rs.getTimestamp("tba_date"));
            bean.setTbaName(rs.getString("tba_name"));
            bean.setTbaApplicantsId(rs.getString("tba_applicants_id"));
            bean.setTbaId(Manager.getInteger(rs, "tba_id"));
            bean.setTbjtName(rs.getString("tbjt_name"));
            bean.setTbjtId(Manager.getInteger(rs, "tbjt_id"));
            bean.setTbvPublishWeb(Manager.getInteger(rs, "tbv_publish_web"));
            bean.setTbvPublishRss(Manager.getInteger(rs, "tbv_publish_rss"));
            bean.setTbvActive(Manager.getInteger(rs, "tbv_active"));
            bean.setTbvName(rs.getString("tbv_name"));
            bean.setTbvVacancyId(rs.getString("tbv_vacancy_id"));
            bean.setTbvId(Manager.getInteger(rs, "tbv_id"));
            bean.setTbeName(rs.getString("tbe_name"));
            bean.setTbeId(Manager.getInteger(rs, "tbe_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ViewApplicantsBean
     * @throws DAOException
     */
    //32
    public ViewApplicantsBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ViewApplicantsBean
     * @throws DAOException
     */
    //33
    public ViewApplicantsBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (ViewApplicantsBean[])v.toArray(new ViewApplicantsBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of ViewApplicantsBean
     * @throws DAOException
     */
    //34
    public ViewApplicantsBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private ViewApplicantsListener listener = null;

    /**
     * Registers a unique ViewApplicantsListener listener.
     */
    //35
    public void registerListener(ViewApplicantsListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the ViewApplicantsBean bean.
     *
     * @param bean the ViewApplicantsBean bean to be saved
     */
    //36
    private void beforeInsert(ViewApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the ViewApplicantsBean bean.
     *
     * @param bean the ViewApplicantsBean bean to be saved
     */
    //37
    private void afterInsert(ViewApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the ViewApplicantsBean bean.
     *
     * @param bean the ViewApplicantsBean bean to be updated
     */
    //38
    private void beforeUpdate(ViewApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the ViewApplicantsBean bean.
     *
     * @param bean the ViewApplicantsBean bean to be updated
     */
    //39
    private void afterUpdate(ViewApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the ViewApplicantsBean bean.
     *
     * @param bean the ViewApplicantsBean bean to be deleted
     */
    private void beforeDelete(ViewApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the ViewApplicantsBean bean.
     *
     * @param bean the ViewApplicantsBean bean to be deleted
     */
    private void afterDelete(ViewApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
