// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbEmployeeSalaryBean is a mapping of tb_employee_salary Table.
 * @author sql2java
*/
public class TbEmployeeSalaryBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 4357522861028486474L;
	
    private String tbesCurrencyName;

    private boolean tbesCurrencyNameIsModified = false;
    private boolean tbesCurrencyNameIsInitialized = false;

    private Integer tbesPayFrequency;

    private boolean tbesPayFrequencyIsModified = false;
    private boolean tbesPayFrequencyIsInitialized = false;

    private Double tbesCogs;

    private boolean tbesCogsIsModified = false;
    private boolean tbesCogsIsInitialized = false;

    private Double tbesBasicSalary;

    private boolean tbesBasicSalaryIsModified = false;
    private boolean tbesBasicSalaryIsInitialized = false;

    private Integer tbcId;

    private boolean tbcIdIsModified = false;
    private boolean tbcIdIsInitialized = false;

    private Integer tbpId;

    private boolean tbpIdIsModified = false;
    private boolean tbpIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private Integer tbesId;

    private boolean tbesIdIsModified = false;
    private boolean tbesIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbEmployeeSalaryBean is via the createTbEmployeeSalaryBean method in TbEmployeeSalaryManager or
     * via the factory class TbEmployeeSalaryFactory create method
     */
    protected TbEmployeeSalaryBean()
    {
    }

    /**
     * Getter method for tbesCurrencyName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_salary.tbes_currency_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbesCurrencyName
     */
    public String getTbesCurrencyName()
    {
        return tbesCurrencyName;
    }

    /**
     * Setter method for tbesCurrencyName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesCurrencyName
     */
    public void setTbesCurrencyName(String newVal)
    {
        if ((newVal != null && tbesCurrencyName != null && (newVal.compareTo(tbesCurrencyName) == 0)) ||
            (newVal == null && tbesCurrencyName == null && tbesCurrencyNameIsInitialized)) {
            return;
        }
        tbesCurrencyName = newVal;
        tbesCurrencyNameIsModified = true;
        tbesCurrencyNameIsInitialized = true;
    }

    /**
     * Determines if the tbesCurrencyName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesCurrencyNameModified()
    {
        return tbesCurrencyNameIsModified;
    }

    /**
     * Determines if the tbesCurrencyName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesCurrencyNameInitialized()
    {
        return tbesCurrencyNameIsInitialized;
    }

    /**
     * Getter method for tbesPayFrequency.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_salary.tbes_pay_frequency</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbesPayFrequency
     */
    public Integer getTbesPayFrequency()
    {
        return tbesPayFrequency;
    }

    /**
     * Setter method for tbesPayFrequency.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesPayFrequency
     */
    public void setTbesPayFrequency(Integer newVal)
    {
        if ((newVal != null && tbesPayFrequency != null && (newVal.compareTo(tbesPayFrequency) == 0)) ||
            (newVal == null && tbesPayFrequency == null && tbesPayFrequencyIsInitialized)) {
            return;
        }
        tbesPayFrequency = newVal;
        tbesPayFrequencyIsModified = true;
        tbesPayFrequencyIsInitialized = true;
    }

    /**
     * Setter method for tbesPayFrequency.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesPayFrequency
     */
    public void setTbesPayFrequency(int newVal)
    {
        setTbesPayFrequency(new Integer(newVal));
    }

    /**
     * Determines if the tbesPayFrequency has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesPayFrequencyModified()
    {
        return tbesPayFrequencyIsModified;
    }

    /**
     * Determines if the tbesPayFrequency has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesPayFrequencyInitialized()
    {
        return tbesPayFrequencyIsInitialized;
    }

    /**
     * Getter method for tbesCogs.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_salary.tbes_cogs</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbesCogs
     */
    public Double getTbesCogs()
    {
        return tbesCogs;
    }

    /**
     * Setter method for tbesCogs.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesCogs
     */
    public void setTbesCogs(Double newVal)
    {
        if ((newVal != null && tbesCogs != null && (newVal.compareTo(tbesCogs) == 0)) ||
            (newVal == null && tbesCogs == null && tbesCogsIsInitialized)) {
            return;
        }
        tbesCogs = newVal;
        tbesCogsIsModified = true;
        tbesCogsIsInitialized = true;
    }

    /**
     * Setter method for tbesCogs.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesCogs
     */
    public void setTbesCogs(double newVal)
    {
        setTbesCogs(new Double(newVal));
    }

    /**
     * Determines if the tbesCogs has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesCogsModified()
    {
        return tbesCogsIsModified;
    }

    /**
     * Determines if the tbesCogs has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesCogsInitialized()
    {
        return tbesCogsIsInitialized;
    }

    /**
     * Getter method for tbesBasicSalary.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_salary.tbes_basic_salary</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbesBasicSalary
     */
    public Double getTbesBasicSalary()
    {
        return tbesBasicSalary;
    }

    /**
     * Setter method for tbesBasicSalary.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesBasicSalary
     */
    public void setTbesBasicSalary(Double newVal)
    {
        if ((newVal != null && tbesBasicSalary != null && (newVal.compareTo(tbesBasicSalary) == 0)) ||
            (newVal == null && tbesBasicSalary == null && tbesBasicSalaryIsInitialized)) {
            return;
        }
        tbesBasicSalary = newVal;
        tbesBasicSalaryIsModified = true;
        tbesBasicSalaryIsInitialized = true;
    }

    /**
     * Setter method for tbesBasicSalary.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesBasicSalary
     */
    public void setTbesBasicSalary(double newVal)
    {
        setTbesBasicSalary(new Double(newVal));
    }

    /**
     * Determines if the tbesBasicSalary has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesBasicSalaryModified()
    {
        return tbesBasicSalaryIsModified;
    }

    /**
     * Determines if the tbesBasicSalary has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesBasicSalaryInitialized()
    {
        return tbesBasicSalaryIsInitialized;
    }

    /**
     * Getter method for tbcId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_salary.tbc_id</li>
     * <li> foreign key: tb_currency.tbc_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbcId
     */
    public Integer getTbcId()
    {
        return tbcId;
    }

    /**
     * Setter method for tbcId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcId
     */
    public void setTbcId(Integer newVal)
    {
        if ((newVal != null && tbcId != null && (newVal.compareTo(tbcId) == 0)) ||
            (newVal == null && tbcId == null && tbcIdIsInitialized)) {
            return;
        }
        tbcId = newVal;
        tbcIdIsModified = true;
        tbcIdIsInitialized = true;
    }

    /**
     * Setter method for tbcId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbcId
     */
    public void setTbcId(int newVal)
    {
        setTbcId(new Integer(newVal));
    }

    /**
     * Determines if the tbcId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcIdModified()
    {
        return tbcIdIsModified;
    }

    /**
     * Determines if the tbcId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcIdInitialized()
    {
        return tbcIdIsInitialized;
    }

    /**
     * Getter method for tbpId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_salary.tbp_id</li>
     * <li> foreign key: tb_paygrade.tbp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpId
     */
    public Integer getTbpId()
    {
        return tbpId;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(Integer newVal)
    {
        if ((newVal != null && tbpId != null && (newVal.compareTo(tbpId) == 0)) ||
            (newVal == null && tbpId == null && tbpIdIsInitialized)) {
            return;
        }
        tbpId = newVal;
        tbpIdIsModified = true;
        tbpIdIsInitialized = true;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(int newVal)
    {
        setTbpId(new Integer(newVal));
    }

    /**
     * Determines if the tbpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpIdModified()
    {
        return tbpIdIsModified;
    }

    /**
     * Determines if the tbpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpIdInitialized()
    {
        return tbpIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_salary.tbe_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Getter method for tbesId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_salary.tbes_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbesId
     */
    public Integer getTbesId()
    {
        return tbesId;
    }

    /**
     * Setter method for tbesId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesId
     */
    public void setTbesId(Integer newVal)
    {
        if ((newVal != null && tbesId != null && (newVal.compareTo(tbesId) == 0)) ||
            (newVal == null && tbesId == null && tbesIdIsInitialized)) {
            return;
        }
        tbesId = newVal;
        tbesIdIsModified = true;
        tbesIdIsInitialized = true;
    }

    /**
     * Setter method for tbesId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesId
     */
    public void setTbesId(int newVal)
    {
        setTbesId(new Integer(newVal));
    }

    /**
     * Determines if the tbesId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesIdModified()
    {
        return tbesIdIsModified;
    }

    /**
     * Determines if the tbesId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesIdInitialized()
    {
        return tbesIdIsInitialized;
    }

    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /** The TbPaygrade referenced by this bean. */
    private TbPaygradeBean referencedTbPaygrade;
    /** Getter method for TbPaygradeBean. */
    public TbPaygradeBean getTbPaygradeBean() {
        return this.referencedTbPaygrade;
    }
    /** Setter method for TbPaygradeBean. */
    public void setTbPaygradeBean(TbPaygradeBean reference) {
        this.referencedTbPaygrade = reference;
    }
    
    /** The TbCurrency referenced by this bean. */
    private TbCurrencyBean referencedTbCurrency;
    /** Getter method for TbCurrencyBean. */
    public TbCurrencyBean getTbCurrencyBean() {
        return this.referencedTbCurrency;
    }
    /** Setter method for TbCurrencyBean. */
    public void setTbCurrencyBean(TbCurrencyBean reference) {
        this.referencedTbCurrency = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbesCurrencyNameIsModified 		|| tbesPayFrequencyIsModified  		|| tbesCogsIsModified  		|| tbesBasicSalaryIsModified  		|| tbcIdIsModified  		|| tbpIdIsModified  		|| tbeIdIsModified  		|| tbesIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbesCurrencyNameIsModified = false;
        tbesPayFrequencyIsModified = false;
        tbesCogsIsModified = false;
        tbesBasicSalaryIsModified = false;
        tbcIdIsModified = false;
        tbpIdIsModified = false;
        tbeIdIsModified = false;
        tbesIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbEmployeeSalaryBean bean)
    {
        setTbesCurrencyName(bean.getTbesCurrencyName());
        setTbesPayFrequency(bean.getTbesPayFrequency());
        setTbesCogs(bean.getTbesCogs());
        setTbesBasicSalary(bean.getTbesBasicSalary());
        setTbcId(bean.getTbcId());
        setTbpId(bean.getTbpId());
        setTbeId(bean.getTbeId());
        setTbesId(bean.getTbesId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbes_currency_name", getTbesCurrencyName() == null ? "" : getTbesCurrencyName().toString());
        dictionnary.put("tbes_pay_frequency", getTbesPayFrequency() == null ? "" : getTbesPayFrequency().toString());
        dictionnary.put("tbes_cogs", getTbesCogs() == null ? "" : getTbesCogs().toString());
        dictionnary.put("tbes_basic_salary", getTbesBasicSalary() == null ? "" : getTbesBasicSalary().toString());
        dictionnary.put("tbc_id", getTbcId() == null ? "" : getTbcId().toString());
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        dictionnary.put("tbes_id", getTbesId() == null ? "" : getTbesId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbes_id", getTbesId() == null ? "" : getTbesId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbes_currency_name".equalsIgnoreCase(column) || "tbesCurrencyName".equalsIgnoreCase(column)) {
            return getTbesCurrencyName() == null ? "" : getTbesCurrencyName().toString();
        } else if ("tbes_pay_frequency".equalsIgnoreCase(column) || "tbesPayFrequency".equalsIgnoreCase(column)) {
            return getTbesPayFrequency() == null ? "" : getTbesPayFrequency().toString();
        } else if ("tbes_cogs".equalsIgnoreCase(column) || "tbesCogs".equalsIgnoreCase(column)) {
            return getTbesCogs() == null ? "" : getTbesCogs().toString();
        } else if ("tbes_basic_salary".equalsIgnoreCase(column) || "tbesBasicSalary".equalsIgnoreCase(column)) {
            return getTbesBasicSalary() == null ? "" : getTbesBasicSalary().toString();
        } else if ("tbc_id".equalsIgnoreCase(column) || "tbcId".equalsIgnoreCase(column)) {
            return getTbcId() == null ? "" : getTbcId().toString();
        } else if ("tbp_id".equalsIgnoreCase(column) || "tbpId".equalsIgnoreCase(column)) {
            return getTbpId() == null ? "" : getTbpId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        } else if ("tbes_id".equalsIgnoreCase(column) || "tbesId".equalsIgnoreCase(column)) {
            return getTbesId() == null ? "" : getTbesId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbEmployeeSalaryBean)) {
            return false;
        }

		TbEmployeeSalaryBean obj = (TbEmployeeSalaryBean) object;
		return new EqualsBuilder()
            .append(getTbesCurrencyName(), obj.getTbesCurrencyName())
            .append(getTbesPayFrequency(), obj.getTbesPayFrequency())
            .append(getTbesCogs(), obj.getTbesCogs())
            .append(getTbesBasicSalary(), obj.getTbesBasicSalary())
            .append(getTbcId(), obj.getTbcId())
            .append(getTbpId(), obj.getTbpId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbesId(), obj.getTbesId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbesCurrencyName())
            .append(getTbesPayFrequency())
            .append(getTbesCogs())
            .append(getTbesBasicSalary())
            .append(getTbcId())
            .append(getTbpId())
            .append(getTbeId())
            .append(getTbesId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbes_currency_name", getTbesCurrencyName())
            .append("tbes_pay_frequency", getTbesPayFrequency())
            .append("tbes_cogs", getTbesCogs())
            .append("tbes_basic_salary", getTbesBasicSalary())
            .append("tbc_id", getTbcId())
            .append("tbp_id", getTbpId())
            .append("tbe_id", getTbeId())
            .append("tbes_id", getTbesId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbEmployeeSalaryBean obj = (TbEmployeeSalaryBean) object;
        return new CompareToBuilder()
            .append(getTbesCurrencyName(), obj.getTbesCurrencyName())
            .append(getTbesPayFrequency(), obj.getTbesPayFrequency())
            .append(getTbesCogs(), obj.getTbesCogs())
            .append(getTbesBasicSalary(), obj.getTbesBasicSalary())
            .append(getTbcId(), obj.getTbcId())
            .append(getTbpId(), obj.getTbpId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbesId(), obj.getTbesId())
            .toComparison();
   }
}
