// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the ViewKpiAssignBean objects.
 * @author sql2java
 */
public class ViewKpiAssignComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ViewKpiAssignComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewKpiAssignComparator(ViewKpiAssignManager.ID_TBKA_STATUS, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewKpiAssignManager.ID_TBKA_STATUS
     *   <li>ViewKpiAssignManager.ID_TBKA_POIN
     *   <li>ViewKpiAssignManager.ID_TBKA_ACTION
     *   <li>ViewKpiAssignManager.ID_TBKA_EVALUASI
     *   <li>ViewKpiAssignManager.ID_TBKA_ID
     *   <li>ViewKpiAssignManager.ID_TBK_BOBOT
     *   <li>ViewKpiAssignManager.ID_TBK_TARGET_NILAI_5
     *   <li>ViewKpiAssignManager.ID_TBK_TARGET_NILAI_4
     *   <li>ViewKpiAssignManager.ID_TBK_TARGET_NILAI_3
     *   <li>ViewKpiAssignManager.ID_TBK_TARGET_NILAI_2
     *   <li>ViewKpiAssignManager.ID_TBK_TARGET_NILAI_1
     *   <li>ViewKpiAssignManager.ID_TBK_DESCRIPTION
     *   <li>ViewKpiAssignManager.ID_TBK_ID
     *   <li>ViewKpiAssignManager.ID_TBKG_NAME
     *   <li>ViewKpiAssignManager.ID_TBKG_KPI_GROUP_ID
     *   <li>ViewKpiAssignManager.ID_TBKG_ID
     *   <li>ViewKpiAssignManager.ID_TBE_NAME
     *   <li>ViewKpiAssignManager.ID_TBE_ID
     * </ul>
     */
    public ViewKpiAssignComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ViewKpiAssignComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewKpiAssignComparator(ViewKpiAssignManager.ID_TBKA_STATUS, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewKpiAssignManager.ID_TBKA_STATUS
     *   <li>ViewKpiAssignManager.ID_TBKA_POIN
     *   <li>ViewKpiAssignManager.ID_TBKA_ACTION
     *   <li>ViewKpiAssignManager.ID_TBKA_EVALUASI
     *   <li>ViewKpiAssignManager.ID_TBKA_ID
     *   <li>ViewKpiAssignManager.ID_TBK_BOBOT
     *   <li>ViewKpiAssignManager.ID_TBK_TARGET_NILAI_5
     *   <li>ViewKpiAssignManager.ID_TBK_TARGET_NILAI_4
     *   <li>ViewKpiAssignManager.ID_TBK_TARGET_NILAI_3
     *   <li>ViewKpiAssignManager.ID_TBK_TARGET_NILAI_2
     *   <li>ViewKpiAssignManager.ID_TBK_TARGET_NILAI_1
     *   <li>ViewKpiAssignManager.ID_TBK_DESCRIPTION
     *   <li>ViewKpiAssignManager.ID_TBK_ID
     *   <li>ViewKpiAssignManager.ID_TBKG_NAME
     *   <li>ViewKpiAssignManager.ID_TBKG_KPI_GROUP_ID
     *   <li>ViewKpiAssignManager.ID_TBKG_ID
     *   <li>ViewKpiAssignManager.ID_TBE_NAME
     *   <li>ViewKpiAssignManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ViewKpiAssignComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ViewKpiAssignBean b1 = (ViewKpiAssignBean)pObj1;
        ViewKpiAssignBean b2 = (ViewKpiAssignBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ViewKpiAssignManager.ID_TBKA_STATUS:
                if (b1.getTbkaStatus() == null && b2.getTbkaStatus() != null) {
                    iReturn = -1;
                } else if (b1.getTbkaStatus() == null && b2.getTbkaStatus() == null) {
                    iReturn = 0;
                } else if (b1.getTbkaStatus() != null && b2.getTbkaStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkaStatus().compareTo(b2.getTbkaStatus());
                }
                break;
            case ViewKpiAssignManager.ID_TBKA_POIN:
                if (b1.getTbkaPoin() == null && b2.getTbkaPoin() != null) {
                    iReturn = -1;
                } else if (b1.getTbkaPoin() == null && b2.getTbkaPoin() == null) {
                    iReturn = 0;
                } else if (b1.getTbkaPoin() != null && b2.getTbkaPoin() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkaPoin().compareTo(b2.getTbkaPoin());
                }
                break;
            case ViewKpiAssignManager.ID_TBKA_ACTION:
                if (b1.getTbkaAction() == null && b2.getTbkaAction() != null) {
                    iReturn = -1;
                } else if (b1.getTbkaAction() == null && b2.getTbkaAction() == null) {
                    iReturn = 0;
                } else if (b1.getTbkaAction() != null && b2.getTbkaAction() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkaAction().compareTo(b2.getTbkaAction());
                }
                break;
            case ViewKpiAssignManager.ID_TBKA_EVALUASI:
                if (b1.getTbkaEvaluasi() == null && b2.getTbkaEvaluasi() != null) {
                    iReturn = -1;
                } else if (b1.getTbkaEvaluasi() == null && b2.getTbkaEvaluasi() == null) {
                    iReturn = 0;
                } else if (b1.getTbkaEvaluasi() != null && b2.getTbkaEvaluasi() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkaEvaluasi().compareTo(b2.getTbkaEvaluasi());
                }
                break;
            case ViewKpiAssignManager.ID_TBKA_ID:
                if (b1.getTbkaId() == null && b2.getTbkaId() != null) {
                    iReturn = -1;
                } else if (b1.getTbkaId() == null && b2.getTbkaId() == null) {
                    iReturn = 0;
                } else if (b1.getTbkaId() != null && b2.getTbkaId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkaId().compareTo(b2.getTbkaId());
                }
                break;
            case ViewKpiAssignManager.ID_TBK_BOBOT:
                if (b1.getTbkBobot() == null && b2.getTbkBobot() != null) {
                    iReturn = -1;
                } else if (b1.getTbkBobot() == null && b2.getTbkBobot() == null) {
                    iReturn = 0;
                } else if (b1.getTbkBobot() != null && b2.getTbkBobot() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkBobot().compareTo(b2.getTbkBobot());
                }
                break;
            case ViewKpiAssignManager.ID_TBK_TARGET_NILAI_5:
                if (b1.getTbkTargetNilai5() == null && b2.getTbkTargetNilai5() != null) {
                    iReturn = -1;
                } else if (b1.getTbkTargetNilai5() == null && b2.getTbkTargetNilai5() == null) {
                    iReturn = 0;
                } else if (b1.getTbkTargetNilai5() != null && b2.getTbkTargetNilai5() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkTargetNilai5().compareTo(b2.getTbkTargetNilai5());
                }
                break;
            case ViewKpiAssignManager.ID_TBK_TARGET_NILAI_4:
                if (b1.getTbkTargetNilai4() == null && b2.getTbkTargetNilai4() != null) {
                    iReturn = -1;
                } else if (b1.getTbkTargetNilai4() == null && b2.getTbkTargetNilai4() == null) {
                    iReturn = 0;
                } else if (b1.getTbkTargetNilai4() != null && b2.getTbkTargetNilai4() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkTargetNilai4().compareTo(b2.getTbkTargetNilai4());
                }
                break;
            case ViewKpiAssignManager.ID_TBK_TARGET_NILAI_3:
                if (b1.getTbkTargetNilai3() == null && b2.getTbkTargetNilai3() != null) {
                    iReturn = -1;
                } else if (b1.getTbkTargetNilai3() == null && b2.getTbkTargetNilai3() == null) {
                    iReturn = 0;
                } else if (b1.getTbkTargetNilai3() != null && b2.getTbkTargetNilai3() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkTargetNilai3().compareTo(b2.getTbkTargetNilai3());
                }
                break;
            case ViewKpiAssignManager.ID_TBK_TARGET_NILAI_2:
                if (b1.getTbkTargetNilai2() == null && b2.getTbkTargetNilai2() != null) {
                    iReturn = -1;
                } else if (b1.getTbkTargetNilai2() == null && b2.getTbkTargetNilai2() == null) {
                    iReturn = 0;
                } else if (b1.getTbkTargetNilai2() != null && b2.getTbkTargetNilai2() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkTargetNilai2().compareTo(b2.getTbkTargetNilai2());
                }
                break;
            case ViewKpiAssignManager.ID_TBK_TARGET_NILAI_1:
                if (b1.getTbkTargetNilai1() == null && b2.getTbkTargetNilai1() != null) {
                    iReturn = -1;
                } else if (b1.getTbkTargetNilai1() == null && b2.getTbkTargetNilai1() == null) {
                    iReturn = 0;
                } else if (b1.getTbkTargetNilai1() != null && b2.getTbkTargetNilai1() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkTargetNilai1().compareTo(b2.getTbkTargetNilai1());
                }
                break;
            case ViewKpiAssignManager.ID_TBK_DESCRIPTION:
                if (b1.getTbkDescription() == null && b2.getTbkDescription() != null) {
                    iReturn = -1;
                } else if (b1.getTbkDescription() == null && b2.getTbkDescription() == null) {
                    iReturn = 0;
                } else if (b1.getTbkDescription() != null && b2.getTbkDescription() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkDescription().compareTo(b2.getTbkDescription());
                }
                break;
            case ViewKpiAssignManager.ID_TBK_ID:
                if (b1.getTbkId() == null && b2.getTbkId() != null) {
                    iReturn = -1;
                } else if (b1.getTbkId() == null && b2.getTbkId() == null) {
                    iReturn = 0;
                } else if (b1.getTbkId() != null && b2.getTbkId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkId().compareTo(b2.getTbkId());
                }
                break;
            case ViewKpiAssignManager.ID_TBKG_NAME:
                if (b1.getTbkgName() == null && b2.getTbkgName() != null) {
                    iReturn = -1;
                } else if (b1.getTbkgName() == null && b2.getTbkgName() == null) {
                    iReturn = 0;
                } else if (b1.getTbkgName() != null && b2.getTbkgName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkgName().compareTo(b2.getTbkgName());
                }
                break;
            case ViewKpiAssignManager.ID_TBKG_KPI_GROUP_ID:
                if (b1.getTbkgKpiGroupId() == null && b2.getTbkgKpiGroupId() != null) {
                    iReturn = -1;
                } else if (b1.getTbkgKpiGroupId() == null && b2.getTbkgKpiGroupId() == null) {
                    iReturn = 0;
                } else if (b1.getTbkgKpiGroupId() != null && b2.getTbkgKpiGroupId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkgKpiGroupId().compareTo(b2.getTbkgKpiGroupId());
                }
                break;
            case ViewKpiAssignManager.ID_TBKG_ID:
                if (b1.getTbkgId() == null && b2.getTbkgId() != null) {
                    iReturn = -1;
                } else if (b1.getTbkgId() == null && b2.getTbkgId() == null) {
                    iReturn = 0;
                } else if (b1.getTbkgId() != null && b2.getTbkgId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbkgId().compareTo(b2.getTbkgId());
                }
                break;
            case ViewKpiAssignManager.ID_TBE_NAME:
                if (b1.getTbeName() == null && b2.getTbeName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeName() == null && b2.getTbeName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeName() != null && b2.getTbeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeName().compareTo(b2.getTbeName());
                }
                break;
            case ViewKpiAssignManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
