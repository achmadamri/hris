// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.TbLocationBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the tb_location table.
 * @author sql2java
 */
public class TbLocationManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbl_comments field.
     */
    public static final int ID_TBL_COMMENTS = 0;

    /**
     * Identify the tbl_fax field.
     */
    public static final int ID_TBL_FAX = 1;

    /**
     * Identify the tbl_phone field.
     */
    public static final int ID_TBL_PHONE = 2;

    /**
     * Identify the tbl_zip_code field.
     */
    public static final int ID_TBL_ZIP_CODE = 3;

    /**
     * Identify the tbl_address field.
     */
    public static final int ID_TBL_ADDRESS = 4;

    /**
     * Identify the tbl_city field.
     */
    public static final int ID_TBL_CITY = 5;

    /**
     * Identify the tbl_province field.
     */
    public static final int ID_TBL_PROVINCE = 6;

    /**
     * Identify the fk_tbn_id field.
     */
    public static final int ID_FK_TBN_ID = 7;

    /**
     * Identify the tbl_country field.
     */
    public static final int ID_TBL_COUNTRY = 8;

    /**
     * Identify the tbl_name field.
     */
    public static final int ID_TBL_NAME = 9;

    /**
     * Identify the tbl_location_id field.
     */
    public static final int ID_TBL_LOCATION_ID = 10;

    /**
     * Identify the tbp_id field.
     */
    public static final int ID_TBP_ID = 11;

    /**
     * Identify the tbl_id field.
     */
    public static final int ID_TBL_ID = 12;

    /**
     * Contains all the full fields of the tb_location table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "tb_location.tbl_comments"
        ,"tb_location.tbl_fax"
        ,"tb_location.tbl_phone"
        ,"tb_location.tbl_zip_code"
        ,"tb_location.tbl_address"
        ,"tb_location.tbl_city"
        ,"tb_location.tbl_province"
        ,"tb_location.fk_tbn_id"
        ,"tb_location.tbl_country"
        ,"tb_location.tbl_name"
        ,"tb_location.tbl_location_id"
        ,"tb_location.tbp_id"
        ,"tb_location.tbl_id"
    };

    /**
     * Contains all the fields of the tb_location table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbl_comments"
        ,"tbl_fax"
        ,"tbl_phone"
        ,"tbl_zip_code"
        ,"tbl_address"
        ,"tbl_city"
        ,"tbl_province"
        ,"fk_tbn_id"
        ,"tbl_country"
        ,"tbl_name"
        ,"tbl_location_id"
        ,"tbp_id"
        ,"tbl_id"
    };

    /**
     * Field that contains the comma separated fields of the tb_location table.
     */
    public static final String ALL_FULL_FIELDS = "tb_location.tbl_comments"
                            + ",tb_location.tbl_fax"
                            + ",tb_location.tbl_phone"
                            + ",tb_location.tbl_zip_code"
                            + ",tb_location.tbl_address"
                            + ",tb_location.tbl_city"
                            + ",tb_location.tbl_province"
                            + ",tb_location.fk_tbn_id"
                            + ",tb_location.tbl_country"
                            + ",tb_location.tbl_name"
                            + ",tb_location.tbl_location_id"
                            + ",tb_location.tbp_id"
                            + ",tb_location.tbl_id";

    /**
     * Field that contains the comma separated fields of the tb_location table.
     */
    public static final String ALL_FIELDS = "tbl_comments"
                            + ",tbl_fax"
                            + ",tbl_phone"
                            + ",tbl_zip_code"
                            + ",tbl_address"
                            + ",tbl_city"
                            + ",tbl_province"
                            + ",fk_tbn_id"
                            + ",tbl_country"
                            + ",tbl_name"
                            + ",tbl_location_id"
                            + ",tbp_id"
                            + ",tbl_id";

    private static TbLocationManager singleton = new TbLocationManager();

    /**
     * Get the TbLocationManager singleton.
     *
     * @return TbLocationManager
     */
    public static TbLocationManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new TbLocationBean instance.
     *
     * @return the new TbLocationBean
     */
    public TbLocationBean createTbLocationBean()
    {
        return new TbLocationBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////
	
    /**
     * Loads a TbLocationBean from the tb_location using its key fields.
     *
     * @param tblId Integer - PK# 1
     * @return a unique TbLocationBean
     * @throws DAOException
     */
    //1
    public TbLocationBean loadByPrimaryKey(Integer tblId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("SELECT " + ALL_FIELDS + " FROM tb_location WHERE tbl_id=?");
            log.debug("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tblId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tblId); }
            TbLocationBean pReturn[] = this.loadByPreparedStatement(ps);
            if (pReturn.length < 1) {
                // throw new ObjectRetrievalException();
				return null;
            } else {
                return pReturn[0];
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
		
	//1WS
    //public TbLocationBean loadByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return fromBeanWsToBean(Util.getInstance().getDAOServiceV1().tbXLoadByPrimaryKey(id));
    //}
    
    //2WS
    //public int deleteByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return Util.getInstance().getDAOServiceV1().tbXDeleteByPrimaryKey(id);
    //}

    /**
     * Deletes rows according to its keys.
     *
     * @param tblId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer tblId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_location WHERE tbl_id=?");
            log.debug("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tblId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tblId); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the TbJobBean object from the tb_location.tbl_id field.
     *
     * @param bean the TbLocationBean
     * @return the associated TbJobBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbJobBean[] getTbJobBeans(TbLocationBean bean) throws DAOException
    {
        TbJobBean other = TbJobManager.getInstance().createTbJobBean();
        other.setTblId(bean.getTblId());
        return TbJobManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbLocationBean object to the TbJobBean object.
     *
     * @param bean the TbLocationBean object to use
     * @param beanToSet the TbJobBean object to associate to the TbLocationBean
     * @return the associated TbJobBean bean
     */
    //4.1 SET IMPORTED
    public TbLocationBean setTbJobBean(TbLocationBean bean,TbJobBean beanToSet)
    {
        bean.setTblId(beanToSet.getTblId());
        return bean;
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the TbNegaraBean object from the tb_location.fk_tbn_id field.
     *
     * @param bean the TbLocationBean
     * @return the associated TbNegaraBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbNegaraBean getTbNegaraBean(TbLocationBean bean) throws DAOException
    {
        TbNegaraBean other = TbNegaraManager.getInstance().createTbNegaraBean();
        other.setTbnId(bean.getFkTbnId()); 
        bean.setTbNegaraBean(TbNegaraManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbNegaraBean();
    }

    /**
     * Associates the TbLocationBean object to the TbNegaraBean object.
     *
     * @param bean the TbLocationBean object to use
     * @param beanToSet the TbNegaraBean object to associate to the TbLocationBean
     * @return the associated TbNegaraBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbNegaraBean addTbNegaraBean(TbNegaraBean beanToSet, TbLocationBean bean) throws Exception
    {
        beanToSet.setTbnId(bean.getFkTbnId());
        return TbNegaraManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbLocationBean object to the TbNegaraBean object.
     *
     * @param bean the TbLocationBean object to use
     * @param beanToSet the TbNegaraBean object to associate to the TbLocationBean
     * @return the associated TbNegaraBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbNegaraBean setTbNegaraBean(TbLocationBean bean, TbNegaraBean beanToSet) throws Exception
    {
        bean.setFkTbnId(beanToSet.getTbnId());
        return TbNegaraManager.getInstance().save(beanToSet);
    }

    /**
     * Retrieves the TbPerusahaanBean object from the tb_location.tbp_id field.
     *
     * @param bean the TbLocationBean
     * @return the associated TbPerusahaanBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbPerusahaanBean getTbPerusahaanBean(TbLocationBean bean) throws DAOException
    {
        TbPerusahaanBean other = TbPerusahaanManager.getInstance().createTbPerusahaanBean();
        other.setTbpId(bean.getTbpId()); 
        bean.setTbPerusahaanBean(TbPerusahaanManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbPerusahaanBean();
    }

    /**
     * Associates the TbLocationBean object to the TbPerusahaanBean object.
     *
     * @param bean the TbLocationBean object to use
     * @param beanToSet the TbPerusahaanBean object to associate to the TbLocationBean
     * @return the associated TbPerusahaanBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbPerusahaanBean addTbPerusahaanBean(TbPerusahaanBean beanToSet, TbLocationBean bean) throws Exception
    {
        beanToSet.setTbpId(bean.getTbpId());
        return TbPerusahaanManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbLocationBean object to the TbPerusahaanBean object.
     *
     * @param bean the TbLocationBean object to use
     * @param beanToSet the TbPerusahaanBean object to associate to the TbLocationBean
     * @return the associated TbPerusahaanBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbPerusahaanBean setTbPerusahaanBean(TbLocationBean bean, TbPerusahaanBean beanToSet) throws Exception
    {
        bean.setTbpId(beanToSet.getTbpId());
        return TbPerusahaanManager.getInstance().save(beanToSet);
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from tb_location.
     *
     * @return an array of TbLocationManager bean
     * @throws DAOException
     */
    //5
    public TbLocationBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from tb_location, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of TbLocationManager bean
     * @throws DAOException
     */
    //6
    public TbLocationBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TbLocationBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TbLocationBean table
     * @throws DAOException
     */
    //7
    public TbLocationBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TbLocationBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting TbLocationBean table
     * @throws DAOException
     */
    //8
    public TbLocationBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of TbLocationBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting TbLocationBean table
     * @throws DAOException
     */
    //9
    public TbLocationBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_location ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM tb_location ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the tb_location table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_location " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the TbLocationBean bean into the database.
     *
     * @param bean the TbLocationBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public TbLocationBean save(TbLocationBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the TbLocationBean bean into the database.
     *
     * @param bean the TbLocationBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public TbLocationBean insert(TbLocationBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into tb_location (");

            if (bean.isTblCommentsModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_comments");
                _dirtyCount++;
            }

            if (bean.isTblFaxModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_fax");
                _dirtyCount++;
            }

            if (bean.isTblPhoneModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_phone");
                _dirtyCount++;
            }

            if (bean.isTblZipCodeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_zip_code");
                _dirtyCount++;
            }

            if (bean.isTblAddressModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_address");
                _dirtyCount++;
            }

            if (bean.isTblCityModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_city");
                _dirtyCount++;
            }

            if (bean.isTblProvinceModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_province");
                _dirtyCount++;
            }

            if (bean.isFkTbnIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("fk_tbn_id");
                _dirtyCount++;
            }

            if (bean.isTblCountryModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_country");
                _dirtyCount++;
            }

            if (bean.isTblNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_name");
                _dirtyCount++;
            }

            if (bean.isTblLocationIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_location_id");
                _dirtyCount++;
            }

            if (bean.isTbpIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_id");
                _dirtyCount++;
            }

            if (bean.isTblIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();
            if (!bean.isTblIdModified())
            {
                ResultSet rs = ps.getGeneratedKeys();
                try {
                    if(rs.next()) {
                        bean.setTblId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve auto generated key!");
                    }
                } finally {
                    this.getManager().close(rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the TbLocationBean bean record in the database according to the changes.
     *
     * @param bean the TbLocationBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public TbLocationBean update(TbLocationBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE tb_location SET ");
            boolean useComma=false;

            if (bean.isTblCommentsModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_comments=?");
            }

            if (bean.isTblFaxModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_fax=?");
            }

            if (bean.isTblPhoneModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_phone=?");
            }

            if (bean.isTblZipCodeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_zip_code=?");
            }

            if (bean.isTblAddressModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_address=?");
            }

            if (bean.isTblCityModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_city=?");
            }

            if (bean.isTblProvinceModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_province=?");
            }

            if (bean.isFkTbnIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("fk_tbn_id=?");
            }

            if (bean.isTblCountryModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_country=?");
            }

            if (bean.isTblNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_name=?");
            }

            if (bean.isTblLocationIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_location_id=?");
            }

            if (bean.isTbpIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_id=?");
            }

            if (bean.isTblIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_id=?");
            }
            sql.append(" WHERE ");
            sql.append("tbl_id=?");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getTblId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTblId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of TbLocationBean beans into the database.
     *
     * @param beans the TbLocationBean bean table to be saved
     * @return the saved TbLocationBean array.
     * @throws DAOException
     */
    //15
    public TbLocationBean[] save(TbLocationBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of TbLocationBean beans into the database.
     *
     * @param beans the TbLocationBean bean table to be inserted
     * @return the saved TbLocationBean array.
     * @throws DAOException
     */
    //16
    public TbLocationBean[] insert(TbLocationBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of TbLocationBean beans into the database.
     *
     * @param beans the TbLocationBean bean table to be inserted
     * @return the saved TbLocationBean array.
     * @throws DAOException
     */
    //17
    public TbLocationBean[] update(TbLocationBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique TbLocationBean bean from a template one giving a c
     *
     * @param bean the TbLocationBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public TbLocationBean loadUniqueUsingTemplate(TbLocationBean bean) throws DAOException
    {
         TbLocationBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of TbLocationBean from a template one.
     *
     * @param bean the TbLocationBean template to look for
     * @return all the TbLocationBean matching the template
     * @throws DAOException
     */
    //19
    public TbLocationBean[] loadUsingTemplate(TbLocationBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of TbLocationBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbLocationBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the TbLocationBean matching the template
     * @throws DAOException
     */
    //20
    public TbLocationBean[] loadUsingTemplate(TbLocationBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of TbLocationBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbLocationBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the TbLocationBean matching the template
     * @throws DAOException
     */
    //20
    public TbLocationBean[] loadUsingTemplate(TbLocationBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_location ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a TbLocationBean template.
     *
     * @param bean the TbLocationBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(TbLocationBean bean) throws DAOException
    {
        if (bean.isTblIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getTblId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM tb_location ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

    /**
     * Retrieves an array of TbLocationBean using the tbl_fk_1 index.
     *
     * @param fkTbnId the fk_tbn_id column's value filter.
     * @return an array of TbLocationBean
     * @throws DAOException
     */
    public TbLocationBean[] loadBytbl_fk_1(Integer fkTbnId) throws DAOException
    {
        TbLocationBean bean = this.createTbLocationBean();
        bean.setFkTbnId(fkTbnId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbl_fk_1 index.
     *
     * @param fkTbnId the fk_tbn_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbl_fk_1(Integer fkTbnId) throws DAOException
    {
        TbLocationBean bean = this.createTbLocationBean();
        bean.setFkTbnId(fkTbnId);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an array of TbLocationBean using the tbl_fk_2 index.
     *
     * @param tbpId the tbp_id column's value filter.
     * @return an array of TbLocationBean
     * @throws DAOException
     */
    public TbLocationBean[] loadBytbl_fk_2(Integer tbpId) throws DAOException
    {
        TbLocationBean bean = this.createTbLocationBean();
        bean.setTbpId(tbpId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbl_fk_2 index.
     *
     * @param tbpId the tbp_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbl_fk_2(Integer tbpId) throws DAOException
    {
        TbLocationBean bean = this.createTbLocationBean();
        bean.setTbpId(tbpId);
        return deleteUsingTemplate(bean);
    }
    

    /**
     * Retrieves an array of TbJobBean using the relation table TbPerusahaan given a TbLocationBean object.
     *
     * @param bean the TbLocationBean bean to be used
     * @return an array of TbJobBean
     * @throws DAOException
     */
    //22 MANY TO MANY
    public TbJobBean[] loadTbJobViaTbPerusahaan(TbLocationBean bean) throws DAOException
    {
         return this.loadTbJobViaTbPerusahaan(bean, 1, -1);
    }

    /**
     * Retrieves an array of TbJobBean using the relation table TbPerusahaan given a TbLocationBean object, specifying the start row and the number of rows.
     *
     * @param bean the TbLocationBean bean to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of TbJobBean
     * @throws DAOException
     */
    //23 MANY TO MANY
    public TbJobBean[] loadTbJobViaTbPerusahaan(TbLocationBean bean, int startRow, int numRows) throws DAOException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String sql = " SELECT " + TbJobManager.ALL_FIELDS
                         + " FROM tb_job tb_jobL, tb_perusahaan tb_perusahaanR"
                         + " WHERE "
                         + "     tb_perusahaanR.tbp_id = ?"
                         + " AND tb_perusahaanR.tbp_id = tb_jobL.tbp_id";
         try
         {
             c = this.getConnection();
             ps = c.prepareStatement(sql,
                                     ResultSet.TYPE_SCROLL_INSENSITIVE,
                                     ResultSet.CONCUR_READ_ONLY);
             if (bean.getTbpId() == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, bean.getTbpId()); }
             return TbJobManager.getInstance().loadByPreparedStatement(ps, null, startRow, numRows);
         }
         catch (SQLException e)
         {
         	throw new DAOException(e.getMessage(), e);
         }
         finally
         {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
         }
    }
    /**
     * Retrieves an array of TbOrganizationBean using the relation table TbPerusahaan given a TbLocationBean object.
     *
     * @param bean the TbLocationBean bean to be used
     * @return an array of TbOrganizationBean
     * @throws DAOException
     */
    //22 MANY TO MANY
    public TbOrganizationBean[] loadTbOrganizationViaTbPerusahaan(TbLocationBean bean) throws DAOException
    {
         return this.loadTbOrganizationViaTbPerusahaan(bean, 1, -1);
    }

    /**
     * Retrieves an array of TbOrganizationBean using the relation table TbPerusahaan given a TbLocationBean object, specifying the start row and the number of rows.
     *
     * @param bean the TbLocationBean bean to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of TbOrganizationBean
     * @throws DAOException
     */
    //23 MANY TO MANY
    public TbOrganizationBean[] loadTbOrganizationViaTbPerusahaan(TbLocationBean bean, int startRow, int numRows) throws DAOException
    {
         Connection c = null;
         PreparedStatement ps = null;
         String sql = " SELECT " + TbOrganizationManager.ALL_FIELDS
                         + " FROM tb_organization tb_organizationL, tb_perusahaan tb_perusahaanR"
                         + " WHERE "
                         + "     tb_perusahaanR.tbp_id = ?"
                         + " AND tb_perusahaanR.tbp_id = tb_organizationL.tbp_id";
         try
         {
             c = this.getConnection();
             ps = c.prepareStatement(sql,
                                     ResultSet.TYPE_SCROLL_INSENSITIVE,
                                     ResultSet.CONCUR_READ_ONLY);
             if (bean.getTbpId() == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, bean.getTbpId()); }
             return TbOrganizationManager.getInstance().loadByPreparedStatement(ps, null, startRow, numRows);
         }
         catch (SQLException e)
         {
         	throw new DAOException(e.getMessage(), e);
         }
         finally
         {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
         }
    }

    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table tb_location.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table tb_location with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM tb_location " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table tb_location with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific TbLocationBean bean
     *
     * @param bean the TbLocationBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(TbLocationBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific TbLocationBean bean , given the start row and number of rows.
     *
     * @param bean the TbLocationBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbLocationBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific TbLocationBean bean given the start row and number of rows and the search type
     *
     * @param bean the TbLocationBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbLocationBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM tb_location");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, TbLocationBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTblCommentsModified()) {
                _dirtyCount ++;
                if (bean.getTblComments() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_comments IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_comments ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblFaxModified()) {
                _dirtyCount ++;
                if (bean.getTblFax() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_fax IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_fax ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblPhoneModified()) {
                _dirtyCount ++;
                if (bean.getTblPhone() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_phone IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_phone ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblZipCodeModified()) {
                _dirtyCount ++;
                if (bean.getTblZipCode() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_zip_code IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_zip_code ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblAddressModified()) {
                _dirtyCount ++;
                if (bean.getTblAddress() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_address IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_address ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblCityModified()) {
                _dirtyCount ++;
                if (bean.getTblCity() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_city IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_city ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblProvinceModified()) {
                _dirtyCount ++;
                if (bean.getTblProvince() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_province IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_province ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isFkTbnIdModified()) {
                _dirtyCount ++;
                if (bean.getFkTbnId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("fk_tbn_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("fk_tbn_id = ?");
                }
            }
            if (bean.isTblCountryModified()) {
                _dirtyCount ++;
                if (bean.getTblCountry() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_country IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_country ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblNameModified()) {
                _dirtyCount ++;
                if (bean.getTblName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblLocationIdModified()) {
                _dirtyCount ++;
                if (bean.getTblLocationId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_location_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_location_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id = ?");
                }
            }
            if (bean.isTblIdModified()) {
                _dirtyCount ++;
                if (bean.getTblId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, TbLocationBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTblCommentsModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblComments() + "]");
                        if (bean.getTblComments() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblComments()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblComments() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblComments());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblComments() + "]");
                        if (bean.getTblComments() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblComments() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblFaxModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblFax() + "]");
                        if (bean.getTblFax() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblFax()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblFax() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblFax() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblFax() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblFax());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblFax() + "]");
                        if (bean.getTblFax() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblFax() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblPhoneModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblPhone() + "]");
                        if (bean.getTblPhone() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblPhone()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblPhone() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblPhone());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblPhone() + "]");
                        if (bean.getTblPhone() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblPhone() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblZipCodeModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblZipCode() + "]");
                        if (bean.getTblZipCode() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblZipCode()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblZipCode() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblZipCode() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblZipCode() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblZipCode());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblZipCode() + "]");
                        if (bean.getTblZipCode() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblZipCode() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblAddressModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblAddress() + "]");
                        if (bean.getTblAddress() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblAddress()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblAddress() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblAddress() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblAddress() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblAddress());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblAddress() + "]");
                        if (bean.getTblAddress() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblAddress() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblCityModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblCity() + "]");
                        if (bean.getTblCity() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblCity()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblCity() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblCity() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblCity() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblCity());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblCity() + "]");
                        if (bean.getTblCity() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblCity() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblProvinceModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblProvince() + "]");
                        if (bean.getTblProvince() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblProvince()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblProvince() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblProvince() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblProvince() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblProvince());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblProvince() + "]");
                        if (bean.getTblProvince() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblProvince() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isFkTbnIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getFkTbnId() + "]");
                if (bean.getFkTbnId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getFkTbnId()); }
            }
            if (bean.isTblCountryModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblCountry() + "]");
                        if (bean.getTblCountry() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblCountry()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblCountry() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblCountry() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblCountry() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblCountry());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblCountry() + "]");
                        if (bean.getTblCountry() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblCountry() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblName() + "]");
                        if (bean.getTblName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblName() + "]");
                        if (bean.getTblName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblLocationIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblLocationId() + "]");
                        if (bean.getTblLocationId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblLocationId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblLocationId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblLocationId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblLocationId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblLocationId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblLocationId() + "]");
                        if (bean.getTblLocationId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblLocationId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpId() + "]");
                if (bean.getTbpId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpId()); }
            }
            if (bean.isTblIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTblId() + "]");
                if (bean.getTblId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTblId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of TbLocationBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting TbLocationBean table
     * @throws DAOException
     */
    //28
    public TbLocationBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (TbLocationBean[])v.toArray(new TbLocationBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the tb_location on a TbLocationBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbLocationBean bean
     * @throws DAOException
     */
    //29
    public TbLocationBean decodeRow(ResultSet rs) throws DAOException
    {
        TbLocationBean bean = this.createTbLocationBean();
        try
        {
            bean.setTblComments(rs.getString(1));
            bean.setTblFax(rs.getString(2));
            bean.setTblPhone(rs.getString(3));
            bean.setTblZipCode(rs.getString(4));
            bean.setTblAddress(rs.getString(5));
            bean.setTblCity(rs.getString(6));
            bean.setTblProvince(rs.getString(7));
            bean.setFkTbnId(Manager.getInteger(rs, 8));
            bean.setTblCountry(rs.getString(9));
            bean.setTblName(rs.getString(10));
            bean.setTblLocationId(rs.getString(11));
            bean.setTbpId(Manager.getInteger(rs, 12));
            bean.setTblId(Manager.getInteger(rs, 13));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public TbLocationBean toBean(TbLocationBeanModel beanModel, TbLocationBean bean)
    {
		if (beanModel.getTblComments() != null)
			bean.setTblComments(beanModel.getTblComments());

		if (bean.getTblComments() != null)
		if ("java.sql.Timestamp".equals(bean.getTblComments().getClass().getName()))
			bean.setTblComments(beanModel.getTblComments());
		
		if (beanModel.getTblFax() != null)
			bean.setTblFax(beanModel.getTblFax());

		if (bean.getTblFax() != null)
		if ("java.sql.Timestamp".equals(bean.getTblFax().getClass().getName()))
			bean.setTblFax(beanModel.getTblFax());
		
		if (beanModel.getTblPhone() != null)
			bean.setTblPhone(beanModel.getTblPhone());

		if (bean.getTblPhone() != null)
		if ("java.sql.Timestamp".equals(bean.getTblPhone().getClass().getName()))
			bean.setTblPhone(beanModel.getTblPhone());
		
		if (beanModel.getTblZipCode() != null)
			bean.setTblZipCode(beanModel.getTblZipCode());

		if (bean.getTblZipCode() != null)
		if ("java.sql.Timestamp".equals(bean.getTblZipCode().getClass().getName()))
			bean.setTblZipCode(beanModel.getTblZipCode());
		
		if (beanModel.getTblAddress() != null)
			bean.setTblAddress(beanModel.getTblAddress());

		if (bean.getTblAddress() != null)
		if ("java.sql.Timestamp".equals(bean.getTblAddress().getClass().getName()))
			bean.setTblAddress(beanModel.getTblAddress());
		
		if (beanModel.getTblCity() != null)
			bean.setTblCity(beanModel.getTblCity());

		if (bean.getTblCity() != null)
		if ("java.sql.Timestamp".equals(bean.getTblCity().getClass().getName()))
			bean.setTblCity(beanModel.getTblCity());
		
		if (beanModel.getTblProvince() != null)
			bean.setTblProvince(beanModel.getTblProvince());

		if (bean.getTblProvince() != null)
		if ("java.sql.Timestamp".equals(bean.getTblProvince().getClass().getName()))
			bean.setTblProvince(beanModel.getTblProvince());
		
		if (beanModel.getFkTbnId() != null)
			bean.setFkTbnId(beanModel.getFkTbnId());

		if (bean.getFkTbnId() != null)
		if ("java.sql.Timestamp".equals(bean.getFkTbnId().getClass().getName()))
			bean.setFkTbnId(beanModel.getFkTbnId());
		
		if (beanModel.getTblCountry() != null)
			bean.setTblCountry(beanModel.getTblCountry());

		if (bean.getTblCountry() != null)
		if ("java.sql.Timestamp".equals(bean.getTblCountry().getClass().getName()))
			bean.setTblCountry(beanModel.getTblCountry());
		
		if (beanModel.getTblName() != null)
			bean.setTblName(beanModel.getTblName());

		if (bean.getTblName() != null)
		if ("java.sql.Timestamp".equals(bean.getTblName().getClass().getName()))
			bean.setTblName(beanModel.getTblName());
		
		if (beanModel.getTblLocationId() != null)
			bean.setTblLocationId(beanModel.getTblLocationId());

		if (bean.getTblLocationId() != null)
		if ("java.sql.Timestamp".equals(bean.getTblLocationId().getClass().getName()))
			bean.setTblLocationId(beanModel.getTblLocationId());
		
		if (beanModel.getTbpId() != null)
			bean.setTbpId(beanModel.getTbpId());

		if (bean.getTbpId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpId().getClass().getName()))
			bean.setTbpId(beanModel.getTbpId());
		
		if (beanModel.getTblId() != null)
			bean.setTblId(beanModel.getTblId());

		if (bean.getTblId() != null)
		if ("java.sql.Timestamp".equals(bean.getTblId().getClass().getName()))
			bean.setTblId(beanModel.getTblId());
		
        return bean;
    }
	
    //29AA
    public TbLocationBean[] toBeans(TbLocationBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	TbLocationBean beans[] = new TbLocationBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public TbLocationBeanModel toBeanModel(TbLocationBean bean)
    {
    	TbLocationBeanModel beanModel = new TbLocationBeanModel();
		beanModel.setTblComments(bean.getTblComments());
		beanModel.setTblFax(bean.getTblFax());
		beanModel.setTblPhone(bean.getTblPhone());
		beanModel.setTblZipCode(bean.getTblZipCode());
		beanModel.setTblAddress(bean.getTblAddress());
		beanModel.setTblCity(bean.getTblCity());
		beanModel.setTblProvince(bean.getTblProvince());
		beanModel.setFkTbnId(bean.getFkTbnId());
		beanModel.setTblCountry(bean.getTblCountry());
		beanModel.setTblName(bean.getTblName());
		beanModel.setTblLocationId(bean.getTblLocationId());
		beanModel.setTbpId(bean.getTbpId());
		beanModel.setTblId(bean.getTblId());
		return beanModel;
    }
    
    //29CC
    public TbLocationBeanModel[] toBeanModels(TbLocationBean beans[])
    {
    	int beansCount = beans.length;
    	TbLocationBeanModel beanModels[] = new TbLocationBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the tb_location table on a TbLocationBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting TbLocationBean bean
     * @throws DAOException
     */
    //30
    public TbLocationBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        TbLocationBean bean = this.createTbLocationBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBL_COMMENTS:
                        ++pos;
                        bean.setTblComments(rs.getString(pos));
                        break;
                    case ID_TBL_FAX:
                        ++pos;
                        bean.setTblFax(rs.getString(pos));
                        break;
                    case ID_TBL_PHONE:
                        ++pos;
                        bean.setTblPhone(rs.getString(pos));
                        break;
                    case ID_TBL_ZIP_CODE:
                        ++pos;
                        bean.setTblZipCode(rs.getString(pos));
                        break;
                    case ID_TBL_ADDRESS:
                        ++pos;
                        bean.setTblAddress(rs.getString(pos));
                        break;
                    case ID_TBL_CITY:
                        ++pos;
                        bean.setTblCity(rs.getString(pos));
                        break;
                    case ID_TBL_PROVINCE:
                        ++pos;
                        bean.setTblProvince(rs.getString(pos));
                        break;
                    case ID_FK_TBN_ID:
                        ++pos;
                        bean.setFkTbnId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBL_COUNTRY:
                        ++pos;
                        bean.setTblCountry(rs.getString(pos));
                        break;
                    case ID_TBL_NAME:
                        ++pos;
                        bean.setTblName(rs.getString(pos));
                        break;
                    case ID_TBL_LOCATION_ID:
                        ++pos;
                        bean.setTblLocationId(rs.getString(pos));
                        break;
                    case ID_TBP_ID:
                        ++pos;
                        bean.setTbpId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBL_ID:
                        ++pos;
                        bean.setTblId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the tb_location on a TbLocationBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbLocationBean bean
     * @throws DAOException
     */
    //31
    public TbLocationBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        TbLocationBean bean = this.createTbLocationBean();
        try
        {
            bean.setTblComments(rs.getString("tbl_comments"));
            bean.setTblFax(rs.getString("tbl_fax"));
            bean.setTblPhone(rs.getString("tbl_phone"));
            bean.setTblZipCode(rs.getString("tbl_zip_code"));
            bean.setTblAddress(rs.getString("tbl_address"));
            bean.setTblCity(rs.getString("tbl_city"));
            bean.setTblProvince(rs.getString("tbl_province"));
            bean.setFkTbnId(Manager.getInteger(rs, "fk_tbn_id"));
            bean.setTblCountry(rs.getString("tbl_country"));
            bean.setTblName(rs.getString("tbl_name"));
            bean.setTblLocationId(rs.getString("tbl_location_id"));
            bean.setTbpId(Manager.getInteger(rs, "tbp_id"));
            bean.setTblId(Manager.getInteger(rs, "tbl_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TbLocationBean
     * @throws DAOException
     */
    //32
    public TbLocationBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TbLocationBean
     * @throws DAOException
     */
    //33
    public TbLocationBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (TbLocationBean[])v.toArray(new TbLocationBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of TbLocationBean
     * @throws DAOException
     */
    //34
    public TbLocationBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private TbLocationListener listener = null;

    /**
     * Registers a unique TbLocationListener listener.
     */
    //35
    public void registerListener(TbLocationListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the TbLocationBean bean.
     *
     * @param bean the TbLocationBean bean to be saved
     */
    //36
    private void beforeInsert(TbLocationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the TbLocationBean bean.
     *
     * @param bean the TbLocationBean bean to be saved
     */
    //37
    private void afterInsert(TbLocationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the TbLocationBean bean.
     *
     * @param bean the TbLocationBean bean to be updated
     */
    //38
    private void beforeUpdate(TbLocationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the TbLocationBean bean.
     *
     * @param bean the TbLocationBean bean to be updated
     */
    //39
    private void afterUpdate(TbLocationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the TbLocationBean bean.
     *
     * @param bean the TbLocationBean bean to be deleted
     */
    private void beforeDelete(TbLocationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the TbLocationBean bean.
     *
     * @param bean the TbLocationBean bean to be deleted
     */
    private void afterDelete(TbLocationBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
