// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the ViewMenuAccessBean objects.
 * @author sql2java
 */
public class ViewMenuAccessComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ViewMenuAccessComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewMenuAccessComparator(ViewMenuAccessManager.ID_TBMA_APPROVE, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewMenuAccessManager.ID_TBMA_APPROVE
     *   <li>ViewMenuAccessManager.ID_TBMA_VIEW
     *   <li>ViewMenuAccessManager.ID_TBMA_DELETE
     *   <li>ViewMenuAccessManager.ID_TBMA_UPDATE
     *   <li>ViewMenuAccessManager.ID_TBMA_INSERT
     *   <li>ViewMenuAccessManager.ID_TBMA_ENABLED
     *   <li>ViewMenuAccessManager.ID_TBMA_ID
     *   <li>ViewMenuAccessManager.ID_TBM_NAMA_PARENT
     *   <li>ViewMenuAccessManager.ID_TBM_PARENT_ID_PARENT
     *   <li>ViewMenuAccessManager.ID_TBM_ID_PARENT
     *   <li>ViewMenuAccessManager.ID_TBM_DISABLED
     *   <li>ViewMenuAccessManager.ID_TBM_NAMA
     *   <li>ViewMenuAccessManager.ID_TBM_ID
     *   <li>ViewMenuAccessManager.ID_TBJT_NAME
     *   <li>ViewMenuAccessManager.ID_TBJT_ID
     * </ul>
     */
    public ViewMenuAccessComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ViewMenuAccessComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewMenuAccessComparator(ViewMenuAccessManager.ID_TBMA_APPROVE, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewMenuAccessManager.ID_TBMA_APPROVE
     *   <li>ViewMenuAccessManager.ID_TBMA_VIEW
     *   <li>ViewMenuAccessManager.ID_TBMA_DELETE
     *   <li>ViewMenuAccessManager.ID_TBMA_UPDATE
     *   <li>ViewMenuAccessManager.ID_TBMA_INSERT
     *   <li>ViewMenuAccessManager.ID_TBMA_ENABLED
     *   <li>ViewMenuAccessManager.ID_TBMA_ID
     *   <li>ViewMenuAccessManager.ID_TBM_NAMA_PARENT
     *   <li>ViewMenuAccessManager.ID_TBM_PARENT_ID_PARENT
     *   <li>ViewMenuAccessManager.ID_TBM_ID_PARENT
     *   <li>ViewMenuAccessManager.ID_TBM_DISABLED
     *   <li>ViewMenuAccessManager.ID_TBM_NAMA
     *   <li>ViewMenuAccessManager.ID_TBM_ID
     *   <li>ViewMenuAccessManager.ID_TBJT_NAME
     *   <li>ViewMenuAccessManager.ID_TBJT_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ViewMenuAccessComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ViewMenuAccessBean b1 = (ViewMenuAccessBean)pObj1;
        ViewMenuAccessBean b2 = (ViewMenuAccessBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ViewMenuAccessManager.ID_TBMA_APPROVE:
                if (b1.getTbmaApprove() == null && b2.getTbmaApprove() != null) {
                    iReturn = -1;
                } else if (b1.getTbmaApprove() == null && b2.getTbmaApprove() == null) {
                    iReturn = 0;
                } else if (b1.getTbmaApprove() != null && b2.getTbmaApprove() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmaApprove().compareTo(b2.getTbmaApprove());
                }
                break;
            case ViewMenuAccessManager.ID_TBMA_VIEW:
                if (b1.getTbmaView() == null && b2.getTbmaView() != null) {
                    iReturn = -1;
                } else if (b1.getTbmaView() == null && b2.getTbmaView() == null) {
                    iReturn = 0;
                } else if (b1.getTbmaView() != null && b2.getTbmaView() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmaView().compareTo(b2.getTbmaView());
                }
                break;
            case ViewMenuAccessManager.ID_TBMA_DELETE:
                if (b1.getTbmaDelete() == null && b2.getTbmaDelete() != null) {
                    iReturn = -1;
                } else if (b1.getTbmaDelete() == null && b2.getTbmaDelete() == null) {
                    iReturn = 0;
                } else if (b1.getTbmaDelete() != null && b2.getTbmaDelete() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmaDelete().compareTo(b2.getTbmaDelete());
                }
                break;
            case ViewMenuAccessManager.ID_TBMA_UPDATE:
                if (b1.getTbmaUpdate() == null && b2.getTbmaUpdate() != null) {
                    iReturn = -1;
                } else if (b1.getTbmaUpdate() == null && b2.getTbmaUpdate() == null) {
                    iReturn = 0;
                } else if (b1.getTbmaUpdate() != null && b2.getTbmaUpdate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmaUpdate().compareTo(b2.getTbmaUpdate());
                }
                break;
            case ViewMenuAccessManager.ID_TBMA_INSERT:
                if (b1.getTbmaInsert() == null && b2.getTbmaInsert() != null) {
                    iReturn = -1;
                } else if (b1.getTbmaInsert() == null && b2.getTbmaInsert() == null) {
                    iReturn = 0;
                } else if (b1.getTbmaInsert() != null && b2.getTbmaInsert() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmaInsert().compareTo(b2.getTbmaInsert());
                }
                break;
            case ViewMenuAccessManager.ID_TBMA_ENABLED:
                if (b1.getTbmaEnabled() == null && b2.getTbmaEnabled() != null) {
                    iReturn = -1;
                } else if (b1.getTbmaEnabled() == null && b2.getTbmaEnabled() == null) {
                    iReturn = 0;
                } else if (b1.getTbmaEnabled() != null && b2.getTbmaEnabled() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmaEnabled().compareTo(b2.getTbmaEnabled());
                }
                break;
            case ViewMenuAccessManager.ID_TBMA_ID:
                if (b1.getTbmaId() == null && b2.getTbmaId() != null) {
                    iReturn = -1;
                } else if (b1.getTbmaId() == null && b2.getTbmaId() == null) {
                    iReturn = 0;
                } else if (b1.getTbmaId() != null && b2.getTbmaId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmaId().compareTo(b2.getTbmaId());
                }
                break;
            case ViewMenuAccessManager.ID_TBM_NAMA_PARENT:
                if (b1.getTbmNamaParent() == null && b2.getTbmNamaParent() != null) {
                    iReturn = -1;
                } else if (b1.getTbmNamaParent() == null && b2.getTbmNamaParent() == null) {
                    iReturn = 0;
                } else if (b1.getTbmNamaParent() != null && b2.getTbmNamaParent() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmNamaParent().compareTo(b2.getTbmNamaParent());
                }
                break;
            case ViewMenuAccessManager.ID_TBM_PARENT_ID_PARENT:
                if (b1.getTbmParentIdParent() == null && b2.getTbmParentIdParent() != null) {
                    iReturn = -1;
                } else if (b1.getTbmParentIdParent() == null && b2.getTbmParentIdParent() == null) {
                    iReturn = 0;
                } else if (b1.getTbmParentIdParent() != null && b2.getTbmParentIdParent() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmParentIdParent().compareTo(b2.getTbmParentIdParent());
                }
                break;
            case ViewMenuAccessManager.ID_TBM_ID_PARENT:
                if (b1.getTbmIdParent() == null && b2.getTbmIdParent() != null) {
                    iReturn = -1;
                } else if (b1.getTbmIdParent() == null && b2.getTbmIdParent() == null) {
                    iReturn = 0;
                } else if (b1.getTbmIdParent() != null && b2.getTbmIdParent() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmIdParent().compareTo(b2.getTbmIdParent());
                }
                break;
            case ViewMenuAccessManager.ID_TBM_DISABLED:
                if (b1.getTbmDisabled() == null && b2.getTbmDisabled() != null) {
                    iReturn = -1;
                } else if (b1.getTbmDisabled() == null && b2.getTbmDisabled() == null) {
                    iReturn = 0;
                } else if (b1.getTbmDisabled() != null && b2.getTbmDisabled() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmDisabled().compareTo(b2.getTbmDisabled());
                }
                break;
            case ViewMenuAccessManager.ID_TBM_NAMA:
                if (b1.getTbmNama() == null && b2.getTbmNama() != null) {
                    iReturn = -1;
                } else if (b1.getTbmNama() == null && b2.getTbmNama() == null) {
                    iReturn = 0;
                } else if (b1.getTbmNama() != null && b2.getTbmNama() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmNama().compareTo(b2.getTbmNama());
                }
                break;
            case ViewMenuAccessManager.ID_TBM_ID:
                if (b1.getTbmId() == null && b2.getTbmId() != null) {
                    iReturn = -1;
                } else if (b1.getTbmId() == null && b2.getTbmId() == null) {
                    iReturn = 0;
                } else if (b1.getTbmId() != null && b2.getTbmId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbmId().compareTo(b2.getTbmId());
                }
                break;
            case ViewMenuAccessManager.ID_TBJT_NAME:
                if (b1.getTbjtName() == null && b2.getTbjtName() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtName() == null && b2.getTbjtName() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtName() != null && b2.getTbjtName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtName().compareTo(b2.getTbjtName());
                }
                break;
            case ViewMenuAccessManager.ID_TBJT_ID:
                if (b1.getTbjtId() == null && b2.getTbjtId() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtId() == null && b2.getTbjtId() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtId() != null && b2.getTbjtId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtId().compareTo(b2.getTbjtId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
