// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the ViewTimesheetProjectBean objects.
 * @author sql2java
 */
public class ViewTimesheetProjectComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ViewTimesheetProjectComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewTimesheetProjectComparator(ViewTimesheetProjectManager.ID_TBT_APPROVAL_STATUS, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewTimesheetProjectManager.ID_TBT_APPROVAL_STATUS
     *   <li>ViewTimesheetProjectManager.ID_TBT_GRAND_TOTAL_HOUR
     *   <li>ViewTimesheetProjectManager.ID_SUM_TBT_TOTAL_HOUR
     *   <li>ViewTimesheetProjectManager.ID_TBT_START_OF_WEEK
     *   <li>ViewTimesheetProjectManager.ID_TBPA_PAYABLE
     *   <li>ViewTimesheetProjectManager.ID_TBPA_NAME
     *   <li>ViewTimesheetProjectManager.ID_TBPA_ID
     *   <li>ViewTimesheetProjectManager.ID_TBPAG_NAME
     *   <li>ViewTimesheetProjectManager.ID_TBPAG_PROJECT_ACTIVITIES_GROUP_ID
     *   <li>ViewTimesheetProjectManager.ID_TBPAG_ID
     *   <li>ViewTimesheetProjectManager.ID_TBP_NAME
     *   <li>ViewTimesheetProjectManager.ID_TBP_PROJECT_ID
     *   <li>ViewTimesheetProjectManager.ID_TBP_ID
     *   <li>ViewTimesheetProjectManager.ID_TBC_CUSTOMER_ID
     *   <li>ViewTimesheetProjectManager.ID_TBC_NAME
     *   <li>ViewTimesheetProjectManager.ID_TBC_ID
     *   <li>ViewTimesheetProjectManager.ID_TBE_NAME
     *   <li>ViewTimesheetProjectManager.ID_TBE_ID
     * </ul>
     */
    public ViewTimesheetProjectComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ViewTimesheetProjectComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewTimesheetProjectComparator(ViewTimesheetProjectManager.ID_TBT_APPROVAL_STATUS, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewTimesheetProjectManager.ID_TBT_APPROVAL_STATUS
     *   <li>ViewTimesheetProjectManager.ID_TBT_GRAND_TOTAL_HOUR
     *   <li>ViewTimesheetProjectManager.ID_SUM_TBT_TOTAL_HOUR
     *   <li>ViewTimesheetProjectManager.ID_TBT_START_OF_WEEK
     *   <li>ViewTimesheetProjectManager.ID_TBPA_PAYABLE
     *   <li>ViewTimesheetProjectManager.ID_TBPA_NAME
     *   <li>ViewTimesheetProjectManager.ID_TBPA_ID
     *   <li>ViewTimesheetProjectManager.ID_TBPAG_NAME
     *   <li>ViewTimesheetProjectManager.ID_TBPAG_PROJECT_ACTIVITIES_GROUP_ID
     *   <li>ViewTimesheetProjectManager.ID_TBPAG_ID
     *   <li>ViewTimesheetProjectManager.ID_TBP_NAME
     *   <li>ViewTimesheetProjectManager.ID_TBP_PROJECT_ID
     *   <li>ViewTimesheetProjectManager.ID_TBP_ID
     *   <li>ViewTimesheetProjectManager.ID_TBC_CUSTOMER_ID
     *   <li>ViewTimesheetProjectManager.ID_TBC_NAME
     *   <li>ViewTimesheetProjectManager.ID_TBC_ID
     *   <li>ViewTimesheetProjectManager.ID_TBE_NAME
     *   <li>ViewTimesheetProjectManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ViewTimesheetProjectComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ViewTimesheetProjectBean b1 = (ViewTimesheetProjectBean)pObj1;
        ViewTimesheetProjectBean b2 = (ViewTimesheetProjectBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ViewTimesheetProjectManager.ID_TBT_APPROVAL_STATUS:
                if (b1.getTbtApprovalStatus() == null && b2.getTbtApprovalStatus() != null) {
                    iReturn = -1;
                } else if (b1.getTbtApprovalStatus() == null && b2.getTbtApprovalStatus() == null) {
                    iReturn = 0;
                } else if (b1.getTbtApprovalStatus() != null && b2.getTbtApprovalStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtApprovalStatus().compareTo(b2.getTbtApprovalStatus());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBT_GRAND_TOTAL_HOUR:
                if (b1.getTbtGrandTotalHour() == null && b2.getTbtGrandTotalHour() != null) {
                    iReturn = -1;
                } else if (b1.getTbtGrandTotalHour() == null && b2.getTbtGrandTotalHour() == null) {
                    iReturn = 0;
                } else if (b1.getTbtGrandTotalHour() != null && b2.getTbtGrandTotalHour() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtGrandTotalHour().compareTo(b2.getTbtGrandTotalHour());
                }
                break;
            case ViewTimesheetProjectManager.ID_SUM_TBT_TOTAL_HOUR:
                if (b1.getSumTbtTotalHour() == null && b2.getSumTbtTotalHour() != null) {
                    iReturn = -1;
                } else if (b1.getSumTbtTotalHour() == null && b2.getSumTbtTotalHour() == null) {
                    iReturn = 0;
                } else if (b1.getSumTbtTotalHour() != null && b2.getSumTbtTotalHour() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getSumTbtTotalHour().compareTo(b2.getSumTbtTotalHour());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBT_START_OF_WEEK:
                if (b1.getTbtStartOfWeek() == null && b2.getTbtStartOfWeek() != null) {
                    iReturn = -1;
                } else if (b1.getTbtStartOfWeek() == null && b2.getTbtStartOfWeek() == null) {
                    iReturn = 0;
                } else if (b1.getTbtStartOfWeek() != null && b2.getTbtStartOfWeek() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbtStartOfWeek().compareTo(b2.getTbtStartOfWeek());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBPA_PAYABLE:
                if (b1.getTbpaPayable() == null && b2.getTbpaPayable() != null) {
                    iReturn = -1;
                } else if (b1.getTbpaPayable() == null && b2.getTbpaPayable() == null) {
                    iReturn = 0;
                } else if (b1.getTbpaPayable() != null && b2.getTbpaPayable() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpaPayable().compareTo(b2.getTbpaPayable());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBPA_NAME:
                if (b1.getTbpaName() == null && b2.getTbpaName() != null) {
                    iReturn = -1;
                } else if (b1.getTbpaName() == null && b2.getTbpaName() == null) {
                    iReturn = 0;
                } else if (b1.getTbpaName() != null && b2.getTbpaName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpaName().compareTo(b2.getTbpaName());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBPA_ID:
                if (b1.getTbpaId() == null && b2.getTbpaId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpaId() == null && b2.getTbpaId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpaId() != null && b2.getTbpaId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpaId().compareTo(b2.getTbpaId());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBPAG_NAME:
                if (b1.getTbpagName() == null && b2.getTbpagName() != null) {
                    iReturn = -1;
                } else if (b1.getTbpagName() == null && b2.getTbpagName() == null) {
                    iReturn = 0;
                } else if (b1.getTbpagName() != null && b2.getTbpagName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpagName().compareTo(b2.getTbpagName());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBPAG_PROJECT_ACTIVITIES_GROUP_ID:
                if (b1.getTbpagProjectActivitiesGroupId() == null && b2.getTbpagProjectActivitiesGroupId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpagProjectActivitiesGroupId() == null && b2.getTbpagProjectActivitiesGroupId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpagProjectActivitiesGroupId() != null && b2.getTbpagProjectActivitiesGroupId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpagProjectActivitiesGroupId().compareTo(b2.getTbpagProjectActivitiesGroupId());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBPAG_ID:
                if (b1.getTbpagId() == null && b2.getTbpagId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpagId() == null && b2.getTbpagId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpagId() != null && b2.getTbpagId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpagId().compareTo(b2.getTbpagId());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBP_NAME:
                if (b1.getTbpName() == null && b2.getTbpName() != null) {
                    iReturn = -1;
                } else if (b1.getTbpName() == null && b2.getTbpName() == null) {
                    iReturn = 0;
                } else if (b1.getTbpName() != null && b2.getTbpName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpName().compareTo(b2.getTbpName());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBP_PROJECT_ID:
                if (b1.getTbpProjectId() == null && b2.getTbpProjectId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpProjectId() == null && b2.getTbpProjectId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpProjectId() != null && b2.getTbpProjectId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpProjectId().compareTo(b2.getTbpProjectId());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBP_ID:
                if (b1.getTbpId() == null && b2.getTbpId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpId() == null && b2.getTbpId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpId() != null && b2.getTbpId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpId().compareTo(b2.getTbpId());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBC_CUSTOMER_ID:
                if (b1.getTbcCustomerId() == null && b2.getTbcCustomerId() != null) {
                    iReturn = -1;
                } else if (b1.getTbcCustomerId() == null && b2.getTbcCustomerId() == null) {
                    iReturn = 0;
                } else if (b1.getTbcCustomerId() != null && b2.getTbcCustomerId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcCustomerId().compareTo(b2.getTbcCustomerId());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBC_NAME:
                if (b1.getTbcName() == null && b2.getTbcName() != null) {
                    iReturn = -1;
                } else if (b1.getTbcName() == null && b2.getTbcName() == null) {
                    iReturn = 0;
                } else if (b1.getTbcName() != null && b2.getTbcName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcName().compareTo(b2.getTbcName());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBC_ID:
                if (b1.getTbcId() == null && b2.getTbcId() != null) {
                    iReturn = -1;
                } else if (b1.getTbcId() == null && b2.getTbcId() == null) {
                    iReturn = 0;
                } else if (b1.getTbcId() != null && b2.getTbcId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcId().compareTo(b2.getTbcId());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBE_NAME:
                if (b1.getTbeName() == null && b2.getTbeName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeName() == null && b2.getTbeName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeName() != null && b2.getTbeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeName().compareTo(b2.getTbeName());
                }
                break;
            case ViewTimesheetProjectManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
