// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewMenuAccessAdminBean is a mapping of view_menu_access_admin Table.
 * @author sql2java
*/
public class ViewMenuAccessAdminBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 8122081845443174409L;
	
    private Integer tbmaaApprove;

    private boolean tbmaaApproveIsModified = false;
    private boolean tbmaaApproveIsInitialized = false;

    private Integer tbmaaView;

    private boolean tbmaaViewIsModified = false;
    private boolean tbmaaViewIsInitialized = false;

    private Integer tbmaaDelete;

    private boolean tbmaaDeleteIsModified = false;
    private boolean tbmaaDeleteIsInitialized = false;

    private Integer tbmaaUpdate;

    private boolean tbmaaUpdateIsModified = false;
    private boolean tbmaaUpdateIsInitialized = false;

    private Integer tbmaaInsert;

    private boolean tbmaaInsertIsModified = false;
    private boolean tbmaaInsertIsInitialized = false;

    private Integer tbmaaEnabled;

    private boolean tbmaaEnabledIsModified = false;
    private boolean tbmaaEnabledIsInitialized = false;

    private Integer tbmaaId;

    private boolean tbmaaIdIsModified = false;
    private boolean tbmaaIdIsInitialized = false;

    private String tbmNamaParent;

    private boolean tbmNamaParentIsModified = false;
    private boolean tbmNamaParentIsInitialized = false;

    private Integer tbmParentIdParent;

    private boolean tbmParentIdParentIsModified = false;
    private boolean tbmParentIdParentIsInitialized = false;

    private Integer tbmIdParent;

    private boolean tbmIdParentIsModified = false;
    private boolean tbmIdParentIsInitialized = false;

    private Integer tbmDisabled;

    private boolean tbmDisabledIsModified = false;
    private boolean tbmDisabledIsInitialized = false;

    private String tbmNama;

    private boolean tbmNamaIsModified = false;
    private boolean tbmNamaIsInitialized = false;

    private Integer tbmId;

    private boolean tbmIdIsModified = false;
    private boolean tbmIdIsInitialized = false;

    private String tbaugName;

    private boolean tbaugNameIsModified = false;
    private boolean tbaugNameIsInitialized = false;

    private Integer tbaugId;

    private boolean tbaugIdIsModified = false;
    private boolean tbaugIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewMenuAccessAdminBean is via the createViewMenuAccessAdminBean method in ViewMenuAccessAdminManager or
     * via the factory class ViewMenuAccessAdminFactory create method
     */
    protected ViewMenuAccessAdminBean()
    {
    }

    /**
     * Getter method for tbmaaApprove.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbmaa_approve</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaApprove
     */
    public Integer getTbmaaApprove()
    {
        return tbmaaApprove;
    }

    /**
     * Setter method for tbmaaApprove.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaApprove
     */
    public void setTbmaaApprove(Integer newVal)
    {
        if ((newVal != null && tbmaaApprove != null && (newVal.compareTo(tbmaaApprove) == 0)) ||
            (newVal == null && tbmaaApprove == null && tbmaaApproveIsInitialized)) {
            return;
        }
        tbmaaApprove = newVal;
        tbmaaApproveIsModified = true;
        tbmaaApproveIsInitialized = true;
    }

    /**
     * Setter method for tbmaaApprove.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaApprove
     */
    public void setTbmaaApprove(int newVal)
    {
        setTbmaaApprove(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaApprove has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaApproveModified()
    {
        return tbmaaApproveIsModified;
    }

    /**
     * Determines if the tbmaaApprove has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaApproveInitialized()
    {
        return tbmaaApproveIsInitialized;
    }

    /**
     * Getter method for tbmaaView.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbmaa_view</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaView
     */
    public Integer getTbmaaView()
    {
        return tbmaaView;
    }

    /**
     * Setter method for tbmaaView.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaView
     */
    public void setTbmaaView(Integer newVal)
    {
        if ((newVal != null && tbmaaView != null && (newVal.compareTo(tbmaaView) == 0)) ||
            (newVal == null && tbmaaView == null && tbmaaViewIsInitialized)) {
            return;
        }
        tbmaaView = newVal;
        tbmaaViewIsModified = true;
        tbmaaViewIsInitialized = true;
    }

    /**
     * Setter method for tbmaaView.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaView
     */
    public void setTbmaaView(int newVal)
    {
        setTbmaaView(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaView has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaViewModified()
    {
        return tbmaaViewIsModified;
    }

    /**
     * Determines if the tbmaaView has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaViewInitialized()
    {
        return tbmaaViewIsInitialized;
    }

    /**
     * Getter method for tbmaaDelete.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbmaa_delete</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaDelete
     */
    public Integer getTbmaaDelete()
    {
        return tbmaaDelete;
    }

    /**
     * Setter method for tbmaaDelete.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaDelete
     */
    public void setTbmaaDelete(Integer newVal)
    {
        if ((newVal != null && tbmaaDelete != null && (newVal.compareTo(tbmaaDelete) == 0)) ||
            (newVal == null && tbmaaDelete == null && tbmaaDeleteIsInitialized)) {
            return;
        }
        tbmaaDelete = newVal;
        tbmaaDeleteIsModified = true;
        tbmaaDeleteIsInitialized = true;
    }

    /**
     * Setter method for tbmaaDelete.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaDelete
     */
    public void setTbmaaDelete(int newVal)
    {
        setTbmaaDelete(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaDelete has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaDeleteModified()
    {
        return tbmaaDeleteIsModified;
    }

    /**
     * Determines if the tbmaaDelete has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaDeleteInitialized()
    {
        return tbmaaDeleteIsInitialized;
    }

    /**
     * Getter method for tbmaaUpdate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbmaa_update</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaUpdate
     */
    public Integer getTbmaaUpdate()
    {
        return tbmaaUpdate;
    }

    /**
     * Setter method for tbmaaUpdate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaUpdate
     */
    public void setTbmaaUpdate(Integer newVal)
    {
        if ((newVal != null && tbmaaUpdate != null && (newVal.compareTo(tbmaaUpdate) == 0)) ||
            (newVal == null && tbmaaUpdate == null && tbmaaUpdateIsInitialized)) {
            return;
        }
        tbmaaUpdate = newVal;
        tbmaaUpdateIsModified = true;
        tbmaaUpdateIsInitialized = true;
    }

    /**
     * Setter method for tbmaaUpdate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaUpdate
     */
    public void setTbmaaUpdate(int newVal)
    {
        setTbmaaUpdate(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaUpdate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaUpdateModified()
    {
        return tbmaaUpdateIsModified;
    }

    /**
     * Determines if the tbmaaUpdate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaUpdateInitialized()
    {
        return tbmaaUpdateIsInitialized;
    }

    /**
     * Getter method for tbmaaInsert.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbmaa_insert</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaInsert
     */
    public Integer getTbmaaInsert()
    {
        return tbmaaInsert;
    }

    /**
     * Setter method for tbmaaInsert.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaInsert
     */
    public void setTbmaaInsert(Integer newVal)
    {
        if ((newVal != null && tbmaaInsert != null && (newVal.compareTo(tbmaaInsert) == 0)) ||
            (newVal == null && tbmaaInsert == null && tbmaaInsertIsInitialized)) {
            return;
        }
        tbmaaInsert = newVal;
        tbmaaInsertIsModified = true;
        tbmaaInsertIsInitialized = true;
    }

    /**
     * Setter method for tbmaaInsert.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaInsert
     */
    public void setTbmaaInsert(int newVal)
    {
        setTbmaaInsert(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaInsert has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaInsertModified()
    {
        return tbmaaInsertIsModified;
    }

    /**
     * Determines if the tbmaaInsert has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaInsertInitialized()
    {
        return tbmaaInsertIsInitialized;
    }

    /**
     * Getter method for tbmaaEnabled.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbmaa_enabled</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaEnabled
     */
    public Integer getTbmaaEnabled()
    {
        return tbmaaEnabled;
    }

    /**
     * Setter method for tbmaaEnabled.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaEnabled
     */
    public void setTbmaaEnabled(Integer newVal)
    {
        if ((newVal != null && tbmaaEnabled != null && (newVal.compareTo(tbmaaEnabled) == 0)) ||
            (newVal == null && tbmaaEnabled == null && tbmaaEnabledIsInitialized)) {
            return;
        }
        tbmaaEnabled = newVal;
        tbmaaEnabledIsModified = true;
        tbmaaEnabledIsInitialized = true;
    }

    /**
     * Setter method for tbmaaEnabled.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaEnabled
     */
    public void setTbmaaEnabled(int newVal)
    {
        setTbmaaEnabled(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaEnabled has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaEnabledModified()
    {
        return tbmaaEnabledIsModified;
    }

    /**
     * Determines if the tbmaaEnabled has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaEnabledInitialized()
    {
        return tbmaaEnabledIsInitialized;
    }

    /**
     * Getter method for tbmaaId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbmaa_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmaaId
     */
    public Integer getTbmaaId()
    {
        return tbmaaId;
    }

    /**
     * Setter method for tbmaaId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmaaId
     */
    public void setTbmaaId(Integer newVal)
    {
        if ((newVal != null && tbmaaId != null && (newVal.compareTo(tbmaaId) == 0)) ||
            (newVal == null && tbmaaId == null && tbmaaIdIsInitialized)) {
            return;
        }
        tbmaaId = newVal;
        tbmaaIdIsModified = true;
        tbmaaIdIsInitialized = true;
    }

    /**
     * Setter method for tbmaaId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmaaId
     */
    public void setTbmaaId(int newVal)
    {
        setTbmaaId(new Integer(newVal));
    }

    /**
     * Determines if the tbmaaId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmaaIdModified()
    {
        return tbmaaIdIsModified;
    }

    /**
     * Determines if the tbmaaId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmaaIdInitialized()
    {
        return tbmaaIdIsInitialized;
    }

    /**
     * Getter method for tbmNamaParent.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbm_nama_parent</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbmNamaParent
     */
    public String getTbmNamaParent()
    {
        return tbmNamaParent;
    }

    /**
     * Setter method for tbmNamaParent.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmNamaParent
     */
    public void setTbmNamaParent(String newVal)
    {
        if ((newVal != null && tbmNamaParent != null && (newVal.compareTo(tbmNamaParent) == 0)) ||
            (newVal == null && tbmNamaParent == null && tbmNamaParentIsInitialized)) {
            return;
        }
        tbmNamaParent = newVal;
        tbmNamaParentIsModified = true;
        tbmNamaParentIsInitialized = true;
    }

    /**
     * Determines if the tbmNamaParent has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmNamaParentModified()
    {
        return tbmNamaParentIsModified;
    }

    /**
     * Determines if the tbmNamaParent has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmNamaParentInitialized()
    {
        return tbmNamaParentIsInitialized;
    }

    /**
     * Getter method for tbmParentIdParent.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbm_parent_id_parent</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmParentIdParent
     */
    public Integer getTbmParentIdParent()
    {
        return tbmParentIdParent;
    }

    /**
     * Setter method for tbmParentIdParent.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmParentIdParent
     */
    public void setTbmParentIdParent(Integer newVal)
    {
        if ((newVal != null && tbmParentIdParent != null && (newVal.compareTo(tbmParentIdParent) == 0)) ||
            (newVal == null && tbmParentIdParent == null && tbmParentIdParentIsInitialized)) {
            return;
        }
        tbmParentIdParent = newVal;
        tbmParentIdParentIsModified = true;
        tbmParentIdParentIsInitialized = true;
    }

    /**
     * Setter method for tbmParentIdParent.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmParentIdParent
     */
    public void setTbmParentIdParent(int newVal)
    {
        setTbmParentIdParent(new Integer(newVal));
    }

    /**
     * Determines if the tbmParentIdParent has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmParentIdParentModified()
    {
        return tbmParentIdParentIsModified;
    }

    /**
     * Determines if the tbmParentIdParent has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmParentIdParentInitialized()
    {
        return tbmParentIdParentIsInitialized;
    }

    /**
     * Getter method for tbmIdParent.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbm_id_parent</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmIdParent
     */
    public Integer getTbmIdParent()
    {
        return tbmIdParent;
    }

    /**
     * Setter method for tbmIdParent.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmIdParent
     */
    public void setTbmIdParent(Integer newVal)
    {
        if ((newVal != null && tbmIdParent != null && (newVal.compareTo(tbmIdParent) == 0)) ||
            (newVal == null && tbmIdParent == null && tbmIdParentIsInitialized)) {
            return;
        }
        tbmIdParent = newVal;
        tbmIdParentIsModified = true;
        tbmIdParentIsInitialized = true;
    }

    /**
     * Setter method for tbmIdParent.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmIdParent
     */
    public void setTbmIdParent(int newVal)
    {
        setTbmIdParent(new Integer(newVal));
    }

    /**
     * Determines if the tbmIdParent has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmIdParentModified()
    {
        return tbmIdParentIsModified;
    }

    /**
     * Determines if the tbmIdParent has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmIdParentInitialized()
    {
        return tbmIdParentIsInitialized;
    }

    /**
     * Getter method for tbmDisabled.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbm_disabled</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmDisabled
     */
    public Integer getTbmDisabled()
    {
        return tbmDisabled;
    }

    /**
     * Setter method for tbmDisabled.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmDisabled
     */
    public void setTbmDisabled(Integer newVal)
    {
        if ((newVal != null && tbmDisabled != null && (newVal.compareTo(tbmDisabled) == 0)) ||
            (newVal == null && tbmDisabled == null && tbmDisabledIsInitialized)) {
            return;
        }
        tbmDisabled = newVal;
        tbmDisabledIsModified = true;
        tbmDisabledIsInitialized = true;
    }

    /**
     * Setter method for tbmDisabled.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmDisabled
     */
    public void setTbmDisabled(int newVal)
    {
        setTbmDisabled(new Integer(newVal));
    }

    /**
     * Determines if the tbmDisabled has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmDisabledModified()
    {
        return tbmDisabledIsModified;
    }

    /**
     * Determines if the tbmDisabled has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmDisabledInitialized()
    {
        return tbmDisabledIsInitialized;
    }

    /**
     * Getter method for tbmNama.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbm_nama</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbmNama
     */
    public String getTbmNama()
    {
        return tbmNama;
    }

    /**
     * Setter method for tbmNama.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmNama
     */
    public void setTbmNama(String newVal)
    {
        if ((newVal != null && tbmNama != null && (newVal.compareTo(tbmNama) == 0)) ||
            (newVal == null && tbmNama == null && tbmNamaIsInitialized)) {
            return;
        }
        tbmNama = newVal;
        tbmNamaIsModified = true;
        tbmNamaIsInitialized = true;
    }

    /**
     * Determines if the tbmNama has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmNamaModified()
    {
        return tbmNamaIsModified;
    }

    /**
     * Determines if the tbmNama has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmNamaInitialized()
    {
        return tbmNamaIsInitialized;
    }

    /**
     * Getter method for tbmId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbm_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbmId
     */
    public Integer getTbmId()
    {
        return tbmId;
    }

    /**
     * Setter method for tbmId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbmId
     */
    public void setTbmId(Integer newVal)
    {
        if ((newVal != null && tbmId != null && (newVal.compareTo(tbmId) == 0)) ||
            (newVal == null && tbmId == null && tbmIdIsInitialized)) {
            return;
        }
        tbmId = newVal;
        tbmIdIsModified = true;
        tbmIdIsInitialized = true;
    }

    /**
     * Setter method for tbmId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbmId
     */
    public void setTbmId(int newVal)
    {
        setTbmId(new Integer(newVal));
    }

    /**
     * Determines if the tbmId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbmIdModified()
    {
        return tbmIdIsModified;
    }

    /**
     * Determines if the tbmId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbmIdInitialized()
    {
        return tbmIdIsInitialized;
    }

    /**
     * Getter method for tbaugName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbaug_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaugName
     */
    public String getTbaugName()
    {
        return tbaugName;
    }

    /**
     * Setter method for tbaugName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaugName
     */
    public void setTbaugName(String newVal)
    {
        if ((newVal != null && tbaugName != null && (newVal.compareTo(tbaugName) == 0)) ||
            (newVal == null && tbaugName == null && tbaugNameIsInitialized)) {
            return;
        }
        tbaugName = newVal;
        tbaugNameIsModified = true;
        tbaugNameIsInitialized = true;
    }

    /**
     * Determines if the tbaugName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaugNameModified()
    {
        return tbaugNameIsModified;
    }

    /**
     * Determines if the tbaugName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaugNameInitialized()
    {
        return tbaugNameIsInitialized;
    }

    /**
     * Getter method for tbaugId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_menu_access_admin.tbaug_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaugId
     */
    public Integer getTbaugId()
    {
        return tbaugId;
    }

    /**
     * Setter method for tbaugId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaugId
     */
    public void setTbaugId(Integer newVal)
    {
        if ((newVal != null && tbaugId != null && (newVal.compareTo(tbaugId) == 0)) ||
            (newVal == null && tbaugId == null && tbaugIdIsInitialized)) {
            return;
        }
        tbaugId = newVal;
        tbaugIdIsModified = true;
        tbaugIdIsInitialized = true;
    }

    /**
     * Setter method for tbaugId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaugId
     */
    public void setTbaugId(int newVal)
    {
        setTbaugId(new Integer(newVal));
    }

    /**
     * Determines if the tbaugId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaugIdModified()
    {
        return tbaugIdIsModified;
    }

    /**
     * Determines if the tbaugId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaugIdInitialized()
    {
        return tbaugIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbmaaApproveIsModified 		|| tbmaaViewIsModified  		|| tbmaaDeleteIsModified  		|| tbmaaUpdateIsModified  		|| tbmaaInsertIsModified  		|| tbmaaEnabledIsModified  		|| tbmaaIdIsModified  		|| tbmNamaParentIsModified  		|| tbmParentIdParentIsModified  		|| tbmIdParentIsModified  		|| tbmDisabledIsModified  		|| tbmNamaIsModified  		|| tbmIdIsModified  		|| tbaugNameIsModified  		|| tbaugIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbmaaApproveIsModified = false;
        tbmaaViewIsModified = false;
        tbmaaDeleteIsModified = false;
        tbmaaUpdateIsModified = false;
        tbmaaInsertIsModified = false;
        tbmaaEnabledIsModified = false;
        tbmaaIdIsModified = false;
        tbmNamaParentIsModified = false;
        tbmParentIdParentIsModified = false;
        tbmIdParentIsModified = false;
        tbmDisabledIsModified = false;
        tbmNamaIsModified = false;
        tbmIdIsModified = false;
        tbaugNameIsModified = false;
        tbaugIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewMenuAccessAdminBean bean)
    {
        setTbmaaApprove(bean.getTbmaaApprove());
        setTbmaaView(bean.getTbmaaView());
        setTbmaaDelete(bean.getTbmaaDelete());
        setTbmaaUpdate(bean.getTbmaaUpdate());
        setTbmaaInsert(bean.getTbmaaInsert());
        setTbmaaEnabled(bean.getTbmaaEnabled());
        setTbmaaId(bean.getTbmaaId());
        setTbmNamaParent(bean.getTbmNamaParent());
        setTbmParentIdParent(bean.getTbmParentIdParent());
        setTbmIdParent(bean.getTbmIdParent());
        setTbmDisabled(bean.getTbmDisabled());
        setTbmNama(bean.getTbmNama());
        setTbmId(bean.getTbmId());
        setTbaugName(bean.getTbaugName());
        setTbaugId(bean.getTbaugId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbmaa_approve", getTbmaaApprove() == null ? "" : getTbmaaApprove().toString());
        dictionnary.put("tbmaa_view", getTbmaaView() == null ? "" : getTbmaaView().toString());
        dictionnary.put("tbmaa_delete", getTbmaaDelete() == null ? "" : getTbmaaDelete().toString());
        dictionnary.put("tbmaa_update", getTbmaaUpdate() == null ? "" : getTbmaaUpdate().toString());
        dictionnary.put("tbmaa_insert", getTbmaaInsert() == null ? "" : getTbmaaInsert().toString());
        dictionnary.put("tbmaa_enabled", getTbmaaEnabled() == null ? "" : getTbmaaEnabled().toString());
        dictionnary.put("tbmaa_id", getTbmaaId() == null ? "" : getTbmaaId().toString());
        dictionnary.put("tbm_nama_parent", getTbmNamaParent() == null ? "" : getTbmNamaParent().toString());
        dictionnary.put("tbm_parent_id_parent", getTbmParentIdParent() == null ? "" : getTbmParentIdParent().toString());
        dictionnary.put("tbm_id_parent", getTbmIdParent() == null ? "" : getTbmIdParent().toString());
        dictionnary.put("tbm_disabled", getTbmDisabled() == null ? "" : getTbmDisabled().toString());
        dictionnary.put("tbm_nama", getTbmNama() == null ? "" : getTbmNama().toString());
        dictionnary.put("tbm_id", getTbmId() == null ? "" : getTbmId().toString());
        dictionnary.put("tbaug_name", getTbaugName() == null ? "" : getTbaugName().toString());
        dictionnary.put("tbaug_id", getTbaugId() == null ? "" : getTbaugId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbmaa_approve".equalsIgnoreCase(column) || "tbmaaApprove".equalsIgnoreCase(column)) {
            return getTbmaaApprove() == null ? "" : getTbmaaApprove().toString();
        } else if ("tbmaa_view".equalsIgnoreCase(column) || "tbmaaView".equalsIgnoreCase(column)) {
            return getTbmaaView() == null ? "" : getTbmaaView().toString();
        } else if ("tbmaa_delete".equalsIgnoreCase(column) || "tbmaaDelete".equalsIgnoreCase(column)) {
            return getTbmaaDelete() == null ? "" : getTbmaaDelete().toString();
        } else if ("tbmaa_update".equalsIgnoreCase(column) || "tbmaaUpdate".equalsIgnoreCase(column)) {
            return getTbmaaUpdate() == null ? "" : getTbmaaUpdate().toString();
        } else if ("tbmaa_insert".equalsIgnoreCase(column) || "tbmaaInsert".equalsIgnoreCase(column)) {
            return getTbmaaInsert() == null ? "" : getTbmaaInsert().toString();
        } else if ("tbmaa_enabled".equalsIgnoreCase(column) || "tbmaaEnabled".equalsIgnoreCase(column)) {
            return getTbmaaEnabled() == null ? "" : getTbmaaEnabled().toString();
        } else if ("tbmaa_id".equalsIgnoreCase(column) || "tbmaaId".equalsIgnoreCase(column)) {
            return getTbmaaId() == null ? "" : getTbmaaId().toString();
        } else if ("tbm_nama_parent".equalsIgnoreCase(column) || "tbmNamaParent".equalsIgnoreCase(column)) {
            return getTbmNamaParent() == null ? "" : getTbmNamaParent().toString();
        } else if ("tbm_parent_id_parent".equalsIgnoreCase(column) || "tbmParentIdParent".equalsIgnoreCase(column)) {
            return getTbmParentIdParent() == null ? "" : getTbmParentIdParent().toString();
        } else if ("tbm_id_parent".equalsIgnoreCase(column) || "tbmIdParent".equalsIgnoreCase(column)) {
            return getTbmIdParent() == null ? "" : getTbmIdParent().toString();
        } else if ("tbm_disabled".equalsIgnoreCase(column) || "tbmDisabled".equalsIgnoreCase(column)) {
            return getTbmDisabled() == null ? "" : getTbmDisabled().toString();
        } else if ("tbm_nama".equalsIgnoreCase(column) || "tbmNama".equalsIgnoreCase(column)) {
            return getTbmNama() == null ? "" : getTbmNama().toString();
        } else if ("tbm_id".equalsIgnoreCase(column) || "tbmId".equalsIgnoreCase(column)) {
            return getTbmId() == null ? "" : getTbmId().toString();
        } else if ("tbaug_name".equalsIgnoreCase(column) || "tbaugName".equalsIgnoreCase(column)) {
            return getTbaugName() == null ? "" : getTbaugName().toString();
        } else if ("tbaug_id".equalsIgnoreCase(column) || "tbaugId".equalsIgnoreCase(column)) {
            return getTbaugId() == null ? "" : getTbaugId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewMenuAccessAdminBean)) {
            return false;
        }

		ViewMenuAccessAdminBean obj = (ViewMenuAccessAdminBean) object;
		return new EqualsBuilder()
            .append(getTbmaaApprove(), obj.getTbmaaApprove())
            .append(getTbmaaView(), obj.getTbmaaView())
            .append(getTbmaaDelete(), obj.getTbmaaDelete())
            .append(getTbmaaUpdate(), obj.getTbmaaUpdate())
            .append(getTbmaaInsert(), obj.getTbmaaInsert())
            .append(getTbmaaEnabled(), obj.getTbmaaEnabled())
            .append(getTbmaaId(), obj.getTbmaaId())
            .append(getTbmNamaParent(), obj.getTbmNamaParent())
            .append(getTbmParentIdParent(), obj.getTbmParentIdParent())
            .append(getTbmIdParent(), obj.getTbmIdParent())
            .append(getTbmDisabled(), obj.getTbmDisabled())
            .append(getTbmNama(), obj.getTbmNama())
            .append(getTbmId(), obj.getTbmId())
            .append(getTbaugName(), obj.getTbaugName())
            .append(getTbaugId(), obj.getTbaugId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbmaaApprove())
            .append(getTbmaaView())
            .append(getTbmaaDelete())
            .append(getTbmaaUpdate())
            .append(getTbmaaInsert())
            .append(getTbmaaEnabled())
            .append(getTbmaaId())
            .append(getTbmNamaParent())
            .append(getTbmParentIdParent())
            .append(getTbmIdParent())
            .append(getTbmDisabled())
            .append(getTbmNama())
            .append(getTbmId())
            .append(getTbaugName())
            .append(getTbaugId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbmaa_approve", getTbmaaApprove())
            .append("tbmaa_view", getTbmaaView())
            .append("tbmaa_delete", getTbmaaDelete())
            .append("tbmaa_update", getTbmaaUpdate())
            .append("tbmaa_insert", getTbmaaInsert())
            .append("tbmaa_enabled", getTbmaaEnabled())
            .append("tbmaa_id", getTbmaaId())
            .append("tbm_nama_parent", getTbmNamaParent())
            .append("tbm_parent_id_parent", getTbmParentIdParent())
            .append("tbm_id_parent", getTbmIdParent())
            .append("tbm_disabled", getTbmDisabled())
            .append("tbm_nama", getTbmNama())
            .append("tbm_id", getTbmId())
            .append("tbaug_name", getTbaugName())
            .append("tbaug_id", getTbaugId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewMenuAccessAdminBean obj = (ViewMenuAccessAdminBean) object;
        return new CompareToBuilder()
            .append(getTbmaaApprove(), obj.getTbmaaApprove())
            .append(getTbmaaView(), obj.getTbmaaView())
            .append(getTbmaaDelete(), obj.getTbmaaDelete())
            .append(getTbmaaUpdate(), obj.getTbmaaUpdate())
            .append(getTbmaaInsert(), obj.getTbmaaInsert())
            .append(getTbmaaEnabled(), obj.getTbmaaEnabled())
            .append(getTbmaaId(), obj.getTbmaaId())
            .append(getTbmNamaParent(), obj.getTbmNamaParent())
            .append(getTbmParentIdParent(), obj.getTbmParentIdParent())
            .append(getTbmIdParent(), obj.getTbmIdParent())
            .append(getTbmDisabled(), obj.getTbmDisabled())
            .append(getTbmNama(), obj.getTbmNama())
            .append(getTbmId(), obj.getTbmId())
            .append(getTbaugName(), obj.getTbaugName())
            .append(getTbaugId(), obj.getTbaugId())
            .toComparison();
   }
}
