// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.ViewEmployeeLanguagesBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the view_employee_languages table.
 * @author sql2java
 */
public class ViewEmployeeLanguagesManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbal_competency field.
     */
    public static final int ID_TBAL_COMPETENCY = 0;

    /**
     * Identify the tbal_fluency field.
     */
    public static final int ID_TBAL_FLUENCY = 1;

    /**
     * Identify the tbal_id field.
     */
    public static final int ID_TBAL_ID = 2;

    /**
     * Identify the tbl_name field.
     */
    public static final int ID_TBL_NAME = 3;

    /**
     * Identify the tbl_language_id field.
     */
    public static final int ID_TBL_LANGUAGE_ID = 4;

    /**
     * Identify the tbl_id field.
     */
    public static final int ID_TBL_ID = 5;

    /**
     * Identify the tbe_name field.
     */
    public static final int ID_TBE_NAME = 6;

    /**
     * Identify the tbe_nick_name field.
     */
    public static final int ID_TBE_NICK_NAME = 7;

    /**
     * Identify the tbe_last_name field.
     */
    public static final int ID_TBE_LAST_NAME = 8;

    /**
     * Identify the tbe_middle_name field.
     */
    public static final int ID_TBE_MIDDLE_NAME = 9;

    /**
     * Identify the tbe_first_name field.
     */
    public static final int ID_TBE_FIRST_NAME = 10;

    /**
     * Identify the tbe_employee_id field.
     */
    public static final int ID_TBE_EMPLOYEE_ID = 11;

    /**
     * Identify the tbe_id field.
     */
    public static final int ID_TBE_ID = 12;

    /**
     * Contains all the full fields of the view_employee_languages table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "view_employee_languages.tbal_competency"
        ,"view_employee_languages.tbal_fluency"
        ,"view_employee_languages.tbal_id"
        ,"view_employee_languages.tbl_name"
        ,"view_employee_languages.tbl_language_id"
        ,"view_employee_languages.tbl_id"
        ,"view_employee_languages.tbe_name"
        ,"view_employee_languages.tbe_nick_name"
        ,"view_employee_languages.tbe_last_name"
        ,"view_employee_languages.tbe_middle_name"
        ,"view_employee_languages.tbe_first_name"
        ,"view_employee_languages.tbe_employee_id"
        ,"view_employee_languages.tbe_id"
    };

    /**
     * Contains all the fields of the view_employee_languages table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbal_competency"
        ,"tbal_fluency"
        ,"tbal_id"
        ,"tbl_name"
        ,"tbl_language_id"
        ,"tbl_id"
        ,"tbe_name"
        ,"tbe_nick_name"
        ,"tbe_last_name"
        ,"tbe_middle_name"
        ,"tbe_first_name"
        ,"tbe_employee_id"
        ,"tbe_id"
    };

    /**
     * Field that contains the comma separated fields of the view_employee_languages table.
     */
    public static final String ALL_FULL_FIELDS = "view_employee_languages.tbal_competency"
                            + ",view_employee_languages.tbal_fluency"
                            + ",view_employee_languages.tbal_id"
                            + ",view_employee_languages.tbl_name"
                            + ",view_employee_languages.tbl_language_id"
                            + ",view_employee_languages.tbl_id"
                            + ",view_employee_languages.tbe_name"
                            + ",view_employee_languages.tbe_nick_name"
                            + ",view_employee_languages.tbe_last_name"
                            + ",view_employee_languages.tbe_middle_name"
                            + ",view_employee_languages.tbe_first_name"
                            + ",view_employee_languages.tbe_employee_id"
                            + ",view_employee_languages.tbe_id";

    /**
     * Field that contains the comma separated fields of the view_employee_languages table.
     */
    public static final String ALL_FIELDS = "tbal_competency"
                            + ",tbal_fluency"
                            + ",tbal_id"
                            + ",tbl_name"
                            + ",tbl_language_id"
                            + ",tbl_id"
                            + ",tbe_name"
                            + ",tbe_nick_name"
                            + ",tbe_last_name"
                            + ",tbe_middle_name"
                            + ",tbe_first_name"
                            + ",tbe_employee_id"
                            + ",tbe_id";

    private static ViewEmployeeLanguagesManager singleton = new ViewEmployeeLanguagesManager();

    /**
     * Get the ViewEmployeeLanguagesManager singleton.
     *
     * @return ViewEmployeeLanguagesManager
     */
    public static ViewEmployeeLanguagesManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new ViewEmployeeLanguagesBean instance.
     *
     * @return the new ViewEmployeeLanguagesBean
     */
    public ViewEmployeeLanguagesBean createViewEmployeeLanguagesBean()
    {
        return new ViewEmployeeLanguagesBean();
    }




    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from view_employee_languages.
     *
     * @return an array of ViewEmployeeLanguagesManager bean
     * @throws DAOException
     */
    //5
    public ViewEmployeeLanguagesBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from view_employee_languages, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of ViewEmployeeLanguagesManager bean
     * @throws DAOException
     */
    //6
    public ViewEmployeeLanguagesBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ViewEmployeeLanguagesBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ViewEmployeeLanguagesBean table
     * @throws DAOException
     */
    //7
    public ViewEmployeeLanguagesBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ViewEmployeeLanguagesBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting ViewEmployeeLanguagesBean table
     * @throws DAOException
     */
    //8
    public ViewEmployeeLanguagesBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of ViewEmployeeLanguagesBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting ViewEmployeeLanguagesBean table
     * @throws DAOException
     */
    //9
    public ViewEmployeeLanguagesBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_employee_languages ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM view_employee_languages ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the view_employee_languages table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM view_employee_languages " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ViewEmployeeLanguagesBean bean into the database.
     *
     * @param bean the ViewEmployeeLanguagesBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ViewEmployeeLanguagesBean save(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the ViewEmployeeLanguagesBean bean into the database.
     *
     * @param bean the ViewEmployeeLanguagesBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public ViewEmployeeLanguagesBean insert(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into view_employee_languages (");

            if (bean.isTbalCompetencyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbal_competency");
                _dirtyCount++;
            }

            if (bean.isTbalFluencyModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbal_fluency");
                _dirtyCount++;
            }

            if (bean.isTbalIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbal_id");
                _dirtyCount++;
            }

            if (bean.isTblNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_name");
                _dirtyCount++;
            }

            if (bean.isTblLanguageIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_language_id");
                _dirtyCount++;
            }

            if (bean.isTblIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbl_id");
                _dirtyCount++;
            }

            if (bean.isTbeNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_name");
                _dirtyCount++;
            }

            if (bean.isTbeNickNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_nick_name");
                _dirtyCount++;
            }

            if (bean.isTbeLastNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_last_name");
                _dirtyCount++;
            }

            if (bean.isTbeMiddleNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_middle_name");
                _dirtyCount++;
            }

            if (bean.isTbeFirstNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_first_name");
                _dirtyCount++;
            }

            if (bean.isTbeEmployeeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_employee_id");
                _dirtyCount++;
            }

            if (bean.isTbeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the ViewEmployeeLanguagesBean bean record in the database according to the changes.
     *
     * @param bean the ViewEmployeeLanguagesBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ViewEmployeeLanguagesBean update(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();


            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE view_employee_languages SET ");
            boolean useComma=false;

            if (bean.isTbalCompetencyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbal_competency=?");
            }

            if (bean.isTbalFluencyModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbal_fluency=?");
            }

            if (bean.isTbalIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbal_id=?");
            }

            if (bean.isTblNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_name=?");
            }

            if (bean.isTblLanguageIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_language_id=?");
            }

            if (bean.isTblIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbl_id=?");
            }

            if (bean.isTbeNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_name=?");
            }

            if (bean.isTbeNickNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_nick_name=?");
            }

            if (bean.isTbeLastNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_last_name=?");
            }

            if (bean.isTbeMiddleNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_middle_name=?");
            }

            if (bean.isTbeFirstNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_first_name=?");
            }

            if (bean.isTbeEmployeeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_employee_id=?");
            }

            if (bean.isTbeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id=?");
            }
            sql.append("");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of ViewEmployeeLanguagesBean beans into the database.
     *
     * @param beans the ViewEmployeeLanguagesBean bean table to be saved
     * @return the saved ViewEmployeeLanguagesBean array.
     * @throws DAOException
     */
    //15
    public ViewEmployeeLanguagesBean[] save(ViewEmployeeLanguagesBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of ViewEmployeeLanguagesBean beans into the database.
     *
     * @param beans the ViewEmployeeLanguagesBean bean table to be inserted
     * @return the saved ViewEmployeeLanguagesBean array.
     * @throws DAOException
     */
    //16
    public ViewEmployeeLanguagesBean[] insert(ViewEmployeeLanguagesBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of ViewEmployeeLanguagesBean beans into the database.
     *
     * @param beans the ViewEmployeeLanguagesBean bean table to be inserted
     * @return the saved ViewEmployeeLanguagesBean array.
     * @throws DAOException
     */
    //17
    public ViewEmployeeLanguagesBean[] update(ViewEmployeeLanguagesBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique ViewEmployeeLanguagesBean bean from a template one giving a c
     *
     * @param bean the ViewEmployeeLanguagesBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public ViewEmployeeLanguagesBean loadUniqueUsingTemplate(ViewEmployeeLanguagesBean bean) throws DAOException
    {
         ViewEmployeeLanguagesBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of ViewEmployeeLanguagesBean from a template one.
     *
     * @param bean the ViewEmployeeLanguagesBean template to look for
     * @return all the ViewEmployeeLanguagesBean matching the template
     * @throws DAOException
     */
    //19
    public ViewEmployeeLanguagesBean[] loadUsingTemplate(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of ViewEmployeeLanguagesBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewEmployeeLanguagesBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the ViewEmployeeLanguagesBean matching the template
     * @throws DAOException
     */
    //20
    public ViewEmployeeLanguagesBean[] loadUsingTemplate(ViewEmployeeLanguagesBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of ViewEmployeeLanguagesBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewEmployeeLanguagesBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the ViewEmployeeLanguagesBean matching the template
     * @throws DAOException
     */
    //20
    public ViewEmployeeLanguagesBean[] loadUsingTemplate(ViewEmployeeLanguagesBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_employee_languages ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a ViewEmployeeLanguagesBean template.
     *
     * @param bean the ViewEmployeeLanguagesBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM view_employee_languages ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table view_employee_languages.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table view_employee_languages with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM view_employee_languages " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table view_employee_languages with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific ViewEmployeeLanguagesBean bean
     *
     * @param bean the ViewEmployeeLanguagesBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific ViewEmployeeLanguagesBean bean , given the start row and number of rows.
     *
     * @param bean the ViewEmployeeLanguagesBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewEmployeeLanguagesBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific ViewEmployeeLanguagesBean bean given the start row and number of rows and the search type
     *
     * @param bean the ViewEmployeeLanguagesBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewEmployeeLanguagesBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM view_employee_languages");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, ViewEmployeeLanguagesBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbalCompetencyModified()) {
                _dirtyCount ++;
                if (bean.getTbalCompetency() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbal_competency IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbal_competency = ?");
                }
            }
            if (bean.isTbalFluencyModified()) {
                _dirtyCount ++;
                if (bean.getTbalFluency() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbal_fluency IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbal_fluency = ?");
                }
            }
            if (bean.isTbalIdModified()) {
                _dirtyCount ++;
                if (bean.getTbalId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbal_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbal_id = ?");
                }
            }
            if (bean.isTblNameModified()) {
                _dirtyCount ++;
                if (bean.getTblName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblLanguageIdModified()) {
                _dirtyCount ++;
                if (bean.getTblLanguageId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_language_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_language_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTblIdModified()) {
                _dirtyCount ++;
                if (bean.getTblId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbl_id = ?");
                }
            }
            if (bean.isTbeNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeNickNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeNickName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_nick_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_nick_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeLastNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeLastName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_last_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_last_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeMiddleNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeMiddleName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_middle_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_middle_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeFirstNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeFirstName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_first_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_first_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeEmployeeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeEmployeeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_employee_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_employee_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, ViewEmployeeLanguagesBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbalCompetencyModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbalCompetency() + "]");
                if (bean.getTbalCompetency() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbalCompetency()); }
            }
            if (bean.isTbalFluencyModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbalFluency() + "]");
                if (bean.getTbalFluency() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbalFluency()); }
            }
            if (bean.isTbalIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbalId() + "]");
                if (bean.getTbalId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbalId()); }
            }
            if (bean.isTblNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblName() + "]");
                        if (bean.getTblName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblName() + "]");
                        if (bean.getTblName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblLanguageIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblLanguageId() + "]");
                        if (bean.getTblLanguageId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblLanguageId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblLanguageId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblLanguageId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTblLanguageId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTblLanguageId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTblLanguageId() + "]");
                        if (bean.getTblLanguageId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTblLanguageId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTblIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTblId() + "]");
                if (bean.getTblId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTblId()); }
            }
            if (bean.isTbeNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "]");
                        if (bean.getTbeName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "]");
                        if (bean.getTbeName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeNickNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeNickName() + "]");
                        if (bean.getTbeNickName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeNickName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeNickName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeNickName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeNickName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeNickName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeNickName() + "]");
                        if (bean.getTbeNickName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeNickName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeLastNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeLastName() + "]");
                        if (bean.getTbeLastName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeLastName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeLastName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeLastName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeLastName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeLastName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeLastName() + "]");
                        if (bean.getTbeLastName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeLastName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeMiddleNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeMiddleName() + "]");
                        if (bean.getTbeMiddleName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeMiddleName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeMiddleName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeMiddleName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeMiddleName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeMiddleName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeMiddleName() + "]");
                        if (bean.getTbeMiddleName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeMiddleName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeFirstNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeFirstName() + "]");
                        if (bean.getTbeFirstName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeFirstName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeFirstName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeFirstName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeFirstName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeFirstName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeFirstName() + "]");
                        if (bean.getTbeFirstName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeFirstName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeEmployeeIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmployeeId() + "]");
                        if (bean.getTbeEmployeeId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmployeeId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmployeeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmployeeId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmployeeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmployeeId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmployeeId() + "]");
                        if (bean.getTbeEmployeeId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmployeeId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeId() + "]");
                if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of ViewEmployeeLanguagesBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting ViewEmployeeLanguagesBean table
     * @throws DAOException
     */
    //28
    public ViewEmployeeLanguagesBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (ViewEmployeeLanguagesBean[])v.toArray(new ViewEmployeeLanguagesBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the view_employee_languages on a ViewEmployeeLanguagesBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewEmployeeLanguagesBean bean
     * @throws DAOException
     */
    //29
    public ViewEmployeeLanguagesBean decodeRow(ResultSet rs) throws DAOException
    {
        ViewEmployeeLanguagesBean bean = this.createViewEmployeeLanguagesBean();
        try
        {
            bean.setTbalCompetency(Manager.getInteger(rs, 1));
            bean.setTbalFluency(Manager.getInteger(rs, 2));
            bean.setTbalId(Manager.getInteger(rs, 3));
            bean.setTblName(rs.getString(4));
            bean.setTblLanguageId(rs.getString(5));
            bean.setTblId(Manager.getInteger(rs, 6));
            bean.setTbeName(rs.getString(7));
            bean.setTbeNickName(rs.getString(8));
            bean.setTbeLastName(rs.getString(9));
            bean.setTbeMiddleName(rs.getString(10));
            bean.setTbeFirstName(rs.getString(11));
            bean.setTbeEmployeeId(rs.getString(12));
            bean.setTbeId(Manager.getInteger(rs, 13));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public ViewEmployeeLanguagesBean toBean(ViewEmployeeLanguagesBeanModel beanModel, ViewEmployeeLanguagesBean bean)
    {
		if (beanModel.getTbalCompetency() != null)
			bean.setTbalCompetency(beanModel.getTbalCompetency());

		if (bean.getTbalCompetency() != null)
		if ("java.sql.Timestamp".equals(bean.getTbalCompetency().getClass().getName()))
			bean.setTbalCompetency(beanModel.getTbalCompetency());
		
		if (beanModel.getTbalFluency() != null)
			bean.setTbalFluency(beanModel.getTbalFluency());

		if (bean.getTbalFluency() != null)
		if ("java.sql.Timestamp".equals(bean.getTbalFluency().getClass().getName()))
			bean.setTbalFluency(beanModel.getTbalFluency());
		
		if (beanModel.getTbalId() != null)
			bean.setTbalId(beanModel.getTbalId());

		if (bean.getTbalId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbalId().getClass().getName()))
			bean.setTbalId(beanModel.getTbalId());
		
		if (beanModel.getTblName() != null)
			bean.setTblName(beanModel.getTblName());

		if (bean.getTblName() != null)
		if ("java.sql.Timestamp".equals(bean.getTblName().getClass().getName()))
			bean.setTblName(beanModel.getTblName());
		
		if (beanModel.getTblLanguageId() != null)
			bean.setTblLanguageId(beanModel.getTblLanguageId());

		if (bean.getTblLanguageId() != null)
		if ("java.sql.Timestamp".equals(bean.getTblLanguageId().getClass().getName()))
			bean.setTblLanguageId(beanModel.getTblLanguageId());
		
		if (beanModel.getTblId() != null)
			bean.setTblId(beanModel.getTblId());

		if (bean.getTblId() != null)
		if ("java.sql.Timestamp".equals(bean.getTblId().getClass().getName()))
			bean.setTblId(beanModel.getTblId());
		
		if (beanModel.getTbeName() != null)
			bean.setTbeName(beanModel.getTbeName());

		if (bean.getTbeName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeName().getClass().getName()))
			bean.setTbeName(beanModel.getTbeName());
		
		if (beanModel.getTbeNickName() != null)
			bean.setTbeNickName(beanModel.getTbeNickName());

		if (bean.getTbeNickName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeNickName().getClass().getName()))
			bean.setTbeNickName(beanModel.getTbeNickName());
		
		if (beanModel.getTbeLastName() != null)
			bean.setTbeLastName(beanModel.getTbeLastName());

		if (bean.getTbeLastName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeLastName().getClass().getName()))
			bean.setTbeLastName(beanModel.getTbeLastName());
		
		if (beanModel.getTbeMiddleName() != null)
			bean.setTbeMiddleName(beanModel.getTbeMiddleName());

		if (bean.getTbeMiddleName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeMiddleName().getClass().getName()))
			bean.setTbeMiddleName(beanModel.getTbeMiddleName());
		
		if (beanModel.getTbeFirstName() != null)
			bean.setTbeFirstName(beanModel.getTbeFirstName());

		if (bean.getTbeFirstName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeFirstName().getClass().getName()))
			bean.setTbeFirstName(beanModel.getTbeFirstName());
		
		if (beanModel.getTbeEmployeeId() != null)
			bean.setTbeEmployeeId(beanModel.getTbeEmployeeId());

		if (bean.getTbeEmployeeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeEmployeeId().getClass().getName()))
			bean.setTbeEmployeeId(beanModel.getTbeEmployeeId());
		
		if (beanModel.getTbeId() != null)
			bean.setTbeId(beanModel.getTbeId());

		if (bean.getTbeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeId().getClass().getName()))
			bean.setTbeId(beanModel.getTbeId());
		
        return bean;
    }
	
    //29AA
    public ViewEmployeeLanguagesBean[] toBeans(ViewEmployeeLanguagesBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	ViewEmployeeLanguagesBean beans[] = new ViewEmployeeLanguagesBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public ViewEmployeeLanguagesBeanModel toBeanModel(ViewEmployeeLanguagesBean bean)
    {
    	ViewEmployeeLanguagesBeanModel beanModel = new ViewEmployeeLanguagesBeanModel();
		beanModel.setTbalCompetency(bean.getTbalCompetency());
		beanModel.setTbalFluency(bean.getTbalFluency());
		beanModel.setTbalId(bean.getTbalId());
		beanModel.setTblName(bean.getTblName());
		beanModel.setTblLanguageId(bean.getTblLanguageId());
		beanModel.setTblId(bean.getTblId());
		beanModel.setTbeName(bean.getTbeName());
		beanModel.setTbeNickName(bean.getTbeNickName());
		beanModel.setTbeLastName(bean.getTbeLastName());
		beanModel.setTbeMiddleName(bean.getTbeMiddleName());
		beanModel.setTbeFirstName(bean.getTbeFirstName());
		beanModel.setTbeEmployeeId(bean.getTbeEmployeeId());
		beanModel.setTbeId(bean.getTbeId());
		return beanModel;
    }
    
    //29CC
    public ViewEmployeeLanguagesBeanModel[] toBeanModels(ViewEmployeeLanguagesBean beans[])
    {
    	int beansCount = beans.length;
    	ViewEmployeeLanguagesBeanModel beanModels[] = new ViewEmployeeLanguagesBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the view_employee_languages table on a ViewEmployeeLanguagesBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting ViewEmployeeLanguagesBean bean
     * @throws DAOException
     */
    //30
    public ViewEmployeeLanguagesBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        ViewEmployeeLanguagesBean bean = this.createViewEmployeeLanguagesBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBAL_COMPETENCY:
                        ++pos;
                        bean.setTbalCompetency(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBAL_FLUENCY:
                        ++pos;
                        bean.setTbalFluency(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBAL_ID:
                        ++pos;
                        bean.setTbalId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBL_NAME:
                        ++pos;
                        bean.setTblName(rs.getString(pos));
                        break;
                    case ID_TBL_LANGUAGE_ID:
                        ++pos;
                        bean.setTblLanguageId(rs.getString(pos));
                        break;
                    case ID_TBL_ID:
                        ++pos;
                        bean.setTblId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_NAME:
                        ++pos;
                        bean.setTbeName(rs.getString(pos));
                        break;
                    case ID_TBE_NICK_NAME:
                        ++pos;
                        bean.setTbeNickName(rs.getString(pos));
                        break;
                    case ID_TBE_LAST_NAME:
                        ++pos;
                        bean.setTbeLastName(rs.getString(pos));
                        break;
                    case ID_TBE_MIDDLE_NAME:
                        ++pos;
                        bean.setTbeMiddleName(rs.getString(pos));
                        break;
                    case ID_TBE_FIRST_NAME:
                        ++pos;
                        bean.setTbeFirstName(rs.getString(pos));
                        break;
                    case ID_TBE_EMPLOYEE_ID:
                        ++pos;
                        bean.setTbeEmployeeId(rs.getString(pos));
                        break;
                    case ID_TBE_ID:
                        ++pos;
                        bean.setTbeId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the view_employee_languages on a ViewEmployeeLanguagesBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewEmployeeLanguagesBean bean
     * @throws DAOException
     */
    //31
    public ViewEmployeeLanguagesBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        ViewEmployeeLanguagesBean bean = this.createViewEmployeeLanguagesBean();
        try
        {
            bean.setTbalCompetency(Manager.getInteger(rs, "tbal_competency"));
            bean.setTbalFluency(Manager.getInteger(rs, "tbal_fluency"));
            bean.setTbalId(Manager.getInteger(rs, "tbal_id"));
            bean.setTblName(rs.getString("tbl_name"));
            bean.setTblLanguageId(rs.getString("tbl_language_id"));
            bean.setTblId(Manager.getInteger(rs, "tbl_id"));
            bean.setTbeName(rs.getString("tbe_name"));
            bean.setTbeNickName(rs.getString("tbe_nick_name"));
            bean.setTbeLastName(rs.getString("tbe_last_name"));
            bean.setTbeMiddleName(rs.getString("tbe_middle_name"));
            bean.setTbeFirstName(rs.getString("tbe_first_name"));
            bean.setTbeEmployeeId(rs.getString("tbe_employee_id"));
            bean.setTbeId(Manager.getInteger(rs, "tbe_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ViewEmployeeLanguagesBean
     * @throws DAOException
     */
    //32
    public ViewEmployeeLanguagesBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ViewEmployeeLanguagesBean
     * @throws DAOException
     */
    //33
    public ViewEmployeeLanguagesBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (ViewEmployeeLanguagesBean[])v.toArray(new ViewEmployeeLanguagesBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of ViewEmployeeLanguagesBean
     * @throws DAOException
     */
    //34
    public ViewEmployeeLanguagesBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private ViewEmployeeLanguagesListener listener = null;

    /**
     * Registers a unique ViewEmployeeLanguagesListener listener.
     */
    //35
    public void registerListener(ViewEmployeeLanguagesListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the ViewEmployeeLanguagesBean bean.
     *
     * @param bean the ViewEmployeeLanguagesBean bean to be saved
     */
    //36
    private void beforeInsert(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the ViewEmployeeLanguagesBean bean.
     *
     * @param bean the ViewEmployeeLanguagesBean bean to be saved
     */
    //37
    private void afterInsert(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the ViewEmployeeLanguagesBean bean.
     *
     * @param bean the ViewEmployeeLanguagesBean bean to be updated
     */
    //38
    private void beforeUpdate(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the ViewEmployeeLanguagesBean bean.
     *
     * @param bean the ViewEmployeeLanguagesBean bean to be updated
     */
    //39
    private void afterUpdate(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the ViewEmployeeLanguagesBean bean.
     *
     * @param bean the ViewEmployeeLanguagesBean bean to be deleted
     */
    private void beforeDelete(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the ViewEmployeeLanguagesBean bean.
     *
     * @param bean the ViewEmployeeLanguagesBean bean to be deleted
     */
    private void afterDelete(ViewEmployeeLanguagesBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
