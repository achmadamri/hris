// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewReportEmployeeAttendanceBean is a mapping of view_report_employee_attendance Table.
 * @author sql2java
*/
public class ViewReportEmployeeAttendanceBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 3448862467196324271L;
	
    private String tbsOutTime;

    private boolean tbsOutTimeIsModified = false;
    private boolean tbsOutTimeIsInitialized = false;

    private String tbsInTime;

    private boolean tbsInTimeIsModified = false;
    private boolean tbsInTimeIsInitialized = false;

    private String tbsName;

    private boolean tbsNameIsModified = false;
    private boolean tbsNameIsInitialized = false;

    private String tbsShiftId;

    private boolean tbsShiftIdIsModified = false;
    private boolean tbsShiftIdIsInitialized = false;

    private String rtbaOutNote;

    private boolean rtbaOutNoteIsModified = false;
    private boolean rtbaOutNoteIsInitialized = false;

    private String rtbaInNote;

    private boolean rtbaInNoteIsModified = false;
    private boolean rtbaInNoteIsInitialized = false;

    private String rtbaOutPhoto;

    private boolean rtbaOutPhotoIsModified = false;
    private boolean rtbaOutPhotoIsInitialized = false;

    private String rtbaInPhoto;

    private boolean rtbaInPhotoIsModified = false;
    private boolean rtbaInPhotoIsInitialized = false;

    private String rtbaOutLatitude;

    private boolean rtbaOutLatitudeIsModified = false;
    private boolean rtbaOutLatitudeIsInitialized = false;

    private String rtbaOutLongitude;

    private boolean rtbaOutLongitudeIsModified = false;
    private boolean rtbaOutLongitudeIsInitialized = false;

    private String rtbaInLatitude;

    private boolean rtbaInLatitudeIsModified = false;
    private boolean rtbaInLatitudeIsInitialized = false;

    private String rtbaInLongitude;

    private boolean rtbaInLongitudeIsModified = false;
    private boolean rtbaInLongitudeIsInitialized = false;

    private Integer rtbaOutTimeDiff;

    private boolean rtbaOutTimeDiffIsModified = false;
    private boolean rtbaOutTimeDiffIsInitialized = false;

    private String rtbaOutTime;

    private boolean rtbaOutTimeIsModified = false;
    private boolean rtbaOutTimeIsInitialized = false;

    private Integer rtbaInTimeDiff;

    private boolean rtbaInTimeDiffIsModified = false;
    private boolean rtbaInTimeDiffIsInitialized = false;

    private String rtbaInTime;

    private boolean rtbaInTimeIsModified = false;
    private boolean rtbaInTimeIsInitialized = false;

    private String rtbaDate;

    private boolean rtbaDateIsModified = false;
    private boolean rtbaDateIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewReportEmployeeAttendanceBean is via the createViewReportEmployeeAttendanceBean method in ViewReportEmployeeAttendanceManager or
     * via the factory class ViewReportEmployeeAttendanceFactory create method
     */
    protected ViewReportEmployeeAttendanceBean()
    {
    }

    /**
     * Getter method for tbsOutTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.tbs_out_time</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsOutTime
     */
    public String getTbsOutTime()
    {
        return tbsOutTime;
    }

    /**
     * Setter method for tbsOutTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsOutTime
     */
    public void setTbsOutTime(String newVal)
    {
        if ((newVal != null && tbsOutTime != null && (newVal.compareTo(tbsOutTime) == 0)) ||
            (newVal == null && tbsOutTime == null && tbsOutTimeIsInitialized)) {
            return;
        }
        tbsOutTime = newVal;
        tbsOutTimeIsModified = true;
        tbsOutTimeIsInitialized = true;
    }

    /**
     * Determines if the tbsOutTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsOutTimeModified()
    {
        return tbsOutTimeIsModified;
    }

    /**
     * Determines if the tbsOutTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsOutTimeInitialized()
    {
        return tbsOutTimeIsInitialized;
    }

    /**
     * Getter method for tbsInTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.tbs_in_time</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsInTime
     */
    public String getTbsInTime()
    {
        return tbsInTime;
    }

    /**
     * Setter method for tbsInTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsInTime
     */
    public void setTbsInTime(String newVal)
    {
        if ((newVal != null && tbsInTime != null && (newVal.compareTo(tbsInTime) == 0)) ||
            (newVal == null && tbsInTime == null && tbsInTimeIsInitialized)) {
            return;
        }
        tbsInTime = newVal;
        tbsInTimeIsModified = true;
        tbsInTimeIsInitialized = true;
    }

    /**
     * Determines if the tbsInTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsInTimeModified()
    {
        return tbsInTimeIsModified;
    }

    /**
     * Determines if the tbsInTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsInTimeInitialized()
    {
        return tbsInTimeIsInitialized;
    }

    /**
     * Getter method for tbsName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.tbs_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsName
     */
    public String getTbsName()
    {
        return tbsName;
    }

    /**
     * Setter method for tbsName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsName
     */
    public void setTbsName(String newVal)
    {
        if ((newVal != null && tbsName != null && (newVal.compareTo(tbsName) == 0)) ||
            (newVal == null && tbsName == null && tbsNameIsInitialized)) {
            return;
        }
        tbsName = newVal;
        tbsNameIsModified = true;
        tbsNameIsInitialized = true;
    }

    /**
     * Determines if the tbsName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsNameModified()
    {
        return tbsNameIsModified;
    }

    /**
     * Determines if the tbsName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsNameInitialized()
    {
        return tbsNameIsInitialized;
    }

    /**
     * Getter method for tbsShiftId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.tbs_shift_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsShiftId
     */
    public String getTbsShiftId()
    {
        return tbsShiftId;
    }

    /**
     * Setter method for tbsShiftId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsShiftId
     */
    public void setTbsShiftId(String newVal)
    {
        if ((newVal != null && tbsShiftId != null && (newVal.compareTo(tbsShiftId) == 0)) ||
            (newVal == null && tbsShiftId == null && tbsShiftIdIsInitialized)) {
            return;
        }
        tbsShiftId = newVal;
        tbsShiftIdIsModified = true;
        tbsShiftIdIsInitialized = true;
    }

    /**
     * Determines if the tbsShiftId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsShiftIdModified()
    {
        return tbsShiftIdIsModified;
    }

    /**
     * Determines if the tbsShiftId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsShiftIdInitialized()
    {
        return tbsShiftIdIsInitialized;
    }

    /**
     * Getter method for rtbaOutNote.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_out_note</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of rtbaOutNote
     */
    public String getRtbaOutNote()
    {
        return rtbaOutNote;
    }

    /**
     * Setter method for rtbaOutNote.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaOutNote
     */
    public void setRtbaOutNote(String newVal)
    {
        if ((newVal != null && rtbaOutNote != null && (newVal.compareTo(rtbaOutNote) == 0)) ||
            (newVal == null && rtbaOutNote == null && rtbaOutNoteIsInitialized)) {
            return;
        }
        rtbaOutNote = newVal;
        rtbaOutNoteIsModified = true;
        rtbaOutNoteIsInitialized = true;
    }

    /**
     * Determines if the rtbaOutNote has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaOutNoteModified()
    {
        return rtbaOutNoteIsModified;
    }

    /**
     * Determines if the rtbaOutNote has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaOutNoteInitialized()
    {
        return rtbaOutNoteIsInitialized;
    }

    /**
     * Getter method for rtbaInNote.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_in_note</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of rtbaInNote
     */
    public String getRtbaInNote()
    {
        return rtbaInNote;
    }

    /**
     * Setter method for rtbaInNote.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaInNote
     */
    public void setRtbaInNote(String newVal)
    {
        if ((newVal != null && rtbaInNote != null && (newVal.compareTo(rtbaInNote) == 0)) ||
            (newVal == null && rtbaInNote == null && rtbaInNoteIsInitialized)) {
            return;
        }
        rtbaInNote = newVal;
        rtbaInNoteIsModified = true;
        rtbaInNoteIsInitialized = true;
    }

    /**
     * Determines if the rtbaInNote has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaInNoteModified()
    {
        return rtbaInNoteIsModified;
    }

    /**
     * Determines if the rtbaInNote has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaInNoteInitialized()
    {
        return rtbaInNoteIsInitialized;
    }

    /**
     * Getter method for rtbaOutPhoto.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_out_photo</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of rtbaOutPhoto
     */
    public String getRtbaOutPhoto()
    {
        return rtbaOutPhoto;
    }

    /**
     * Setter method for rtbaOutPhoto.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaOutPhoto
     */
    public void setRtbaOutPhoto(String newVal)
    {
        if ((newVal != null && rtbaOutPhoto != null && (newVal.compareTo(rtbaOutPhoto) == 0)) ||
            (newVal == null && rtbaOutPhoto == null && rtbaOutPhotoIsInitialized)) {
            return;
        }
        rtbaOutPhoto = newVal;
        rtbaOutPhotoIsModified = true;
        rtbaOutPhotoIsInitialized = true;
    }

    /**
     * Determines if the rtbaOutPhoto has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaOutPhotoModified()
    {
        return rtbaOutPhotoIsModified;
    }

    /**
     * Determines if the rtbaOutPhoto has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaOutPhotoInitialized()
    {
        return rtbaOutPhotoIsInitialized;
    }

    /**
     * Getter method for rtbaInPhoto.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_in_photo</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of rtbaInPhoto
     */
    public String getRtbaInPhoto()
    {
        return rtbaInPhoto;
    }

    /**
     * Setter method for rtbaInPhoto.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaInPhoto
     */
    public void setRtbaInPhoto(String newVal)
    {
        if ((newVal != null && rtbaInPhoto != null && (newVal.compareTo(rtbaInPhoto) == 0)) ||
            (newVal == null && rtbaInPhoto == null && rtbaInPhotoIsInitialized)) {
            return;
        }
        rtbaInPhoto = newVal;
        rtbaInPhotoIsModified = true;
        rtbaInPhotoIsInitialized = true;
    }

    /**
     * Determines if the rtbaInPhoto has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaInPhotoModified()
    {
        return rtbaInPhotoIsModified;
    }

    /**
     * Determines if the rtbaInPhoto has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaInPhotoInitialized()
    {
        return rtbaInPhotoIsInitialized;
    }

    /**
     * Getter method for rtbaOutLatitude.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_out_latitude</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of rtbaOutLatitude
     */
    public String getRtbaOutLatitude()
    {
        return rtbaOutLatitude;
    }

    /**
     * Setter method for rtbaOutLatitude.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaOutLatitude
     */
    public void setRtbaOutLatitude(String newVal)
    {
        if ((newVal != null && rtbaOutLatitude != null && (newVal.compareTo(rtbaOutLatitude) == 0)) ||
            (newVal == null && rtbaOutLatitude == null && rtbaOutLatitudeIsInitialized)) {
            return;
        }
        rtbaOutLatitude = newVal;
        rtbaOutLatitudeIsModified = true;
        rtbaOutLatitudeIsInitialized = true;
    }

    /**
     * Determines if the rtbaOutLatitude has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaOutLatitudeModified()
    {
        return rtbaOutLatitudeIsModified;
    }

    /**
     * Determines if the rtbaOutLatitude has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaOutLatitudeInitialized()
    {
        return rtbaOutLatitudeIsInitialized;
    }

    /**
     * Getter method for rtbaOutLongitude.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_out_longitude</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of rtbaOutLongitude
     */
    public String getRtbaOutLongitude()
    {
        return rtbaOutLongitude;
    }

    /**
     * Setter method for rtbaOutLongitude.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaOutLongitude
     */
    public void setRtbaOutLongitude(String newVal)
    {
        if ((newVal != null && rtbaOutLongitude != null && (newVal.compareTo(rtbaOutLongitude) == 0)) ||
            (newVal == null && rtbaOutLongitude == null && rtbaOutLongitudeIsInitialized)) {
            return;
        }
        rtbaOutLongitude = newVal;
        rtbaOutLongitudeIsModified = true;
        rtbaOutLongitudeIsInitialized = true;
    }

    /**
     * Determines if the rtbaOutLongitude has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaOutLongitudeModified()
    {
        return rtbaOutLongitudeIsModified;
    }

    /**
     * Determines if the rtbaOutLongitude has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaOutLongitudeInitialized()
    {
        return rtbaOutLongitudeIsInitialized;
    }

    /**
     * Getter method for rtbaInLatitude.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_in_latitude</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of rtbaInLatitude
     */
    public String getRtbaInLatitude()
    {
        return rtbaInLatitude;
    }

    /**
     * Setter method for rtbaInLatitude.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaInLatitude
     */
    public void setRtbaInLatitude(String newVal)
    {
        if ((newVal != null && rtbaInLatitude != null && (newVal.compareTo(rtbaInLatitude) == 0)) ||
            (newVal == null && rtbaInLatitude == null && rtbaInLatitudeIsInitialized)) {
            return;
        }
        rtbaInLatitude = newVal;
        rtbaInLatitudeIsModified = true;
        rtbaInLatitudeIsInitialized = true;
    }

    /**
     * Determines if the rtbaInLatitude has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaInLatitudeModified()
    {
        return rtbaInLatitudeIsModified;
    }

    /**
     * Determines if the rtbaInLatitude has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaInLatitudeInitialized()
    {
        return rtbaInLatitudeIsInitialized;
    }

    /**
     * Getter method for rtbaInLongitude.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_in_longitude</li>
     * <li>column size: 50</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of rtbaInLongitude
     */
    public String getRtbaInLongitude()
    {
        return rtbaInLongitude;
    }

    /**
     * Setter method for rtbaInLongitude.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaInLongitude
     */
    public void setRtbaInLongitude(String newVal)
    {
        if ((newVal != null && rtbaInLongitude != null && (newVal.compareTo(rtbaInLongitude) == 0)) ||
            (newVal == null && rtbaInLongitude == null && rtbaInLongitudeIsInitialized)) {
            return;
        }
        rtbaInLongitude = newVal;
        rtbaInLongitudeIsModified = true;
        rtbaInLongitudeIsInitialized = true;
    }

    /**
     * Determines if the rtbaInLongitude has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaInLongitudeModified()
    {
        return rtbaInLongitudeIsModified;
    }

    /**
     * Determines if the rtbaInLongitude has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaInLongitudeInitialized()
    {
        return rtbaInLongitudeIsInitialized;
    }

    /**
     * Getter method for rtbaOutTimeDiff.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_out_time_diff</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of rtbaOutTimeDiff
     */
    public Integer getRtbaOutTimeDiff()
    {
        return rtbaOutTimeDiff;
    }

    /**
     * Setter method for rtbaOutTimeDiff.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaOutTimeDiff
     */
    public void setRtbaOutTimeDiff(Integer newVal)
    {
        if ((newVal != null && rtbaOutTimeDiff != null && (newVal.compareTo(rtbaOutTimeDiff) == 0)) ||
            (newVal == null && rtbaOutTimeDiff == null && rtbaOutTimeDiffIsInitialized)) {
            return;
        }
        rtbaOutTimeDiff = newVal;
        rtbaOutTimeDiffIsModified = true;
        rtbaOutTimeDiffIsInitialized = true;
    }

    /**
     * Setter method for rtbaOutTimeDiff.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to rtbaOutTimeDiff
     */
    public void setRtbaOutTimeDiff(int newVal)
    {
        setRtbaOutTimeDiff(new Integer(newVal));
    }

    /**
     * Determines if the rtbaOutTimeDiff has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaOutTimeDiffModified()
    {
        return rtbaOutTimeDiffIsModified;
    }

    /**
     * Determines if the rtbaOutTimeDiff has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaOutTimeDiffInitialized()
    {
        return rtbaOutTimeDiffIsInitialized;
    }

    /**
     * Getter method for rtbaOutTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_out_time</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of rtbaOutTime
     */
    public String getRtbaOutTime()
    {
        return rtbaOutTime;
    }

    /**
     * Setter method for rtbaOutTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaOutTime
     */
    public void setRtbaOutTime(String newVal)
    {
        if ((newVal != null && rtbaOutTime != null && (newVal.compareTo(rtbaOutTime) == 0)) ||
            (newVal == null && rtbaOutTime == null && rtbaOutTimeIsInitialized)) {
            return;
        }
        rtbaOutTime = newVal;
        rtbaOutTimeIsModified = true;
        rtbaOutTimeIsInitialized = true;
    }

    /**
     * Determines if the rtbaOutTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaOutTimeModified()
    {
        return rtbaOutTimeIsModified;
    }

    /**
     * Determines if the rtbaOutTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaOutTimeInitialized()
    {
        return rtbaOutTimeIsInitialized;
    }

    /**
     * Getter method for rtbaInTimeDiff.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_in_time_diff</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of rtbaInTimeDiff
     */
    public Integer getRtbaInTimeDiff()
    {
        return rtbaInTimeDiff;
    }

    /**
     * Setter method for rtbaInTimeDiff.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaInTimeDiff
     */
    public void setRtbaInTimeDiff(Integer newVal)
    {
        if ((newVal != null && rtbaInTimeDiff != null && (newVal.compareTo(rtbaInTimeDiff) == 0)) ||
            (newVal == null && rtbaInTimeDiff == null && rtbaInTimeDiffIsInitialized)) {
            return;
        }
        rtbaInTimeDiff = newVal;
        rtbaInTimeDiffIsModified = true;
        rtbaInTimeDiffIsInitialized = true;
    }

    /**
     * Setter method for rtbaInTimeDiff.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to rtbaInTimeDiff
     */
    public void setRtbaInTimeDiff(int newVal)
    {
        setRtbaInTimeDiff(new Integer(newVal));
    }

    /**
     * Determines if the rtbaInTimeDiff has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaInTimeDiffModified()
    {
        return rtbaInTimeDiffIsModified;
    }

    /**
     * Determines if the rtbaInTimeDiff has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaInTimeDiffInitialized()
    {
        return rtbaInTimeDiffIsInitialized;
    }

    /**
     * Getter method for rtbaInTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_in_time</li>
     * <li>column size: 8</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of rtbaInTime
     */
    public String getRtbaInTime()
    {
        return rtbaInTime;
    }

    /**
     * Setter method for rtbaInTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaInTime
     */
    public void setRtbaInTime(String newVal)
    {
        if ((newVal != null && rtbaInTime != null && (newVal.compareTo(rtbaInTime) == 0)) ||
            (newVal == null && rtbaInTime == null && rtbaInTimeIsInitialized)) {
            return;
        }
        rtbaInTime = newVal;
        rtbaInTimeIsModified = true;
        rtbaInTimeIsInitialized = true;
    }

    /**
     * Determines if the rtbaInTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaInTimeModified()
    {
        return rtbaInTimeIsModified;
    }

    /**
     * Determines if the rtbaInTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaInTimeInitialized()
    {
        return rtbaInTimeIsInitialized;
    }

    /**
     * Getter method for rtbaDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.rtba_date</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of rtbaDate
     */
    public String getRtbaDate()
    {
        return rtbaDate;
    }

    /**
     * Setter method for rtbaDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to rtbaDate
     */
    public void setRtbaDate(String newVal)
    {
        if ((newVal != null && rtbaDate != null && (newVal.compareTo(rtbaDate) == 0)) ||
            (newVal == null && rtbaDate == null && rtbaDateIsInitialized)) {
            return;
        }
        rtbaDate = newVal;
        rtbaDateIsModified = true;
        rtbaDateIsInitialized = true;
    }

    /**
     * Determines if the rtbaDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isRtbaDateModified()
    {
        return rtbaDateIsModified;
    }

    /**
     * Determines if the rtbaDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isRtbaDateInitialized()
    {
        return rtbaDateIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_report_employee_attendance.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbsOutTimeIsModified 		|| tbsInTimeIsModified  		|| tbsNameIsModified  		|| tbsShiftIdIsModified  		|| rtbaOutNoteIsModified  		|| rtbaInNoteIsModified  		|| rtbaOutPhotoIsModified  		|| rtbaInPhotoIsModified  		|| rtbaOutLatitudeIsModified  		|| rtbaOutLongitudeIsModified  		|| rtbaInLatitudeIsModified  		|| rtbaInLongitudeIsModified  		|| rtbaOutTimeDiffIsModified  		|| rtbaOutTimeIsModified  		|| rtbaInTimeDiffIsModified  		|| rtbaInTimeIsModified  		|| rtbaDateIsModified  		|| tbeNameIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbsOutTimeIsModified = false;
        tbsInTimeIsModified = false;
        tbsNameIsModified = false;
        tbsShiftIdIsModified = false;
        rtbaOutNoteIsModified = false;
        rtbaInNoteIsModified = false;
        rtbaOutPhotoIsModified = false;
        rtbaInPhotoIsModified = false;
        rtbaOutLatitudeIsModified = false;
        rtbaOutLongitudeIsModified = false;
        rtbaInLatitudeIsModified = false;
        rtbaInLongitudeIsModified = false;
        rtbaOutTimeDiffIsModified = false;
        rtbaOutTimeIsModified = false;
        rtbaInTimeDiffIsModified = false;
        rtbaInTimeIsModified = false;
        rtbaDateIsModified = false;
        tbeNameIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewReportEmployeeAttendanceBean bean)
    {
        setTbsOutTime(bean.getTbsOutTime());
        setTbsInTime(bean.getTbsInTime());
        setTbsName(bean.getTbsName());
        setTbsShiftId(bean.getTbsShiftId());
        setRtbaOutNote(bean.getRtbaOutNote());
        setRtbaInNote(bean.getRtbaInNote());
        setRtbaOutPhoto(bean.getRtbaOutPhoto());
        setRtbaInPhoto(bean.getRtbaInPhoto());
        setRtbaOutLatitude(bean.getRtbaOutLatitude());
        setRtbaOutLongitude(bean.getRtbaOutLongitude());
        setRtbaInLatitude(bean.getRtbaInLatitude());
        setRtbaInLongitude(bean.getRtbaInLongitude());
        setRtbaOutTimeDiff(bean.getRtbaOutTimeDiff());
        setRtbaOutTime(bean.getRtbaOutTime());
        setRtbaInTimeDiff(bean.getRtbaInTimeDiff());
        setRtbaInTime(bean.getRtbaInTime());
        setRtbaDate(bean.getRtbaDate());
        setTbeName(bean.getTbeName());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbs_out_time", getTbsOutTime() == null ? "" : getTbsOutTime().toString());
        dictionnary.put("tbs_in_time", getTbsInTime() == null ? "" : getTbsInTime().toString());
        dictionnary.put("tbs_name", getTbsName() == null ? "" : getTbsName().toString());
        dictionnary.put("tbs_shift_id", getTbsShiftId() == null ? "" : getTbsShiftId().toString());
        dictionnary.put("rtba_out_note", getRtbaOutNote() == null ? "" : getRtbaOutNote().toString());
        dictionnary.put("rtba_in_note", getRtbaInNote() == null ? "" : getRtbaInNote().toString());
        dictionnary.put("rtba_out_photo", getRtbaOutPhoto() == null ? "" : getRtbaOutPhoto().toString());
        dictionnary.put("rtba_in_photo", getRtbaInPhoto() == null ? "" : getRtbaInPhoto().toString());
        dictionnary.put("rtba_out_latitude", getRtbaOutLatitude() == null ? "" : getRtbaOutLatitude().toString());
        dictionnary.put("rtba_out_longitude", getRtbaOutLongitude() == null ? "" : getRtbaOutLongitude().toString());
        dictionnary.put("rtba_in_latitude", getRtbaInLatitude() == null ? "" : getRtbaInLatitude().toString());
        dictionnary.put("rtba_in_longitude", getRtbaInLongitude() == null ? "" : getRtbaInLongitude().toString());
        dictionnary.put("rtba_out_time_diff", getRtbaOutTimeDiff() == null ? "" : getRtbaOutTimeDiff().toString());
        dictionnary.put("rtba_out_time", getRtbaOutTime() == null ? "" : getRtbaOutTime().toString());
        dictionnary.put("rtba_in_time_diff", getRtbaInTimeDiff() == null ? "" : getRtbaInTimeDiff().toString());
        dictionnary.put("rtba_in_time", getRtbaInTime() == null ? "" : getRtbaInTime().toString());
        dictionnary.put("rtba_date", getRtbaDate() == null ? "" : getRtbaDate().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbs_out_time".equalsIgnoreCase(column) || "tbsOutTime".equalsIgnoreCase(column)) {
            return getTbsOutTime() == null ? "" : getTbsOutTime().toString();
        } else if ("tbs_in_time".equalsIgnoreCase(column) || "tbsInTime".equalsIgnoreCase(column)) {
            return getTbsInTime() == null ? "" : getTbsInTime().toString();
        } else if ("tbs_name".equalsIgnoreCase(column) || "tbsName".equalsIgnoreCase(column)) {
            return getTbsName() == null ? "" : getTbsName().toString();
        } else if ("tbs_shift_id".equalsIgnoreCase(column) || "tbsShiftId".equalsIgnoreCase(column)) {
            return getTbsShiftId() == null ? "" : getTbsShiftId().toString();
        } else if ("rtba_out_note".equalsIgnoreCase(column) || "rtbaOutNote".equalsIgnoreCase(column)) {
            return getRtbaOutNote() == null ? "" : getRtbaOutNote().toString();
        } else if ("rtba_in_note".equalsIgnoreCase(column) || "rtbaInNote".equalsIgnoreCase(column)) {
            return getRtbaInNote() == null ? "" : getRtbaInNote().toString();
        } else if ("rtba_out_photo".equalsIgnoreCase(column) || "rtbaOutPhoto".equalsIgnoreCase(column)) {
            return getRtbaOutPhoto() == null ? "" : getRtbaOutPhoto().toString();
        } else if ("rtba_in_photo".equalsIgnoreCase(column) || "rtbaInPhoto".equalsIgnoreCase(column)) {
            return getRtbaInPhoto() == null ? "" : getRtbaInPhoto().toString();
        } else if ("rtba_out_latitude".equalsIgnoreCase(column) || "rtbaOutLatitude".equalsIgnoreCase(column)) {
            return getRtbaOutLatitude() == null ? "" : getRtbaOutLatitude().toString();
        } else if ("rtba_out_longitude".equalsIgnoreCase(column) || "rtbaOutLongitude".equalsIgnoreCase(column)) {
            return getRtbaOutLongitude() == null ? "" : getRtbaOutLongitude().toString();
        } else if ("rtba_in_latitude".equalsIgnoreCase(column) || "rtbaInLatitude".equalsIgnoreCase(column)) {
            return getRtbaInLatitude() == null ? "" : getRtbaInLatitude().toString();
        } else if ("rtba_in_longitude".equalsIgnoreCase(column) || "rtbaInLongitude".equalsIgnoreCase(column)) {
            return getRtbaInLongitude() == null ? "" : getRtbaInLongitude().toString();
        } else if ("rtba_out_time_diff".equalsIgnoreCase(column) || "rtbaOutTimeDiff".equalsIgnoreCase(column)) {
            return getRtbaOutTimeDiff() == null ? "" : getRtbaOutTimeDiff().toString();
        } else if ("rtba_out_time".equalsIgnoreCase(column) || "rtbaOutTime".equalsIgnoreCase(column)) {
            return getRtbaOutTime() == null ? "" : getRtbaOutTime().toString();
        } else if ("rtba_in_time_diff".equalsIgnoreCase(column) || "rtbaInTimeDiff".equalsIgnoreCase(column)) {
            return getRtbaInTimeDiff() == null ? "" : getRtbaInTimeDiff().toString();
        } else if ("rtba_in_time".equalsIgnoreCase(column) || "rtbaInTime".equalsIgnoreCase(column)) {
            return getRtbaInTime() == null ? "" : getRtbaInTime().toString();
        } else if ("rtba_date".equalsIgnoreCase(column) || "rtbaDate".equalsIgnoreCase(column)) {
            return getRtbaDate() == null ? "" : getRtbaDate().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewReportEmployeeAttendanceBean)) {
            return false;
        }

		ViewReportEmployeeAttendanceBean obj = (ViewReportEmployeeAttendanceBean) object;
		return new EqualsBuilder()
            .append(getTbsOutTime(), obj.getTbsOutTime())
            .append(getTbsInTime(), obj.getTbsInTime())
            .append(getTbsName(), obj.getTbsName())
            .append(getTbsShiftId(), obj.getTbsShiftId())
            .append(getRtbaOutNote(), obj.getRtbaOutNote())
            .append(getRtbaInNote(), obj.getRtbaInNote())
            .append(getRtbaOutPhoto(), obj.getRtbaOutPhoto())
            .append(getRtbaInPhoto(), obj.getRtbaInPhoto())
            .append(getRtbaOutLatitude(), obj.getRtbaOutLatitude())
            .append(getRtbaOutLongitude(), obj.getRtbaOutLongitude())
            .append(getRtbaInLatitude(), obj.getRtbaInLatitude())
            .append(getRtbaInLongitude(), obj.getRtbaInLongitude())
            .append(getRtbaOutTimeDiff(), obj.getRtbaOutTimeDiff())
            .append(getRtbaOutTime(), obj.getRtbaOutTime())
            .append(getRtbaInTimeDiff(), obj.getRtbaInTimeDiff())
            .append(getRtbaInTime(), obj.getRtbaInTime())
            .append(getRtbaDate(), obj.getRtbaDate())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbsOutTime())
            .append(getTbsInTime())
            .append(getTbsName())
            .append(getTbsShiftId())
            .append(getRtbaOutNote())
            .append(getRtbaInNote())
            .append(getRtbaOutPhoto())
            .append(getRtbaInPhoto())
            .append(getRtbaOutLatitude())
            .append(getRtbaOutLongitude())
            .append(getRtbaInLatitude())
            .append(getRtbaInLongitude())
            .append(getRtbaOutTimeDiff())
            .append(getRtbaOutTime())
            .append(getRtbaInTimeDiff())
            .append(getRtbaInTime())
            .append(getRtbaDate())
            .append(getTbeName())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbs_out_time", getTbsOutTime())
            .append("tbs_in_time", getTbsInTime())
            .append("tbs_name", getTbsName())
            .append("tbs_shift_id", getTbsShiftId())
            .append("rtba_out_note", getRtbaOutNote())
            .append("rtba_in_note", getRtbaInNote())
            .append("rtba_out_photo", getRtbaOutPhoto())
            .append("rtba_in_photo", getRtbaInPhoto())
            .append("rtba_out_latitude", getRtbaOutLatitude())
            .append("rtba_out_longitude", getRtbaOutLongitude())
            .append("rtba_in_latitude", getRtbaInLatitude())
            .append("rtba_in_longitude", getRtbaInLongitude())
            .append("rtba_out_time_diff", getRtbaOutTimeDiff())
            .append("rtba_out_time", getRtbaOutTime())
            .append("rtba_in_time_diff", getRtbaInTimeDiff())
            .append("rtba_in_time", getRtbaInTime())
            .append("rtba_date", getRtbaDate())
            .append("tbe_name", getTbeName())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewReportEmployeeAttendanceBean obj = (ViewReportEmployeeAttendanceBean) object;
        return new CompareToBuilder()
            .append(getTbsOutTime(), obj.getTbsOutTime())
            .append(getTbsInTime(), obj.getTbsInTime())
            .append(getTbsName(), obj.getTbsName())
            .append(getTbsShiftId(), obj.getTbsShiftId())
            .append(getRtbaOutNote(), obj.getRtbaOutNote())
            .append(getRtbaInNote(), obj.getRtbaInNote())
            .append(getRtbaOutPhoto(), obj.getRtbaOutPhoto())
            .append(getRtbaInPhoto(), obj.getRtbaInPhoto())
            .append(getRtbaOutLatitude(), obj.getRtbaOutLatitude())
            .append(getRtbaOutLongitude(), obj.getRtbaOutLongitude())
            .append(getRtbaInLatitude(), obj.getRtbaInLatitude())
            .append(getRtbaInLongitude(), obj.getRtbaInLongitude())
            .append(getRtbaOutTimeDiff(), obj.getRtbaOutTimeDiff())
            .append(getRtbaOutTime(), obj.getRtbaOutTime())
            .append(getRtbaInTimeDiff(), obj.getRtbaInTimeDiff())
            .append(getRtbaInTime(), obj.getRtbaInTime())
            .append(getRtbaDate(), obj.getRtbaDate())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
