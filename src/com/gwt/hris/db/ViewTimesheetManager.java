// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.ViewTimesheetBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the view_timesheet table.
 * @author sql2java
 */
public class ViewTimesheetManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbt_approval_status field.
     */
    public static final int ID_TBT_APPROVAL_STATUS = 0;

    /**
     * Identify the tbt_grand_total_hour field.
     */
    public static final int ID_TBT_GRAND_TOTAL_HOUR = 1;

    /**
     * Identify the tbt_total_hour field.
     */
    public static final int ID_TBT_TOTAL_HOUR = 2;

    /**
     * Identify the tbt_day_7_hour field.
     */
    public static final int ID_TBT_DAY_7_HOUR = 3;

    /**
     * Identify the tbt_day_6_hour field.
     */
    public static final int ID_TBT_DAY_6_HOUR = 4;

    /**
     * Identify the tbt_day_5_hour field.
     */
    public static final int ID_TBT_DAY_5_HOUR = 5;

    /**
     * Identify the tbt_day_4_hour field.
     */
    public static final int ID_TBT_DAY_4_HOUR = 6;

    /**
     * Identify the tbt_day_3_hour field.
     */
    public static final int ID_TBT_DAY_3_HOUR = 7;

    /**
     * Identify the tbt_day_2_hour field.
     */
    public static final int ID_TBT_DAY_2_HOUR = 8;

    /**
     * Identify the tbt_day_1_hour field.
     */
    public static final int ID_TBT_DAY_1_HOUR = 9;

    /**
     * Identify the tbt_start_of_week field.
     */
    public static final int ID_TBT_START_OF_WEEK = 10;

    /**
     * Identify the tbt_update_time field.
     */
    public static final int ID_TBT_UPDATE_TIME = 11;

    /**
     * Identify the tbt_id field.
     */
    public static final int ID_TBT_ID = 12;

    /**
     * Identify the tbpa_payable field.
     */
    public static final int ID_TBPA_PAYABLE = 13;

    /**
     * Identify the tbpa_name field.
     */
    public static final int ID_TBPA_NAME = 14;

    /**
     * Identify the tbpa_id field.
     */
    public static final int ID_TBPA_ID = 15;

    /**
     * Identify the tbpag_name field.
     */
    public static final int ID_TBPAG_NAME = 16;

    /**
     * Identify the tbpag_project_activities_group_id field.
     */
    public static final int ID_TBPAG_PROJECT_ACTIVITIES_GROUP_ID = 17;

    /**
     * Identify the tbpag_id field.
     */
    public static final int ID_TBPAG_ID = 18;

    /**
     * Identify the tbp_name field.
     */
    public static final int ID_TBP_NAME = 19;

    /**
     * Identify the tbp_project_id field.
     */
    public static final int ID_TBP_PROJECT_ID = 20;

    /**
     * Identify the tbp_id field.
     */
    public static final int ID_TBP_ID = 21;

    /**
     * Identify the tbc_customer_id field.
     */
    public static final int ID_TBC_CUSTOMER_ID = 22;

    /**
     * Identify the tbc_name field.
     */
    public static final int ID_TBC_NAME = 23;

    /**
     * Identify the tbc_id field.
     */
    public static final int ID_TBC_ID = 24;

    /**
     * Identify the tbe_name field.
     */
    public static final int ID_TBE_NAME = 25;

    /**
     * Identify the tbe_id field.
     */
    public static final int ID_TBE_ID = 26;

    /**
     * Contains all the full fields of the view_timesheet table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "view_timesheet.tbt_approval_status"
        ,"view_timesheet.tbt_grand_total_hour"
        ,"view_timesheet.tbt_total_hour"
        ,"view_timesheet.tbt_day_7_hour"
        ,"view_timesheet.tbt_day_6_hour"
        ,"view_timesheet.tbt_day_5_hour"
        ,"view_timesheet.tbt_day_4_hour"
        ,"view_timesheet.tbt_day_3_hour"
        ,"view_timesheet.tbt_day_2_hour"
        ,"view_timesheet.tbt_day_1_hour"
        ,"view_timesheet.tbt_start_of_week"
        ,"view_timesheet.tbt_update_time"
        ,"view_timesheet.tbt_id"
        ,"view_timesheet.tbpa_payable"
        ,"view_timesheet.tbpa_name"
        ,"view_timesheet.tbpa_id"
        ,"view_timesheet.tbpag_name"
        ,"view_timesheet.tbpag_project_activities_group_id"
        ,"view_timesheet.tbpag_id"
        ,"view_timesheet.tbp_name"
        ,"view_timesheet.tbp_project_id"
        ,"view_timesheet.tbp_id"
        ,"view_timesheet.tbc_customer_id"
        ,"view_timesheet.tbc_name"
        ,"view_timesheet.tbc_id"
        ,"view_timesheet.tbe_name"
        ,"view_timesheet.tbe_id"
    };

    /**
     * Contains all the fields of the view_timesheet table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbt_approval_status"
        ,"tbt_grand_total_hour"
        ,"tbt_total_hour"
        ,"tbt_day_7_hour"
        ,"tbt_day_6_hour"
        ,"tbt_day_5_hour"
        ,"tbt_day_4_hour"
        ,"tbt_day_3_hour"
        ,"tbt_day_2_hour"
        ,"tbt_day_1_hour"
        ,"tbt_start_of_week"
        ,"tbt_update_time"
        ,"tbt_id"
        ,"tbpa_payable"
        ,"tbpa_name"
        ,"tbpa_id"
        ,"tbpag_name"
        ,"tbpag_project_activities_group_id"
        ,"tbpag_id"
        ,"tbp_name"
        ,"tbp_project_id"
        ,"tbp_id"
        ,"tbc_customer_id"
        ,"tbc_name"
        ,"tbc_id"
        ,"tbe_name"
        ,"tbe_id"
    };

    /**
     * Field that contains the comma separated fields of the view_timesheet table.
     */
    public static final String ALL_FULL_FIELDS = "view_timesheet.tbt_approval_status"
                            + ",view_timesheet.tbt_grand_total_hour"
                            + ",view_timesheet.tbt_total_hour"
                            + ",view_timesheet.tbt_day_7_hour"
                            + ",view_timesheet.tbt_day_6_hour"
                            + ",view_timesheet.tbt_day_5_hour"
                            + ",view_timesheet.tbt_day_4_hour"
                            + ",view_timesheet.tbt_day_3_hour"
                            + ",view_timesheet.tbt_day_2_hour"
                            + ",view_timesheet.tbt_day_1_hour"
                            + ",view_timesheet.tbt_start_of_week"
                            + ",view_timesheet.tbt_update_time"
                            + ",view_timesheet.tbt_id"
                            + ",view_timesheet.tbpa_payable"
                            + ",view_timesheet.tbpa_name"
                            + ",view_timesheet.tbpa_id"
                            + ",view_timesheet.tbpag_name"
                            + ",view_timesheet.tbpag_project_activities_group_id"
                            + ",view_timesheet.tbpag_id"
                            + ",view_timesheet.tbp_name"
                            + ",view_timesheet.tbp_project_id"
                            + ",view_timesheet.tbp_id"
                            + ",view_timesheet.tbc_customer_id"
                            + ",view_timesheet.tbc_name"
                            + ",view_timesheet.tbc_id"
                            + ",view_timesheet.tbe_name"
                            + ",view_timesheet.tbe_id";

    /**
     * Field that contains the comma separated fields of the view_timesheet table.
     */
    public static final String ALL_FIELDS = "tbt_approval_status"
                            + ",tbt_grand_total_hour"
                            + ",tbt_total_hour"
                            + ",tbt_day_7_hour"
                            + ",tbt_day_6_hour"
                            + ",tbt_day_5_hour"
                            + ",tbt_day_4_hour"
                            + ",tbt_day_3_hour"
                            + ",tbt_day_2_hour"
                            + ",tbt_day_1_hour"
                            + ",tbt_start_of_week"
                            + ",tbt_update_time"
                            + ",tbt_id"
                            + ",tbpa_payable"
                            + ",tbpa_name"
                            + ",tbpa_id"
                            + ",tbpag_name"
                            + ",tbpag_project_activities_group_id"
                            + ",tbpag_id"
                            + ",tbp_name"
                            + ",tbp_project_id"
                            + ",tbp_id"
                            + ",tbc_customer_id"
                            + ",tbc_name"
                            + ",tbc_id"
                            + ",tbe_name"
                            + ",tbe_id";

    private static ViewTimesheetManager singleton = new ViewTimesheetManager();

    /**
     * Get the ViewTimesheetManager singleton.
     *
     * @return ViewTimesheetManager
     */
    public static ViewTimesheetManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new ViewTimesheetBean instance.
     *
     * @return the new ViewTimesheetBean
     */
    public ViewTimesheetBean createViewTimesheetBean()
    {
        return new ViewTimesheetBean();
    }




    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from view_timesheet.
     *
     * @return an array of ViewTimesheetManager bean
     * @throws DAOException
     */
    //5
    public ViewTimesheetBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from view_timesheet, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of ViewTimesheetManager bean
     * @throws DAOException
     */
    //6
    public ViewTimesheetBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of ViewTimesheetBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting ViewTimesheetBean table
     * @throws DAOException
     */
    //7
    public ViewTimesheetBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of ViewTimesheetBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting ViewTimesheetBean table
     * @throws DAOException
     */
    //8
    public ViewTimesheetBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of ViewTimesheetBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting ViewTimesheetBean table
     * @throws DAOException
     */
    //9
    public ViewTimesheetBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_timesheet ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM view_timesheet ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the view_timesheet table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM view_timesheet " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the ViewTimesheetBean bean into the database.
     *
     * @param bean the ViewTimesheetBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public ViewTimesheetBean save(ViewTimesheetBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the ViewTimesheetBean bean into the database.
     *
     * @param bean the ViewTimesheetBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public ViewTimesheetBean insert(ViewTimesheetBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into view_timesheet (");

            if (bean.isTbtApprovalStatusModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_approval_status");
                _dirtyCount++;
            }

            if (bean.isTbtGrandTotalHourModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_grand_total_hour");
                _dirtyCount++;
            }

            if (bean.isTbtTotalHourModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_total_hour");
                _dirtyCount++;
            }

            if (bean.isTbtDay7HourModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_day_7_hour");
                _dirtyCount++;
            }

            if (bean.isTbtDay6HourModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_day_6_hour");
                _dirtyCount++;
            }

            if (bean.isTbtDay5HourModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_day_5_hour");
                _dirtyCount++;
            }

            if (bean.isTbtDay4HourModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_day_4_hour");
                _dirtyCount++;
            }

            if (bean.isTbtDay3HourModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_day_3_hour");
                _dirtyCount++;
            }

            if (bean.isTbtDay2HourModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_day_2_hour");
                _dirtyCount++;
            }

            if (bean.isTbtDay1HourModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_day_1_hour");
                _dirtyCount++;
            }

            if (bean.isTbtStartOfWeekModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_start_of_week");
                _dirtyCount++;
            }

            if (bean.isTbtUpdateTimeModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_update_time");
                _dirtyCount++;
            }

            if (bean.isTbtIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbt_id");
                _dirtyCount++;
            }

            if (bean.isTbpaPayableModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpa_payable");
                _dirtyCount++;
            }

            if (bean.isTbpaNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpa_name");
                _dirtyCount++;
            }

            if (bean.isTbpaIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpa_id");
                _dirtyCount++;
            }

            if (bean.isTbpagNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpag_name");
                _dirtyCount++;
            }

            if (bean.isTbpagProjectActivitiesGroupIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpag_project_activities_group_id");
                _dirtyCount++;
            }

            if (bean.isTbpagIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbpag_id");
                _dirtyCount++;
            }

            if (bean.isTbpNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_name");
                _dirtyCount++;
            }

            if (bean.isTbpProjectIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_project_id");
                _dirtyCount++;
            }

            if (bean.isTbpIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbp_id");
                _dirtyCount++;
            }

            if (bean.isTbcCustomerIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbc_customer_id");
                _dirtyCount++;
            }

            if (bean.isTbcNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbc_name");
                _dirtyCount++;
            }

            if (bean.isTbcIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbc_id");
                _dirtyCount++;
            }

            if (bean.isTbeNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_name");
                _dirtyCount++;
            }

            if (bean.isTbeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the ViewTimesheetBean bean record in the database according to the changes.
     *
     * @param bean the ViewTimesheetBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public ViewTimesheetBean update(ViewTimesheetBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();


            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE view_timesheet SET ");
            boolean useComma=false;

            if (bean.isTbtApprovalStatusModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_approval_status=?");
            }

            if (bean.isTbtGrandTotalHourModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_grand_total_hour=?");
            }

            if (bean.isTbtTotalHourModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_total_hour=?");
            }

            if (bean.isTbtDay7HourModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_day_7_hour=?");
            }

            if (bean.isTbtDay6HourModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_day_6_hour=?");
            }

            if (bean.isTbtDay5HourModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_day_5_hour=?");
            }

            if (bean.isTbtDay4HourModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_day_4_hour=?");
            }

            if (bean.isTbtDay3HourModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_day_3_hour=?");
            }

            if (bean.isTbtDay2HourModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_day_2_hour=?");
            }

            if (bean.isTbtDay1HourModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_day_1_hour=?");
            }

            if (bean.isTbtStartOfWeekModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_start_of_week=?");
            }

            if (bean.isTbtUpdateTimeModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_update_time=?");
            }

            if (bean.isTbtIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbt_id=?");
            }

            if (bean.isTbpaPayableModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpa_payable=?");
            }

            if (bean.isTbpaNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpa_name=?");
            }

            if (bean.isTbpaIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpa_id=?");
            }

            if (bean.isTbpagNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpag_name=?");
            }

            if (bean.isTbpagProjectActivitiesGroupIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpag_project_activities_group_id=?");
            }

            if (bean.isTbpagIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbpag_id=?");
            }

            if (bean.isTbpNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_name=?");
            }

            if (bean.isTbpProjectIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_project_id=?");
            }

            if (bean.isTbpIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbp_id=?");
            }

            if (bean.isTbcCustomerIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbc_customer_id=?");
            }

            if (bean.isTbcNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbc_name=?");
            }

            if (bean.isTbcIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbc_id=?");
            }

            if (bean.isTbeNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_name=?");
            }

            if (bean.isTbeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id=?");
            }
            sql.append("");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of ViewTimesheetBean beans into the database.
     *
     * @param beans the ViewTimesheetBean bean table to be saved
     * @return the saved ViewTimesheetBean array.
     * @throws DAOException
     */
    //15
    public ViewTimesheetBean[] save(ViewTimesheetBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of ViewTimesheetBean beans into the database.
     *
     * @param beans the ViewTimesheetBean bean table to be inserted
     * @return the saved ViewTimesheetBean array.
     * @throws DAOException
     */
    //16
    public ViewTimesheetBean[] insert(ViewTimesheetBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of ViewTimesheetBean beans into the database.
     *
     * @param beans the ViewTimesheetBean bean table to be inserted
     * @return the saved ViewTimesheetBean array.
     * @throws DAOException
     */
    //17
    public ViewTimesheetBean[] update(ViewTimesheetBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique ViewTimesheetBean bean from a template one giving a c
     *
     * @param bean the ViewTimesheetBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public ViewTimesheetBean loadUniqueUsingTemplate(ViewTimesheetBean bean) throws DAOException
    {
         ViewTimesheetBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of ViewTimesheetBean from a template one.
     *
     * @param bean the ViewTimesheetBean template to look for
     * @return all the ViewTimesheetBean matching the template
     * @throws DAOException
     */
    //19
    public ViewTimesheetBean[] loadUsingTemplate(ViewTimesheetBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of ViewTimesheetBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewTimesheetBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the ViewTimesheetBean matching the template
     * @throws DAOException
     */
    //20
    public ViewTimesheetBean[] loadUsingTemplate(ViewTimesheetBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of ViewTimesheetBean from a template one, given the start row and number of rows.
     *
     * @param bean the ViewTimesheetBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the ViewTimesheetBean matching the template
     * @throws DAOException
     */
    //20
    public ViewTimesheetBean[] loadUsingTemplate(ViewTimesheetBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM view_timesheet ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a ViewTimesheetBean template.
     *
     * @param bean the ViewTimesheetBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(ViewTimesheetBean bean) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM view_timesheet ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }



    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table view_timesheet.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table view_timesheet with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM view_timesheet " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table view_timesheet with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific ViewTimesheetBean bean
     *
     * @param bean the ViewTimesheetBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(ViewTimesheetBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific ViewTimesheetBean bean , given the start row and number of rows.
     *
     * @param bean the ViewTimesheetBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewTimesheetBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific ViewTimesheetBean bean given the start row and number of rows and the search type
     *
     * @param bean the ViewTimesheetBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(ViewTimesheetBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM view_timesheet");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, ViewTimesheetBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbtApprovalStatusModified()) {
                _dirtyCount ++;
                if (bean.getTbtApprovalStatus() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_approval_status IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_approval_status = ?");
                }
            }
            if (bean.isTbtGrandTotalHourModified()) {
                _dirtyCount ++;
                if (bean.getTbtGrandTotalHour() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_grand_total_hour IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_grand_total_hour = ?");
                }
            }
            if (bean.isTbtTotalHourModified()) {
                _dirtyCount ++;
                if (bean.getTbtTotalHour() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_total_hour IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_total_hour = ?");
                }
            }
            if (bean.isTbtDay7HourModified()) {
                _dirtyCount ++;
                if (bean.getTbtDay7Hour() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_7_hour IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_7_hour = ?");
                }
            }
            if (bean.isTbtDay6HourModified()) {
                _dirtyCount ++;
                if (bean.getTbtDay6Hour() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_6_hour IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_6_hour = ?");
                }
            }
            if (bean.isTbtDay5HourModified()) {
                _dirtyCount ++;
                if (bean.getTbtDay5Hour() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_5_hour IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_5_hour = ?");
                }
            }
            if (bean.isTbtDay4HourModified()) {
                _dirtyCount ++;
                if (bean.getTbtDay4Hour() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_4_hour IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_4_hour = ?");
                }
            }
            if (bean.isTbtDay3HourModified()) {
                _dirtyCount ++;
                if (bean.getTbtDay3Hour() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_3_hour IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_3_hour = ?");
                }
            }
            if (bean.isTbtDay2HourModified()) {
                _dirtyCount ++;
                if (bean.getTbtDay2Hour() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_2_hour IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_2_hour = ?");
                }
            }
            if (bean.isTbtDay1HourModified()) {
                _dirtyCount ++;
                if (bean.getTbtDay1Hour() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_1_hour IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_day_1_hour = ?");
                }
            }
            if (bean.isTbtStartOfWeekModified()) {
                _dirtyCount ++;
                if (bean.getTbtStartOfWeek() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_start_of_week IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_start_of_week ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbtUpdateTimeModified()) {
                _dirtyCount ++;
                if (bean.getTbtUpdateTime() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_update_time IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_update_time = ?");
                }
            }
            if (bean.isTbtIdModified()) {
                _dirtyCount ++;
                if (bean.getTbtId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbt_id = ?");
                }
            }
            if (bean.isTbpaPayableModified()) {
                _dirtyCount ++;
                if (bean.getTbpaPayable() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpa_payable IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpa_payable = ?");
                }
            }
            if (bean.isTbpaNameModified()) {
                _dirtyCount ++;
                if (bean.getTbpaName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpa_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpa_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpaIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpaId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpa_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpa_id = ?");
                }
            }
            if (bean.isTbpagNameModified()) {
                _dirtyCount ++;
                if (bean.getTbpagName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpag_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpag_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpagProjectActivitiesGroupIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpagProjectActivitiesGroupId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpag_project_activities_group_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpag_project_activities_group_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpagIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpagId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpag_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbpag_id = ?");
                }
            }
            if (bean.isTbpNameModified()) {
                _dirtyCount ++;
                if (bean.getTbpName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpProjectIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpProjectId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_project_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_project_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbpIdModified()) {
                _dirtyCount ++;
                if (bean.getTbpId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbp_id = ?");
                }
            }
            if (bean.isTbcCustomerIdModified()) {
                _dirtyCount ++;
                if (bean.getTbcCustomerId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_customer_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_customer_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcNameModified()) {
                _dirtyCount ++;
                if (bean.getTbcName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbcIdModified()) {
                _dirtyCount ++;
                if (bean.getTbcId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbc_id = ?");
                }
            }
            if (bean.isTbeNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, ViewTimesheetBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbtApprovalStatusModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtApprovalStatus() + "]");
                if (bean.getTbtApprovalStatus() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbtApprovalStatus()); }
            }
            if (bean.isTbtGrandTotalHourModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtGrandTotalHour() + "]");
                if (bean.getTbtGrandTotalHour() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbtGrandTotalHour()); }
            }
            if (bean.isTbtTotalHourModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtTotalHour() + "]");
                if (bean.getTbtTotalHour() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbtTotalHour()); }
            }
            if (bean.isTbtDay7HourModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtDay7Hour() + "]");
                if (bean.getTbtDay7Hour() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbtDay7Hour()); }
            }
            if (bean.isTbtDay6HourModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtDay6Hour() + "]");
                if (bean.getTbtDay6Hour() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbtDay6Hour()); }
            }
            if (bean.isTbtDay5HourModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtDay5Hour() + "]");
                if (bean.getTbtDay5Hour() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbtDay5Hour()); }
            }
            if (bean.isTbtDay4HourModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtDay4Hour() + "]");
                if (bean.getTbtDay4Hour() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbtDay4Hour()); }
            }
            if (bean.isTbtDay3HourModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtDay3Hour() + "]");
                if (bean.getTbtDay3Hour() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbtDay3Hour()); }
            }
            if (bean.isTbtDay2HourModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtDay2Hour() + "]");
                if (bean.getTbtDay2Hour() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbtDay2Hour()); }
            }
            if (bean.isTbtDay1HourModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtDay1Hour() + "]");
                if (bean.getTbtDay1Hour() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbtDay1Hour()); }
            }
            if (bean.isTbtStartOfWeekModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtStartOfWeek() + "]");
                        if (bean.getTbtStartOfWeek() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbtStartOfWeek()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbtStartOfWeek() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbtStartOfWeek() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtStartOfWeek() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbtStartOfWeek());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbtStartOfWeek() + "]");
                        if (bean.getTbtStartOfWeek() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbtStartOfWeek() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbtUpdateTimeModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtUpdateTime() + "]");
                if (bean.getTbtUpdateTime() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbtUpdateTime()); }
            }
            if (bean.isTbtIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbtId() + "]");
                if (bean.getTbtId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbtId()); }
            }
            if (bean.isTbpaPayableModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpaPayable() + "]");
                if (bean.getTbpaPayable() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpaPayable()); }
            }
            if (bean.isTbpaNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpaName() + "]");
                        if (bean.getTbpaName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpaName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpaName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpaName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpaName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpaName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpaName() + "]");
                        if (bean.getTbpaName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpaName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpaIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpaId() + "]");
                if (bean.getTbpaId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpaId()); }
            }
            if (bean.isTbpagNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpagName() + "]");
                        if (bean.getTbpagName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpagName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpagName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpagName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpagName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpagName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpagName() + "]");
                        if (bean.getTbpagName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpagName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpagProjectActivitiesGroupIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpagProjectActivitiesGroupId() + "]");
                        if (bean.getTbpagProjectActivitiesGroupId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpagProjectActivitiesGroupId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpagProjectActivitiesGroupId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpagProjectActivitiesGroupId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpagProjectActivitiesGroupId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpagProjectActivitiesGroupId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpagProjectActivitiesGroupId() + "]");
                        if (bean.getTbpagProjectActivitiesGroupId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpagProjectActivitiesGroupId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpagIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpagId() + "]");
                if (bean.getTbpagId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpagId()); }
            }
            if (bean.isTbpNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpName() + "]");
                        if (bean.getTbpName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpName() + "]");
                        if (bean.getTbpName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpProjectIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpProjectId() + "]");
                        if (bean.getTbpProjectId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpProjectId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpProjectId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpProjectId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpProjectId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbpProjectId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbpProjectId() + "]");
                        if (bean.getTbpProjectId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbpProjectId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbpIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbpId() + "]");
                if (bean.getTbpId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbpId()); }
            }
            if (bean.isTbcCustomerIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcCustomerId() + "]");
                        if (bean.getTbcCustomerId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcCustomerId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcCustomerId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcCustomerId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcCustomerId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcCustomerId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcCustomerId() + "]");
                        if (bean.getTbcCustomerId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcCustomerId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcName() + "]");
                        if (bean.getTbcName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbcName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbcName() + "]");
                        if (bean.getTbcName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbcName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbcIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbcId() + "]");
                if (bean.getTbcId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbcId()); }
            }
            if (bean.isTbeNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "]");
                        if (bean.getTbeName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "]");
                        if (bean.getTbeName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeId() + "]");
                if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of ViewTimesheetBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting ViewTimesheetBean table
     * @throws DAOException
     */
    //28
    public ViewTimesheetBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (ViewTimesheetBean[])v.toArray(new ViewTimesheetBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the view_timesheet on a ViewTimesheetBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewTimesheetBean bean
     * @throws DAOException
     */
    //29
    public ViewTimesheetBean decodeRow(ResultSet rs) throws DAOException
    {
        ViewTimesheetBean bean = this.createViewTimesheetBean();
        try
        {
            bean.setTbtApprovalStatus(Manager.getInteger(rs, 1));
            bean.setTbtGrandTotalHour(Manager.getInteger(rs, 2));
            bean.setTbtTotalHour(Manager.getInteger(rs, 3));
            bean.setTbtDay7Hour(Manager.getInteger(rs, 4));
            bean.setTbtDay6Hour(Manager.getInteger(rs, 5));
            bean.setTbtDay5Hour(Manager.getInteger(rs, 6));
            bean.setTbtDay4Hour(Manager.getInteger(rs, 7));
            bean.setTbtDay3Hour(Manager.getInteger(rs, 8));
            bean.setTbtDay2Hour(Manager.getInteger(rs, 9));
            bean.setTbtDay1Hour(Manager.getInteger(rs, 10));
            bean.setTbtStartOfWeek(rs.getString(11));
            bean.setTbtUpdateTime(rs.getTimestamp(12));
            bean.setTbtId(Manager.getInteger(rs, 13));
            bean.setTbpaPayable(Manager.getInteger(rs, 14));
            bean.setTbpaName(rs.getString(15));
            bean.setTbpaId(Manager.getInteger(rs, 16));
            bean.setTbpagName(rs.getString(17));
            bean.setTbpagProjectActivitiesGroupId(rs.getString(18));
            bean.setTbpagId(Manager.getInteger(rs, 19));
            bean.setTbpName(rs.getString(20));
            bean.setTbpProjectId(rs.getString(21));
            bean.setTbpId(Manager.getInteger(rs, 22));
            bean.setTbcCustomerId(rs.getString(23));
            bean.setTbcName(rs.getString(24));
            bean.setTbcId(Manager.getInteger(rs, 25));
            bean.setTbeName(rs.getString(26));
            bean.setTbeId(Manager.getInteger(rs, 27));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public ViewTimesheetBean toBean(ViewTimesheetBeanModel beanModel, ViewTimesheetBean bean)
    {
		if (beanModel.getTbtApprovalStatus() != null)
			bean.setTbtApprovalStatus(beanModel.getTbtApprovalStatus());

		if (bean.getTbtApprovalStatus() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtApprovalStatus().getClass().getName()))
			bean.setTbtApprovalStatus(beanModel.getTbtApprovalStatus());
		
		if (beanModel.getTbtGrandTotalHour() != null)
			bean.setTbtGrandTotalHour(beanModel.getTbtGrandTotalHour());

		if (bean.getTbtGrandTotalHour() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtGrandTotalHour().getClass().getName()))
			bean.setTbtGrandTotalHour(beanModel.getTbtGrandTotalHour());
		
		if (beanModel.getTbtTotalHour() != null)
			bean.setTbtTotalHour(beanModel.getTbtTotalHour());

		if (bean.getTbtTotalHour() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtTotalHour().getClass().getName()))
			bean.setTbtTotalHour(beanModel.getTbtTotalHour());
		
		if (beanModel.getTbtDay7Hour() != null)
			bean.setTbtDay7Hour(beanModel.getTbtDay7Hour());

		if (bean.getTbtDay7Hour() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtDay7Hour().getClass().getName()))
			bean.setTbtDay7Hour(beanModel.getTbtDay7Hour());
		
		if (beanModel.getTbtDay6Hour() != null)
			bean.setTbtDay6Hour(beanModel.getTbtDay6Hour());

		if (bean.getTbtDay6Hour() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtDay6Hour().getClass().getName()))
			bean.setTbtDay6Hour(beanModel.getTbtDay6Hour());
		
		if (beanModel.getTbtDay5Hour() != null)
			bean.setTbtDay5Hour(beanModel.getTbtDay5Hour());

		if (bean.getTbtDay5Hour() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtDay5Hour().getClass().getName()))
			bean.setTbtDay5Hour(beanModel.getTbtDay5Hour());
		
		if (beanModel.getTbtDay4Hour() != null)
			bean.setTbtDay4Hour(beanModel.getTbtDay4Hour());

		if (bean.getTbtDay4Hour() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtDay4Hour().getClass().getName()))
			bean.setTbtDay4Hour(beanModel.getTbtDay4Hour());
		
		if (beanModel.getTbtDay3Hour() != null)
			bean.setTbtDay3Hour(beanModel.getTbtDay3Hour());

		if (bean.getTbtDay3Hour() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtDay3Hour().getClass().getName()))
			bean.setTbtDay3Hour(beanModel.getTbtDay3Hour());
		
		if (beanModel.getTbtDay2Hour() != null)
			bean.setTbtDay2Hour(beanModel.getTbtDay2Hour());

		if (bean.getTbtDay2Hour() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtDay2Hour().getClass().getName()))
			bean.setTbtDay2Hour(beanModel.getTbtDay2Hour());
		
		if (beanModel.getTbtDay1Hour() != null)
			bean.setTbtDay1Hour(beanModel.getTbtDay1Hour());

		if (bean.getTbtDay1Hour() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtDay1Hour().getClass().getName()))
			bean.setTbtDay1Hour(beanModel.getTbtDay1Hour());
		
		if (beanModel.getTbtStartOfWeek() != null)
			bean.setTbtStartOfWeek(beanModel.getTbtStartOfWeek());

		if (bean.getTbtStartOfWeek() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtStartOfWeek().getClass().getName()))
			bean.setTbtStartOfWeek(beanModel.getTbtStartOfWeek());
		
		if (beanModel.getTbtUpdateTime() != null)
			bean.setTbtUpdateTime(beanModel.getTbtUpdateTime());

		if (bean.getTbtUpdateTime() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtUpdateTime().getClass().getName()))
			bean.setTbtUpdateTime(beanModel.getTbtUpdateTime());
		
		if (beanModel.getTbtId() != null)
			bean.setTbtId(beanModel.getTbtId());

		if (bean.getTbtId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbtId().getClass().getName()))
			bean.setTbtId(beanModel.getTbtId());
		
		if (beanModel.getTbpaPayable() != null)
			bean.setTbpaPayable(beanModel.getTbpaPayable());

		if (bean.getTbpaPayable() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpaPayable().getClass().getName()))
			bean.setTbpaPayable(beanModel.getTbpaPayable());
		
		if (beanModel.getTbpaName() != null)
			bean.setTbpaName(beanModel.getTbpaName());

		if (bean.getTbpaName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpaName().getClass().getName()))
			bean.setTbpaName(beanModel.getTbpaName());
		
		if (beanModel.getTbpaId() != null)
			bean.setTbpaId(beanModel.getTbpaId());

		if (bean.getTbpaId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpaId().getClass().getName()))
			bean.setTbpaId(beanModel.getTbpaId());
		
		if (beanModel.getTbpagName() != null)
			bean.setTbpagName(beanModel.getTbpagName());

		if (bean.getTbpagName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpagName().getClass().getName()))
			bean.setTbpagName(beanModel.getTbpagName());
		
		if (beanModel.getTbpagProjectActivitiesGroupId() != null)
			bean.setTbpagProjectActivitiesGroupId(beanModel.getTbpagProjectActivitiesGroupId());

		if (bean.getTbpagProjectActivitiesGroupId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpagProjectActivitiesGroupId().getClass().getName()))
			bean.setTbpagProjectActivitiesGroupId(beanModel.getTbpagProjectActivitiesGroupId());
		
		if (beanModel.getTbpagId() != null)
			bean.setTbpagId(beanModel.getTbpagId());

		if (bean.getTbpagId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpagId().getClass().getName()))
			bean.setTbpagId(beanModel.getTbpagId());
		
		if (beanModel.getTbpName() != null)
			bean.setTbpName(beanModel.getTbpName());

		if (bean.getTbpName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpName().getClass().getName()))
			bean.setTbpName(beanModel.getTbpName());
		
		if (beanModel.getTbpProjectId() != null)
			bean.setTbpProjectId(beanModel.getTbpProjectId());

		if (bean.getTbpProjectId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpProjectId().getClass().getName()))
			bean.setTbpProjectId(beanModel.getTbpProjectId());
		
		if (beanModel.getTbpId() != null)
			bean.setTbpId(beanModel.getTbpId());

		if (bean.getTbpId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbpId().getClass().getName()))
			bean.setTbpId(beanModel.getTbpId());
		
		if (beanModel.getTbcCustomerId() != null)
			bean.setTbcCustomerId(beanModel.getTbcCustomerId());

		if (bean.getTbcCustomerId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcCustomerId().getClass().getName()))
			bean.setTbcCustomerId(beanModel.getTbcCustomerId());
		
		if (beanModel.getTbcName() != null)
			bean.setTbcName(beanModel.getTbcName());

		if (bean.getTbcName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcName().getClass().getName()))
			bean.setTbcName(beanModel.getTbcName());
		
		if (beanModel.getTbcId() != null)
			bean.setTbcId(beanModel.getTbcId());

		if (bean.getTbcId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbcId().getClass().getName()))
			bean.setTbcId(beanModel.getTbcId());
		
		if (beanModel.getTbeName() != null)
			bean.setTbeName(beanModel.getTbeName());

		if (bean.getTbeName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeName().getClass().getName()))
			bean.setTbeName(beanModel.getTbeName());
		
		if (beanModel.getTbeId() != null)
			bean.setTbeId(beanModel.getTbeId());

		if (bean.getTbeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeId().getClass().getName()))
			bean.setTbeId(beanModel.getTbeId());
		
        return bean;
    }
	
    //29AA
    public ViewTimesheetBean[] toBeans(ViewTimesheetBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	ViewTimesheetBean beans[] = new ViewTimesheetBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public ViewTimesheetBeanModel toBeanModel(ViewTimesheetBean bean)
    {
    	ViewTimesheetBeanModel beanModel = new ViewTimesheetBeanModel();
		beanModel.setTbtApprovalStatus(bean.getTbtApprovalStatus());
		beanModel.setTbtGrandTotalHour(bean.getTbtGrandTotalHour());
		beanModel.setTbtTotalHour(bean.getTbtTotalHour());
		beanModel.setTbtDay7Hour(bean.getTbtDay7Hour());
		beanModel.setTbtDay6Hour(bean.getTbtDay6Hour());
		beanModel.setTbtDay5Hour(bean.getTbtDay5Hour());
		beanModel.setTbtDay4Hour(bean.getTbtDay4Hour());
		beanModel.setTbtDay3Hour(bean.getTbtDay3Hour());
		beanModel.setTbtDay2Hour(bean.getTbtDay2Hour());
		beanModel.setTbtDay1Hour(bean.getTbtDay1Hour());
		beanModel.setTbtStartOfWeek(bean.getTbtStartOfWeek());
		beanModel.setTbtUpdateTime(bean.getTbtUpdateTime());
		beanModel.setTbtId(bean.getTbtId());
		beanModel.setTbpaPayable(bean.getTbpaPayable());
		beanModel.setTbpaName(bean.getTbpaName());
		beanModel.setTbpaId(bean.getTbpaId());
		beanModel.setTbpagName(bean.getTbpagName());
		beanModel.setTbpagProjectActivitiesGroupId(bean.getTbpagProjectActivitiesGroupId());
		beanModel.setTbpagId(bean.getTbpagId());
		beanModel.setTbpName(bean.getTbpName());
		beanModel.setTbpProjectId(bean.getTbpProjectId());
		beanModel.setTbpId(bean.getTbpId());
		beanModel.setTbcCustomerId(bean.getTbcCustomerId());
		beanModel.setTbcName(bean.getTbcName());
		beanModel.setTbcId(bean.getTbcId());
		beanModel.setTbeName(bean.getTbeName());
		beanModel.setTbeId(bean.getTbeId());
		return beanModel;
    }
    
    //29CC
    public ViewTimesheetBeanModel[] toBeanModels(ViewTimesheetBean beans[])
    {
    	int beansCount = beans.length;
    	ViewTimesheetBeanModel beanModels[] = new ViewTimesheetBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the view_timesheet table on a ViewTimesheetBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting ViewTimesheetBean bean
     * @throws DAOException
     */
    //30
    public ViewTimesheetBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        ViewTimesheetBean bean = this.createViewTimesheetBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBT_APPROVAL_STATUS:
                        ++pos;
                        bean.setTbtApprovalStatus(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBT_GRAND_TOTAL_HOUR:
                        ++pos;
                        bean.setTbtGrandTotalHour(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBT_TOTAL_HOUR:
                        ++pos;
                        bean.setTbtTotalHour(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBT_DAY_7_HOUR:
                        ++pos;
                        bean.setTbtDay7Hour(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBT_DAY_6_HOUR:
                        ++pos;
                        bean.setTbtDay6Hour(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBT_DAY_5_HOUR:
                        ++pos;
                        bean.setTbtDay5Hour(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBT_DAY_4_HOUR:
                        ++pos;
                        bean.setTbtDay4Hour(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBT_DAY_3_HOUR:
                        ++pos;
                        bean.setTbtDay3Hour(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBT_DAY_2_HOUR:
                        ++pos;
                        bean.setTbtDay2Hour(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBT_DAY_1_HOUR:
                        ++pos;
                        bean.setTbtDay1Hour(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBT_START_OF_WEEK:
                        ++pos;
                        bean.setTbtStartOfWeek(rs.getString(pos));
                        break;
                    case ID_TBT_UPDATE_TIME:
                        ++pos;
                        bean.setTbtUpdateTime(rs.getTimestamp(pos));
                        break;
                    case ID_TBT_ID:
                        ++pos;
                        bean.setTbtId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBPA_PAYABLE:
                        ++pos;
                        bean.setTbpaPayable(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBPA_NAME:
                        ++pos;
                        bean.setTbpaName(rs.getString(pos));
                        break;
                    case ID_TBPA_ID:
                        ++pos;
                        bean.setTbpaId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBPAG_NAME:
                        ++pos;
                        bean.setTbpagName(rs.getString(pos));
                        break;
                    case ID_TBPAG_PROJECT_ACTIVITIES_GROUP_ID:
                        ++pos;
                        bean.setTbpagProjectActivitiesGroupId(rs.getString(pos));
                        break;
                    case ID_TBPAG_ID:
                        ++pos;
                        bean.setTbpagId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBP_NAME:
                        ++pos;
                        bean.setTbpName(rs.getString(pos));
                        break;
                    case ID_TBP_PROJECT_ID:
                        ++pos;
                        bean.setTbpProjectId(rs.getString(pos));
                        break;
                    case ID_TBP_ID:
                        ++pos;
                        bean.setTbpId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBC_CUSTOMER_ID:
                        ++pos;
                        bean.setTbcCustomerId(rs.getString(pos));
                        break;
                    case ID_TBC_NAME:
                        ++pos;
                        bean.setTbcName(rs.getString(pos));
                        break;
                    case ID_TBC_ID:
                        ++pos;
                        bean.setTbcId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_NAME:
                        ++pos;
                        bean.setTbeName(rs.getString(pos));
                        break;
                    case ID_TBE_ID:
                        ++pos;
                        bean.setTbeId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the view_timesheet on a ViewTimesheetBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting ViewTimesheetBean bean
     * @throws DAOException
     */
    //31
    public ViewTimesheetBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        ViewTimesheetBean bean = this.createViewTimesheetBean();
        try
        {
            bean.setTbtApprovalStatus(Manager.getInteger(rs, "tbt_approval_status"));
            bean.setTbtGrandTotalHour(Manager.getInteger(rs, "tbt_grand_total_hour"));
            bean.setTbtTotalHour(Manager.getInteger(rs, "tbt_total_hour"));
            bean.setTbtDay7Hour(Manager.getInteger(rs, "tbt_day_7_hour"));
            bean.setTbtDay6Hour(Manager.getInteger(rs, "tbt_day_6_hour"));
            bean.setTbtDay5Hour(Manager.getInteger(rs, "tbt_day_5_hour"));
            bean.setTbtDay4Hour(Manager.getInteger(rs, "tbt_day_4_hour"));
            bean.setTbtDay3Hour(Manager.getInteger(rs, "tbt_day_3_hour"));
            bean.setTbtDay2Hour(Manager.getInteger(rs, "tbt_day_2_hour"));
            bean.setTbtDay1Hour(Manager.getInteger(rs, "tbt_day_1_hour"));
            bean.setTbtStartOfWeek(rs.getString("tbt_start_of_week"));
            bean.setTbtUpdateTime(rs.getTimestamp("tbt_update_time"));
            bean.setTbtId(Manager.getInteger(rs, "tbt_id"));
            bean.setTbpaPayable(Manager.getInteger(rs, "tbpa_payable"));
            bean.setTbpaName(rs.getString("tbpa_name"));
            bean.setTbpaId(Manager.getInteger(rs, "tbpa_id"));
            bean.setTbpagName(rs.getString("tbpag_name"));
            bean.setTbpagProjectActivitiesGroupId(rs.getString("tbpag_project_activities_group_id"));
            bean.setTbpagId(Manager.getInteger(rs, "tbpag_id"));
            bean.setTbpName(rs.getString("tbp_name"));
            bean.setTbpProjectId(rs.getString("tbp_project_id"));
            bean.setTbpId(Manager.getInteger(rs, "tbp_id"));
            bean.setTbcCustomerId(rs.getString("tbc_customer_id"));
            bean.setTbcName(rs.getString("tbc_name"));
            bean.setTbcId(Manager.getInteger(rs, "tbc_id"));
            bean.setTbeName(rs.getString("tbe_name"));
            bean.setTbeId(Manager.getInteger(rs, "tbe_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of ViewTimesheetBean
     * @throws DAOException
     */
    //32
    public ViewTimesheetBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of ViewTimesheetBean
     * @throws DAOException
     */
    //33
    public ViewTimesheetBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (ViewTimesheetBean[])v.toArray(new ViewTimesheetBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of ViewTimesheetBean
     * @throws DAOException
     */
    //34
    public ViewTimesheetBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private ViewTimesheetListener listener = null;

    /**
     * Registers a unique ViewTimesheetListener listener.
     */
    //35
    public void registerListener(ViewTimesheetListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the ViewTimesheetBean bean.
     *
     * @param bean the ViewTimesheetBean bean to be saved
     */
    //36
    private void beforeInsert(ViewTimesheetBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the ViewTimesheetBean bean.
     *
     * @param bean the ViewTimesheetBean bean to be saved
     */
    //37
    private void afterInsert(ViewTimesheetBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the ViewTimesheetBean bean.
     *
     * @param bean the ViewTimesheetBean bean to be updated
     */
    //38
    private void beforeUpdate(ViewTimesheetBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the ViewTimesheetBean bean.
     *
     * @param bean the ViewTimesheetBean bean to be updated
     */
    //39
    private void afterUpdate(ViewTimesheetBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the ViewTimesheetBean bean.
     *
     * @param bean the ViewTimesheetBean bean to be deleted
     */
    private void beforeDelete(ViewTimesheetBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the ViewTimesheetBean bean.
     *
     * @param bean the ViewTimesheetBean bean to be deleted
     */
    private void afterDelete(ViewTimesheetBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
