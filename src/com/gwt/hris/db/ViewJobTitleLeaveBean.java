// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewJobTitleLeaveBean is a mapping of view_job_title_leave Table.
 * @author sql2java
*/
public class ViewJobTitleLeaveBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 4994539755735979829L;
	
    private Integer tbjtlPriorDate;

    private boolean tbjtlPriorDateIsModified = false;
    private boolean tbjtlPriorDateIsInitialized = false;

    private Integer tbjtlMin;

    private boolean tbjtlMinIsModified = false;
    private boolean tbjtlMinIsInitialized = false;

    private Integer tbjtlId;

    private boolean tbjtlIdIsModified = false;
    private boolean tbjtlIdIsInitialized = false;

    private Integer tbltReduction;

    private boolean tbltReductionIsModified = false;
    private boolean tbltReductionIsInitialized = false;

    private String tbltName;

    private boolean tbltNameIsModified = false;
    private boolean tbltNameIsInitialized = false;

    private String tbltLeaveTypesId;

    private boolean tbltLeaveTypesIdIsModified = false;
    private boolean tbltLeaveTypesIdIsInitialized = false;

    private Integer tbltId;

    private boolean tbltIdIsModified = false;
    private boolean tbltIdIsInitialized = false;

    private String tbjtName;

    private boolean tbjtNameIsModified = false;
    private boolean tbjtNameIsInitialized = false;

    private String tbjtJobTitleId;

    private boolean tbjtJobTitleIdIsModified = false;
    private boolean tbjtJobTitleIdIsInitialized = false;

    private Integer tbjtId;

    private boolean tbjtIdIsModified = false;
    private boolean tbjtIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewJobTitleLeaveBean is via the createViewJobTitleLeaveBean method in ViewJobTitleLeaveManager or
     * via the factory class ViewJobTitleLeaveFactory create method
     */
    protected ViewJobTitleLeaveBean()
    {
    }

    /**
     * Getter method for tbjtlPriorDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_job_title_leave.tbjtl_prior_date</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtlPriorDate
     */
    public Integer getTbjtlPriorDate()
    {
        return tbjtlPriorDate;
    }

    /**
     * Setter method for tbjtlPriorDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtlPriorDate
     */
    public void setTbjtlPriorDate(Integer newVal)
    {
        if ((newVal != null && tbjtlPriorDate != null && (newVal.compareTo(tbjtlPriorDate) == 0)) ||
            (newVal == null && tbjtlPriorDate == null && tbjtlPriorDateIsInitialized)) {
            return;
        }
        tbjtlPriorDate = newVal;
        tbjtlPriorDateIsModified = true;
        tbjtlPriorDateIsInitialized = true;
    }

    /**
     * Setter method for tbjtlPriorDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtlPriorDate
     */
    public void setTbjtlPriorDate(int newVal)
    {
        setTbjtlPriorDate(new Integer(newVal));
    }

    /**
     * Determines if the tbjtlPriorDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtlPriorDateModified()
    {
        return tbjtlPriorDateIsModified;
    }

    /**
     * Determines if the tbjtlPriorDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtlPriorDateInitialized()
    {
        return tbjtlPriorDateIsInitialized;
    }

    /**
     * Getter method for tbjtlMin.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_job_title_leave.tbjtl_min</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtlMin
     */
    public Integer getTbjtlMin()
    {
        return tbjtlMin;
    }

    /**
     * Setter method for tbjtlMin.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtlMin
     */
    public void setTbjtlMin(Integer newVal)
    {
        if ((newVal != null && tbjtlMin != null && (newVal.compareTo(tbjtlMin) == 0)) ||
            (newVal == null && tbjtlMin == null && tbjtlMinIsInitialized)) {
            return;
        }
        tbjtlMin = newVal;
        tbjtlMinIsModified = true;
        tbjtlMinIsInitialized = true;
    }

    /**
     * Setter method for tbjtlMin.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtlMin
     */
    public void setTbjtlMin(int newVal)
    {
        setTbjtlMin(new Integer(newVal));
    }

    /**
     * Determines if the tbjtlMin has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtlMinModified()
    {
        return tbjtlMinIsModified;
    }

    /**
     * Determines if the tbjtlMin has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtlMinInitialized()
    {
        return tbjtlMinIsInitialized;
    }

    /**
     * Getter method for tbjtlId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_job_title_leave.tbjtl_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtlId
     */
    public Integer getTbjtlId()
    {
        return tbjtlId;
    }

    /**
     * Setter method for tbjtlId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtlId
     */
    public void setTbjtlId(Integer newVal)
    {
        if ((newVal != null && tbjtlId != null && (newVal.compareTo(tbjtlId) == 0)) ||
            (newVal == null && tbjtlId == null && tbjtlIdIsInitialized)) {
            return;
        }
        tbjtlId = newVal;
        tbjtlIdIsModified = true;
        tbjtlIdIsInitialized = true;
    }

    /**
     * Setter method for tbjtlId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtlId
     */
    public void setTbjtlId(int newVal)
    {
        setTbjtlId(new Integer(newVal));
    }

    /**
     * Determines if the tbjtlId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtlIdModified()
    {
        return tbjtlIdIsModified;
    }

    /**
     * Determines if the tbjtlId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtlIdInitialized()
    {
        return tbjtlIdIsInitialized;
    }

    /**
     * Getter method for tbltReduction.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_job_title_leave.tblt_reduction</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbltReduction
     */
    public Integer getTbltReduction()
    {
        return tbltReduction;
    }

    /**
     * Setter method for tbltReduction.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltReduction
     */
    public void setTbltReduction(Integer newVal)
    {
        if ((newVal != null && tbltReduction != null && (newVal.compareTo(tbltReduction) == 0)) ||
            (newVal == null && tbltReduction == null && tbltReductionIsInitialized)) {
            return;
        }
        tbltReduction = newVal;
        tbltReductionIsModified = true;
        tbltReductionIsInitialized = true;
    }

    /**
     * Setter method for tbltReduction.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbltReduction
     */
    public void setTbltReduction(int newVal)
    {
        setTbltReduction(new Integer(newVal));
    }

    /**
     * Determines if the tbltReduction has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltReductionModified()
    {
        return tbltReductionIsModified;
    }

    /**
     * Determines if the tbltReduction has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltReductionInitialized()
    {
        return tbltReductionIsInitialized;
    }

    /**
     * Getter method for tbltName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_job_title_leave.tblt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbltName
     */
    public String getTbltName()
    {
        return tbltName;
    }

    /**
     * Setter method for tbltName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltName
     */
    public void setTbltName(String newVal)
    {
        if ((newVal != null && tbltName != null && (newVal.compareTo(tbltName) == 0)) ||
            (newVal == null && tbltName == null && tbltNameIsInitialized)) {
            return;
        }
        tbltName = newVal;
        tbltNameIsModified = true;
        tbltNameIsInitialized = true;
    }

    /**
     * Determines if the tbltName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltNameModified()
    {
        return tbltNameIsModified;
    }

    /**
     * Determines if the tbltName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltNameInitialized()
    {
        return tbltNameIsInitialized;
    }

    /**
     * Getter method for tbltLeaveTypesId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_job_title_leave.tblt_leave_types_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbltLeaveTypesId
     */
    public String getTbltLeaveTypesId()
    {
        return tbltLeaveTypesId;
    }

    /**
     * Setter method for tbltLeaveTypesId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltLeaveTypesId
     */
    public void setTbltLeaveTypesId(String newVal)
    {
        if ((newVal != null && tbltLeaveTypesId != null && (newVal.compareTo(tbltLeaveTypesId) == 0)) ||
            (newVal == null && tbltLeaveTypesId == null && tbltLeaveTypesIdIsInitialized)) {
            return;
        }
        tbltLeaveTypesId = newVal;
        tbltLeaveTypesIdIsModified = true;
        tbltLeaveTypesIdIsInitialized = true;
    }

    /**
     * Determines if the tbltLeaveTypesId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltLeaveTypesIdModified()
    {
        return tbltLeaveTypesIdIsModified;
    }

    /**
     * Determines if the tbltLeaveTypesId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltLeaveTypesIdInitialized()
    {
        return tbltLeaveTypesIdIsInitialized;
    }

    /**
     * Getter method for tbltId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_job_title_leave.tblt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbltId
     */
    public Integer getTbltId()
    {
        return tbltId;
    }

    /**
     * Setter method for tbltId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltId
     */
    public void setTbltId(Integer newVal)
    {
        if ((newVal != null && tbltId != null && (newVal.compareTo(tbltId) == 0)) ||
            (newVal == null && tbltId == null && tbltIdIsInitialized)) {
            return;
        }
        tbltId = newVal;
        tbltIdIsModified = true;
        tbltIdIsInitialized = true;
    }

    /**
     * Setter method for tbltId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbltId
     */
    public void setTbltId(int newVal)
    {
        setTbltId(new Integer(newVal));
    }

    /**
     * Determines if the tbltId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltIdModified()
    {
        return tbltIdIsModified;
    }

    /**
     * Determines if the tbltId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltIdInitialized()
    {
        return tbltIdIsInitialized;
    }

    /**
     * Getter method for tbjtName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_job_title_leave.tbjt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtName
     */
    public String getTbjtName()
    {
        return tbjtName;
    }

    /**
     * Setter method for tbjtName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtName
     */
    public void setTbjtName(String newVal)
    {
        if ((newVal != null && tbjtName != null && (newVal.compareTo(tbjtName) == 0)) ||
            (newVal == null && tbjtName == null && tbjtNameIsInitialized)) {
            return;
        }
        tbjtName = newVal;
        tbjtNameIsModified = true;
        tbjtNameIsInitialized = true;
    }

    /**
     * Determines if the tbjtName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtNameModified()
    {
        return tbjtNameIsModified;
    }

    /**
     * Determines if the tbjtName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtNameInitialized()
    {
        return tbjtNameIsInitialized;
    }

    /**
     * Getter method for tbjtJobTitleId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_job_title_leave.tbjt_job_title_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbjtJobTitleId
     */
    public String getTbjtJobTitleId()
    {
        return tbjtJobTitleId;
    }

    /**
     * Setter method for tbjtJobTitleId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtJobTitleId
     */
    public void setTbjtJobTitleId(String newVal)
    {
        if ((newVal != null && tbjtJobTitleId != null && (newVal.compareTo(tbjtJobTitleId) == 0)) ||
            (newVal == null && tbjtJobTitleId == null && tbjtJobTitleIdIsInitialized)) {
            return;
        }
        tbjtJobTitleId = newVal;
        tbjtJobTitleIdIsModified = true;
        tbjtJobTitleIdIsInitialized = true;
    }

    /**
     * Determines if the tbjtJobTitleId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtJobTitleIdModified()
    {
        return tbjtJobTitleIdIsModified;
    }

    /**
     * Determines if the tbjtJobTitleId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtJobTitleIdInitialized()
    {
        return tbjtJobTitleIdIsInitialized;
    }

    /**
     * Getter method for tbjtId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_job_title_leave.tbjt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtId
     */
    public Integer getTbjtId()
    {
        return tbjtId;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(Integer newVal)
    {
        if ((newVal != null && tbjtId != null && (newVal.compareTo(tbjtId) == 0)) ||
            (newVal == null && tbjtId == null && tbjtIdIsInitialized)) {
            return;
        }
        tbjtId = newVal;
        tbjtIdIsModified = true;
        tbjtIdIsInitialized = true;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(int newVal)
    {
        setTbjtId(new Integer(newVal));
    }

    /**
     * Determines if the tbjtId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtIdModified()
    {
        return tbjtIdIsModified;
    }

    /**
     * Determines if the tbjtId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtIdInitialized()
    {
        return tbjtIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbjtlPriorDateIsModified 		|| tbjtlMinIsModified  		|| tbjtlIdIsModified  		|| tbltReductionIsModified  		|| tbltNameIsModified  		|| tbltLeaveTypesIdIsModified  		|| tbltIdIsModified  		|| tbjtNameIsModified  		|| tbjtJobTitleIdIsModified  		|| tbjtIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbjtlPriorDateIsModified = false;
        tbjtlMinIsModified = false;
        tbjtlIdIsModified = false;
        tbltReductionIsModified = false;
        tbltNameIsModified = false;
        tbltLeaveTypesIdIsModified = false;
        tbltIdIsModified = false;
        tbjtNameIsModified = false;
        tbjtJobTitleIdIsModified = false;
        tbjtIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewJobTitleLeaveBean bean)
    {
        setTbjtlPriorDate(bean.getTbjtlPriorDate());
        setTbjtlMin(bean.getTbjtlMin());
        setTbjtlId(bean.getTbjtlId());
        setTbltReduction(bean.getTbltReduction());
        setTbltName(bean.getTbltName());
        setTbltLeaveTypesId(bean.getTbltLeaveTypesId());
        setTbltId(bean.getTbltId());
        setTbjtName(bean.getTbjtName());
        setTbjtJobTitleId(bean.getTbjtJobTitleId());
        setTbjtId(bean.getTbjtId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbjtl_prior_date", getTbjtlPriorDate() == null ? "" : getTbjtlPriorDate().toString());
        dictionnary.put("tbjtl_min", getTbjtlMin() == null ? "" : getTbjtlMin().toString());
        dictionnary.put("tbjtl_id", getTbjtlId() == null ? "" : getTbjtlId().toString());
        dictionnary.put("tblt_reduction", getTbltReduction() == null ? "" : getTbltReduction().toString());
        dictionnary.put("tblt_name", getTbltName() == null ? "" : getTbltName().toString());
        dictionnary.put("tblt_leave_types_id", getTbltLeaveTypesId() == null ? "" : getTbltLeaveTypesId().toString());
        dictionnary.put("tblt_id", getTbltId() == null ? "" : getTbltId().toString());
        dictionnary.put("tbjt_name", getTbjtName() == null ? "" : getTbjtName().toString());
        dictionnary.put("tbjt_job_title_id", getTbjtJobTitleId() == null ? "" : getTbjtJobTitleId().toString());
        dictionnary.put("tbjt_id", getTbjtId() == null ? "" : getTbjtId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbjtl_prior_date".equalsIgnoreCase(column) || "tbjtlPriorDate".equalsIgnoreCase(column)) {
            return getTbjtlPriorDate() == null ? "" : getTbjtlPriorDate().toString();
        } else if ("tbjtl_min".equalsIgnoreCase(column) || "tbjtlMin".equalsIgnoreCase(column)) {
            return getTbjtlMin() == null ? "" : getTbjtlMin().toString();
        } else if ("tbjtl_id".equalsIgnoreCase(column) || "tbjtlId".equalsIgnoreCase(column)) {
            return getTbjtlId() == null ? "" : getTbjtlId().toString();
        } else if ("tblt_reduction".equalsIgnoreCase(column) || "tbltReduction".equalsIgnoreCase(column)) {
            return getTbltReduction() == null ? "" : getTbltReduction().toString();
        } else if ("tblt_name".equalsIgnoreCase(column) || "tbltName".equalsIgnoreCase(column)) {
            return getTbltName() == null ? "" : getTbltName().toString();
        } else if ("tblt_leave_types_id".equalsIgnoreCase(column) || "tbltLeaveTypesId".equalsIgnoreCase(column)) {
            return getTbltLeaveTypesId() == null ? "" : getTbltLeaveTypesId().toString();
        } else if ("tblt_id".equalsIgnoreCase(column) || "tbltId".equalsIgnoreCase(column)) {
            return getTbltId() == null ? "" : getTbltId().toString();
        } else if ("tbjt_name".equalsIgnoreCase(column) || "tbjtName".equalsIgnoreCase(column)) {
            return getTbjtName() == null ? "" : getTbjtName().toString();
        } else if ("tbjt_job_title_id".equalsIgnoreCase(column) || "tbjtJobTitleId".equalsIgnoreCase(column)) {
            return getTbjtJobTitleId() == null ? "" : getTbjtJobTitleId().toString();
        } else if ("tbjt_id".equalsIgnoreCase(column) || "tbjtId".equalsIgnoreCase(column)) {
            return getTbjtId() == null ? "" : getTbjtId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewJobTitleLeaveBean)) {
            return false;
        }

		ViewJobTitleLeaveBean obj = (ViewJobTitleLeaveBean) object;
		return new EqualsBuilder()
            .append(getTbjtlPriorDate(), obj.getTbjtlPriorDate())
            .append(getTbjtlMin(), obj.getTbjtlMin())
            .append(getTbjtlId(), obj.getTbjtlId())
            .append(getTbltReduction(), obj.getTbltReduction())
            .append(getTbltName(), obj.getTbltName())
            .append(getTbltLeaveTypesId(), obj.getTbltLeaveTypesId())
            .append(getTbltId(), obj.getTbltId())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjtJobTitleId(), obj.getTbjtJobTitleId())
            .append(getTbjtId(), obj.getTbjtId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbjtlPriorDate())
            .append(getTbjtlMin())
            .append(getTbjtlId())
            .append(getTbltReduction())
            .append(getTbltName())
            .append(getTbltLeaveTypesId())
            .append(getTbltId())
            .append(getTbjtName())
            .append(getTbjtJobTitleId())
            .append(getTbjtId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbjtl_prior_date", getTbjtlPriorDate())
            .append("tbjtl_min", getTbjtlMin())
            .append("tbjtl_id", getTbjtlId())
            .append("tblt_reduction", getTbltReduction())
            .append("tblt_name", getTbltName())
            .append("tblt_leave_types_id", getTbltLeaveTypesId())
            .append("tblt_id", getTbltId())
            .append("tbjt_name", getTbjtName())
            .append("tbjt_job_title_id", getTbjtJobTitleId())
            .append("tbjt_id", getTbjtId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewJobTitleLeaveBean obj = (ViewJobTitleLeaveBean) object;
        return new CompareToBuilder()
            .append(getTbjtlPriorDate(), obj.getTbjtlPriorDate())
            .append(getTbjtlMin(), obj.getTbjtlMin())
            .append(getTbjtlId(), obj.getTbjtlId())
            .append(getTbltReduction(), obj.getTbltReduction())
            .append(getTbltName(), obj.getTbltName())
            .append(getTbltLeaveTypesId(), obj.getTbltLeaveTypesId())
            .append(getTbltId(), obj.getTbltId())
            .append(getTbjtName(), obj.getTbjtName())
            .append(getTbjtJobTitleId(), obj.getTbjtJobTitleId())
            .append(getTbjtId(), obj.getTbjtId())
            .toComparison();
   }
}
