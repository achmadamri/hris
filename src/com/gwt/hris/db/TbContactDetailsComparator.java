// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbContactDetailsBean objects.
 * @author sql2java
 */
public class TbContactDetailsComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbContactDetailsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbContactDetailsComparator(TbContactDetailsManager.ID_TBCD_OTHER_EMAIL, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbContactDetailsManager.ID_TBCD_OTHER_EMAIL
     *   <li>TbContactDetailsManager.ID_TBCD_WORK_PHONE
     *   <li>TbContactDetailsManager.ID_TBCD_MOBILE_PHONE
     *   <li>TbContactDetailsManager.ID_TBCD_HOME_PHONE
     *   <li>TbContactDetailsManager.ID_TBCD_ZIP_CODE
     *   <li>TbContactDetailsManager.ID_TBCD_PROVINCE
     *   <li>TbContactDetailsManager.ID_TBCD_CITY
     *   <li>TbContactDetailsManager.ID_TBCD_STREET
     *   <li>TbContactDetailsManager.ID_TBN_ID
     *   <li>TbContactDetailsManager.ID_TBE_ID
     * </ul>
     */
    public TbContactDetailsComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbContactDetailsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbContactDetailsComparator(TbContactDetailsManager.ID_TBCD_OTHER_EMAIL, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbContactDetailsManager.ID_TBCD_OTHER_EMAIL
     *   <li>TbContactDetailsManager.ID_TBCD_WORK_PHONE
     *   <li>TbContactDetailsManager.ID_TBCD_MOBILE_PHONE
     *   <li>TbContactDetailsManager.ID_TBCD_HOME_PHONE
     *   <li>TbContactDetailsManager.ID_TBCD_ZIP_CODE
     *   <li>TbContactDetailsManager.ID_TBCD_PROVINCE
     *   <li>TbContactDetailsManager.ID_TBCD_CITY
     *   <li>TbContactDetailsManager.ID_TBCD_STREET
     *   <li>TbContactDetailsManager.ID_TBN_ID
     *   <li>TbContactDetailsManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbContactDetailsComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbContactDetailsBean b1 = (TbContactDetailsBean)pObj1;
        TbContactDetailsBean b2 = (TbContactDetailsBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbContactDetailsManager.ID_TBCD_OTHER_EMAIL:
                if (b1.getTbcdOtherEmail() == null && b2.getTbcdOtherEmail() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdOtherEmail() == null && b2.getTbcdOtherEmail() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdOtherEmail() != null && b2.getTbcdOtherEmail() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdOtherEmail().compareTo(b2.getTbcdOtherEmail());
                }
                break;
            case TbContactDetailsManager.ID_TBCD_WORK_PHONE:
                if (b1.getTbcdWorkPhone() == null && b2.getTbcdWorkPhone() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdWorkPhone() == null && b2.getTbcdWorkPhone() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdWorkPhone() != null && b2.getTbcdWorkPhone() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdWorkPhone().compareTo(b2.getTbcdWorkPhone());
                }
                break;
            case TbContactDetailsManager.ID_TBCD_MOBILE_PHONE:
                if (b1.getTbcdMobilePhone() == null && b2.getTbcdMobilePhone() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdMobilePhone() == null && b2.getTbcdMobilePhone() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdMobilePhone() != null && b2.getTbcdMobilePhone() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdMobilePhone().compareTo(b2.getTbcdMobilePhone());
                }
                break;
            case TbContactDetailsManager.ID_TBCD_HOME_PHONE:
                if (b1.getTbcdHomePhone() == null && b2.getTbcdHomePhone() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdHomePhone() == null && b2.getTbcdHomePhone() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdHomePhone() != null && b2.getTbcdHomePhone() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdHomePhone().compareTo(b2.getTbcdHomePhone());
                }
                break;
            case TbContactDetailsManager.ID_TBCD_ZIP_CODE:
                if (b1.getTbcdZipCode() == null && b2.getTbcdZipCode() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdZipCode() == null && b2.getTbcdZipCode() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdZipCode() != null && b2.getTbcdZipCode() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdZipCode().compareTo(b2.getTbcdZipCode());
                }
                break;
            case TbContactDetailsManager.ID_TBCD_PROVINCE:
                if (b1.getTbcdProvince() == null && b2.getTbcdProvince() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdProvince() == null && b2.getTbcdProvince() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdProvince() != null && b2.getTbcdProvince() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdProvince().compareTo(b2.getTbcdProvince());
                }
                break;
            case TbContactDetailsManager.ID_TBCD_CITY:
                if (b1.getTbcdCity() == null && b2.getTbcdCity() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdCity() == null && b2.getTbcdCity() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdCity() != null && b2.getTbcdCity() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdCity().compareTo(b2.getTbcdCity());
                }
                break;
            case TbContactDetailsManager.ID_TBCD_STREET:
                if (b1.getTbcdStreet() == null && b2.getTbcdStreet() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdStreet() == null && b2.getTbcdStreet() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdStreet() != null && b2.getTbcdStreet() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdStreet().compareTo(b2.getTbcdStreet());
                }
                break;
            case TbContactDetailsManager.ID_TBN_ID:
                if (b1.getTbnId() == null && b2.getTbnId() != null) {
                    iReturn = -1;
                } else if (b1.getTbnId() == null && b2.getTbnId() == null) {
                    iReturn = 0;
                } else if (b1.getTbnId() != null && b2.getTbnId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbnId().compareTo(b2.getTbnId());
                }
                break;
            case TbContactDetailsManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
