// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbPphPotonganBean is a mapping of tb_pph_potongan Table.
 * @author sql2java
*/
public class TbPphPotonganBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -7834137041856610575L;
	
    private Double tbpphpNominal;

    private boolean tbpphpNominalIsModified = false;
    private boolean tbpphpNominalIsInitialized = false;

    private String tbpphpName;

    private boolean tbpphpNameIsModified = false;
    private boolean tbpphpNameIsInitialized = false;

    private Integer tbpphId;

    private boolean tbpphIdIsModified = false;
    private boolean tbpphIdIsInitialized = false;

    private Integer tbpphpId;

    private boolean tbpphpIdIsModified = false;
    private boolean tbpphpIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbPphPotonganBean is via the createTbPphPotonganBean method in TbPphPotonganManager or
     * via the factory class TbPphPotonganFactory create method
     */
    protected TbPphPotonganBean()
    {
    }

    /**
     * Getter method for tbpphpNominal.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_pph_potongan.tbpphp_nominal</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbpphpNominal
     */
    public Double getTbpphpNominal()
    {
        return tbpphpNominal;
    }

    /**
     * Setter method for tbpphpNominal.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphpNominal
     */
    public void setTbpphpNominal(Double newVal)
    {
        if ((newVal != null && tbpphpNominal != null && (newVal.compareTo(tbpphpNominal) == 0)) ||
            (newVal == null && tbpphpNominal == null && tbpphpNominalIsInitialized)) {
            return;
        }
        tbpphpNominal = newVal;
        tbpphpNominalIsModified = true;
        tbpphpNominalIsInitialized = true;
    }

    /**
     * Setter method for tbpphpNominal.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphpNominal
     */
    public void setTbpphpNominal(double newVal)
    {
        setTbpphpNominal(new Double(newVal));
    }

    /**
     * Determines if the tbpphpNominal has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphpNominalModified()
    {
        return tbpphpNominalIsModified;
    }

    /**
     * Determines if the tbpphpNominal has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphpNominalInitialized()
    {
        return tbpphpNominalIsInitialized;
    }

    /**
     * Getter method for tbpphpName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_pph_potongan.tbpphp_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpphpName
     */
    public String getTbpphpName()
    {
        return tbpphpName;
    }

    /**
     * Setter method for tbpphpName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphpName
     */
    public void setTbpphpName(String newVal)
    {
        if ((newVal != null && tbpphpName != null && (newVal.compareTo(tbpphpName) == 0)) ||
            (newVal == null && tbpphpName == null && tbpphpNameIsInitialized)) {
            return;
        }
        tbpphpName = newVal;
        tbpphpNameIsModified = true;
        tbpphpNameIsInitialized = true;
    }

    /**
     * Determines if the tbpphpName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphpNameModified()
    {
        return tbpphpNameIsModified;
    }

    /**
     * Determines if the tbpphpName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphpNameInitialized()
    {
        return tbpphpNameIsInitialized;
    }

    /**
     * Getter method for tbpphId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_pph_potongan.tbpph_id</li>
     * <li> foreign key: tb_pph.tbpph_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpphId
     */
    public Integer getTbpphId()
    {
        return tbpphId;
    }

    /**
     * Setter method for tbpphId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphId
     */
    public void setTbpphId(Integer newVal)
    {
        if ((newVal != null && tbpphId != null && (newVal.compareTo(tbpphId) == 0)) ||
            (newVal == null && tbpphId == null && tbpphIdIsInitialized)) {
            return;
        }
        tbpphId = newVal;
        tbpphIdIsModified = true;
        tbpphIdIsInitialized = true;
    }

    /**
     * Setter method for tbpphId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphId
     */
    public void setTbpphId(int newVal)
    {
        setTbpphId(new Integer(newVal));
    }

    /**
     * Determines if the tbpphId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphIdModified()
    {
        return tbpphIdIsModified;
    }

    /**
     * Determines if the tbpphId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphIdInitialized()
    {
        return tbpphIdIsInitialized;
    }

    /**
     * Getter method for tbpphpId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_pph_potongan.tbpphp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpphpId
     */
    public Integer getTbpphpId()
    {
        return tbpphpId;
    }

    /**
     * Setter method for tbpphpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpphpId
     */
    public void setTbpphpId(Integer newVal)
    {
        if ((newVal != null && tbpphpId != null && (newVal.compareTo(tbpphpId) == 0)) ||
            (newVal == null && tbpphpId == null && tbpphpIdIsInitialized)) {
            return;
        }
        tbpphpId = newVal;
        tbpphpIdIsModified = true;
        tbpphpIdIsInitialized = true;
    }

    /**
     * Setter method for tbpphpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpphpId
     */
    public void setTbpphpId(int newVal)
    {
        setTbpphpId(new Integer(newVal));
    }

    /**
     * Determines if the tbpphpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpphpIdModified()
    {
        return tbpphpIdIsModified;
    }

    /**
     * Determines if the tbpphpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpphpIdInitialized()
    {
        return tbpphpIdIsInitialized;
    }

    /** The TbPph referenced by this bean. */
    private TbPphBean referencedTbPph;
    /** Getter method for TbPphBean. */
    public TbPphBean getTbPphBean() {
        return this.referencedTbPph;
    }
    /** Setter method for TbPphBean. */
    public void setTbPphBean(TbPphBean reference) {
        this.referencedTbPph = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbpphpNominalIsModified 		|| tbpphpNameIsModified  		|| tbpphIdIsModified  		|| tbpphpIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbpphpNominalIsModified = false;
        tbpphpNameIsModified = false;
        tbpphIdIsModified = false;
        tbpphpIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbPphPotonganBean bean)
    {
        setTbpphpNominal(bean.getTbpphpNominal());
        setTbpphpName(bean.getTbpphpName());
        setTbpphId(bean.getTbpphId());
        setTbpphpId(bean.getTbpphpId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbpphp_nominal", getTbpphpNominal() == null ? "" : getTbpphpNominal().toString());
        dictionnary.put("tbpphp_name", getTbpphpName() == null ? "" : getTbpphpName().toString());
        dictionnary.put("tbpph_id", getTbpphId() == null ? "" : getTbpphId().toString());
        dictionnary.put("tbpphp_id", getTbpphpId() == null ? "" : getTbpphpId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbpphp_id", getTbpphpId() == null ? "" : getTbpphpId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbpphp_nominal".equalsIgnoreCase(column) || "tbpphpNominal".equalsIgnoreCase(column)) {
            return getTbpphpNominal() == null ? "" : getTbpphpNominal().toString();
        } else if ("tbpphp_name".equalsIgnoreCase(column) || "tbpphpName".equalsIgnoreCase(column)) {
            return getTbpphpName() == null ? "" : getTbpphpName().toString();
        } else if ("tbpph_id".equalsIgnoreCase(column) || "tbpphId".equalsIgnoreCase(column)) {
            return getTbpphId() == null ? "" : getTbpphId().toString();
        } else if ("tbpphp_id".equalsIgnoreCase(column) || "tbpphpId".equalsIgnoreCase(column)) {
            return getTbpphpId() == null ? "" : getTbpphpId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbPphPotonganBean)) {
            return false;
        }

		TbPphPotonganBean obj = (TbPphPotonganBean) object;
		return new EqualsBuilder()
            .append(getTbpphpNominal(), obj.getTbpphpNominal())
            .append(getTbpphpName(), obj.getTbpphpName())
            .append(getTbpphId(), obj.getTbpphId())
            .append(getTbpphpId(), obj.getTbpphpId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbpphpNominal())
            .append(getTbpphpName())
            .append(getTbpphId())
            .append(getTbpphpId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbpphp_nominal", getTbpphpNominal())
            .append("tbpphp_name", getTbpphpName())
            .append("tbpph_id", getTbpphId())
            .append("tbpphp_id", getTbpphpId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbPphPotonganBean obj = (TbPphPotonganBean) object;
        return new CompareToBuilder()
            .append(getTbpphpNominal(), obj.getTbpphpNominal())
            .append(getTbpphpName(), obj.getTbpphpName())
            .append(getTbpphId(), obj.getTbpphId())
            .append(getTbpphpId(), obj.getTbpphpId())
            .toComparison();
   }
}
