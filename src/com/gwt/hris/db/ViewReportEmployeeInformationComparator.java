// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the ViewReportEmployeeInformationBean objects.
 * @author sql2java
 */
public class ViewReportEmployeeInformationComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ViewReportEmployeeInformationComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewReportEmployeeInformationComparator(ViewReportEmployeeInformationManager.ID_TBE_JOINED_DATE, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_JOINED_DATE
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_STATUS
     *   <li>ViewReportEmployeeInformationManager.ID_TBS_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBL_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBAE_MAJOR
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_NAME_REPORT_TO
     *   <li>ViewReportEmployeeInformationManager.ID_TBP_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBES_CURRENCY_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBES_PAY_FREQUENCY
     *   <li>ViewReportEmployeeInformationManager.ID_TBES_BASIC_SALARY
     *   <li>ViewReportEmployeeInformationManager.ID_TBES_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBO_NAMA
     *   <li>ViewReportEmployeeInformationManager.ID_TBJ_JOINED_DATE
     *   <li>ViewReportEmployeeInformationManager.ID_TBJT_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBN_NAMA
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_WORK_PHONE
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_MOBILE_PHONE
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_HOME_PHONE
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_ZIP_CODE
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_PROVINCE
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_CITY
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_STREET
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_DRIVER_LICENSE_EXPIRY
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_DRIVER_LICENSE_NO
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_GENDER
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_SMOKER
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_MARITAL_STATUS
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_DOB
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_TAX_NO
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_ID_NO
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_EMPLOYEE_ID
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_ID
     * </ul>
     */
    public ViewReportEmployeeInformationComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ViewReportEmployeeInformationComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewReportEmployeeInformationComparator(ViewReportEmployeeInformationManager.ID_TBE_JOINED_DATE, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_JOINED_DATE
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_STATUS
     *   <li>ViewReportEmployeeInformationManager.ID_TBS_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBL_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBAE_MAJOR
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_NAME_REPORT_TO
     *   <li>ViewReportEmployeeInformationManager.ID_TBP_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBES_CURRENCY_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBES_PAY_FREQUENCY
     *   <li>ViewReportEmployeeInformationManager.ID_TBES_BASIC_SALARY
     *   <li>ViewReportEmployeeInformationManager.ID_TBES_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBO_NAMA
     *   <li>ViewReportEmployeeInformationManager.ID_TBJ_JOINED_DATE
     *   <li>ViewReportEmployeeInformationManager.ID_TBJT_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBN_NAMA
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_WORK_PHONE
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_MOBILE_PHONE
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_HOME_PHONE
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_ZIP_CODE
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_PROVINCE
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_CITY
     *   <li>ViewReportEmployeeInformationManager.ID_TBCD_STREET
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_DRIVER_LICENSE_EXPIRY
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_DRIVER_LICENSE_NO
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_GENDER
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_SMOKER
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_MARITAL_STATUS
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_DOB
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_TAX_NO
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_ID_NO
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_NAME
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_EMPLOYEE_ID
     *   <li>ViewReportEmployeeInformationManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ViewReportEmployeeInformationComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ViewReportEmployeeInformationBean b1 = (ViewReportEmployeeInformationBean)pObj1;
        ViewReportEmployeeInformationBean b2 = (ViewReportEmployeeInformationBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ViewReportEmployeeInformationManager.ID_TBE_JOINED_DATE:
                if (b1.getTbeJoinedDate() == null && b2.getTbeJoinedDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbeJoinedDate() == null && b2.getTbeJoinedDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbeJoinedDate() != null && b2.getTbeJoinedDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeJoinedDate().compareTo(b2.getTbeJoinedDate());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_STATUS:
                if (b1.getTbeStatus() == null && b2.getTbeStatus() != null) {
                    iReturn = -1;
                } else if (b1.getTbeStatus() == null && b2.getTbeStatus() == null) {
                    iReturn = 0;
                } else if (b1.getTbeStatus() != null && b2.getTbeStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeStatus().compareTo(b2.getTbeStatus());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBS_NAME:
                if (b1.getTbsName() == null && b2.getTbsName() != null) {
                    iReturn = -1;
                } else if (b1.getTbsName() == null && b2.getTbsName() == null) {
                    iReturn = 0;
                } else if (b1.getTbsName() != null && b2.getTbsName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbsName().compareTo(b2.getTbsName());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBL_NAME:
                if (b1.getTblName() == null && b2.getTblName() != null) {
                    iReturn = -1;
                } else if (b1.getTblName() == null && b2.getTblName() == null) {
                    iReturn = 0;
                } else if (b1.getTblName() != null && b2.getTblName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTblName().compareTo(b2.getTblName());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBAE_MAJOR:
                if (b1.getTbaeMajor() == null && b2.getTbaeMajor() != null) {
                    iReturn = -1;
                } else if (b1.getTbaeMajor() == null && b2.getTbaeMajor() == null) {
                    iReturn = 0;
                } else if (b1.getTbaeMajor() != null && b2.getTbaeMajor() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaeMajor().compareTo(b2.getTbaeMajor());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_NAME_REPORT_TO:
                if (b1.getTbeNameReportTo() == null && b2.getTbeNameReportTo() != null) {
                    iReturn = -1;
                } else if (b1.getTbeNameReportTo() == null && b2.getTbeNameReportTo() == null) {
                    iReturn = 0;
                } else if (b1.getTbeNameReportTo() != null && b2.getTbeNameReportTo() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeNameReportTo().compareTo(b2.getTbeNameReportTo());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBP_NAME:
                if (b1.getTbpName() == null && b2.getTbpName() != null) {
                    iReturn = -1;
                } else if (b1.getTbpName() == null && b2.getTbpName() == null) {
                    iReturn = 0;
                } else if (b1.getTbpName() != null && b2.getTbpName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpName().compareTo(b2.getTbpName());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBES_CURRENCY_NAME:
                if (b1.getTbesCurrencyName() == null && b2.getTbesCurrencyName() != null) {
                    iReturn = -1;
                } else if (b1.getTbesCurrencyName() == null && b2.getTbesCurrencyName() == null) {
                    iReturn = 0;
                } else if (b1.getTbesCurrencyName() != null && b2.getTbesCurrencyName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbesCurrencyName().compareTo(b2.getTbesCurrencyName());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBES_PAY_FREQUENCY:
                if (b1.getTbesPayFrequency() == null && b2.getTbesPayFrequency() != null) {
                    iReturn = -1;
                } else if (b1.getTbesPayFrequency() == null && b2.getTbesPayFrequency() == null) {
                    iReturn = 0;
                } else if (b1.getTbesPayFrequency() != null && b2.getTbesPayFrequency() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbesPayFrequency().compareTo(b2.getTbesPayFrequency());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBES_BASIC_SALARY:
                if (b1.getTbesBasicSalary() == null && b2.getTbesBasicSalary() != null) {
                    iReturn = -1;
                } else if (b1.getTbesBasicSalary() == null && b2.getTbesBasicSalary() == null) {
                    iReturn = 0;
                } else if (b1.getTbesBasicSalary() != null && b2.getTbesBasicSalary() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbesBasicSalary().compareTo(b2.getTbesBasicSalary());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBES_NAME:
                if (b1.getTbesName() == null && b2.getTbesName() != null) {
                    iReturn = -1;
                } else if (b1.getTbesName() == null && b2.getTbesName() == null) {
                    iReturn = 0;
                } else if (b1.getTbesName() != null && b2.getTbesName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbesName().compareTo(b2.getTbesName());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBO_NAMA:
                if (b1.getTboNama() == null && b2.getTboNama() != null) {
                    iReturn = -1;
                } else if (b1.getTboNama() == null && b2.getTboNama() == null) {
                    iReturn = 0;
                } else if (b1.getTboNama() != null && b2.getTboNama() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTboNama().compareTo(b2.getTboNama());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBJ_JOINED_DATE:
                if (b1.getTbjJoinedDate() == null && b2.getTbjJoinedDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbjJoinedDate() == null && b2.getTbjJoinedDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbjJoinedDate() != null && b2.getTbjJoinedDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjJoinedDate().compareTo(b2.getTbjJoinedDate());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBJT_NAME:
                if (b1.getTbjtName() == null && b2.getTbjtName() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtName() == null && b2.getTbjtName() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtName() != null && b2.getTbjtName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtName().compareTo(b2.getTbjtName());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBN_NAMA:
                if (b1.getTbnNama() == null && b2.getTbnNama() != null) {
                    iReturn = -1;
                } else if (b1.getTbnNama() == null && b2.getTbnNama() == null) {
                    iReturn = 0;
                } else if (b1.getTbnNama() != null && b2.getTbnNama() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbnNama().compareTo(b2.getTbnNama());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBCD_WORK_PHONE:
                if (b1.getTbcdWorkPhone() == null && b2.getTbcdWorkPhone() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdWorkPhone() == null && b2.getTbcdWorkPhone() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdWorkPhone() != null && b2.getTbcdWorkPhone() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdWorkPhone().compareTo(b2.getTbcdWorkPhone());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBCD_MOBILE_PHONE:
                if (b1.getTbcdMobilePhone() == null && b2.getTbcdMobilePhone() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdMobilePhone() == null && b2.getTbcdMobilePhone() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdMobilePhone() != null && b2.getTbcdMobilePhone() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdMobilePhone().compareTo(b2.getTbcdMobilePhone());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBCD_HOME_PHONE:
                if (b1.getTbcdHomePhone() == null && b2.getTbcdHomePhone() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdHomePhone() == null && b2.getTbcdHomePhone() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdHomePhone() != null && b2.getTbcdHomePhone() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdHomePhone().compareTo(b2.getTbcdHomePhone());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBCD_ZIP_CODE:
                if (b1.getTbcdZipCode() == null && b2.getTbcdZipCode() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdZipCode() == null && b2.getTbcdZipCode() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdZipCode() != null && b2.getTbcdZipCode() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdZipCode().compareTo(b2.getTbcdZipCode());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBCD_PROVINCE:
                if (b1.getTbcdProvince() == null && b2.getTbcdProvince() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdProvince() == null && b2.getTbcdProvince() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdProvince() != null && b2.getTbcdProvince() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdProvince().compareTo(b2.getTbcdProvince());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBCD_CITY:
                if (b1.getTbcdCity() == null && b2.getTbcdCity() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdCity() == null && b2.getTbcdCity() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdCity() != null && b2.getTbcdCity() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdCity().compareTo(b2.getTbcdCity());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBCD_STREET:
                if (b1.getTbcdStreet() == null && b2.getTbcdStreet() != null) {
                    iReturn = -1;
                } else if (b1.getTbcdStreet() == null && b2.getTbcdStreet() == null) {
                    iReturn = 0;
                } else if (b1.getTbcdStreet() != null && b2.getTbcdStreet() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcdStreet().compareTo(b2.getTbcdStreet());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_DRIVER_LICENSE_EXPIRY:
                if (b1.getTbeDriverLicenseExpiry() == null && b2.getTbeDriverLicenseExpiry() != null) {
                    iReturn = -1;
                } else if (b1.getTbeDriverLicenseExpiry() == null && b2.getTbeDriverLicenseExpiry() == null) {
                    iReturn = 0;
                } else if (b1.getTbeDriverLicenseExpiry() != null && b2.getTbeDriverLicenseExpiry() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeDriverLicenseExpiry().compareTo(b2.getTbeDriverLicenseExpiry());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_DRIVER_LICENSE_NO:
                if (b1.getTbeDriverLicenseNo() == null && b2.getTbeDriverLicenseNo() != null) {
                    iReturn = -1;
                } else if (b1.getTbeDriverLicenseNo() == null && b2.getTbeDriverLicenseNo() == null) {
                    iReturn = 0;
                } else if (b1.getTbeDriverLicenseNo() != null && b2.getTbeDriverLicenseNo() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeDriverLicenseNo().compareTo(b2.getTbeDriverLicenseNo());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_GENDER:
                if (b1.getTbeGender() == null && b2.getTbeGender() != null) {
                    iReturn = -1;
                } else if (b1.getTbeGender() == null && b2.getTbeGender() == null) {
                    iReturn = 0;
                } else if (b1.getTbeGender() != null && b2.getTbeGender() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeGender().compareTo(b2.getTbeGender());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_SMOKER:
                if (b1.getTbeSmoker() == null && b2.getTbeSmoker() != null) {
                    iReturn = -1;
                } else if (b1.getTbeSmoker() == null && b2.getTbeSmoker() == null) {
                    iReturn = 0;
                } else if (b1.getTbeSmoker() != null && b2.getTbeSmoker() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeSmoker().compareTo(b2.getTbeSmoker());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_MARITAL_STATUS:
                if (b1.getTbeMaritalStatus() == null && b2.getTbeMaritalStatus() != null) {
                    iReturn = -1;
                } else if (b1.getTbeMaritalStatus() == null && b2.getTbeMaritalStatus() == null) {
                    iReturn = 0;
                } else if (b1.getTbeMaritalStatus() != null && b2.getTbeMaritalStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeMaritalStatus().compareTo(b2.getTbeMaritalStatus());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_DOB:
                if (b1.getTbeDob() == null && b2.getTbeDob() != null) {
                    iReturn = -1;
                } else if (b1.getTbeDob() == null && b2.getTbeDob() == null) {
                    iReturn = 0;
                } else if (b1.getTbeDob() != null && b2.getTbeDob() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeDob().compareTo(b2.getTbeDob());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_TAX_NO:
                if (b1.getTbeTaxNo() == null && b2.getTbeTaxNo() != null) {
                    iReturn = -1;
                } else if (b1.getTbeTaxNo() == null && b2.getTbeTaxNo() == null) {
                    iReturn = 0;
                } else if (b1.getTbeTaxNo() != null && b2.getTbeTaxNo() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeTaxNo().compareTo(b2.getTbeTaxNo());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_ID_NO:
                if (b1.getTbeIdNo() == null && b2.getTbeIdNo() != null) {
                    iReturn = -1;
                } else if (b1.getTbeIdNo() == null && b2.getTbeIdNo() == null) {
                    iReturn = 0;
                } else if (b1.getTbeIdNo() != null && b2.getTbeIdNo() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeIdNo().compareTo(b2.getTbeIdNo());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_NAME:
                if (b1.getTbeName() == null && b2.getTbeName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeName() == null && b2.getTbeName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeName() != null && b2.getTbeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeName().compareTo(b2.getTbeName());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_EMPLOYEE_ID:
                if (b1.getTbeEmployeeId() == null && b2.getTbeEmployeeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeEmployeeId() == null && b2.getTbeEmployeeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeEmployeeId() != null && b2.getTbeEmployeeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeEmployeeId().compareTo(b2.getTbeEmployeeId());
                }
                break;
            case ViewReportEmployeeInformationManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
