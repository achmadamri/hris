// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewEmployeeShiftBean is a mapping of view_employee_shift Table.
 * @author sql2java
*/
public class ViewEmployeeShiftBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 4994539755735979829L;
	
    private Integer tbsDefault;

    private boolean tbsDefaultIsModified = false;
    private boolean tbsDefaultIsInitialized = false;

    private String tbsOutTime;

    private boolean tbsOutTimeIsModified = false;
    private boolean tbsOutTimeIsInitialized = false;

    private String tbsInTime;

    private boolean tbsInTimeIsModified = false;
    private boolean tbsInTimeIsInitialized = false;

    private String tbsName;

    private boolean tbsNameIsModified = false;
    private boolean tbsNameIsInitialized = false;

    private String tbsShiftId;

    private boolean tbsShiftIdIsModified = false;
    private boolean tbsShiftIdIsInitialized = false;

    private Integer tbsId;

    private boolean tbsIdIsModified = false;
    private boolean tbsIdIsInitialized = false;

    private String tbesDate;

    private boolean tbesDateIsModified = false;
    private boolean tbesDateIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewEmployeeShiftBean is via the createViewEmployeeShiftBean method in ViewEmployeeShiftManager or
     * via the factory class ViewEmployeeShiftFactory create method
     */
    protected ViewEmployeeShiftBean()
    {
    }

    /**
     * Getter method for tbsDefault.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_shift.tbs_default</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbsDefault
     */
    public Integer getTbsDefault()
    {
        return tbsDefault;
    }

    /**
     * Setter method for tbsDefault.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsDefault
     */
    public void setTbsDefault(Integer newVal)
    {
        if ((newVal != null && tbsDefault != null && (newVal.compareTo(tbsDefault) == 0)) ||
            (newVal == null && tbsDefault == null && tbsDefaultIsInitialized)) {
            return;
        }
        tbsDefault = newVal;
        tbsDefaultIsModified = true;
        tbsDefaultIsInitialized = true;
    }

    /**
     * Setter method for tbsDefault.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbsDefault
     */
    public void setTbsDefault(int newVal)
    {
        setTbsDefault(new Integer(newVal));
    }

    /**
     * Determines if the tbsDefault has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsDefaultModified()
    {
        return tbsDefaultIsModified;
    }

    /**
     * Determines if the tbsDefault has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsDefaultInitialized()
    {
        return tbsDefaultIsInitialized;
    }

    /**
     * Getter method for tbsOutTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_shift.tbs_out_time</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsOutTime
     */
    public String getTbsOutTime()
    {
        return tbsOutTime;
    }

    /**
     * Setter method for tbsOutTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsOutTime
     */
    public void setTbsOutTime(String newVal)
    {
        if ((newVal != null && tbsOutTime != null && (newVal.compareTo(tbsOutTime) == 0)) ||
            (newVal == null && tbsOutTime == null && tbsOutTimeIsInitialized)) {
            return;
        }
        tbsOutTime = newVal;
        tbsOutTimeIsModified = true;
        tbsOutTimeIsInitialized = true;
    }

    /**
     * Determines if the tbsOutTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsOutTimeModified()
    {
        return tbsOutTimeIsModified;
    }

    /**
     * Determines if the tbsOutTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsOutTimeInitialized()
    {
        return tbsOutTimeIsInitialized;
    }

    /**
     * Getter method for tbsInTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_shift.tbs_in_time</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsInTime
     */
    public String getTbsInTime()
    {
        return tbsInTime;
    }

    /**
     * Setter method for tbsInTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsInTime
     */
    public void setTbsInTime(String newVal)
    {
        if ((newVal != null && tbsInTime != null && (newVal.compareTo(tbsInTime) == 0)) ||
            (newVal == null && tbsInTime == null && tbsInTimeIsInitialized)) {
            return;
        }
        tbsInTime = newVal;
        tbsInTimeIsModified = true;
        tbsInTimeIsInitialized = true;
    }

    /**
     * Determines if the tbsInTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsInTimeModified()
    {
        return tbsInTimeIsModified;
    }

    /**
     * Determines if the tbsInTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsInTimeInitialized()
    {
        return tbsInTimeIsInitialized;
    }

    /**
     * Getter method for tbsName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_shift.tbs_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsName
     */
    public String getTbsName()
    {
        return tbsName;
    }

    /**
     * Setter method for tbsName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsName
     */
    public void setTbsName(String newVal)
    {
        if ((newVal != null && tbsName != null && (newVal.compareTo(tbsName) == 0)) ||
            (newVal == null && tbsName == null && tbsNameIsInitialized)) {
            return;
        }
        tbsName = newVal;
        tbsNameIsModified = true;
        tbsNameIsInitialized = true;
    }

    /**
     * Determines if the tbsName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsNameModified()
    {
        return tbsNameIsModified;
    }

    /**
     * Determines if the tbsName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsNameInitialized()
    {
        return tbsNameIsInitialized;
    }

    /**
     * Getter method for tbsShiftId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_shift.tbs_shift_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbsShiftId
     */
    public String getTbsShiftId()
    {
        return tbsShiftId;
    }

    /**
     * Setter method for tbsShiftId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsShiftId
     */
    public void setTbsShiftId(String newVal)
    {
        if ((newVal != null && tbsShiftId != null && (newVal.compareTo(tbsShiftId) == 0)) ||
            (newVal == null && tbsShiftId == null && tbsShiftIdIsInitialized)) {
            return;
        }
        tbsShiftId = newVal;
        tbsShiftIdIsModified = true;
        tbsShiftIdIsInitialized = true;
    }

    /**
     * Determines if the tbsShiftId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsShiftIdModified()
    {
        return tbsShiftIdIsModified;
    }

    /**
     * Determines if the tbsShiftId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsShiftIdInitialized()
    {
        return tbsShiftIdIsInitialized;
    }

    /**
     * Getter method for tbsId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_shift.tbs_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbsId
     */
    public Integer getTbsId()
    {
        return tbsId;
    }

    /**
     * Setter method for tbsId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsId
     */
    public void setTbsId(Integer newVal)
    {
        if ((newVal != null && tbsId != null && (newVal.compareTo(tbsId) == 0)) ||
            (newVal == null && tbsId == null && tbsIdIsInitialized)) {
            return;
        }
        tbsId = newVal;
        tbsIdIsModified = true;
        tbsIdIsInitialized = true;
    }

    /**
     * Setter method for tbsId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbsId
     */
    public void setTbsId(int newVal)
    {
        setTbsId(new Integer(newVal));
    }

    /**
     * Determines if the tbsId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsIdModified()
    {
        return tbsIdIsModified;
    }

    /**
     * Determines if the tbsId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsIdInitialized()
    {
        return tbsIdIsInitialized;
    }

    /**
     * Getter method for tbesDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_shift.tbes_date</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbesDate
     */
    public String getTbesDate()
    {
        return tbesDate;
    }

    /**
     * Setter method for tbesDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesDate
     */
    public void setTbesDate(String newVal)
    {
        if ((newVal != null && tbesDate != null && (newVal.compareTo(tbesDate) == 0)) ||
            (newVal == null && tbesDate == null && tbesDateIsInitialized)) {
            return;
        }
        tbesDate = newVal;
        tbesDateIsModified = true;
        tbesDateIsInitialized = true;
    }

    /**
     * Determines if the tbesDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesDateModified()
    {
        return tbesDateIsModified;
    }

    /**
     * Determines if the tbesDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesDateInitialized()
    {
        return tbesDateIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_shift.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_shift.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbsDefaultIsModified 		|| tbsOutTimeIsModified  		|| tbsInTimeIsModified  		|| tbsNameIsModified  		|| tbsShiftIdIsModified  		|| tbsIdIsModified  		|| tbesDateIsModified  		|| tbeNameIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbsDefaultIsModified = false;
        tbsOutTimeIsModified = false;
        tbsInTimeIsModified = false;
        tbsNameIsModified = false;
        tbsShiftIdIsModified = false;
        tbsIdIsModified = false;
        tbesDateIsModified = false;
        tbeNameIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewEmployeeShiftBean bean)
    {
        setTbsDefault(bean.getTbsDefault());
        setTbsOutTime(bean.getTbsOutTime());
        setTbsInTime(bean.getTbsInTime());
        setTbsName(bean.getTbsName());
        setTbsShiftId(bean.getTbsShiftId());
        setTbsId(bean.getTbsId());
        setTbesDate(bean.getTbesDate());
        setTbeName(bean.getTbeName());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbs_default", getTbsDefault() == null ? "" : getTbsDefault().toString());
        dictionnary.put("tbs_out_time", getTbsOutTime() == null ? "" : getTbsOutTime().toString());
        dictionnary.put("tbs_in_time", getTbsInTime() == null ? "" : getTbsInTime().toString());
        dictionnary.put("tbs_name", getTbsName() == null ? "" : getTbsName().toString());
        dictionnary.put("tbs_shift_id", getTbsShiftId() == null ? "" : getTbsShiftId().toString());
        dictionnary.put("tbs_id", getTbsId() == null ? "" : getTbsId().toString());
        dictionnary.put("tbes_date", getTbesDate() == null ? "" : getTbesDate().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbs_default".equalsIgnoreCase(column) || "tbsDefault".equalsIgnoreCase(column)) {
            return getTbsDefault() == null ? "" : getTbsDefault().toString();
        } else if ("tbs_out_time".equalsIgnoreCase(column) || "tbsOutTime".equalsIgnoreCase(column)) {
            return getTbsOutTime() == null ? "" : getTbsOutTime().toString();
        } else if ("tbs_in_time".equalsIgnoreCase(column) || "tbsInTime".equalsIgnoreCase(column)) {
            return getTbsInTime() == null ? "" : getTbsInTime().toString();
        } else if ("tbs_name".equalsIgnoreCase(column) || "tbsName".equalsIgnoreCase(column)) {
            return getTbsName() == null ? "" : getTbsName().toString();
        } else if ("tbs_shift_id".equalsIgnoreCase(column) || "tbsShiftId".equalsIgnoreCase(column)) {
            return getTbsShiftId() == null ? "" : getTbsShiftId().toString();
        } else if ("tbs_id".equalsIgnoreCase(column) || "tbsId".equalsIgnoreCase(column)) {
            return getTbsId() == null ? "" : getTbsId().toString();
        } else if ("tbes_date".equalsIgnoreCase(column) || "tbesDate".equalsIgnoreCase(column)) {
            return getTbesDate() == null ? "" : getTbesDate().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewEmployeeShiftBean)) {
            return false;
        }

		ViewEmployeeShiftBean obj = (ViewEmployeeShiftBean) object;
		return new EqualsBuilder()
            .append(getTbsDefault(), obj.getTbsDefault())
            .append(getTbsOutTime(), obj.getTbsOutTime())
            .append(getTbsInTime(), obj.getTbsInTime())
            .append(getTbsName(), obj.getTbsName())
            .append(getTbsShiftId(), obj.getTbsShiftId())
            .append(getTbsId(), obj.getTbsId())
            .append(getTbesDate(), obj.getTbesDate())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbsDefault())
            .append(getTbsOutTime())
            .append(getTbsInTime())
            .append(getTbsName())
            .append(getTbsShiftId())
            .append(getTbsId())
            .append(getTbesDate())
            .append(getTbeName())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbs_default", getTbsDefault())
            .append("tbs_out_time", getTbsOutTime())
            .append("tbs_in_time", getTbsInTime())
            .append("tbs_name", getTbsName())
            .append("tbs_shift_id", getTbsShiftId())
            .append("tbs_id", getTbsId())
            .append("tbes_date", getTbesDate())
            .append("tbe_name", getTbeName())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewEmployeeShiftBean obj = (ViewEmployeeShiftBean) object;
        return new CompareToBuilder()
            .append(getTbsDefault(), obj.getTbsDefault())
            .append(getTbsOutTime(), obj.getTbsOutTime())
            .append(getTbsInTime(), obj.getTbsInTime())
            .append(getTbsName(), obj.getTbsName())
            .append(getTbsShiftId(), obj.getTbsShiftId())
            .append(getTbsId(), obj.getTbsId())
            .append(getTbesDate(), obj.getTbesDate())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
