// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbPttBean is a mapping of tb_ptt Table.
 * @author sql2java
*/
public class TbPttBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -4706594956444383291L;
	
    private String tbpttName;

    private boolean tbpttNameIsModified = false;
    private boolean tbpttNameIsInitialized = false;

    private String tbpttPttId;

    private boolean tbpttPttIdIsModified = false;
    private boolean tbpttPttIdIsInitialized = false;

    private Integer tbpttId;

    private boolean tbpttIdIsModified = false;
    private boolean tbpttIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbPttBean is via the createTbPttBean method in TbPttManager or
     * via the factory class TbPttFactory create method
     */
    protected TbPttBean()
    {
    }

    /**
     * Getter method for tbpttName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_ptt.tbptt_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpttName
     */
    public String getTbpttName()
    {
        return tbpttName;
    }

    /**
     * Setter method for tbpttName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpttName
     */
    public void setTbpttName(String newVal)
    {
        if ((newVal != null && tbpttName != null && (newVal.compareTo(tbpttName) == 0)) ||
            (newVal == null && tbpttName == null && tbpttNameIsInitialized)) {
            return;
        }
        tbpttName = newVal;
        tbpttNameIsModified = true;
        tbpttNameIsInitialized = true;
    }

    /**
     * Determines if the tbpttName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpttNameModified()
    {
        return tbpttNameIsModified;
    }

    /**
     * Determines if the tbpttName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpttNameInitialized()
    {
        return tbpttNameIsInitialized;
    }

    /**
     * Getter method for tbpttPttId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_ptt.tbptt_ptt_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpttPttId
     */
    public String getTbpttPttId()
    {
        return tbpttPttId;
    }

    /**
     * Setter method for tbpttPttId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpttPttId
     */
    public void setTbpttPttId(String newVal)
    {
        if ((newVal != null && tbpttPttId != null && (newVal.compareTo(tbpttPttId) == 0)) ||
            (newVal == null && tbpttPttId == null && tbpttPttIdIsInitialized)) {
            return;
        }
        tbpttPttId = newVal;
        tbpttPttIdIsModified = true;
        tbpttPttIdIsInitialized = true;
    }

    /**
     * Determines if the tbpttPttId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpttPttIdModified()
    {
        return tbpttPttIdIsModified;
    }

    /**
     * Determines if the tbpttPttId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpttPttIdInitialized()
    {
        return tbpttPttIdIsInitialized;
    }

    /**
     * Getter method for tbpttId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_ptt.tbptt_id</li>
     * <li> imported key: tb_employee_ptt.tbptt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpttId
     */
    public Integer getTbpttId()
    {
        return tbpttId;
    }

    /**
     * Setter method for tbpttId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpttId
     */
    public void setTbpttId(Integer newVal)
    {
        if ((newVal != null && tbpttId != null && (newVal.compareTo(tbpttId) == 0)) ||
            (newVal == null && tbpttId == null && tbpttIdIsInitialized)) {
            return;
        }
        tbpttId = newVal;
        tbpttIdIsModified = true;
        tbpttIdIsInitialized = true;
    }

    /**
     * Setter method for tbpttId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpttId
     */
    public void setTbpttId(int newVal)
    {
        setTbpttId(new Integer(newVal));
    }

    /**
     * Determines if the tbpttId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpttIdModified()
    {
        return tbpttIdIsModified;
    }

    /**
     * Determines if the tbpttId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpttIdInitialized()
    {
        return tbpttIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbpttNameIsModified 		|| tbpttPttIdIsModified  		|| tbpttIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbpttNameIsModified = false;
        tbpttPttIdIsModified = false;
        tbpttIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbPttBean bean)
    {
        setTbpttName(bean.getTbpttName());
        setTbpttPttId(bean.getTbpttPttId());
        setTbpttId(bean.getTbpttId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbptt_name", getTbpttName() == null ? "" : getTbpttName().toString());
        dictionnary.put("tbptt_ptt_id", getTbpttPttId() == null ? "" : getTbpttPttId().toString());
        dictionnary.put("tbptt_id", getTbpttId() == null ? "" : getTbpttId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbptt_id", getTbpttId() == null ? "" : getTbpttId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbptt_name".equalsIgnoreCase(column) || "tbpttName".equalsIgnoreCase(column)) {
            return getTbpttName() == null ? "" : getTbpttName().toString();
        } else if ("tbptt_ptt_id".equalsIgnoreCase(column) || "tbpttPttId".equalsIgnoreCase(column)) {
            return getTbpttPttId() == null ? "" : getTbpttPttId().toString();
        } else if ("tbptt_id".equalsIgnoreCase(column) || "tbpttId".equalsIgnoreCase(column)) {
            return getTbpttId() == null ? "" : getTbpttId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbPttBean)) {
            return false;
        }

		TbPttBean obj = (TbPttBean) object;
		return new EqualsBuilder()
            .append(getTbpttName(), obj.getTbpttName())
            .append(getTbpttPttId(), obj.getTbpttPttId())
            .append(getTbpttId(), obj.getTbpttId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbpttName())
            .append(getTbpttPttId())
            .append(getTbpttId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbptt_name", getTbpttName())
            .append("tbptt_ptt_id", getTbpttPttId())
            .append("tbptt_id", getTbpttId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbPttBean obj = (TbPttBean) object;
        return new CompareToBuilder()
            .append(getTbpttName(), obj.getTbpttName())
            .append(getTbpttPttId(), obj.getTbpttPttId())
            .append(getTbpttId(), obj.getTbpttId())
            .toComparison();
   }
}
