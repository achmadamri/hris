// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbApplicantsBean is a mapping of tb_applicants Table.
 * @author sql2java
*/
public class TbApplicantsBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 2822523016679959875L;
	
    private Integer tbvId;

    private boolean tbvIdIsModified = false;
    private boolean tbvIdIsInitialized = false;

    private Integer tbaStatus;

    private boolean tbaStatusIsModified = false;
    private boolean tbaStatusIsInitialized = false;

    private String tbaResumeFileNameExisting;

    private boolean tbaResumeFileNameExistingIsModified = false;
    private boolean tbaResumeFileNameExistingIsInitialized = false;

    private String tbaResumeFileName;

    private boolean tbaResumeFileNameIsModified = false;
    private boolean tbaResumeFileNameIsInitialized = false;

    private java.sql.Timestamp tbaDate;

    private boolean tbaDateIsModified = false;
    private boolean tbaDateIsInitialized = false;

    private String tbaComments;

    private boolean tbaCommentsIsModified = false;
    private boolean tbaCommentsIsInitialized = false;

    private String tbaMobile;

    private boolean tbaMobileIsModified = false;
    private boolean tbaMobileIsInitialized = false;

    private String tbaPhone;

    private boolean tbaPhoneIsModified = false;
    private boolean tbaPhoneIsInitialized = false;

    private String tbaEmail;

    private boolean tbaEmailIsModified = false;
    private boolean tbaEmailIsInitialized = false;

    private String tbaName;

    private boolean tbaNameIsModified = false;
    private boolean tbaNameIsInitialized = false;

    private String tbaNickName;

    private boolean tbaNickNameIsModified = false;
    private boolean tbaNickNameIsInitialized = false;

    private String tbaLastName;

    private boolean tbaLastNameIsModified = false;
    private boolean tbaLastNameIsInitialized = false;

    private String tbaMiddleName;

    private boolean tbaMiddleNameIsModified = false;
    private boolean tbaMiddleNameIsInitialized = false;

    private String tbaFirstName;

    private boolean tbaFirstNameIsModified = false;
    private boolean tbaFirstNameIsInitialized = false;

    private String tbaApplicantsId;

    private boolean tbaApplicantsIdIsModified = false;
    private boolean tbaApplicantsIdIsInitialized = false;

    private Integer tbaId;

    private boolean tbaIdIsModified = false;
    private boolean tbaIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbApplicantsBean is via the createTbApplicantsBean method in TbApplicantsManager or
     * via the factory class TbApplicantsFactory create method
     */
    protected TbApplicantsBean()
    {
    }

    /**
     * Getter method for tbvId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tbv_id</li>
     * <li> foreign key: tb_vacancy.tbv_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbvId
     */
    public Integer getTbvId()
    {
        return tbvId;
    }

    /**
     * Setter method for tbvId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvId
     */
    public void setTbvId(Integer newVal)
    {
        if ((newVal != null && tbvId != null && (newVal.compareTo(tbvId) == 0)) ||
            (newVal == null && tbvId == null && tbvIdIsInitialized)) {
            return;
        }
        tbvId = newVal;
        tbvIdIsModified = true;
        tbvIdIsInitialized = true;
    }

    /**
     * Setter method for tbvId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbvId
     */
    public void setTbvId(int newVal)
    {
        setTbvId(new Integer(newVal));
    }

    /**
     * Determines if the tbvId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvIdModified()
    {
        return tbvIdIsModified;
    }

    /**
     * Determines if the tbvId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvIdInitialized()
    {
        return tbvIdIsInitialized;
    }

    /**
     * Getter method for tbaStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_status</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaStatus
     */
    public Integer getTbaStatus()
    {
        return tbaStatus;
    }

    /**
     * Setter method for tbaStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaStatus
     */
    public void setTbaStatus(Integer newVal)
    {
        if ((newVal != null && tbaStatus != null && (newVal.compareTo(tbaStatus) == 0)) ||
            (newVal == null && tbaStatus == null && tbaStatusIsInitialized)) {
            return;
        }
        tbaStatus = newVal;
        tbaStatusIsModified = true;
        tbaStatusIsInitialized = true;
    }

    /**
     * Setter method for tbaStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaStatus
     */
    public void setTbaStatus(int newVal)
    {
        setTbaStatus(new Integer(newVal));
    }

    /**
     * Determines if the tbaStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaStatusModified()
    {
        return tbaStatusIsModified;
    }

    /**
     * Determines if the tbaStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaStatusInitialized()
    {
        return tbaStatusIsInitialized;
    }

    /**
     * Getter method for tbaResumeFileNameExisting.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_resume_file_name_existing</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaResumeFileNameExisting
     */
    public String getTbaResumeFileNameExisting()
    {
        return tbaResumeFileNameExisting;
    }

    /**
     * Setter method for tbaResumeFileNameExisting.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaResumeFileNameExisting
     */
    public void setTbaResumeFileNameExisting(String newVal)
    {
        if ((newVal != null && tbaResumeFileNameExisting != null && (newVal.compareTo(tbaResumeFileNameExisting) == 0)) ||
            (newVal == null && tbaResumeFileNameExisting == null && tbaResumeFileNameExistingIsInitialized)) {
            return;
        }
        tbaResumeFileNameExisting = newVal;
        tbaResumeFileNameExistingIsModified = true;
        tbaResumeFileNameExistingIsInitialized = true;
    }

    /**
     * Determines if the tbaResumeFileNameExisting has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaResumeFileNameExistingModified()
    {
        return tbaResumeFileNameExistingIsModified;
    }

    /**
     * Determines if the tbaResumeFileNameExisting has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaResumeFileNameExistingInitialized()
    {
        return tbaResumeFileNameExistingIsInitialized;
    }

    /**
     * Getter method for tbaResumeFileName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_resume_file_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaResumeFileName
     */
    public String getTbaResumeFileName()
    {
        return tbaResumeFileName;
    }

    /**
     * Setter method for tbaResumeFileName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaResumeFileName
     */
    public void setTbaResumeFileName(String newVal)
    {
        if ((newVal != null && tbaResumeFileName != null && (newVal.compareTo(tbaResumeFileName) == 0)) ||
            (newVal == null && tbaResumeFileName == null && tbaResumeFileNameIsInitialized)) {
            return;
        }
        tbaResumeFileName = newVal;
        tbaResumeFileNameIsModified = true;
        tbaResumeFileNameIsInitialized = true;
    }

    /**
     * Determines if the tbaResumeFileName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaResumeFileNameModified()
    {
        return tbaResumeFileNameIsModified;
    }

    /**
     * Determines if the tbaResumeFileName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaResumeFileNameInitialized()
    {
        return tbaResumeFileNameIsInitialized;
    }

    /**
     * Getter method for tbaDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaDate
     */
    public java.sql.Timestamp getTbaDate()
    {
        return tbaDate;
    }

    /**
     * Setter method for tbaDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaDate
     */
    public void setTbaDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaDate != null && (newVal.compareTo(tbaDate) == 0)) ||
            (newVal == null && tbaDate == null && tbaDateIsInitialized)) {
            return;
        }
        tbaDate = newVal;
        tbaDateIsModified = true;
        tbaDateIsInitialized = true;
    }

    /**
     * Setter method for tbaDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaDate
     */
    public void setTbaDate(long newVal)
    {
        setTbaDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaDateModified()
    {
        return tbaDateIsModified;
    }

    /**
     * Determines if the tbaDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaDateInitialized()
    {
        return tbaDateIsInitialized;
    }

    /**
     * Getter method for tbaComments.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_comments</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaComments
     */
    public String getTbaComments()
    {
        return tbaComments;
    }

    /**
     * Setter method for tbaComments.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaComments
     */
    public void setTbaComments(String newVal)
    {
        if ((newVal != null && tbaComments != null && (newVal.compareTo(tbaComments) == 0)) ||
            (newVal == null && tbaComments == null && tbaCommentsIsInitialized)) {
            return;
        }
        tbaComments = newVal;
        tbaCommentsIsModified = true;
        tbaCommentsIsInitialized = true;
    }

    /**
     * Determines if the tbaComments has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaCommentsModified()
    {
        return tbaCommentsIsModified;
    }

    /**
     * Determines if the tbaComments has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaCommentsInitialized()
    {
        return tbaCommentsIsInitialized;
    }

    /**
     * Getter method for tbaMobile.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_mobile</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaMobile
     */
    public String getTbaMobile()
    {
        return tbaMobile;
    }

    /**
     * Setter method for tbaMobile.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaMobile
     */
    public void setTbaMobile(String newVal)
    {
        if ((newVal != null && tbaMobile != null && (newVal.compareTo(tbaMobile) == 0)) ||
            (newVal == null && tbaMobile == null && tbaMobileIsInitialized)) {
            return;
        }
        tbaMobile = newVal;
        tbaMobileIsModified = true;
        tbaMobileIsInitialized = true;
    }

    /**
     * Determines if the tbaMobile has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaMobileModified()
    {
        return tbaMobileIsModified;
    }

    /**
     * Determines if the tbaMobile has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaMobileInitialized()
    {
        return tbaMobileIsInitialized;
    }

    /**
     * Getter method for tbaPhone.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_phone</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaPhone
     */
    public String getTbaPhone()
    {
        return tbaPhone;
    }

    /**
     * Setter method for tbaPhone.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaPhone
     */
    public void setTbaPhone(String newVal)
    {
        if ((newVal != null && tbaPhone != null && (newVal.compareTo(tbaPhone) == 0)) ||
            (newVal == null && tbaPhone == null && tbaPhoneIsInitialized)) {
            return;
        }
        tbaPhone = newVal;
        tbaPhoneIsModified = true;
        tbaPhoneIsInitialized = true;
    }

    /**
     * Determines if the tbaPhone has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaPhoneModified()
    {
        return tbaPhoneIsModified;
    }

    /**
     * Determines if the tbaPhone has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaPhoneInitialized()
    {
        return tbaPhoneIsInitialized;
    }

    /**
     * Getter method for tbaEmail.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_email</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaEmail
     */
    public String getTbaEmail()
    {
        return tbaEmail;
    }

    /**
     * Setter method for tbaEmail.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaEmail
     */
    public void setTbaEmail(String newVal)
    {
        if ((newVal != null && tbaEmail != null && (newVal.compareTo(tbaEmail) == 0)) ||
            (newVal == null && tbaEmail == null && tbaEmailIsInitialized)) {
            return;
        }
        tbaEmail = newVal;
        tbaEmailIsModified = true;
        tbaEmailIsInitialized = true;
    }

    /**
     * Determines if the tbaEmail has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaEmailModified()
    {
        return tbaEmailIsModified;
    }

    /**
     * Determines if the tbaEmail has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaEmailInitialized()
    {
        return tbaEmailIsInitialized;
    }

    /**
     * Getter method for tbaName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaName
     */
    public String getTbaName()
    {
        return tbaName;
    }

    /**
     * Setter method for tbaName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaName
     */
    public void setTbaName(String newVal)
    {
        if ((newVal != null && tbaName != null && (newVal.compareTo(tbaName) == 0)) ||
            (newVal == null && tbaName == null && tbaNameIsInitialized)) {
            return;
        }
        tbaName = newVal;
        tbaNameIsModified = true;
        tbaNameIsInitialized = true;
    }

    /**
     * Determines if the tbaName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaNameModified()
    {
        return tbaNameIsModified;
    }

    /**
     * Determines if the tbaName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaNameInitialized()
    {
        return tbaNameIsInitialized;
    }

    /**
     * Getter method for tbaNickName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_nick_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaNickName
     */
    public String getTbaNickName()
    {
        return tbaNickName;
    }

    /**
     * Setter method for tbaNickName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaNickName
     */
    public void setTbaNickName(String newVal)
    {
        if ((newVal != null && tbaNickName != null && (newVal.compareTo(tbaNickName) == 0)) ||
            (newVal == null && tbaNickName == null && tbaNickNameIsInitialized)) {
            return;
        }
        tbaNickName = newVal;
        tbaNickNameIsModified = true;
        tbaNickNameIsInitialized = true;
    }

    /**
     * Determines if the tbaNickName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaNickNameModified()
    {
        return tbaNickNameIsModified;
    }

    /**
     * Determines if the tbaNickName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaNickNameInitialized()
    {
        return tbaNickNameIsInitialized;
    }

    /**
     * Getter method for tbaLastName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_last_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaLastName
     */
    public String getTbaLastName()
    {
        return tbaLastName;
    }

    /**
     * Setter method for tbaLastName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaLastName
     */
    public void setTbaLastName(String newVal)
    {
        if ((newVal != null && tbaLastName != null && (newVal.compareTo(tbaLastName) == 0)) ||
            (newVal == null && tbaLastName == null && tbaLastNameIsInitialized)) {
            return;
        }
        tbaLastName = newVal;
        tbaLastNameIsModified = true;
        tbaLastNameIsInitialized = true;
    }

    /**
     * Determines if the tbaLastName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaLastNameModified()
    {
        return tbaLastNameIsModified;
    }

    /**
     * Determines if the tbaLastName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaLastNameInitialized()
    {
        return tbaLastNameIsInitialized;
    }

    /**
     * Getter method for tbaMiddleName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_middle_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaMiddleName
     */
    public String getTbaMiddleName()
    {
        return tbaMiddleName;
    }

    /**
     * Setter method for tbaMiddleName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaMiddleName
     */
    public void setTbaMiddleName(String newVal)
    {
        if ((newVal != null && tbaMiddleName != null && (newVal.compareTo(tbaMiddleName) == 0)) ||
            (newVal == null && tbaMiddleName == null && tbaMiddleNameIsInitialized)) {
            return;
        }
        tbaMiddleName = newVal;
        tbaMiddleNameIsModified = true;
        tbaMiddleNameIsInitialized = true;
    }

    /**
     * Determines if the tbaMiddleName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaMiddleNameModified()
    {
        return tbaMiddleNameIsModified;
    }

    /**
     * Determines if the tbaMiddleName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaMiddleNameInitialized()
    {
        return tbaMiddleNameIsInitialized;
    }

    /**
     * Getter method for tbaFirstName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_first_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaFirstName
     */
    public String getTbaFirstName()
    {
        return tbaFirstName;
    }

    /**
     * Setter method for tbaFirstName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaFirstName
     */
    public void setTbaFirstName(String newVal)
    {
        if ((newVal != null && tbaFirstName != null && (newVal.compareTo(tbaFirstName) == 0)) ||
            (newVal == null && tbaFirstName == null && tbaFirstNameIsInitialized)) {
            return;
        }
        tbaFirstName = newVal;
        tbaFirstNameIsModified = true;
        tbaFirstNameIsInitialized = true;
    }

    /**
     * Determines if the tbaFirstName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaFirstNameModified()
    {
        return tbaFirstNameIsModified;
    }

    /**
     * Determines if the tbaFirstName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaFirstNameInitialized()
    {
        return tbaFirstNameIsInitialized;
    }

    /**
     * Getter method for tbaApplicantsId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_applicants_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaApplicantsId
     */
    public String getTbaApplicantsId()
    {
        return tbaApplicantsId;
    }

    /**
     * Setter method for tbaApplicantsId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaApplicantsId
     */
    public void setTbaApplicantsId(String newVal)
    {
        if ((newVal != null && tbaApplicantsId != null && (newVal.compareTo(tbaApplicantsId) == 0)) ||
            (newVal == null && tbaApplicantsId == null && tbaApplicantsIdIsInitialized)) {
            return;
        }
        tbaApplicantsId = newVal;
        tbaApplicantsIdIsModified = true;
        tbaApplicantsIdIsInitialized = true;
    }

    /**
     * Determines if the tbaApplicantsId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaApplicantsIdModified()
    {
        return tbaApplicantsIdIsModified;
    }

    /**
     * Determines if the tbaApplicantsId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaApplicantsIdInitialized()
    {
        return tbaApplicantsIdIsInitialized;
    }

    /**
     * Getter method for tbaId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_applicants.tba_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaId
     */
    public Integer getTbaId()
    {
        return tbaId;
    }

    /**
     * Setter method for tbaId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaId
     */
    public void setTbaId(Integer newVal)
    {
        if ((newVal != null && tbaId != null && (newVal.compareTo(tbaId) == 0)) ||
            (newVal == null && tbaId == null && tbaIdIsInitialized)) {
            return;
        }
        tbaId = newVal;
        tbaIdIsModified = true;
        tbaIdIsInitialized = true;
    }

    /**
     * Setter method for tbaId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaId
     */
    public void setTbaId(int newVal)
    {
        setTbaId(new Integer(newVal));
    }

    /**
     * Determines if the tbaId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaIdModified()
    {
        return tbaIdIsModified;
    }

    /**
     * Determines if the tbaId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaIdInitialized()
    {
        return tbaIdIsInitialized;
    }

    /** The TbVacancy referenced by this bean. */
    private TbVacancyBean referencedTbVacancy;
    /** Getter method for TbVacancyBean. */
    public TbVacancyBean getTbVacancyBean() {
        return this.referencedTbVacancy;
    }
    /** Setter method for TbVacancyBean. */
    public void setTbVacancyBean(TbVacancyBean reference) {
        this.referencedTbVacancy = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbvIdIsModified 		|| tbaStatusIsModified  		|| tbaResumeFileNameExistingIsModified  		|| tbaResumeFileNameIsModified  		|| tbaDateIsModified  		|| tbaCommentsIsModified  		|| tbaMobileIsModified  		|| tbaPhoneIsModified  		|| tbaEmailIsModified  		|| tbaNameIsModified  		|| tbaNickNameIsModified  		|| tbaLastNameIsModified  		|| tbaMiddleNameIsModified  		|| tbaFirstNameIsModified  		|| tbaApplicantsIdIsModified  		|| tbaIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbvIdIsModified = false;
        tbaStatusIsModified = false;
        tbaResumeFileNameExistingIsModified = false;
        tbaResumeFileNameIsModified = false;
        tbaDateIsModified = false;
        tbaCommentsIsModified = false;
        tbaMobileIsModified = false;
        tbaPhoneIsModified = false;
        tbaEmailIsModified = false;
        tbaNameIsModified = false;
        tbaNickNameIsModified = false;
        tbaLastNameIsModified = false;
        tbaMiddleNameIsModified = false;
        tbaFirstNameIsModified = false;
        tbaApplicantsIdIsModified = false;
        tbaIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbApplicantsBean bean)
    {
        setTbvId(bean.getTbvId());
        setTbaStatus(bean.getTbaStatus());
        setTbaResumeFileNameExisting(bean.getTbaResumeFileNameExisting());
        setTbaResumeFileName(bean.getTbaResumeFileName());
        setTbaDate(bean.getTbaDate());
        setTbaComments(bean.getTbaComments());
        setTbaMobile(bean.getTbaMobile());
        setTbaPhone(bean.getTbaPhone());
        setTbaEmail(bean.getTbaEmail());
        setTbaName(bean.getTbaName());
        setTbaNickName(bean.getTbaNickName());
        setTbaLastName(bean.getTbaLastName());
        setTbaMiddleName(bean.getTbaMiddleName());
        setTbaFirstName(bean.getTbaFirstName());
        setTbaApplicantsId(bean.getTbaApplicantsId());
        setTbaId(bean.getTbaId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbv_id", getTbvId() == null ? "" : getTbvId().toString());
        dictionnary.put("tba_status", getTbaStatus() == null ? "" : getTbaStatus().toString());
        dictionnary.put("tba_resume_file_name_existing", getTbaResumeFileNameExisting() == null ? "" : getTbaResumeFileNameExisting().toString());
        dictionnary.put("tba_resume_file_name", getTbaResumeFileName() == null ? "" : getTbaResumeFileName().toString());
        dictionnary.put("tba_date", getTbaDate() == null ? "" : getTbaDate().toString());
        dictionnary.put("tba_comments", getTbaComments() == null ? "" : getTbaComments().toString());
        dictionnary.put("tba_mobile", getTbaMobile() == null ? "" : getTbaMobile().toString());
        dictionnary.put("tba_phone", getTbaPhone() == null ? "" : getTbaPhone().toString());
        dictionnary.put("tba_email", getTbaEmail() == null ? "" : getTbaEmail().toString());
        dictionnary.put("tba_name", getTbaName() == null ? "" : getTbaName().toString());
        dictionnary.put("tba_nick_name", getTbaNickName() == null ? "" : getTbaNickName().toString());
        dictionnary.put("tba_last_name", getTbaLastName() == null ? "" : getTbaLastName().toString());
        dictionnary.put("tba_middle_name", getTbaMiddleName() == null ? "" : getTbaMiddleName().toString());
        dictionnary.put("tba_first_name", getTbaFirstName() == null ? "" : getTbaFirstName().toString());
        dictionnary.put("tba_applicants_id", getTbaApplicantsId() == null ? "" : getTbaApplicantsId().toString());
        dictionnary.put("tba_id", getTbaId() == null ? "" : getTbaId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tba_id", getTbaId() == null ? "" : getTbaId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbv_id".equalsIgnoreCase(column) || "tbvId".equalsIgnoreCase(column)) {
            return getTbvId() == null ? "" : getTbvId().toString();
        } else if ("tba_status".equalsIgnoreCase(column) || "tbaStatus".equalsIgnoreCase(column)) {
            return getTbaStatus() == null ? "" : getTbaStatus().toString();
        } else if ("tba_resume_file_name_existing".equalsIgnoreCase(column) || "tbaResumeFileNameExisting".equalsIgnoreCase(column)) {
            return getTbaResumeFileNameExisting() == null ? "" : getTbaResumeFileNameExisting().toString();
        } else if ("tba_resume_file_name".equalsIgnoreCase(column) || "tbaResumeFileName".equalsIgnoreCase(column)) {
            return getTbaResumeFileName() == null ? "" : getTbaResumeFileName().toString();
        } else if ("tba_date".equalsIgnoreCase(column) || "tbaDate".equalsIgnoreCase(column)) {
            return getTbaDate() == null ? "" : getTbaDate().toString();
        } else if ("tba_comments".equalsIgnoreCase(column) || "tbaComments".equalsIgnoreCase(column)) {
            return getTbaComments() == null ? "" : getTbaComments().toString();
        } else if ("tba_mobile".equalsIgnoreCase(column) || "tbaMobile".equalsIgnoreCase(column)) {
            return getTbaMobile() == null ? "" : getTbaMobile().toString();
        } else if ("tba_phone".equalsIgnoreCase(column) || "tbaPhone".equalsIgnoreCase(column)) {
            return getTbaPhone() == null ? "" : getTbaPhone().toString();
        } else if ("tba_email".equalsIgnoreCase(column) || "tbaEmail".equalsIgnoreCase(column)) {
            return getTbaEmail() == null ? "" : getTbaEmail().toString();
        } else if ("tba_name".equalsIgnoreCase(column) || "tbaName".equalsIgnoreCase(column)) {
            return getTbaName() == null ? "" : getTbaName().toString();
        } else if ("tba_nick_name".equalsIgnoreCase(column) || "tbaNickName".equalsIgnoreCase(column)) {
            return getTbaNickName() == null ? "" : getTbaNickName().toString();
        } else if ("tba_last_name".equalsIgnoreCase(column) || "tbaLastName".equalsIgnoreCase(column)) {
            return getTbaLastName() == null ? "" : getTbaLastName().toString();
        } else if ("tba_middle_name".equalsIgnoreCase(column) || "tbaMiddleName".equalsIgnoreCase(column)) {
            return getTbaMiddleName() == null ? "" : getTbaMiddleName().toString();
        } else if ("tba_first_name".equalsIgnoreCase(column) || "tbaFirstName".equalsIgnoreCase(column)) {
            return getTbaFirstName() == null ? "" : getTbaFirstName().toString();
        } else if ("tba_applicants_id".equalsIgnoreCase(column) || "tbaApplicantsId".equalsIgnoreCase(column)) {
            return getTbaApplicantsId() == null ? "" : getTbaApplicantsId().toString();
        } else if ("tba_id".equalsIgnoreCase(column) || "tbaId".equalsIgnoreCase(column)) {
            return getTbaId() == null ? "" : getTbaId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbApplicantsBean)) {
            return false;
        }

		TbApplicantsBean obj = (TbApplicantsBean) object;
		return new EqualsBuilder()
            .append(getTbvId(), obj.getTbvId())
            .append(getTbaStatus(), obj.getTbaStatus())
            .append(getTbaResumeFileNameExisting(), obj.getTbaResumeFileNameExisting())
            .append(getTbaResumeFileName(), obj.getTbaResumeFileName())
            .append(getTbaDate(), obj.getTbaDate())
            .append(getTbaComments(), obj.getTbaComments())
            .append(getTbaMobile(), obj.getTbaMobile())
            .append(getTbaPhone(), obj.getTbaPhone())
            .append(getTbaEmail(), obj.getTbaEmail())
            .append(getTbaName(), obj.getTbaName())
            .append(getTbaNickName(), obj.getTbaNickName())
            .append(getTbaLastName(), obj.getTbaLastName())
            .append(getTbaMiddleName(), obj.getTbaMiddleName())
            .append(getTbaFirstName(), obj.getTbaFirstName())
            .append(getTbaApplicantsId(), obj.getTbaApplicantsId())
            .append(getTbaId(), obj.getTbaId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbvId())
            .append(getTbaStatus())
            .append(getTbaResumeFileNameExisting())
            .append(getTbaResumeFileName())
            .append(getTbaDate())
            .append(getTbaComments())
            .append(getTbaMobile())
            .append(getTbaPhone())
            .append(getTbaEmail())
            .append(getTbaName())
            .append(getTbaNickName())
            .append(getTbaLastName())
            .append(getTbaMiddleName())
            .append(getTbaFirstName())
            .append(getTbaApplicantsId())
            .append(getTbaId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbv_id", getTbvId())
            .append("tba_status", getTbaStatus())
            .append("tba_resume_file_name_existing", getTbaResumeFileNameExisting())
            .append("tba_resume_file_name", getTbaResumeFileName())
            .append("tba_date", getTbaDate())
            .append("tba_comments", getTbaComments())
            .append("tba_mobile", getTbaMobile())
            .append("tba_phone", getTbaPhone())
            .append("tba_email", getTbaEmail())
            .append("tba_name", getTbaName())
            .append("tba_nick_name", getTbaNickName())
            .append("tba_last_name", getTbaLastName())
            .append("tba_middle_name", getTbaMiddleName())
            .append("tba_first_name", getTbaFirstName())
            .append("tba_applicants_id", getTbaApplicantsId())
            .append("tba_id", getTbaId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbApplicantsBean obj = (TbApplicantsBean) object;
        return new CompareToBuilder()
            .append(getTbvId(), obj.getTbvId())
            .append(getTbaStatus(), obj.getTbaStatus())
            .append(getTbaResumeFileNameExisting(), obj.getTbaResumeFileNameExisting())
            .append(getTbaResumeFileName(), obj.getTbaResumeFileName())
            .append(getTbaDate(), obj.getTbaDate())
            .append(getTbaComments(), obj.getTbaComments())
            .append(getTbaMobile(), obj.getTbaMobile())
            .append(getTbaPhone(), obj.getTbaPhone())
            .append(getTbaEmail(), obj.getTbaEmail())
            .append(getTbaName(), obj.getTbaName())
            .append(getTbaNickName(), obj.getTbaNickName())
            .append(getTbaLastName(), obj.getTbaLastName())
            .append(getTbaMiddleName(), obj.getTbaMiddleName())
            .append(getTbaFirstName(), obj.getTbaFirstName())
            .append(getTbaApplicantsId(), obj.getTbaApplicantsId())
            .append(getTbaId(), obj.getTbaId())
            .toComparison();
   }
}
