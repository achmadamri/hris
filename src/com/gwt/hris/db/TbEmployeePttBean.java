// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbEmployeePttBean is a mapping of tb_employee_ptt Table.
 * @author sql2java
*/
public class TbEmployeePttBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 4357522861028486474L;
	
    private Double tbepttNominal;

    private boolean tbepttNominalIsModified = false;
    private boolean tbepttNominalIsInitialized = false;

    private String tbepttCurrencyName;

    private boolean tbepttCurrencyNameIsModified = false;
    private boolean tbepttCurrencyNameIsInitialized = false;

    private java.sql.Timestamp tbepttInsertTime;

    private boolean tbepttInsertTimeIsModified = false;
    private boolean tbepttInsertTimeIsInitialized = false;

    private Integer tbcId;

    private boolean tbcIdIsModified = false;
    private boolean tbcIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private Integer tbpttId;

    private boolean tbpttIdIsModified = false;
    private boolean tbpttIdIsInitialized = false;

    private Integer tbepttId;

    private boolean tbepttIdIsModified = false;
    private boolean tbepttIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbEmployeePttBean is via the createTbEmployeePttBean method in TbEmployeePttManager or
     * via the factory class TbEmployeePttFactory create method
     */
    protected TbEmployeePttBean()
    {
    }

    /**
     * Getter method for tbepttNominal.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_ptt.tbeptt_nominal</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbepttNominal
     */
    public Double getTbepttNominal()
    {
        return tbepttNominal;
    }

    /**
     * Setter method for tbepttNominal.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbepttNominal
     */
    public void setTbepttNominal(Double newVal)
    {
        if ((newVal != null && tbepttNominal != null && (newVal.compareTo(tbepttNominal) == 0)) ||
            (newVal == null && tbepttNominal == null && tbepttNominalIsInitialized)) {
            return;
        }
        tbepttNominal = newVal;
        tbepttNominalIsModified = true;
        tbepttNominalIsInitialized = true;
    }

    /**
     * Setter method for tbepttNominal.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbepttNominal
     */
    public void setTbepttNominal(double newVal)
    {
        setTbepttNominal(new Double(newVal));
    }

    /**
     * Determines if the tbepttNominal has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbepttNominalModified()
    {
        return tbepttNominalIsModified;
    }

    /**
     * Determines if the tbepttNominal has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbepttNominalInitialized()
    {
        return tbepttNominalIsInitialized;
    }

    /**
     * Getter method for tbepttCurrencyName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_ptt.tbeptt_currency_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbepttCurrencyName
     */
    public String getTbepttCurrencyName()
    {
        return tbepttCurrencyName;
    }

    /**
     * Setter method for tbepttCurrencyName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbepttCurrencyName
     */
    public void setTbepttCurrencyName(String newVal)
    {
        if ((newVal != null && tbepttCurrencyName != null && (newVal.compareTo(tbepttCurrencyName) == 0)) ||
            (newVal == null && tbepttCurrencyName == null && tbepttCurrencyNameIsInitialized)) {
            return;
        }
        tbepttCurrencyName = newVal;
        tbepttCurrencyNameIsModified = true;
        tbepttCurrencyNameIsInitialized = true;
    }

    /**
     * Determines if the tbepttCurrencyName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbepttCurrencyNameModified()
    {
        return tbepttCurrencyNameIsModified;
    }

    /**
     * Determines if the tbepttCurrencyName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbepttCurrencyNameInitialized()
    {
        return tbepttCurrencyNameIsInitialized;
    }

    /**
     * Getter method for tbepttInsertTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_ptt.tbeptt_insert_time</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbepttInsertTime
     */
    public java.sql.Timestamp getTbepttInsertTime()
    {
        return tbepttInsertTime;
    }

    /**
     * Setter method for tbepttInsertTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbepttInsertTime
     */
    public void setTbepttInsertTime(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbepttInsertTime != null && (newVal.compareTo(tbepttInsertTime) == 0)) ||
            (newVal == null && tbepttInsertTime == null && tbepttInsertTimeIsInitialized)) {
            return;
        }
        tbepttInsertTime = newVal;
        tbepttInsertTimeIsModified = true;
        tbepttInsertTimeIsInitialized = true;
    }

    /**
     * Setter method for tbepttInsertTime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbepttInsertTime
     */
    public void setTbepttInsertTime(long newVal)
    {
        setTbepttInsertTime(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbepttInsertTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbepttInsertTimeModified()
    {
        return tbepttInsertTimeIsModified;
    }

    /**
     * Determines if the tbepttInsertTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbepttInsertTimeInitialized()
    {
        return tbepttInsertTimeIsInitialized;
    }

    /**
     * Getter method for tbcId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_ptt.tbc_id</li>
     * <li> foreign key: tb_currency.tbc_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbcId
     */
    public Integer getTbcId()
    {
        return tbcId;
    }

    /**
     * Setter method for tbcId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcId
     */
    public void setTbcId(Integer newVal)
    {
        if ((newVal != null && tbcId != null && (newVal.compareTo(tbcId) == 0)) ||
            (newVal == null && tbcId == null && tbcIdIsInitialized)) {
            return;
        }
        tbcId = newVal;
        tbcIdIsModified = true;
        tbcIdIsInitialized = true;
    }

    /**
     * Setter method for tbcId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbcId
     */
    public void setTbcId(int newVal)
    {
        setTbcId(new Integer(newVal));
    }

    /**
     * Determines if the tbcId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcIdModified()
    {
        return tbcIdIsModified;
    }

    /**
     * Determines if the tbcId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcIdInitialized()
    {
        return tbcIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_ptt.tbe_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Getter method for tbpttId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_ptt.tbptt_id</li>
     * <li> foreign key: tb_ptt.tbptt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpttId
     */
    public Integer getTbpttId()
    {
        return tbpttId;
    }

    /**
     * Setter method for tbpttId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpttId
     */
    public void setTbpttId(Integer newVal)
    {
        if ((newVal != null && tbpttId != null && (newVal.compareTo(tbpttId) == 0)) ||
            (newVal == null && tbpttId == null && tbpttIdIsInitialized)) {
            return;
        }
        tbpttId = newVal;
        tbpttIdIsModified = true;
        tbpttIdIsInitialized = true;
    }

    /**
     * Setter method for tbpttId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpttId
     */
    public void setTbpttId(int newVal)
    {
        setTbpttId(new Integer(newVal));
    }

    /**
     * Determines if the tbpttId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpttIdModified()
    {
        return tbpttIdIsModified;
    }

    /**
     * Determines if the tbpttId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpttIdInitialized()
    {
        return tbpttIdIsInitialized;
    }

    /**
     * Getter method for tbepttId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_employee_ptt.tbeptt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbepttId
     */
    public Integer getTbepttId()
    {
        return tbepttId;
    }

    /**
     * Setter method for tbepttId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbepttId
     */
    public void setTbepttId(Integer newVal)
    {
        if ((newVal != null && tbepttId != null && (newVal.compareTo(tbepttId) == 0)) ||
            (newVal == null && tbepttId == null && tbepttIdIsInitialized)) {
            return;
        }
        tbepttId = newVal;
        tbepttIdIsModified = true;
        tbepttIdIsInitialized = true;
    }

    /**
     * Setter method for tbepttId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbepttId
     */
    public void setTbepttId(int newVal)
    {
        setTbepttId(new Integer(newVal));
    }

    /**
     * Determines if the tbepttId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbepttIdModified()
    {
        return tbepttIdIsModified;
    }

    /**
     * Determines if the tbepttId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbepttIdInitialized()
    {
        return tbepttIdIsInitialized;
    }

    /** The TbPtt referenced by this bean. */
    private TbPttBean referencedTbPtt;
    /** Getter method for TbPttBean. */
    public TbPttBean getTbPttBean() {
        return this.referencedTbPtt;
    }
    /** Setter method for TbPttBean. */
    public void setTbPttBean(TbPttBean reference) {
        this.referencedTbPtt = reference;
    }
    
    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /** The TbCurrency referenced by this bean. */
    private TbCurrencyBean referencedTbCurrency;
    /** Getter method for TbCurrencyBean. */
    public TbCurrencyBean getTbCurrencyBean() {
        return this.referencedTbCurrency;
    }
    /** Setter method for TbCurrencyBean. */
    public void setTbCurrencyBean(TbCurrencyBean reference) {
        this.referencedTbCurrency = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbepttNominalIsModified 		|| tbepttCurrencyNameIsModified  		|| tbepttInsertTimeIsModified  		|| tbcIdIsModified  		|| tbeIdIsModified  		|| tbpttIdIsModified  		|| tbepttIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbepttNominalIsModified = false;
        tbepttCurrencyNameIsModified = false;
        tbepttInsertTimeIsModified = false;
        tbcIdIsModified = false;
        tbeIdIsModified = false;
        tbpttIdIsModified = false;
        tbepttIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbEmployeePttBean bean)
    {
        setTbepttNominal(bean.getTbepttNominal());
        setTbepttCurrencyName(bean.getTbepttCurrencyName());
        setTbepttInsertTime(bean.getTbepttInsertTime());
        setTbcId(bean.getTbcId());
        setTbeId(bean.getTbeId());
        setTbpttId(bean.getTbpttId());
        setTbepttId(bean.getTbepttId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbeptt_nominal", getTbepttNominal() == null ? "" : getTbepttNominal().toString());
        dictionnary.put("tbeptt_currency_name", getTbepttCurrencyName() == null ? "" : getTbepttCurrencyName().toString());
        dictionnary.put("tbeptt_insert_time", getTbepttInsertTime() == null ? "" : getTbepttInsertTime().toString());
        dictionnary.put("tbc_id", getTbcId() == null ? "" : getTbcId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        dictionnary.put("tbptt_id", getTbpttId() == null ? "" : getTbpttId().toString());
        dictionnary.put("tbeptt_id", getTbepttId() == null ? "" : getTbepttId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbeptt_id", getTbepttId() == null ? "" : getTbepttId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbeptt_nominal".equalsIgnoreCase(column) || "tbepttNominal".equalsIgnoreCase(column)) {
            return getTbepttNominal() == null ? "" : getTbepttNominal().toString();
        } else if ("tbeptt_currency_name".equalsIgnoreCase(column) || "tbepttCurrencyName".equalsIgnoreCase(column)) {
            return getTbepttCurrencyName() == null ? "" : getTbepttCurrencyName().toString();
        } else if ("tbeptt_insert_time".equalsIgnoreCase(column) || "tbepttInsertTime".equalsIgnoreCase(column)) {
            return getTbepttInsertTime() == null ? "" : getTbepttInsertTime().toString();
        } else if ("tbc_id".equalsIgnoreCase(column) || "tbcId".equalsIgnoreCase(column)) {
            return getTbcId() == null ? "" : getTbcId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        } else if ("tbptt_id".equalsIgnoreCase(column) || "tbpttId".equalsIgnoreCase(column)) {
            return getTbpttId() == null ? "" : getTbpttId().toString();
        } else if ("tbeptt_id".equalsIgnoreCase(column) || "tbepttId".equalsIgnoreCase(column)) {
            return getTbepttId() == null ? "" : getTbepttId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbEmployeePttBean)) {
            return false;
        }

		TbEmployeePttBean obj = (TbEmployeePttBean) object;
		return new EqualsBuilder()
            .append(getTbepttNominal(), obj.getTbepttNominal())
            .append(getTbepttCurrencyName(), obj.getTbepttCurrencyName())
            .append(getTbepttInsertTime(), obj.getTbepttInsertTime())
            .append(getTbcId(), obj.getTbcId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbpttId(), obj.getTbpttId())
            .append(getTbepttId(), obj.getTbepttId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbepttNominal())
            .append(getTbepttCurrencyName())
            .append(getTbepttInsertTime())
            .append(getTbcId())
            .append(getTbeId())
            .append(getTbpttId())
            .append(getTbepttId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbeptt_nominal", getTbepttNominal())
            .append("tbeptt_currency_name", getTbepttCurrencyName())
            .append("tbeptt_insert_time", getTbepttInsertTime())
            .append("tbc_id", getTbcId())
            .append("tbe_id", getTbeId())
            .append("tbptt_id", getTbpttId())
            .append("tbeptt_id", getTbepttId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbEmployeePttBean obj = (TbEmployeePttBean) object;
        return new CompareToBuilder()
            .append(getTbepttNominal(), obj.getTbepttNominal())
            .append(getTbepttCurrencyName(), obj.getTbepttCurrencyName())
            .append(getTbepttInsertTime(), obj.getTbepttInsertTime())
            .append(getTbcId(), obj.getTbcId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbpttId(), obj.getTbpttId())
            .append(getTbepttId(), obj.getTbepttId())
            .toComparison();
   }
}
