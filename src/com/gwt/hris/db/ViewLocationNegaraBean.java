// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewLocationNegaraBean is a mapping of view_location_negara Table.
 * @author sql2java
*/
public class ViewLocationNegaraBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 8122081845443174409L;
	
    private String tbnNama;

    private boolean tbnNamaIsModified = false;
    private boolean tbnNamaIsInitialized = false;

    private Integer tbnId;

    private boolean tbnIdIsModified = false;
    private boolean tbnIdIsInitialized = false;

    private String tblName;

    private boolean tblNameIsModified = false;
    private boolean tblNameIsInitialized = false;

    private String tblLocationId;

    private boolean tblLocationIdIsModified = false;
    private boolean tblLocationIdIsInitialized = false;

    private Integer tblId;

    private boolean tblIdIsModified = false;
    private boolean tblIdIsInitialized = false;

    private String tbpName;

    private boolean tbpNameIsModified = false;
    private boolean tbpNameIsInitialized = false;

    private String tbpPerusahaanId;

    private boolean tbpPerusahaanIdIsModified = false;
    private boolean tbpPerusahaanIdIsInitialized = false;

    private Integer tbpId;

    private boolean tbpIdIsModified = false;
    private boolean tbpIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewLocationNegaraBean is via the createViewLocationNegaraBean method in ViewLocationNegaraManager or
     * via the factory class ViewLocationNegaraFactory create method
     */
    protected ViewLocationNegaraBean()
    {
    }

    /**
     * Getter method for tbnNama.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_location_negara.tbn_nama</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbnNama
     */
    public String getTbnNama()
    {
        return tbnNama;
    }

    /**
     * Setter method for tbnNama.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnNama
     */
    public void setTbnNama(String newVal)
    {
        if ((newVal != null && tbnNama != null && (newVal.compareTo(tbnNama) == 0)) ||
            (newVal == null && tbnNama == null && tbnNamaIsInitialized)) {
            return;
        }
        tbnNama = newVal;
        tbnNamaIsModified = true;
        tbnNamaIsInitialized = true;
    }

    /**
     * Determines if the tbnNama has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnNamaModified()
    {
        return tbnNamaIsModified;
    }

    /**
     * Determines if the tbnNama has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnNamaInitialized()
    {
        return tbnNamaIsInitialized;
    }

    /**
     * Getter method for tbnId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_location_negara.tbn_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbnId
     */
    public Integer getTbnId()
    {
        return tbnId;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(Integer newVal)
    {
        if ((newVal != null && tbnId != null && (newVal.compareTo(tbnId) == 0)) ||
            (newVal == null && tbnId == null && tbnIdIsInitialized)) {
            return;
        }
        tbnId = newVal;
        tbnIdIsModified = true;
        tbnIdIsInitialized = true;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(int newVal)
    {
        setTbnId(new Integer(newVal));
    }

    /**
     * Determines if the tbnId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnIdModified()
    {
        return tbnIdIsModified;
    }

    /**
     * Determines if the tbnId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnIdInitialized()
    {
        return tbnIdIsInitialized;
    }

    /**
     * Getter method for tblName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_location_negara.tbl_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblName
     */
    public String getTblName()
    {
        return tblName;
    }

    /**
     * Setter method for tblName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblName
     */
    public void setTblName(String newVal)
    {
        if ((newVal != null && tblName != null && (newVal.compareTo(tblName) == 0)) ||
            (newVal == null && tblName == null && tblNameIsInitialized)) {
            return;
        }
        tblName = newVal;
        tblNameIsModified = true;
        tblNameIsInitialized = true;
    }

    /**
     * Determines if the tblName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblNameModified()
    {
        return tblNameIsModified;
    }

    /**
     * Determines if the tblName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblNameInitialized()
    {
        return tblNameIsInitialized;
    }

    /**
     * Getter method for tblLocationId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_location_negara.tbl_location_id</li>
     * <li>comments: NAME+ID</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tblLocationId
     */
    public String getTblLocationId()
    {
        return tblLocationId;
    }

    /**
     * Setter method for tblLocationId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblLocationId
     */
    public void setTblLocationId(String newVal)
    {
        if ((newVal != null && tblLocationId != null && (newVal.compareTo(tblLocationId) == 0)) ||
            (newVal == null && tblLocationId == null && tblLocationIdIsInitialized)) {
            return;
        }
        tblLocationId = newVal;
        tblLocationIdIsModified = true;
        tblLocationIdIsInitialized = true;
    }

    /**
     * Determines if the tblLocationId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblLocationIdModified()
    {
        return tblLocationIdIsModified;
    }

    /**
     * Determines if the tblLocationId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblLocationIdInitialized()
    {
        return tblLocationIdIsInitialized;
    }

    /**
     * Getter method for tblId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_location_negara.tbl_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tblId
     */
    public Integer getTblId()
    {
        return tblId;
    }

    /**
     * Setter method for tblId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblId
     */
    public void setTblId(Integer newVal)
    {
        if ((newVal != null && tblId != null && (newVal.compareTo(tblId) == 0)) ||
            (newVal == null && tblId == null && tblIdIsInitialized)) {
            return;
        }
        tblId = newVal;
        tblIdIsModified = true;
        tblIdIsInitialized = true;
    }

    /**
     * Setter method for tblId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tblId
     */
    public void setTblId(int newVal)
    {
        setTblId(new Integer(newVal));
    }

    /**
     * Determines if the tblId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblIdModified()
    {
        return tblIdIsModified;
    }

    /**
     * Determines if the tblId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblIdInitialized()
    {
        return tblIdIsInitialized;
    }

    /**
     * Getter method for tbpName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_location_negara.tbp_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpName
     */
    public String getTbpName()
    {
        return tbpName;
    }

    /**
     * Setter method for tbpName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpName
     */
    public void setTbpName(String newVal)
    {
        if ((newVal != null && tbpName != null && (newVal.compareTo(tbpName) == 0)) ||
            (newVal == null && tbpName == null && tbpNameIsInitialized)) {
            return;
        }
        tbpName = newVal;
        tbpNameIsModified = true;
        tbpNameIsInitialized = true;
    }

    /**
     * Determines if the tbpName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpNameModified()
    {
        return tbpNameIsModified;
    }

    /**
     * Determines if the tbpName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpNameInitialized()
    {
        return tbpNameIsInitialized;
    }

    /**
     * Getter method for tbpPerusahaanId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_location_negara.tbp_perusahaan_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpPerusahaanId
     */
    public String getTbpPerusahaanId()
    {
        return tbpPerusahaanId;
    }

    /**
     * Setter method for tbpPerusahaanId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpPerusahaanId
     */
    public void setTbpPerusahaanId(String newVal)
    {
        if ((newVal != null && tbpPerusahaanId != null && (newVal.compareTo(tbpPerusahaanId) == 0)) ||
            (newVal == null && tbpPerusahaanId == null && tbpPerusahaanIdIsInitialized)) {
            return;
        }
        tbpPerusahaanId = newVal;
        tbpPerusahaanIdIsModified = true;
        tbpPerusahaanIdIsInitialized = true;
    }

    /**
     * Determines if the tbpPerusahaanId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpPerusahaanIdModified()
    {
        return tbpPerusahaanIdIsModified;
    }

    /**
     * Determines if the tbpPerusahaanId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpPerusahaanIdInitialized()
    {
        return tbpPerusahaanIdIsInitialized;
    }

    /**
     * Getter method for tbpId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_location_negara.tbp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpId
     */
    public Integer getTbpId()
    {
        return tbpId;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(Integer newVal)
    {
        if ((newVal != null && tbpId != null && (newVal.compareTo(tbpId) == 0)) ||
            (newVal == null && tbpId == null && tbpIdIsInitialized)) {
            return;
        }
        tbpId = newVal;
        tbpIdIsModified = true;
        tbpIdIsInitialized = true;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(int newVal)
    {
        setTbpId(new Integer(newVal));
    }

    /**
     * Determines if the tbpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpIdModified()
    {
        return tbpIdIsModified;
    }

    /**
     * Determines if the tbpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpIdInitialized()
    {
        return tbpIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbnNamaIsModified 		|| tbnIdIsModified  		|| tblNameIsModified  		|| tblLocationIdIsModified  		|| tblIdIsModified  		|| tbpNameIsModified  		|| tbpPerusahaanIdIsModified  		|| tbpIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbnNamaIsModified = false;
        tbnIdIsModified = false;
        tblNameIsModified = false;
        tblLocationIdIsModified = false;
        tblIdIsModified = false;
        tbpNameIsModified = false;
        tbpPerusahaanIdIsModified = false;
        tbpIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewLocationNegaraBean bean)
    {
        setTbnNama(bean.getTbnNama());
        setTbnId(bean.getTbnId());
        setTblName(bean.getTblName());
        setTblLocationId(bean.getTblLocationId());
        setTblId(bean.getTblId());
        setTbpName(bean.getTbpName());
        setTbpPerusahaanId(bean.getTbpPerusahaanId());
        setTbpId(bean.getTbpId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbn_nama", getTbnNama() == null ? "" : getTbnNama().toString());
        dictionnary.put("tbn_id", getTbnId() == null ? "" : getTbnId().toString());
        dictionnary.put("tbl_name", getTblName() == null ? "" : getTblName().toString());
        dictionnary.put("tbl_location_id", getTblLocationId() == null ? "" : getTblLocationId().toString());
        dictionnary.put("tbl_id", getTblId() == null ? "" : getTblId().toString());
        dictionnary.put("tbp_name", getTbpName() == null ? "" : getTbpName().toString());
        dictionnary.put("tbp_perusahaan_id", getTbpPerusahaanId() == null ? "" : getTbpPerusahaanId().toString());
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbn_nama".equalsIgnoreCase(column) || "tbnNama".equalsIgnoreCase(column)) {
            return getTbnNama() == null ? "" : getTbnNama().toString();
        } else if ("tbn_id".equalsIgnoreCase(column) || "tbnId".equalsIgnoreCase(column)) {
            return getTbnId() == null ? "" : getTbnId().toString();
        } else if ("tbl_name".equalsIgnoreCase(column) || "tblName".equalsIgnoreCase(column)) {
            return getTblName() == null ? "" : getTblName().toString();
        } else if ("tbl_location_id".equalsIgnoreCase(column) || "tblLocationId".equalsIgnoreCase(column)) {
            return getTblLocationId() == null ? "" : getTblLocationId().toString();
        } else if ("tbl_id".equalsIgnoreCase(column) || "tblId".equalsIgnoreCase(column)) {
            return getTblId() == null ? "" : getTblId().toString();
        } else if ("tbp_name".equalsIgnoreCase(column) || "tbpName".equalsIgnoreCase(column)) {
            return getTbpName() == null ? "" : getTbpName().toString();
        } else if ("tbp_perusahaan_id".equalsIgnoreCase(column) || "tbpPerusahaanId".equalsIgnoreCase(column)) {
            return getTbpPerusahaanId() == null ? "" : getTbpPerusahaanId().toString();
        } else if ("tbp_id".equalsIgnoreCase(column) || "tbpId".equalsIgnoreCase(column)) {
            return getTbpId() == null ? "" : getTbpId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewLocationNegaraBean)) {
            return false;
        }

		ViewLocationNegaraBean obj = (ViewLocationNegaraBean) object;
		return new EqualsBuilder()
            .append(getTbnNama(), obj.getTbnNama())
            .append(getTbnId(), obj.getTbnId())
            .append(getTblName(), obj.getTblName())
            .append(getTblLocationId(), obj.getTblLocationId())
            .append(getTblId(), obj.getTblId())
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpPerusahaanId(), obj.getTbpPerusahaanId())
            .append(getTbpId(), obj.getTbpId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbnNama())
            .append(getTbnId())
            .append(getTblName())
            .append(getTblLocationId())
            .append(getTblId())
            .append(getTbpName())
            .append(getTbpPerusahaanId())
            .append(getTbpId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbn_nama", getTbnNama())
            .append("tbn_id", getTbnId())
            .append("tbl_name", getTblName())
            .append("tbl_location_id", getTblLocationId())
            .append("tbl_id", getTblId())
            .append("tbp_name", getTbpName())
            .append("tbp_perusahaan_id", getTbpPerusahaanId())
            .append("tbp_id", getTbpId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewLocationNegaraBean obj = (ViewLocationNegaraBean) object;
        return new CompareToBuilder()
            .append(getTbnNama(), obj.getTbnNama())
            .append(getTbnId(), obj.getTbnId())
            .append(getTblName(), obj.getTblName())
            .append(getTblLocationId(), obj.getTblLocationId())
            .append(getTblId(), obj.getTblId())
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpPerusahaanId(), obj.getTbpPerusahaanId())
            .append(getTbpId(), obj.getTbpId())
            .toComparison();
   }
}
