// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbAssignedLeavesBean is a mapping of tb_assigned_leaves Table.
 * @author sql2java
*/
public class TbAssignedLeavesBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -6560103239556721976L;
	
    private Integer tbaleLeaveAvailable;

    private boolean tbaleLeaveAvailableIsModified = false;
    private boolean tbaleLeaveAvailableIsInitialized = false;

    private Integer tbaleLeaveTaken;

    private boolean tbaleLeaveTakenIsModified = false;
    private boolean tbaleLeaveTakenIsInitialized = false;

    private Integer tbaleStatus;

    private boolean tbaleStatusIsModified = false;
    private boolean tbaleStatusIsInitialized = false;

    private String tbaleComments;

    private boolean tbaleCommentsIsModified = false;
    private boolean tbaleCommentsIsInitialized = false;

    private java.sql.Timestamp tbaleEndDate;

    private boolean tbaleEndDateIsModified = false;
    private boolean tbaleEndDateIsInitialized = false;

    private java.sql.Timestamp tbaleStartDate;

    private boolean tbaleStartDateIsModified = false;
    private boolean tbaleStartDateIsInitialized = false;

    private java.sql.Timestamp tbaleUpdatedTime;

    private boolean tbaleUpdatedTimeIsModified = false;
    private boolean tbaleUpdatedTimeIsInitialized = false;

    private java.sql.Timestamp tbaleCreatedTime;

    private boolean tbaleCreatedTimeIsModified = false;
    private boolean tbaleCreatedTimeIsInitialized = false;

    private Integer tbltId;

    private boolean tbltIdIsModified = false;
    private boolean tbltIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private Integer tbaleId;

    private boolean tbaleIdIsModified = false;
    private boolean tbaleIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbAssignedLeavesBean is via the createTbAssignedLeavesBean method in TbAssignedLeavesManager or
     * via the factory class TbAssignedLeavesFactory create method
     */
    protected TbAssignedLeavesBean()
    {
    }

    /**
     * Getter method for tbaleLeaveAvailable.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_leaves.tbale_leave_available</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaleLeaveAvailable
     */
    public Integer getTbaleLeaveAvailable()
    {
        return tbaleLeaveAvailable;
    }

    /**
     * Setter method for tbaleLeaveAvailable.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleLeaveAvailable
     */
    public void setTbaleLeaveAvailable(Integer newVal)
    {
        if ((newVal != null && tbaleLeaveAvailable != null && (newVal.compareTo(tbaleLeaveAvailable) == 0)) ||
            (newVal == null && tbaleLeaveAvailable == null && tbaleLeaveAvailableIsInitialized)) {
            return;
        }
        tbaleLeaveAvailable = newVal;
        tbaleLeaveAvailableIsModified = true;
        tbaleLeaveAvailableIsInitialized = true;
    }

    /**
     * Setter method for tbaleLeaveAvailable.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleLeaveAvailable
     */
    public void setTbaleLeaveAvailable(int newVal)
    {
        setTbaleLeaveAvailable(new Integer(newVal));
    }

    /**
     * Determines if the tbaleLeaveAvailable has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleLeaveAvailableModified()
    {
        return tbaleLeaveAvailableIsModified;
    }

    /**
     * Determines if the tbaleLeaveAvailable has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleLeaveAvailableInitialized()
    {
        return tbaleLeaveAvailableIsInitialized;
    }

    /**
     * Getter method for tbaleLeaveTaken.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_leaves.tbale_leave_taken</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaleLeaveTaken
     */
    public Integer getTbaleLeaveTaken()
    {
        return tbaleLeaveTaken;
    }

    /**
     * Setter method for tbaleLeaveTaken.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleLeaveTaken
     */
    public void setTbaleLeaveTaken(Integer newVal)
    {
        if ((newVal != null && tbaleLeaveTaken != null && (newVal.compareTo(tbaleLeaveTaken) == 0)) ||
            (newVal == null && tbaleLeaveTaken == null && tbaleLeaveTakenIsInitialized)) {
            return;
        }
        tbaleLeaveTaken = newVal;
        tbaleLeaveTakenIsModified = true;
        tbaleLeaveTakenIsInitialized = true;
    }

    /**
     * Setter method for tbaleLeaveTaken.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleLeaveTaken
     */
    public void setTbaleLeaveTaken(int newVal)
    {
        setTbaleLeaveTaken(new Integer(newVal));
    }

    /**
     * Determines if the tbaleLeaveTaken has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleLeaveTakenModified()
    {
        return tbaleLeaveTakenIsModified;
    }

    /**
     * Determines if the tbaleLeaveTaken has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleLeaveTakenInitialized()
    {
        return tbaleLeaveTakenIsInitialized;
    }

    /**
     * Getter method for tbaleStatus.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_leaves.tbale_status</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaleStatus
     */
    public Integer getTbaleStatus()
    {
        return tbaleStatus;
    }

    /**
     * Setter method for tbaleStatus.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleStatus
     */
    public void setTbaleStatus(Integer newVal)
    {
        if ((newVal != null && tbaleStatus != null && (newVal.compareTo(tbaleStatus) == 0)) ||
            (newVal == null && tbaleStatus == null && tbaleStatusIsInitialized)) {
            return;
        }
        tbaleStatus = newVal;
        tbaleStatusIsModified = true;
        tbaleStatusIsInitialized = true;
    }

    /**
     * Setter method for tbaleStatus.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleStatus
     */
    public void setTbaleStatus(int newVal)
    {
        setTbaleStatus(new Integer(newVal));
    }

    /**
     * Determines if the tbaleStatus has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleStatusModified()
    {
        return tbaleStatusIsModified;
    }

    /**
     * Determines if the tbaleStatus has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleStatusInitialized()
    {
        return tbaleStatusIsInitialized;
    }

    /**
     * Getter method for tbaleComments.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_leaves.tbale_comments</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaleComments
     */
    public String getTbaleComments()
    {
        return tbaleComments;
    }

    /**
     * Setter method for tbaleComments.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleComments
     */
    public void setTbaleComments(String newVal)
    {
        if ((newVal != null && tbaleComments != null && (newVal.compareTo(tbaleComments) == 0)) ||
            (newVal == null && tbaleComments == null && tbaleCommentsIsInitialized)) {
            return;
        }
        tbaleComments = newVal;
        tbaleCommentsIsModified = true;
        tbaleCommentsIsInitialized = true;
    }

    /**
     * Determines if the tbaleComments has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleCommentsModified()
    {
        return tbaleCommentsIsModified;
    }

    /**
     * Determines if the tbaleComments has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleCommentsInitialized()
    {
        return tbaleCommentsIsInitialized;
    }

    /**
     * Getter method for tbaleEndDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_leaves.tbale_end_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaleEndDate
     */
    public java.sql.Timestamp getTbaleEndDate()
    {
        return tbaleEndDate;
    }

    /**
     * Setter method for tbaleEndDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleEndDate
     */
    public void setTbaleEndDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaleEndDate != null && (newVal.compareTo(tbaleEndDate) == 0)) ||
            (newVal == null && tbaleEndDate == null && tbaleEndDateIsInitialized)) {
            return;
        }
        tbaleEndDate = newVal;
        tbaleEndDateIsModified = true;
        tbaleEndDateIsInitialized = true;
    }

    /**
     * Setter method for tbaleEndDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleEndDate
     */
    public void setTbaleEndDate(long newVal)
    {
        setTbaleEndDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaleEndDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleEndDateModified()
    {
        return tbaleEndDateIsModified;
    }

    /**
     * Determines if the tbaleEndDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleEndDateInitialized()
    {
        return tbaleEndDateIsInitialized;
    }

    /**
     * Getter method for tbaleStartDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_leaves.tbale_start_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaleStartDate
     */
    public java.sql.Timestamp getTbaleStartDate()
    {
        return tbaleStartDate;
    }

    /**
     * Setter method for tbaleStartDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleStartDate
     */
    public void setTbaleStartDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaleStartDate != null && (newVal.compareTo(tbaleStartDate) == 0)) ||
            (newVal == null && tbaleStartDate == null && tbaleStartDateIsInitialized)) {
            return;
        }
        tbaleStartDate = newVal;
        tbaleStartDateIsModified = true;
        tbaleStartDateIsInitialized = true;
    }

    /**
     * Setter method for tbaleStartDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleStartDate
     */
    public void setTbaleStartDate(long newVal)
    {
        setTbaleStartDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaleStartDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleStartDateModified()
    {
        return tbaleStartDateIsModified;
    }

    /**
     * Determines if the tbaleStartDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleStartDateInitialized()
    {
        return tbaleStartDateIsInitialized;
    }

    /**
     * Getter method for tbaleUpdatedTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_leaves.tbale_updated_time</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaleUpdatedTime
     */
    public java.sql.Timestamp getTbaleUpdatedTime()
    {
        return tbaleUpdatedTime;
    }

    /**
     * Setter method for tbaleUpdatedTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleUpdatedTime
     */
    public void setTbaleUpdatedTime(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaleUpdatedTime != null && (newVal.compareTo(tbaleUpdatedTime) == 0)) ||
            (newVal == null && tbaleUpdatedTime == null && tbaleUpdatedTimeIsInitialized)) {
            return;
        }
        tbaleUpdatedTime = newVal;
        tbaleUpdatedTimeIsModified = true;
        tbaleUpdatedTimeIsInitialized = true;
    }

    /**
     * Setter method for tbaleUpdatedTime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleUpdatedTime
     */
    public void setTbaleUpdatedTime(long newVal)
    {
        setTbaleUpdatedTime(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaleUpdatedTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleUpdatedTimeModified()
    {
        return tbaleUpdatedTimeIsModified;
    }

    /**
     * Determines if the tbaleUpdatedTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleUpdatedTimeInitialized()
    {
        return tbaleUpdatedTimeIsInitialized;
    }

    /**
     * Getter method for tbaleCreatedTime.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_leaves.tbale_created_time</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaleCreatedTime
     */
    public java.sql.Timestamp getTbaleCreatedTime()
    {
        return tbaleCreatedTime;
    }

    /**
     * Setter method for tbaleCreatedTime.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleCreatedTime
     */
    public void setTbaleCreatedTime(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaleCreatedTime != null && (newVal.compareTo(tbaleCreatedTime) == 0)) ||
            (newVal == null && tbaleCreatedTime == null && tbaleCreatedTimeIsInitialized)) {
            return;
        }
        tbaleCreatedTime = newVal;
        tbaleCreatedTimeIsModified = true;
        tbaleCreatedTimeIsInitialized = true;
    }

    /**
     * Setter method for tbaleCreatedTime.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleCreatedTime
     */
    public void setTbaleCreatedTime(long newVal)
    {
        setTbaleCreatedTime(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaleCreatedTime has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleCreatedTimeModified()
    {
        return tbaleCreatedTimeIsModified;
    }

    /**
     * Determines if the tbaleCreatedTime has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleCreatedTimeInitialized()
    {
        return tbaleCreatedTimeIsInitialized;
    }

    /**
     * Getter method for tbltId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_leaves.tblt_id</li>
     * <li> foreign key: tb_leave_types.tblt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbltId
     */
    public Integer getTbltId()
    {
        return tbltId;
    }

    /**
     * Setter method for tbltId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbltId
     */
    public void setTbltId(Integer newVal)
    {
        if ((newVal != null && tbltId != null && (newVal.compareTo(tbltId) == 0)) ||
            (newVal == null && tbltId == null && tbltIdIsInitialized)) {
            return;
        }
        tbltId = newVal;
        tbltIdIsModified = true;
        tbltIdIsInitialized = true;
    }

    /**
     * Setter method for tbltId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbltId
     */
    public void setTbltId(int newVal)
    {
        setTbltId(new Integer(newVal));
    }

    /**
     * Determines if the tbltId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbltIdModified()
    {
        return tbltIdIsModified;
    }

    /**
     * Determines if the tbltId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbltIdInitialized()
    {
        return tbltIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_leaves.tbe_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Getter method for tbaleId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_leaves.tbale_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaleId
     */
    public Integer getTbaleId()
    {
        return tbaleId;
    }

    /**
     * Setter method for tbaleId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaleId
     */
    public void setTbaleId(Integer newVal)
    {
        if ((newVal != null && tbaleId != null && (newVal.compareTo(tbaleId) == 0)) ||
            (newVal == null && tbaleId == null && tbaleIdIsInitialized)) {
            return;
        }
        tbaleId = newVal;
        tbaleIdIsModified = true;
        tbaleIdIsInitialized = true;
    }

    /**
     * Setter method for tbaleId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaleId
     */
    public void setTbaleId(int newVal)
    {
        setTbaleId(new Integer(newVal));
    }

    /**
     * Determines if the tbaleId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaleIdModified()
    {
        return tbaleIdIsModified;
    }

    /**
     * Determines if the tbaleId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaleIdInitialized()
    {
        return tbaleIdIsInitialized;
    }

    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /** The TbLeaveTypes referenced by this bean. */
    private TbLeaveTypesBean referencedTbLeaveTypes;
    /** Getter method for TbLeaveTypesBean. */
    public TbLeaveTypesBean getTbLeaveTypesBean() {
        return this.referencedTbLeaveTypes;
    }
    /** Setter method for TbLeaveTypesBean. */
    public void setTbLeaveTypesBean(TbLeaveTypesBean reference) {
        this.referencedTbLeaveTypes = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbaleLeaveAvailableIsModified 		|| tbaleLeaveTakenIsModified  		|| tbaleStatusIsModified  		|| tbaleCommentsIsModified  		|| tbaleEndDateIsModified  		|| tbaleStartDateIsModified  		|| tbaleUpdatedTimeIsModified  		|| tbaleCreatedTimeIsModified  		|| tbltIdIsModified  		|| tbeIdIsModified  		|| tbaleIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbaleLeaveAvailableIsModified = false;
        tbaleLeaveTakenIsModified = false;
        tbaleStatusIsModified = false;
        tbaleCommentsIsModified = false;
        tbaleEndDateIsModified = false;
        tbaleStartDateIsModified = false;
        tbaleUpdatedTimeIsModified = false;
        tbaleCreatedTimeIsModified = false;
        tbltIdIsModified = false;
        tbeIdIsModified = false;
        tbaleIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbAssignedLeavesBean bean)
    {
        setTbaleLeaveAvailable(bean.getTbaleLeaveAvailable());
        setTbaleLeaveTaken(bean.getTbaleLeaveTaken());
        setTbaleStatus(bean.getTbaleStatus());
        setTbaleComments(bean.getTbaleComments());
        setTbaleEndDate(bean.getTbaleEndDate());
        setTbaleStartDate(bean.getTbaleStartDate());
        setTbaleUpdatedTime(bean.getTbaleUpdatedTime());
        setTbaleCreatedTime(bean.getTbaleCreatedTime());
        setTbltId(bean.getTbltId());
        setTbeId(bean.getTbeId());
        setTbaleId(bean.getTbaleId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbale_leave_available", getTbaleLeaveAvailable() == null ? "" : getTbaleLeaveAvailable().toString());
        dictionnary.put("tbale_leave_taken", getTbaleLeaveTaken() == null ? "" : getTbaleLeaveTaken().toString());
        dictionnary.put("tbale_status", getTbaleStatus() == null ? "" : getTbaleStatus().toString());
        dictionnary.put("tbale_comments", getTbaleComments() == null ? "" : getTbaleComments().toString());
        dictionnary.put("tbale_end_date", getTbaleEndDate() == null ? "" : getTbaleEndDate().toString());
        dictionnary.put("tbale_start_date", getTbaleStartDate() == null ? "" : getTbaleStartDate().toString());
        dictionnary.put("tbale_updated_time", getTbaleUpdatedTime() == null ? "" : getTbaleUpdatedTime().toString());
        dictionnary.put("tbale_created_time", getTbaleCreatedTime() == null ? "" : getTbaleCreatedTime().toString());
        dictionnary.put("tblt_id", getTbltId() == null ? "" : getTbltId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        dictionnary.put("tbale_id", getTbaleId() == null ? "" : getTbaleId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbale_id", getTbaleId() == null ? "" : getTbaleId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbale_leave_available".equalsIgnoreCase(column) || "tbaleLeaveAvailable".equalsIgnoreCase(column)) {
            return getTbaleLeaveAvailable() == null ? "" : getTbaleLeaveAvailable().toString();
        } else if ("tbale_leave_taken".equalsIgnoreCase(column) || "tbaleLeaveTaken".equalsIgnoreCase(column)) {
            return getTbaleLeaveTaken() == null ? "" : getTbaleLeaveTaken().toString();
        } else if ("tbale_status".equalsIgnoreCase(column) || "tbaleStatus".equalsIgnoreCase(column)) {
            return getTbaleStatus() == null ? "" : getTbaleStatus().toString();
        } else if ("tbale_comments".equalsIgnoreCase(column) || "tbaleComments".equalsIgnoreCase(column)) {
            return getTbaleComments() == null ? "" : getTbaleComments().toString();
        } else if ("tbale_end_date".equalsIgnoreCase(column) || "tbaleEndDate".equalsIgnoreCase(column)) {
            return getTbaleEndDate() == null ? "" : getTbaleEndDate().toString();
        } else if ("tbale_start_date".equalsIgnoreCase(column) || "tbaleStartDate".equalsIgnoreCase(column)) {
            return getTbaleStartDate() == null ? "" : getTbaleStartDate().toString();
        } else if ("tbale_updated_time".equalsIgnoreCase(column) || "tbaleUpdatedTime".equalsIgnoreCase(column)) {
            return getTbaleUpdatedTime() == null ? "" : getTbaleUpdatedTime().toString();
        } else if ("tbale_created_time".equalsIgnoreCase(column) || "tbaleCreatedTime".equalsIgnoreCase(column)) {
            return getTbaleCreatedTime() == null ? "" : getTbaleCreatedTime().toString();
        } else if ("tblt_id".equalsIgnoreCase(column) || "tbltId".equalsIgnoreCase(column)) {
            return getTbltId() == null ? "" : getTbltId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        } else if ("tbale_id".equalsIgnoreCase(column) || "tbaleId".equalsIgnoreCase(column)) {
            return getTbaleId() == null ? "" : getTbaleId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbAssignedLeavesBean)) {
            return false;
        }

		TbAssignedLeavesBean obj = (TbAssignedLeavesBean) object;
		return new EqualsBuilder()
            .append(getTbaleLeaveAvailable(), obj.getTbaleLeaveAvailable())
            .append(getTbaleLeaveTaken(), obj.getTbaleLeaveTaken())
            .append(getTbaleStatus(), obj.getTbaleStatus())
            .append(getTbaleComments(), obj.getTbaleComments())
            .append(getTbaleEndDate(), obj.getTbaleEndDate())
            .append(getTbaleStartDate(), obj.getTbaleStartDate())
            .append(getTbaleUpdatedTime(), obj.getTbaleUpdatedTime())
            .append(getTbaleCreatedTime(), obj.getTbaleCreatedTime())
            .append(getTbltId(), obj.getTbltId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbaleId(), obj.getTbaleId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbaleLeaveAvailable())
            .append(getTbaleLeaveTaken())
            .append(getTbaleStatus())
            .append(getTbaleComments())
            .append(getTbaleEndDate())
            .append(getTbaleStartDate())
            .append(getTbaleUpdatedTime())
            .append(getTbaleCreatedTime())
            .append(getTbltId())
            .append(getTbeId())
            .append(getTbaleId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbale_leave_available", getTbaleLeaveAvailable())
            .append("tbale_leave_taken", getTbaleLeaveTaken())
            .append("tbale_status", getTbaleStatus())
            .append("tbale_comments", getTbaleComments())
            .append("tbale_end_date", getTbaleEndDate())
            .append("tbale_start_date", getTbaleStartDate())
            .append("tbale_updated_time", getTbaleUpdatedTime())
            .append("tbale_created_time", getTbaleCreatedTime())
            .append("tblt_id", getTbltId())
            .append("tbe_id", getTbeId())
            .append("tbale_id", getTbaleId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbAssignedLeavesBean obj = (TbAssignedLeavesBean) object;
        return new CompareToBuilder()
            .append(getTbaleLeaveAvailable(), obj.getTbaleLeaveAvailable())
            .append(getTbaleLeaveTaken(), obj.getTbaleLeaveTaken())
            .append(getTbaleStatus(), obj.getTbaleStatus())
            .append(getTbaleComments(), obj.getTbaleComments())
            .append(getTbaleEndDate(), obj.getTbaleEndDate())
            .append(getTbaleStartDate(), obj.getTbaleStartDate())
            .append(getTbaleUpdatedTime(), obj.getTbaleUpdatedTime())
            .append(getTbaleCreatedTime(), obj.getTbaleCreatedTime())
            .append(getTbltId(), obj.getTbltId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbaleId(), obj.getTbaleId())
            .toComparison();
   }
}
