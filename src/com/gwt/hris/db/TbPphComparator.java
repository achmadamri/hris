// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbPphBean objects.
 * @author sql2java
 */
public class TbPphComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbPphComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbPphComparator(TbPphManager.ID_TBPPH_DUMMY, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbPphManager.ID_TBPPH_DUMMY
     *   <li>TbPphManager.ID_TBPPH_PERIODE
     *   <li>TbPphManager.ID_TBPPH_TOTAL_TAKE_HOME_PAY_KURS
     *   <li>TbPphManager.ID_TBC_ID
     *   <li>TbPphManager.ID_TBPPH_TOTAL_TAKE_HOME_PAY
     *   <li>TbPphManager.ID_TBPPH_LOAN
     *   <li>TbPphManager.ID_TBPPH_TAKE_HOME_PAY_UTK_PEND_IRREGULER
     *   <li>TbPphManager.ID_TBPPH_PAJAK_KOMISI
     *   <li>TbPphManager.ID_TBPPH_PAJAK_TOT_SETHN_UTK_KARY_TDK_BER_NPWP
     *   <li>TbPphManager.ID_TBPPH_PAJAK_TOT_SETHN_UTK_KARY_BER_NPWP
     *   <li>TbPphManager.ID_TBPPH_PEND_DISETAHUNKAN_PLUS_KOMISI
     *   <li>TbPphManager.ID_TBPPH_PAJAK_SDH_DISETOR_UTK_PEND_TDK_TTP_YTD
     *   <li>TbPphManager.ID_TBPPH_PENDAPATAN_TIDAK_TETAP_YTD
     *   <li>TbPphManager.ID_TBPPH_PENDAPATAN_TIDAK_TETAP
     *   <li>TbPphManager.ID_TBPPH_TAKE_HOME_PAY
     *   <li>TbPphManager.ID_TBPPH_PAJAK_BLN_INI
     *   <li>TbPphManager.ID_TBPPH_PAJAK_TERUTANG_SMP_BLN_INI
     *   <li>TbPphManager.ID_TBPPH_PAJAK_SETAHUN_UTK_KARY_TDK_BER_NPWP
     *   <li>TbPphManager.ID_TBPPH_PAJAK_SETAHUN_UTK_KARY_BER_NPWP
     *   <li>TbPphManager.ID_TBPPH_PENDAPATAN_KENA_PAJAK
     *   <li>TbPphManager.ID_TBPPH_PENDAPATAN_DISETAHUNKAN
     *   <li>TbPphManager.ID_TBPPH_FAKTOR_PENGALI_UTK_DISETAHUNKAN
     *   <li>TbPphManager.ID_TBPPH_PAJAK_DISETOR_YTD_SMP_BLN_LALU
     *   <li>TbPphManager.ID_TBPPH_PEND_YTD_SBLM_PAJAK_SMP_BLN_LALU
     *   <li>TbPphManager.ID_TBPPH_PEND_SBLN_SBLM_PAJAK
     *   <li>TbPphManager.ID_TBPPH_BIAYA_JABATAN
     *   <li>TbPphManager.ID_TBPPH_IURAN_JHT_JAMSOSTEK
     *   <li>TbPphManager.ID_TBPPH_TOTAL_GROSS
     *   <li>TbPphManager.ID_TBPPH_TUNJANGAN_JAMSOSTEK_JKKJKM
     *   <li>TbPphManager.ID_TBPPH_TUNJANGAN_TETAP
     *   <li>TbPphManager.ID_TBPPH_GAJI_POKOK_GROSS
     *   <li>TbPphManager.ID_TBPPH_NPWP_AWAL_TAHUN
     *   <li>TbPphManager.ID_TBPPH_JKKJKM
     *   <li>TbPphManager.ID_TBPPH_SALARY
     *   <li>TbPphManager.ID_TBPPH_PTKP
     *   <li>TbPphManager.ID_TBPPH_DATE
     *   <li>TbPphManager.ID_TBE_ID
     *   <li>TbPphManager.ID_TBPPH_ID
     * </ul>
     */
    public TbPphComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbPphComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbPphComparator(TbPphManager.ID_TBPPH_DUMMY, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbPphManager.ID_TBPPH_DUMMY
     *   <li>TbPphManager.ID_TBPPH_PERIODE
     *   <li>TbPphManager.ID_TBPPH_TOTAL_TAKE_HOME_PAY_KURS
     *   <li>TbPphManager.ID_TBC_ID
     *   <li>TbPphManager.ID_TBPPH_TOTAL_TAKE_HOME_PAY
     *   <li>TbPphManager.ID_TBPPH_LOAN
     *   <li>TbPphManager.ID_TBPPH_TAKE_HOME_PAY_UTK_PEND_IRREGULER
     *   <li>TbPphManager.ID_TBPPH_PAJAK_KOMISI
     *   <li>TbPphManager.ID_TBPPH_PAJAK_TOT_SETHN_UTK_KARY_TDK_BER_NPWP
     *   <li>TbPphManager.ID_TBPPH_PAJAK_TOT_SETHN_UTK_KARY_BER_NPWP
     *   <li>TbPphManager.ID_TBPPH_PEND_DISETAHUNKAN_PLUS_KOMISI
     *   <li>TbPphManager.ID_TBPPH_PAJAK_SDH_DISETOR_UTK_PEND_TDK_TTP_YTD
     *   <li>TbPphManager.ID_TBPPH_PENDAPATAN_TIDAK_TETAP_YTD
     *   <li>TbPphManager.ID_TBPPH_PENDAPATAN_TIDAK_TETAP
     *   <li>TbPphManager.ID_TBPPH_TAKE_HOME_PAY
     *   <li>TbPphManager.ID_TBPPH_PAJAK_BLN_INI
     *   <li>TbPphManager.ID_TBPPH_PAJAK_TERUTANG_SMP_BLN_INI
     *   <li>TbPphManager.ID_TBPPH_PAJAK_SETAHUN_UTK_KARY_TDK_BER_NPWP
     *   <li>TbPphManager.ID_TBPPH_PAJAK_SETAHUN_UTK_KARY_BER_NPWP
     *   <li>TbPphManager.ID_TBPPH_PENDAPATAN_KENA_PAJAK
     *   <li>TbPphManager.ID_TBPPH_PENDAPATAN_DISETAHUNKAN
     *   <li>TbPphManager.ID_TBPPH_FAKTOR_PENGALI_UTK_DISETAHUNKAN
     *   <li>TbPphManager.ID_TBPPH_PAJAK_DISETOR_YTD_SMP_BLN_LALU
     *   <li>TbPphManager.ID_TBPPH_PEND_YTD_SBLM_PAJAK_SMP_BLN_LALU
     *   <li>TbPphManager.ID_TBPPH_PEND_SBLN_SBLM_PAJAK
     *   <li>TbPphManager.ID_TBPPH_BIAYA_JABATAN
     *   <li>TbPphManager.ID_TBPPH_IURAN_JHT_JAMSOSTEK
     *   <li>TbPphManager.ID_TBPPH_TOTAL_GROSS
     *   <li>TbPphManager.ID_TBPPH_TUNJANGAN_JAMSOSTEK_JKKJKM
     *   <li>TbPphManager.ID_TBPPH_TUNJANGAN_TETAP
     *   <li>TbPphManager.ID_TBPPH_GAJI_POKOK_GROSS
     *   <li>TbPphManager.ID_TBPPH_NPWP_AWAL_TAHUN
     *   <li>TbPphManager.ID_TBPPH_JKKJKM
     *   <li>TbPphManager.ID_TBPPH_SALARY
     *   <li>TbPphManager.ID_TBPPH_PTKP
     *   <li>TbPphManager.ID_TBPPH_DATE
     *   <li>TbPphManager.ID_TBE_ID
     *   <li>TbPphManager.ID_TBPPH_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbPphComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbPphBean b1 = (TbPphBean)pObj1;
        TbPphBean b2 = (TbPphBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbPphManager.ID_TBPPH_DUMMY:
                if (b1.getTbpphDummy() == null && b2.getTbpphDummy() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphDummy() == null && b2.getTbpphDummy() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphDummy() != null && b2.getTbpphDummy() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphDummy().compareTo(b2.getTbpphDummy());
                }
                break;
            case TbPphManager.ID_TBPPH_PERIODE:
                if (b1.getTbpphPeriode() == null && b2.getTbpphPeriode() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPeriode() == null && b2.getTbpphPeriode() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPeriode() != null && b2.getTbpphPeriode() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPeriode().compareTo(b2.getTbpphPeriode());
                }
                break;
            case TbPphManager.ID_TBPPH_TOTAL_TAKE_HOME_PAY_KURS:
                if (b1.getTbpphTotalTakeHomePayKurs() == null && b2.getTbpphTotalTakeHomePayKurs() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphTotalTakeHomePayKurs() == null && b2.getTbpphTotalTakeHomePayKurs() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphTotalTakeHomePayKurs() != null && b2.getTbpphTotalTakeHomePayKurs() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphTotalTakeHomePayKurs().compareTo(b2.getTbpphTotalTakeHomePayKurs());
                }
                break;
            case TbPphManager.ID_TBC_ID:
                if (b1.getTbcId() == null && b2.getTbcId() != null) {
                    iReturn = -1;
                } else if (b1.getTbcId() == null && b2.getTbcId() == null) {
                    iReturn = 0;
                } else if (b1.getTbcId() != null && b2.getTbcId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcId().compareTo(b2.getTbcId());
                }
                break;
            case TbPphManager.ID_TBPPH_TOTAL_TAKE_HOME_PAY:
                if (b1.getTbpphTotalTakeHomePay() == null && b2.getTbpphTotalTakeHomePay() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphTotalTakeHomePay() == null && b2.getTbpphTotalTakeHomePay() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphTotalTakeHomePay() != null && b2.getTbpphTotalTakeHomePay() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphTotalTakeHomePay().compareTo(b2.getTbpphTotalTakeHomePay());
                }
                break;
            case TbPphManager.ID_TBPPH_LOAN:
                if (b1.getTbpphLoan() == null && b2.getTbpphLoan() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphLoan() == null && b2.getTbpphLoan() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphLoan() != null && b2.getTbpphLoan() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphLoan().compareTo(b2.getTbpphLoan());
                }
                break;
            case TbPphManager.ID_TBPPH_TAKE_HOME_PAY_UTK_PEND_IRREGULER:
                if (b1.getTbpphTakeHomePayUtkPendIrreguler() == null && b2.getTbpphTakeHomePayUtkPendIrreguler() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphTakeHomePayUtkPendIrreguler() == null && b2.getTbpphTakeHomePayUtkPendIrreguler() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphTakeHomePayUtkPendIrreguler() != null && b2.getTbpphTakeHomePayUtkPendIrreguler() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphTakeHomePayUtkPendIrreguler().compareTo(b2.getTbpphTakeHomePayUtkPendIrreguler());
                }
                break;
            case TbPphManager.ID_TBPPH_PAJAK_KOMISI:
                if (b1.getTbpphPajakKomisi() == null && b2.getTbpphPajakKomisi() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPajakKomisi() == null && b2.getTbpphPajakKomisi() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPajakKomisi() != null && b2.getTbpphPajakKomisi() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPajakKomisi().compareTo(b2.getTbpphPajakKomisi());
                }
                break;
            case TbPphManager.ID_TBPPH_PAJAK_TOT_SETHN_UTK_KARY_TDK_BER_NPWP:
                if (b1.getTbpphPajakTotSethnUtkKaryTdkBerNpwp() == null && b2.getTbpphPajakTotSethnUtkKaryTdkBerNpwp() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPajakTotSethnUtkKaryTdkBerNpwp() == null && b2.getTbpphPajakTotSethnUtkKaryTdkBerNpwp() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPajakTotSethnUtkKaryTdkBerNpwp() != null && b2.getTbpphPajakTotSethnUtkKaryTdkBerNpwp() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPajakTotSethnUtkKaryTdkBerNpwp().compareTo(b2.getTbpphPajakTotSethnUtkKaryTdkBerNpwp());
                }
                break;
            case TbPphManager.ID_TBPPH_PAJAK_TOT_SETHN_UTK_KARY_BER_NPWP:
                if (b1.getTbpphPajakTotSethnUtkKaryBerNpwp() == null && b2.getTbpphPajakTotSethnUtkKaryBerNpwp() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPajakTotSethnUtkKaryBerNpwp() == null && b2.getTbpphPajakTotSethnUtkKaryBerNpwp() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPajakTotSethnUtkKaryBerNpwp() != null && b2.getTbpphPajakTotSethnUtkKaryBerNpwp() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPajakTotSethnUtkKaryBerNpwp().compareTo(b2.getTbpphPajakTotSethnUtkKaryBerNpwp());
                }
                break;
            case TbPphManager.ID_TBPPH_PEND_DISETAHUNKAN_PLUS_KOMISI:
                if (b1.getTbpphPendDisetahunkanPlusKomisi() == null && b2.getTbpphPendDisetahunkanPlusKomisi() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPendDisetahunkanPlusKomisi() == null && b2.getTbpphPendDisetahunkanPlusKomisi() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPendDisetahunkanPlusKomisi() != null && b2.getTbpphPendDisetahunkanPlusKomisi() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPendDisetahunkanPlusKomisi().compareTo(b2.getTbpphPendDisetahunkanPlusKomisi());
                }
                break;
            case TbPphManager.ID_TBPPH_PAJAK_SDH_DISETOR_UTK_PEND_TDK_TTP_YTD:
                if (b1.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd() == null && b2.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd() == null && b2.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd() != null && b2.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd().compareTo(b2.getTbpphPajakSdhDisetorUtkPendTdkTtpYtd());
                }
                break;
            case TbPphManager.ID_TBPPH_PENDAPATAN_TIDAK_TETAP_YTD:
                if (b1.getTbpphPendapatanTidakTetapYtd() == null && b2.getTbpphPendapatanTidakTetapYtd() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPendapatanTidakTetapYtd() == null && b2.getTbpphPendapatanTidakTetapYtd() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPendapatanTidakTetapYtd() != null && b2.getTbpphPendapatanTidakTetapYtd() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPendapatanTidakTetapYtd().compareTo(b2.getTbpphPendapatanTidakTetapYtd());
                }
                break;
            case TbPphManager.ID_TBPPH_PENDAPATAN_TIDAK_TETAP:
                if (b1.getTbpphPendapatanTidakTetap() == null && b2.getTbpphPendapatanTidakTetap() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPendapatanTidakTetap() == null && b2.getTbpphPendapatanTidakTetap() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPendapatanTidakTetap() != null && b2.getTbpphPendapatanTidakTetap() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPendapatanTidakTetap().compareTo(b2.getTbpphPendapatanTidakTetap());
                }
                break;
            case TbPphManager.ID_TBPPH_TAKE_HOME_PAY:
                if (b1.getTbpphTakeHomePay() == null && b2.getTbpphTakeHomePay() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphTakeHomePay() == null && b2.getTbpphTakeHomePay() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphTakeHomePay() != null && b2.getTbpphTakeHomePay() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphTakeHomePay().compareTo(b2.getTbpphTakeHomePay());
                }
                break;
            case TbPphManager.ID_TBPPH_PAJAK_BLN_INI:
                if (b1.getTbpphPajakBlnIni() == null && b2.getTbpphPajakBlnIni() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPajakBlnIni() == null && b2.getTbpphPajakBlnIni() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPajakBlnIni() != null && b2.getTbpphPajakBlnIni() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPajakBlnIni().compareTo(b2.getTbpphPajakBlnIni());
                }
                break;
            case TbPphManager.ID_TBPPH_PAJAK_TERUTANG_SMP_BLN_INI:
                if (b1.getTbpphPajakTerutangSmpBlnIni() == null && b2.getTbpphPajakTerutangSmpBlnIni() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPajakTerutangSmpBlnIni() == null && b2.getTbpphPajakTerutangSmpBlnIni() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPajakTerutangSmpBlnIni() != null && b2.getTbpphPajakTerutangSmpBlnIni() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPajakTerutangSmpBlnIni().compareTo(b2.getTbpphPajakTerutangSmpBlnIni());
                }
                break;
            case TbPphManager.ID_TBPPH_PAJAK_SETAHUN_UTK_KARY_TDK_BER_NPWP:
                if (b1.getTbpphPajakSetahunUtkKaryTdkBerNpwp() == null && b2.getTbpphPajakSetahunUtkKaryTdkBerNpwp() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPajakSetahunUtkKaryTdkBerNpwp() == null && b2.getTbpphPajakSetahunUtkKaryTdkBerNpwp() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPajakSetahunUtkKaryTdkBerNpwp() != null && b2.getTbpphPajakSetahunUtkKaryTdkBerNpwp() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPajakSetahunUtkKaryTdkBerNpwp().compareTo(b2.getTbpphPajakSetahunUtkKaryTdkBerNpwp());
                }
                break;
            case TbPphManager.ID_TBPPH_PAJAK_SETAHUN_UTK_KARY_BER_NPWP:
                if (b1.getTbpphPajakSetahunUtkKaryBerNpwp() == null && b2.getTbpphPajakSetahunUtkKaryBerNpwp() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPajakSetahunUtkKaryBerNpwp() == null && b2.getTbpphPajakSetahunUtkKaryBerNpwp() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPajakSetahunUtkKaryBerNpwp() != null && b2.getTbpphPajakSetahunUtkKaryBerNpwp() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPajakSetahunUtkKaryBerNpwp().compareTo(b2.getTbpphPajakSetahunUtkKaryBerNpwp());
                }
                break;
            case TbPphManager.ID_TBPPH_PENDAPATAN_KENA_PAJAK:
                if (b1.getTbpphPendapatanKenaPajak() == null && b2.getTbpphPendapatanKenaPajak() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPendapatanKenaPajak() == null && b2.getTbpphPendapatanKenaPajak() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPendapatanKenaPajak() != null && b2.getTbpphPendapatanKenaPajak() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPendapatanKenaPajak().compareTo(b2.getTbpphPendapatanKenaPajak());
                }
                break;
            case TbPphManager.ID_TBPPH_PENDAPATAN_DISETAHUNKAN:
                if (b1.getTbpphPendapatanDisetahunkan() == null && b2.getTbpphPendapatanDisetahunkan() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPendapatanDisetahunkan() == null && b2.getTbpphPendapatanDisetahunkan() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPendapatanDisetahunkan() != null && b2.getTbpphPendapatanDisetahunkan() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPendapatanDisetahunkan().compareTo(b2.getTbpphPendapatanDisetahunkan());
                }
                break;
            case TbPphManager.ID_TBPPH_FAKTOR_PENGALI_UTK_DISETAHUNKAN:
                if (b1.getTbpphFaktorPengaliUtkDisetahunkan() == null && b2.getTbpphFaktorPengaliUtkDisetahunkan() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphFaktorPengaliUtkDisetahunkan() == null && b2.getTbpphFaktorPengaliUtkDisetahunkan() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphFaktorPengaliUtkDisetahunkan() != null && b2.getTbpphFaktorPengaliUtkDisetahunkan() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphFaktorPengaliUtkDisetahunkan().compareTo(b2.getTbpphFaktorPengaliUtkDisetahunkan());
                }
                break;
            case TbPphManager.ID_TBPPH_PAJAK_DISETOR_YTD_SMP_BLN_LALU:
                if (b1.getTbpphPajakDisetorYtdSmpBlnLalu() == null && b2.getTbpphPajakDisetorYtdSmpBlnLalu() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPajakDisetorYtdSmpBlnLalu() == null && b2.getTbpphPajakDisetorYtdSmpBlnLalu() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPajakDisetorYtdSmpBlnLalu() != null && b2.getTbpphPajakDisetorYtdSmpBlnLalu() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPajakDisetorYtdSmpBlnLalu().compareTo(b2.getTbpphPajakDisetorYtdSmpBlnLalu());
                }
                break;
            case TbPphManager.ID_TBPPH_PEND_YTD_SBLM_PAJAK_SMP_BLN_LALU:
                if (b1.getTbpphPendYtdSblmPajakSmpBlnLalu() == null && b2.getTbpphPendYtdSblmPajakSmpBlnLalu() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPendYtdSblmPajakSmpBlnLalu() == null && b2.getTbpphPendYtdSblmPajakSmpBlnLalu() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPendYtdSblmPajakSmpBlnLalu() != null && b2.getTbpphPendYtdSblmPajakSmpBlnLalu() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPendYtdSblmPajakSmpBlnLalu().compareTo(b2.getTbpphPendYtdSblmPajakSmpBlnLalu());
                }
                break;
            case TbPphManager.ID_TBPPH_PEND_SBLN_SBLM_PAJAK:
                if (b1.getTbpphPendSblnSblmPajak() == null && b2.getTbpphPendSblnSblmPajak() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPendSblnSblmPajak() == null && b2.getTbpphPendSblnSblmPajak() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPendSblnSblmPajak() != null && b2.getTbpphPendSblnSblmPajak() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPendSblnSblmPajak().compareTo(b2.getTbpphPendSblnSblmPajak());
                }
                break;
            case TbPphManager.ID_TBPPH_BIAYA_JABATAN:
                if (b1.getTbpphBiayaJabatan() == null && b2.getTbpphBiayaJabatan() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphBiayaJabatan() == null && b2.getTbpphBiayaJabatan() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphBiayaJabatan() != null && b2.getTbpphBiayaJabatan() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphBiayaJabatan().compareTo(b2.getTbpphBiayaJabatan());
                }
                break;
            case TbPphManager.ID_TBPPH_IURAN_JHT_JAMSOSTEK:
                if (b1.getTbpphIuranJhtJamsostek() == null && b2.getTbpphIuranJhtJamsostek() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphIuranJhtJamsostek() == null && b2.getTbpphIuranJhtJamsostek() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphIuranJhtJamsostek() != null && b2.getTbpphIuranJhtJamsostek() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphIuranJhtJamsostek().compareTo(b2.getTbpphIuranJhtJamsostek());
                }
                break;
            case TbPphManager.ID_TBPPH_TOTAL_GROSS:
                if (b1.getTbpphTotalGross() == null && b2.getTbpphTotalGross() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphTotalGross() == null && b2.getTbpphTotalGross() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphTotalGross() != null && b2.getTbpphTotalGross() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphTotalGross().compareTo(b2.getTbpphTotalGross());
                }
                break;
            case TbPphManager.ID_TBPPH_TUNJANGAN_JAMSOSTEK_JKKJKM:
                if (b1.getTbpphTunjanganJamsostekJkkjkm() == null && b2.getTbpphTunjanganJamsostekJkkjkm() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphTunjanganJamsostekJkkjkm() == null && b2.getTbpphTunjanganJamsostekJkkjkm() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphTunjanganJamsostekJkkjkm() != null && b2.getTbpphTunjanganJamsostekJkkjkm() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphTunjanganJamsostekJkkjkm().compareTo(b2.getTbpphTunjanganJamsostekJkkjkm());
                }
                break;
            case TbPphManager.ID_TBPPH_TUNJANGAN_TETAP:
                if (b1.getTbpphTunjanganTetap() == null && b2.getTbpphTunjanganTetap() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphTunjanganTetap() == null && b2.getTbpphTunjanganTetap() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphTunjanganTetap() != null && b2.getTbpphTunjanganTetap() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphTunjanganTetap().compareTo(b2.getTbpphTunjanganTetap());
                }
                break;
            case TbPphManager.ID_TBPPH_GAJI_POKOK_GROSS:
                if (b1.getTbpphGajiPokokGross() == null && b2.getTbpphGajiPokokGross() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphGajiPokokGross() == null && b2.getTbpphGajiPokokGross() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphGajiPokokGross() != null && b2.getTbpphGajiPokokGross() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphGajiPokokGross().compareTo(b2.getTbpphGajiPokokGross());
                }
                break;
            case TbPphManager.ID_TBPPH_NPWP_AWAL_TAHUN:
                if (b1.getTbpphNpwpAwalTahun() == null && b2.getTbpphNpwpAwalTahun() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphNpwpAwalTahun() == null && b2.getTbpphNpwpAwalTahun() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphNpwpAwalTahun() != null && b2.getTbpphNpwpAwalTahun() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphNpwpAwalTahun().compareTo(b2.getTbpphNpwpAwalTahun());
                }
                break;
            case TbPphManager.ID_TBPPH_JKKJKM:
                if (b1.getTbpphJkkjkm() == null && b2.getTbpphJkkjkm() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphJkkjkm() == null && b2.getTbpphJkkjkm() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphJkkjkm() != null && b2.getTbpphJkkjkm() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphJkkjkm().compareTo(b2.getTbpphJkkjkm());
                }
                break;
            case TbPphManager.ID_TBPPH_SALARY:
                if (b1.getTbpphSalary() == null && b2.getTbpphSalary() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphSalary() == null && b2.getTbpphSalary() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphSalary() != null && b2.getTbpphSalary() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphSalary().compareTo(b2.getTbpphSalary());
                }
                break;
            case TbPphManager.ID_TBPPH_PTKP:
                if (b1.getTbpphPtkp() == null && b2.getTbpphPtkp() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphPtkp() == null && b2.getTbpphPtkp() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphPtkp() != null && b2.getTbpphPtkp() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphPtkp().compareTo(b2.getTbpphPtkp());
                }
                break;
            case TbPphManager.ID_TBPPH_DATE:
                if (b1.getTbpphDate() == null && b2.getTbpphDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphDate() == null && b2.getTbpphDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphDate() != null && b2.getTbpphDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphDate().compareTo(b2.getTbpphDate());
                }
                break;
            case TbPphManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            case TbPphManager.ID_TBPPH_ID:
                if (b1.getTbpphId() == null && b2.getTbpphId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpphId() == null && b2.getTbpphId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpphId() != null && b2.getTbpphId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpphId().compareTo(b2.getTbpphId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
