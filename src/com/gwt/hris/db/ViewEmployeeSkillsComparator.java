// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the ViewEmployeeSkillsBean objects.
 * @author sql2java
 */
public class ViewEmployeeSkillsComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for ViewEmployeeSkillsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewEmployeeSkillsComparator(ViewEmployeeSkillsManager.ID_TBAS_COMMENTS, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewEmployeeSkillsManager.ID_TBAS_COMMENTS
     *   <li>ViewEmployeeSkillsManager.ID_TBAS_YEAR
     *   <li>ViewEmployeeSkillsManager.ID_TBAS_ID
     *   <li>ViewEmployeeSkillsManager.ID_TBS_DESCRIPTION
     *   <li>ViewEmployeeSkillsManager.ID_TBS_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBS_SKILL_ID
     *   <li>ViewEmployeeSkillsManager.ID_TBS_ID
     *   <li>ViewEmployeeSkillsManager.ID_TBE_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBE_NICK_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBE_LAST_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBE_MIDDLE_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBE_FIRST_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBE_EMPLOYEE_ID
     *   <li>ViewEmployeeSkillsManager.ID_TBE_ID
     * </ul>
     */
    public ViewEmployeeSkillsComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for ViewEmployeeSkillsComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new ViewEmployeeSkillsComparator(ViewEmployeeSkillsManager.ID_TBAS_COMMENTS, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>ViewEmployeeSkillsManager.ID_TBAS_COMMENTS
     *   <li>ViewEmployeeSkillsManager.ID_TBAS_YEAR
     *   <li>ViewEmployeeSkillsManager.ID_TBAS_ID
     *   <li>ViewEmployeeSkillsManager.ID_TBS_DESCRIPTION
     *   <li>ViewEmployeeSkillsManager.ID_TBS_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBS_SKILL_ID
     *   <li>ViewEmployeeSkillsManager.ID_TBS_ID
     *   <li>ViewEmployeeSkillsManager.ID_TBE_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBE_NICK_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBE_LAST_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBE_MIDDLE_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBE_FIRST_NAME
     *   <li>ViewEmployeeSkillsManager.ID_TBE_EMPLOYEE_ID
     *   <li>ViewEmployeeSkillsManager.ID_TBE_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public ViewEmployeeSkillsComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        ViewEmployeeSkillsBean b1 = (ViewEmployeeSkillsBean)pObj1;
        ViewEmployeeSkillsBean b2 = (ViewEmployeeSkillsBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case ViewEmployeeSkillsManager.ID_TBAS_COMMENTS:
                if (b1.getTbasComments() == null && b2.getTbasComments() != null) {
                    iReturn = -1;
                } else if (b1.getTbasComments() == null && b2.getTbasComments() == null) {
                    iReturn = 0;
                } else if (b1.getTbasComments() != null && b2.getTbasComments() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbasComments().compareTo(b2.getTbasComments());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBAS_YEAR:
                if (b1.getTbasYear() == null && b2.getTbasYear() != null) {
                    iReturn = -1;
                } else if (b1.getTbasYear() == null && b2.getTbasYear() == null) {
                    iReturn = 0;
                } else if (b1.getTbasYear() != null && b2.getTbasYear() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbasYear().compareTo(b2.getTbasYear());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBAS_ID:
                if (b1.getTbasId() == null && b2.getTbasId() != null) {
                    iReturn = -1;
                } else if (b1.getTbasId() == null && b2.getTbasId() == null) {
                    iReturn = 0;
                } else if (b1.getTbasId() != null && b2.getTbasId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbasId().compareTo(b2.getTbasId());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBS_DESCRIPTION:
                if (b1.getTbsDescription() == null && b2.getTbsDescription() != null) {
                    iReturn = -1;
                } else if (b1.getTbsDescription() == null && b2.getTbsDescription() == null) {
                    iReturn = 0;
                } else if (b1.getTbsDescription() != null && b2.getTbsDescription() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbsDescription().compareTo(b2.getTbsDescription());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBS_NAME:
                if (b1.getTbsName() == null && b2.getTbsName() != null) {
                    iReturn = -1;
                } else if (b1.getTbsName() == null && b2.getTbsName() == null) {
                    iReturn = 0;
                } else if (b1.getTbsName() != null && b2.getTbsName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbsName().compareTo(b2.getTbsName());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBS_SKILL_ID:
                if (b1.getTbsSkillId() == null && b2.getTbsSkillId() != null) {
                    iReturn = -1;
                } else if (b1.getTbsSkillId() == null && b2.getTbsSkillId() == null) {
                    iReturn = 0;
                } else if (b1.getTbsSkillId() != null && b2.getTbsSkillId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbsSkillId().compareTo(b2.getTbsSkillId());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBS_ID:
                if (b1.getTbsId() == null && b2.getTbsId() != null) {
                    iReturn = -1;
                } else if (b1.getTbsId() == null && b2.getTbsId() == null) {
                    iReturn = 0;
                } else if (b1.getTbsId() != null && b2.getTbsId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbsId().compareTo(b2.getTbsId());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBE_NAME:
                if (b1.getTbeName() == null && b2.getTbeName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeName() == null && b2.getTbeName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeName() != null && b2.getTbeName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeName().compareTo(b2.getTbeName());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBE_NICK_NAME:
                if (b1.getTbeNickName() == null && b2.getTbeNickName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeNickName() == null && b2.getTbeNickName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeNickName() != null && b2.getTbeNickName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeNickName().compareTo(b2.getTbeNickName());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBE_LAST_NAME:
                if (b1.getTbeLastName() == null && b2.getTbeLastName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeLastName() == null && b2.getTbeLastName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeLastName() != null && b2.getTbeLastName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeLastName().compareTo(b2.getTbeLastName());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBE_MIDDLE_NAME:
                if (b1.getTbeMiddleName() == null && b2.getTbeMiddleName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeMiddleName() == null && b2.getTbeMiddleName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeMiddleName() != null && b2.getTbeMiddleName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeMiddleName().compareTo(b2.getTbeMiddleName());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBE_FIRST_NAME:
                if (b1.getTbeFirstName() == null && b2.getTbeFirstName() != null) {
                    iReturn = -1;
                } else if (b1.getTbeFirstName() == null && b2.getTbeFirstName() == null) {
                    iReturn = 0;
                } else if (b1.getTbeFirstName() != null && b2.getTbeFirstName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeFirstName().compareTo(b2.getTbeFirstName());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBE_EMPLOYEE_ID:
                if (b1.getTbeEmployeeId() == null && b2.getTbeEmployeeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeEmployeeId() == null && b2.getTbeEmployeeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeEmployeeId() != null && b2.getTbeEmployeeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeEmployeeId().compareTo(b2.getTbeEmployeeId());
                }
                break;
            case ViewEmployeeSkillsManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
