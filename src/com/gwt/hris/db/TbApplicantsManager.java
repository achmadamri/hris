// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.TbApplicantsBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the tb_applicants table.
 * @author sql2java
 */
public class TbApplicantsManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbv_id field.
     */
    public static final int ID_TBV_ID = 0;

    /**
     * Identify the tba_status field.
     */
    public static final int ID_TBA_STATUS = 1;

    /**
     * Identify the tba_resume_file_name_existing field.
     */
    public static final int ID_TBA_RESUME_FILE_NAME_EXISTING = 2;

    /**
     * Identify the tba_resume_file_name field.
     */
    public static final int ID_TBA_RESUME_FILE_NAME = 3;

    /**
     * Identify the tba_date field.
     */
    public static final int ID_TBA_DATE = 4;

    /**
     * Identify the tba_comments field.
     */
    public static final int ID_TBA_COMMENTS = 5;

    /**
     * Identify the tba_mobile field.
     */
    public static final int ID_TBA_MOBILE = 6;

    /**
     * Identify the tba_phone field.
     */
    public static final int ID_TBA_PHONE = 7;

    /**
     * Identify the tba_email field.
     */
    public static final int ID_TBA_EMAIL = 8;

    /**
     * Identify the tba_name field.
     */
    public static final int ID_TBA_NAME = 9;

    /**
     * Identify the tba_nick_name field.
     */
    public static final int ID_TBA_NICK_NAME = 10;

    /**
     * Identify the tba_last_name field.
     */
    public static final int ID_TBA_LAST_NAME = 11;

    /**
     * Identify the tba_middle_name field.
     */
    public static final int ID_TBA_MIDDLE_NAME = 12;

    /**
     * Identify the tba_first_name field.
     */
    public static final int ID_TBA_FIRST_NAME = 13;

    /**
     * Identify the tba_applicants_id field.
     */
    public static final int ID_TBA_APPLICANTS_ID = 14;

    /**
     * Identify the tba_id field.
     */
    public static final int ID_TBA_ID = 15;

    /**
     * Contains all the full fields of the tb_applicants table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "tb_applicants.tbv_id"
        ,"tb_applicants.tba_status"
        ,"tb_applicants.tba_resume_file_name_existing"
        ,"tb_applicants.tba_resume_file_name"
        ,"tb_applicants.tba_date"
        ,"tb_applicants.tba_comments"
        ,"tb_applicants.tba_mobile"
        ,"tb_applicants.tba_phone"
        ,"tb_applicants.tba_email"
        ,"tb_applicants.tba_name"
        ,"tb_applicants.tba_nick_name"
        ,"tb_applicants.tba_last_name"
        ,"tb_applicants.tba_middle_name"
        ,"tb_applicants.tba_first_name"
        ,"tb_applicants.tba_applicants_id"
        ,"tb_applicants.tba_id"
    };

    /**
     * Contains all the fields of the tb_applicants table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbv_id"
        ,"tba_status"
        ,"tba_resume_file_name_existing"
        ,"tba_resume_file_name"
        ,"tba_date"
        ,"tba_comments"
        ,"tba_mobile"
        ,"tba_phone"
        ,"tba_email"
        ,"tba_name"
        ,"tba_nick_name"
        ,"tba_last_name"
        ,"tba_middle_name"
        ,"tba_first_name"
        ,"tba_applicants_id"
        ,"tba_id"
    };

    /**
     * Field that contains the comma separated fields of the tb_applicants table.
     */
    public static final String ALL_FULL_FIELDS = "tb_applicants.tbv_id"
                            + ",tb_applicants.tba_status"
                            + ",tb_applicants.tba_resume_file_name_existing"
                            + ",tb_applicants.tba_resume_file_name"
                            + ",tb_applicants.tba_date"
                            + ",tb_applicants.tba_comments"
                            + ",tb_applicants.tba_mobile"
                            + ",tb_applicants.tba_phone"
                            + ",tb_applicants.tba_email"
                            + ",tb_applicants.tba_name"
                            + ",tb_applicants.tba_nick_name"
                            + ",tb_applicants.tba_last_name"
                            + ",tb_applicants.tba_middle_name"
                            + ",tb_applicants.tba_first_name"
                            + ",tb_applicants.tba_applicants_id"
                            + ",tb_applicants.tba_id";

    /**
     * Field that contains the comma separated fields of the tb_applicants table.
     */
    public static final String ALL_FIELDS = "tbv_id"
                            + ",tba_status"
                            + ",tba_resume_file_name_existing"
                            + ",tba_resume_file_name"
                            + ",tba_date"
                            + ",tba_comments"
                            + ",tba_mobile"
                            + ",tba_phone"
                            + ",tba_email"
                            + ",tba_name"
                            + ",tba_nick_name"
                            + ",tba_last_name"
                            + ",tba_middle_name"
                            + ",tba_first_name"
                            + ",tba_applicants_id"
                            + ",tba_id";

    private static TbApplicantsManager singleton = new TbApplicantsManager();

    /**
     * Get the TbApplicantsManager singleton.
     *
     * @return TbApplicantsManager
     */
    public static TbApplicantsManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new TbApplicantsBean instance.
     *
     * @return the new TbApplicantsBean
     */
    public TbApplicantsBean createTbApplicantsBean()
    {
        return new TbApplicantsBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////
	
    /**
     * Loads a TbApplicantsBean from the tb_applicants using its key fields.
     *
     * @param tbaId Integer - PK# 1
     * @return a unique TbApplicantsBean
     * @throws DAOException
     */
    //1
    public TbApplicantsBean loadByPrimaryKey(Integer tbaId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("SELECT " + ALL_FIELDS + " FROM tb_applicants WHERE tba_id=?");
            log.debug("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbaId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbaId); }
            TbApplicantsBean pReturn[] = this.loadByPreparedStatement(ps);
            if (pReturn.length < 1) {
                // throw new ObjectRetrievalException();
				return null;
            } else {
                return pReturn[0];
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
		
	//1WS
    //public TbApplicantsBean loadByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return fromBeanWsToBean(Util.getInstance().getDAOServiceV1().tbXLoadByPrimaryKey(id));
    //}
    
    //2WS
    //public int deleteByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return Util.getInstance().getDAOServiceV1().tbXDeleteByPrimaryKey(id);
    //}

    /**
     * Deletes rows according to its keys.
     *
     * @param tbaId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer tbaId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_applicants WHERE tba_id=?");
            log.debug("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbaId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbaId); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }


    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the TbVacancyBean object from the tb_applicants.tbv_id field.
     *
     * @param bean the TbApplicantsBean
     * @return the associated TbVacancyBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbVacancyBean getTbVacancyBean(TbApplicantsBean bean) throws DAOException
    {
        TbVacancyBean other = TbVacancyManager.getInstance().createTbVacancyBean();
        other.setTbvId(bean.getTbvId()); 
        bean.setTbVacancyBean(TbVacancyManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbVacancyBean();
    }

    /**
     * Associates the TbApplicantsBean object to the TbVacancyBean object.
     *
     * @param bean the TbApplicantsBean object to use
     * @param beanToSet the TbVacancyBean object to associate to the TbApplicantsBean
     * @return the associated TbVacancyBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbVacancyBean addTbVacancyBean(TbVacancyBean beanToSet, TbApplicantsBean bean) throws Exception
    {
        beanToSet.setTbvId(bean.getTbvId());
        return TbVacancyManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbApplicantsBean object to the TbVacancyBean object.
     *
     * @param bean the TbApplicantsBean object to use
     * @param beanToSet the TbVacancyBean object to associate to the TbApplicantsBean
     * @return the associated TbVacancyBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbVacancyBean setTbVacancyBean(TbApplicantsBean bean, TbVacancyBean beanToSet) throws Exception
    {
        bean.setTbvId(beanToSet.getTbvId());
        return TbVacancyManager.getInstance().save(beanToSet);
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from tb_applicants.
     *
     * @return an array of TbApplicantsManager bean
     * @throws DAOException
     */
    //5
    public TbApplicantsBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from tb_applicants, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of TbApplicantsManager bean
     * @throws DAOException
     */
    //6
    public TbApplicantsBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TbApplicantsBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TbApplicantsBean table
     * @throws DAOException
     */
    //7
    public TbApplicantsBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TbApplicantsBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting TbApplicantsBean table
     * @throws DAOException
     */
    //8
    public TbApplicantsBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of TbApplicantsBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting TbApplicantsBean table
     * @throws DAOException
     */
    //9
    public TbApplicantsBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_applicants ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM tb_applicants ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the tb_applicants table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_applicants " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the TbApplicantsBean bean into the database.
     *
     * @param bean the TbApplicantsBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public TbApplicantsBean save(TbApplicantsBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the TbApplicantsBean bean into the database.
     *
     * @param bean the TbApplicantsBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public TbApplicantsBean insert(TbApplicantsBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into tb_applicants (");

            if (bean.isTbvIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbv_id");
                _dirtyCount++;
            }

            if (bean.isTbaStatusModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_status");
                _dirtyCount++;
            }

            if (bean.isTbaResumeFileNameExistingModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_resume_file_name_existing");
                _dirtyCount++;
            }

            if (bean.isTbaResumeFileNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_resume_file_name");
                _dirtyCount++;
            }

            if (bean.isTbaDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_date");
                _dirtyCount++;
            }

            if (bean.isTbaCommentsModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_comments");
                _dirtyCount++;
            }

            if (bean.isTbaMobileModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_mobile");
                _dirtyCount++;
            }

            if (bean.isTbaPhoneModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_phone");
                _dirtyCount++;
            }

            if (bean.isTbaEmailModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_email");
                _dirtyCount++;
            }

            if (bean.isTbaNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_name");
                _dirtyCount++;
            }

            if (bean.isTbaNickNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_nick_name");
                _dirtyCount++;
            }

            if (bean.isTbaLastNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_last_name");
                _dirtyCount++;
            }

            if (bean.isTbaMiddleNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_middle_name");
                _dirtyCount++;
            }

            if (bean.isTbaFirstNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_first_name");
                _dirtyCount++;
            }

            if (bean.isTbaApplicantsIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_applicants_id");
                _dirtyCount++;
            }

            if (bean.isTbaIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tba_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();
            if (!bean.isTbaIdModified())
            {
                ResultSet rs = ps.getGeneratedKeys();
                try {
                    if(rs.next()) {
                        bean.setTbaId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve auto generated key!");
                    }
                } finally {
                    this.getManager().close(rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the TbApplicantsBean bean record in the database according to the changes.
     *
     * @param bean the TbApplicantsBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public TbApplicantsBean update(TbApplicantsBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE tb_applicants SET ");
            boolean useComma=false;

            if (bean.isTbvIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbv_id=?");
            }

            if (bean.isTbaStatusModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_status=?");
            }

            if (bean.isTbaResumeFileNameExistingModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_resume_file_name_existing=?");
            }

            if (bean.isTbaResumeFileNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_resume_file_name=?");
            }

            if (bean.isTbaDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_date=?");
            }

            if (bean.isTbaCommentsModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_comments=?");
            }

            if (bean.isTbaMobileModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_mobile=?");
            }

            if (bean.isTbaPhoneModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_phone=?");
            }

            if (bean.isTbaEmailModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_email=?");
            }

            if (bean.isTbaNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_name=?");
            }

            if (bean.isTbaNickNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_nick_name=?");
            }

            if (bean.isTbaLastNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_last_name=?");
            }

            if (bean.isTbaMiddleNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_middle_name=?");
            }

            if (bean.isTbaFirstNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_first_name=?");
            }

            if (bean.isTbaApplicantsIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_applicants_id=?");
            }

            if (bean.isTbaIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tba_id=?");
            }
            sql.append(" WHERE ");
            sql.append("tba_id=?");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getTbaId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbaId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of TbApplicantsBean beans into the database.
     *
     * @param beans the TbApplicantsBean bean table to be saved
     * @return the saved TbApplicantsBean array.
     * @throws DAOException
     */
    //15
    public TbApplicantsBean[] save(TbApplicantsBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of TbApplicantsBean beans into the database.
     *
     * @param beans the TbApplicantsBean bean table to be inserted
     * @return the saved TbApplicantsBean array.
     * @throws DAOException
     */
    //16
    public TbApplicantsBean[] insert(TbApplicantsBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of TbApplicantsBean beans into the database.
     *
     * @param beans the TbApplicantsBean bean table to be inserted
     * @return the saved TbApplicantsBean array.
     * @throws DAOException
     */
    //17
    public TbApplicantsBean[] update(TbApplicantsBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique TbApplicantsBean bean from a template one giving a c
     *
     * @param bean the TbApplicantsBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public TbApplicantsBean loadUniqueUsingTemplate(TbApplicantsBean bean) throws DAOException
    {
         TbApplicantsBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of TbApplicantsBean from a template one.
     *
     * @param bean the TbApplicantsBean template to look for
     * @return all the TbApplicantsBean matching the template
     * @throws DAOException
     */
    //19
    public TbApplicantsBean[] loadUsingTemplate(TbApplicantsBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of TbApplicantsBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbApplicantsBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the TbApplicantsBean matching the template
     * @throws DAOException
     */
    //20
    public TbApplicantsBean[] loadUsingTemplate(TbApplicantsBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of TbApplicantsBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbApplicantsBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the TbApplicantsBean matching the template
     * @throws DAOException
     */
    //20
    public TbApplicantsBean[] loadUsingTemplate(TbApplicantsBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_applicants ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a TbApplicantsBean template.
     *
     * @param bean the TbApplicantsBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(TbApplicantsBean bean) throws DAOException
    {
        if (bean.isTbaIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getTbaId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM tb_applicants ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

    /**
     * Retrieves an array of TbApplicantsBean using the tb_applicants_fk_1 index.
     *
     * @param tbvId the tbv_id column's value filter.
     * @return an array of TbApplicantsBean
     * @throws DAOException
     */
    public TbApplicantsBean[] loadBytb_applicants_fk_1(Integer tbvId) throws DAOException
    {
        TbApplicantsBean bean = this.createTbApplicantsBean();
        bean.setTbvId(tbvId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tb_applicants_fk_1 index.
     *
     * @param tbvId the tbv_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytb_applicants_fk_1(Integer tbvId) throws DAOException
    {
        TbApplicantsBean bean = this.createTbApplicantsBean();
        bean.setTbvId(tbvId);
        return deleteUsingTemplate(bean);
    }
    


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table tb_applicants.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table tb_applicants with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM tb_applicants " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table tb_applicants with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific TbApplicantsBean bean
     *
     * @param bean the TbApplicantsBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(TbApplicantsBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific TbApplicantsBean bean , given the start row and number of rows.
     *
     * @param bean the TbApplicantsBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbApplicantsBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific TbApplicantsBean bean given the start row and number of rows and the search type
     *
     * @param bean the TbApplicantsBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbApplicantsBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM tb_applicants");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, TbApplicantsBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbvIdModified()) {
                _dirtyCount ++;
                if (bean.getTbvId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbv_id = ?");
                }
            }
            if (bean.isTbaStatusModified()) {
                _dirtyCount ++;
                if (bean.getTbaStatus() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_status IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_status = ?");
                }
            }
            if (bean.isTbaResumeFileNameExistingModified()) {
                _dirtyCount ++;
                if (bean.getTbaResumeFileNameExisting() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_resume_file_name_existing IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_resume_file_name_existing ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaResumeFileNameModified()) {
                _dirtyCount ++;
                if (bean.getTbaResumeFileName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_resume_file_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_resume_file_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaDateModified()) {
                _dirtyCount ++;
                if (bean.getTbaDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_date = ?");
                }
            }
            if (bean.isTbaCommentsModified()) {
                _dirtyCount ++;
                if (bean.getTbaComments() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_comments IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_comments ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaMobileModified()) {
                _dirtyCount ++;
                if (bean.getTbaMobile() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_mobile IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_mobile ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaPhoneModified()) {
                _dirtyCount ++;
                if (bean.getTbaPhone() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_phone IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_phone ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaEmailModified()) {
                _dirtyCount ++;
                if (bean.getTbaEmail() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_email IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_email ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaNameModified()) {
                _dirtyCount ++;
                if (bean.getTbaName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaNickNameModified()) {
                _dirtyCount ++;
                if (bean.getTbaNickName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_nick_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_nick_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaLastNameModified()) {
                _dirtyCount ++;
                if (bean.getTbaLastName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_last_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_last_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaMiddleNameModified()) {
                _dirtyCount ++;
                if (bean.getTbaMiddleName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_middle_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_middle_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaFirstNameModified()) {
                _dirtyCount ++;
                if (bean.getTbaFirstName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_first_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_first_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaApplicantsIdModified()) {
                _dirtyCount ++;
                if (bean.getTbaApplicantsId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_applicants_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_applicants_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbaIdModified()) {
                _dirtyCount ++;
                if (bean.getTbaId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tba_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, TbApplicantsBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbvIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbvId() + "]");
                if (bean.getTbvId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbvId()); }
            }
            if (bean.isTbaStatusModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaStatus() + "]");
                if (bean.getTbaStatus() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbaStatus()); }
            }
            if (bean.isTbaResumeFileNameExistingModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaResumeFileNameExisting() + "]");
                        if (bean.getTbaResumeFileNameExisting() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaResumeFileNameExisting()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaResumeFileNameExisting() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaResumeFileNameExisting() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaResumeFileNameExisting() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaResumeFileNameExisting());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaResumeFileNameExisting() + "]");
                        if (bean.getTbaResumeFileNameExisting() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaResumeFileNameExisting() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaResumeFileNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaResumeFileName() + "]");
                        if (bean.getTbaResumeFileName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaResumeFileName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaResumeFileName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaResumeFileName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaResumeFileName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaResumeFileName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaResumeFileName() + "]");
                        if (bean.getTbaResumeFileName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaResumeFileName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaDateModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaDate() + "]");
                if (bean.getTbaDate() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbaDate()); }
            }
            if (bean.isTbaCommentsModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaComments() + "]");
                        if (bean.getTbaComments() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaComments()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaComments() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaComments() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaComments());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaComments() + "]");
                        if (bean.getTbaComments() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaComments() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaMobileModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaMobile() + "]");
                        if (bean.getTbaMobile() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaMobile()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaMobile() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaMobile() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaMobile() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaMobile());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaMobile() + "]");
                        if (bean.getTbaMobile() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaMobile() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaPhoneModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaPhone() + "]");
                        if (bean.getTbaPhone() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaPhone()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaPhone() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaPhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaPhone());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaPhone() + "]");
                        if (bean.getTbaPhone() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaPhone() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaEmailModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaEmail() + "]");
                        if (bean.getTbaEmail() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaEmail()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaEmail() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaEmail() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaEmail() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaEmail());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaEmail() + "]");
                        if (bean.getTbaEmail() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaEmail() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaName() + "]");
                        if (bean.getTbaName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaName() + "]");
                        if (bean.getTbaName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaNickNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaNickName() + "]");
                        if (bean.getTbaNickName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaNickName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaNickName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaNickName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaNickName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaNickName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaNickName() + "]");
                        if (bean.getTbaNickName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaNickName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaLastNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaLastName() + "]");
                        if (bean.getTbaLastName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaLastName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaLastName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaLastName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaLastName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaLastName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaLastName() + "]");
                        if (bean.getTbaLastName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaLastName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaMiddleNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaMiddleName() + "]");
                        if (bean.getTbaMiddleName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaMiddleName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaMiddleName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaMiddleName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaMiddleName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaMiddleName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaMiddleName() + "]");
                        if (bean.getTbaMiddleName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaMiddleName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaFirstNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaFirstName() + "]");
                        if (bean.getTbaFirstName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaFirstName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaFirstName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaFirstName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaFirstName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaFirstName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaFirstName() + "]");
                        if (bean.getTbaFirstName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaFirstName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaApplicantsIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaApplicantsId() + "]");
                        if (bean.getTbaApplicantsId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaApplicantsId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaApplicantsId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaApplicantsId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaApplicantsId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbaApplicantsId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbaApplicantsId() + "]");
                        if (bean.getTbaApplicantsId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbaApplicantsId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbaIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbaId() + "]");
                if (bean.getTbaId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbaId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of TbApplicantsBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting TbApplicantsBean table
     * @throws DAOException
     */
    //28
    public TbApplicantsBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (TbApplicantsBean[])v.toArray(new TbApplicantsBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the tb_applicants on a TbApplicantsBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbApplicantsBean bean
     * @throws DAOException
     */
    //29
    public TbApplicantsBean decodeRow(ResultSet rs) throws DAOException
    {
        TbApplicantsBean bean = this.createTbApplicantsBean();
        try
        {
            bean.setTbvId(Manager.getInteger(rs, 1));
            bean.setTbaStatus(Manager.getInteger(rs, 2));
            bean.setTbaResumeFileNameExisting(rs.getString(3));
            bean.setTbaResumeFileName(rs.getString(4));
            bean.setTbaDate(rs.getTimestamp(5));
            bean.setTbaComments(rs.getString(6));
            bean.setTbaMobile(rs.getString(7));
            bean.setTbaPhone(rs.getString(8));
            bean.setTbaEmail(rs.getString(9));
            bean.setTbaName(rs.getString(10));
            bean.setTbaNickName(rs.getString(11));
            bean.setTbaLastName(rs.getString(12));
            bean.setTbaMiddleName(rs.getString(13));
            bean.setTbaFirstName(rs.getString(14));
            bean.setTbaApplicantsId(rs.getString(15));
            bean.setTbaId(Manager.getInteger(rs, 16));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public TbApplicantsBean toBean(TbApplicantsBeanModel beanModel, TbApplicantsBean bean)
    {
		if (beanModel.getTbvId() != null)
			bean.setTbvId(beanModel.getTbvId());

		if (bean.getTbvId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbvId().getClass().getName()))
			bean.setTbvId(beanModel.getTbvId());
		
		if (beanModel.getTbaStatus() != null)
			bean.setTbaStatus(beanModel.getTbaStatus());

		if (bean.getTbaStatus() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaStatus().getClass().getName()))
			bean.setTbaStatus(beanModel.getTbaStatus());
		
		if (beanModel.getTbaResumeFileNameExisting() != null)
			bean.setTbaResumeFileNameExisting(beanModel.getTbaResumeFileNameExisting());

		if (bean.getTbaResumeFileNameExisting() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaResumeFileNameExisting().getClass().getName()))
			bean.setTbaResumeFileNameExisting(beanModel.getTbaResumeFileNameExisting());
		
		if (beanModel.getTbaResumeFileName() != null)
			bean.setTbaResumeFileName(beanModel.getTbaResumeFileName());

		if (bean.getTbaResumeFileName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaResumeFileName().getClass().getName()))
			bean.setTbaResumeFileName(beanModel.getTbaResumeFileName());
		
		if (beanModel.getTbaDate() != null)
			bean.setTbaDate(beanModel.getTbaDate());

		if (bean.getTbaDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaDate().getClass().getName()))
			bean.setTbaDate(beanModel.getTbaDate());
		
		if (beanModel.getTbaComments() != null)
			bean.setTbaComments(beanModel.getTbaComments());

		if (bean.getTbaComments() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaComments().getClass().getName()))
			bean.setTbaComments(beanModel.getTbaComments());
		
		if (beanModel.getTbaMobile() != null)
			bean.setTbaMobile(beanModel.getTbaMobile());

		if (bean.getTbaMobile() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaMobile().getClass().getName()))
			bean.setTbaMobile(beanModel.getTbaMobile());
		
		if (beanModel.getTbaPhone() != null)
			bean.setTbaPhone(beanModel.getTbaPhone());

		if (bean.getTbaPhone() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaPhone().getClass().getName()))
			bean.setTbaPhone(beanModel.getTbaPhone());
		
		if (beanModel.getTbaEmail() != null)
			bean.setTbaEmail(beanModel.getTbaEmail());

		if (bean.getTbaEmail() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaEmail().getClass().getName()))
			bean.setTbaEmail(beanModel.getTbaEmail());
		
		if (beanModel.getTbaName() != null)
			bean.setTbaName(beanModel.getTbaName());

		if (bean.getTbaName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaName().getClass().getName()))
			bean.setTbaName(beanModel.getTbaName());
		
		if (beanModel.getTbaNickName() != null)
			bean.setTbaNickName(beanModel.getTbaNickName());

		if (bean.getTbaNickName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaNickName().getClass().getName()))
			bean.setTbaNickName(beanModel.getTbaNickName());
		
		if (beanModel.getTbaLastName() != null)
			bean.setTbaLastName(beanModel.getTbaLastName());

		if (bean.getTbaLastName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaLastName().getClass().getName()))
			bean.setTbaLastName(beanModel.getTbaLastName());
		
		if (beanModel.getTbaMiddleName() != null)
			bean.setTbaMiddleName(beanModel.getTbaMiddleName());

		if (bean.getTbaMiddleName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaMiddleName().getClass().getName()))
			bean.setTbaMiddleName(beanModel.getTbaMiddleName());
		
		if (beanModel.getTbaFirstName() != null)
			bean.setTbaFirstName(beanModel.getTbaFirstName());

		if (bean.getTbaFirstName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaFirstName().getClass().getName()))
			bean.setTbaFirstName(beanModel.getTbaFirstName());
		
		if (beanModel.getTbaApplicantsId() != null)
			bean.setTbaApplicantsId(beanModel.getTbaApplicantsId());

		if (bean.getTbaApplicantsId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaApplicantsId().getClass().getName()))
			bean.setTbaApplicantsId(beanModel.getTbaApplicantsId());
		
		if (beanModel.getTbaId() != null)
			bean.setTbaId(beanModel.getTbaId());

		if (bean.getTbaId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbaId().getClass().getName()))
			bean.setTbaId(beanModel.getTbaId());
		
        return bean;
    }
	
    //29AA
    public TbApplicantsBean[] toBeans(TbApplicantsBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	TbApplicantsBean beans[] = new TbApplicantsBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public TbApplicantsBeanModel toBeanModel(TbApplicantsBean bean)
    {
    	TbApplicantsBeanModel beanModel = new TbApplicantsBeanModel();
		beanModel.setTbvId(bean.getTbvId());
		beanModel.setTbaStatus(bean.getTbaStatus());
		beanModel.setTbaResumeFileNameExisting(bean.getTbaResumeFileNameExisting());
		beanModel.setTbaResumeFileName(bean.getTbaResumeFileName());
		beanModel.setTbaDate(bean.getTbaDate());
		beanModel.setTbaComments(bean.getTbaComments());
		beanModel.setTbaMobile(bean.getTbaMobile());
		beanModel.setTbaPhone(bean.getTbaPhone());
		beanModel.setTbaEmail(bean.getTbaEmail());
		beanModel.setTbaName(bean.getTbaName());
		beanModel.setTbaNickName(bean.getTbaNickName());
		beanModel.setTbaLastName(bean.getTbaLastName());
		beanModel.setTbaMiddleName(bean.getTbaMiddleName());
		beanModel.setTbaFirstName(bean.getTbaFirstName());
		beanModel.setTbaApplicantsId(bean.getTbaApplicantsId());
		beanModel.setTbaId(bean.getTbaId());
		return beanModel;
    }
    
    //29CC
    public TbApplicantsBeanModel[] toBeanModels(TbApplicantsBean beans[])
    {
    	int beansCount = beans.length;
    	TbApplicantsBeanModel beanModels[] = new TbApplicantsBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the tb_applicants table on a TbApplicantsBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting TbApplicantsBean bean
     * @throws DAOException
     */
    //30
    public TbApplicantsBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        TbApplicantsBean bean = this.createTbApplicantsBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBV_ID:
                        ++pos;
                        bean.setTbvId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBA_STATUS:
                        ++pos;
                        bean.setTbaStatus(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBA_RESUME_FILE_NAME_EXISTING:
                        ++pos;
                        bean.setTbaResumeFileNameExisting(rs.getString(pos));
                        break;
                    case ID_TBA_RESUME_FILE_NAME:
                        ++pos;
                        bean.setTbaResumeFileName(rs.getString(pos));
                        break;
                    case ID_TBA_DATE:
                        ++pos;
                        bean.setTbaDate(rs.getTimestamp(pos));
                        break;
                    case ID_TBA_COMMENTS:
                        ++pos;
                        bean.setTbaComments(rs.getString(pos));
                        break;
                    case ID_TBA_MOBILE:
                        ++pos;
                        bean.setTbaMobile(rs.getString(pos));
                        break;
                    case ID_TBA_PHONE:
                        ++pos;
                        bean.setTbaPhone(rs.getString(pos));
                        break;
                    case ID_TBA_EMAIL:
                        ++pos;
                        bean.setTbaEmail(rs.getString(pos));
                        break;
                    case ID_TBA_NAME:
                        ++pos;
                        bean.setTbaName(rs.getString(pos));
                        break;
                    case ID_TBA_NICK_NAME:
                        ++pos;
                        bean.setTbaNickName(rs.getString(pos));
                        break;
                    case ID_TBA_LAST_NAME:
                        ++pos;
                        bean.setTbaLastName(rs.getString(pos));
                        break;
                    case ID_TBA_MIDDLE_NAME:
                        ++pos;
                        bean.setTbaMiddleName(rs.getString(pos));
                        break;
                    case ID_TBA_FIRST_NAME:
                        ++pos;
                        bean.setTbaFirstName(rs.getString(pos));
                        break;
                    case ID_TBA_APPLICANTS_ID:
                        ++pos;
                        bean.setTbaApplicantsId(rs.getString(pos));
                        break;
                    case ID_TBA_ID:
                        ++pos;
                        bean.setTbaId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the tb_applicants on a TbApplicantsBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbApplicantsBean bean
     * @throws DAOException
     */
    //31
    public TbApplicantsBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        TbApplicantsBean bean = this.createTbApplicantsBean();
        try
        {
            bean.setTbvId(Manager.getInteger(rs, "tbv_id"));
            bean.setTbaStatus(Manager.getInteger(rs, "tba_status"));
            bean.setTbaResumeFileNameExisting(rs.getString("tba_resume_file_name_existing"));
            bean.setTbaResumeFileName(rs.getString("tba_resume_file_name"));
            bean.setTbaDate(rs.getTimestamp("tba_date"));
            bean.setTbaComments(rs.getString("tba_comments"));
            bean.setTbaMobile(rs.getString("tba_mobile"));
            bean.setTbaPhone(rs.getString("tba_phone"));
            bean.setTbaEmail(rs.getString("tba_email"));
            bean.setTbaName(rs.getString("tba_name"));
            bean.setTbaNickName(rs.getString("tba_nick_name"));
            bean.setTbaLastName(rs.getString("tba_last_name"));
            bean.setTbaMiddleName(rs.getString("tba_middle_name"));
            bean.setTbaFirstName(rs.getString("tba_first_name"));
            bean.setTbaApplicantsId(rs.getString("tba_applicants_id"));
            bean.setTbaId(Manager.getInteger(rs, "tba_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TbApplicantsBean
     * @throws DAOException
     */
    //32
    public TbApplicantsBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TbApplicantsBean
     * @throws DAOException
     */
    //33
    public TbApplicantsBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (TbApplicantsBean[])v.toArray(new TbApplicantsBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of TbApplicantsBean
     * @throws DAOException
     */
    //34
    public TbApplicantsBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private TbApplicantsListener listener = null;

    /**
     * Registers a unique TbApplicantsListener listener.
     */
    //35
    public void registerListener(TbApplicantsListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the TbApplicantsBean bean.
     *
     * @param bean the TbApplicantsBean bean to be saved
     */
    //36
    private void beforeInsert(TbApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the TbApplicantsBean bean.
     *
     * @param bean the TbApplicantsBean bean to be saved
     */
    //37
    private void afterInsert(TbApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the TbApplicantsBean bean.
     *
     * @param bean the TbApplicantsBean bean to be updated
     */
    //38
    private void beforeUpdate(TbApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the TbApplicantsBean bean.
     *
     * @param bean the TbApplicantsBean bean to be updated
     */
    //39
    private void afterUpdate(TbApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the TbApplicantsBean bean.
     *
     * @param bean the TbApplicantsBean bean to be deleted
     */
    private void beforeDelete(TbApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the TbApplicantsBean bean.
     *
     * @param bean the TbApplicantsBean bean to be deleted
     */
    private void afterDelete(TbApplicantsBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
