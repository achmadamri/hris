// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbPaygradeBean is a mapping of tb_paygrade Table.
 * @author sql2java
*/
public class TbPaygradeBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 1548489222970005868L;
	
    private String tbpName;

    private boolean tbpNameIsModified = false;
    private boolean tbpNameIsInitialized = false;

    private String tbpPaygradeId;

    private boolean tbpPaygradeIdIsModified = false;
    private boolean tbpPaygradeIdIsInitialized = false;

    private Integer tbpId;

    private boolean tbpIdIsModified = false;
    private boolean tbpIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbPaygradeBean is via the createTbPaygradeBean method in TbPaygradeManager or
     * via the factory class TbPaygradeFactory create method
     */
    protected TbPaygradeBean()
    {
    }

    /**
     * Getter method for tbpName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_paygrade.tbp_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpName
     */
    public String getTbpName()
    {
        return tbpName;
    }

    /**
     * Setter method for tbpName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpName
     */
    public void setTbpName(String newVal)
    {
        if ((newVal != null && tbpName != null && (newVal.compareTo(tbpName) == 0)) ||
            (newVal == null && tbpName == null && tbpNameIsInitialized)) {
            return;
        }
        tbpName = newVal;
        tbpNameIsModified = true;
        tbpNameIsInitialized = true;
    }

    /**
     * Determines if the tbpName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpNameModified()
    {
        return tbpNameIsModified;
    }

    /**
     * Determines if the tbpName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpNameInitialized()
    {
        return tbpNameIsInitialized;
    }

    /**
     * Getter method for tbpPaygradeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_paygrade.tbp_paygrade_id</li>
     * <li>comments: NAME+ID</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbpPaygradeId
     */
    public String getTbpPaygradeId()
    {
        return tbpPaygradeId;
    }

    /**
     * Setter method for tbpPaygradeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpPaygradeId
     */
    public void setTbpPaygradeId(String newVal)
    {
        if ((newVal != null && tbpPaygradeId != null && (newVal.compareTo(tbpPaygradeId) == 0)) ||
            (newVal == null && tbpPaygradeId == null && tbpPaygradeIdIsInitialized)) {
            return;
        }
        tbpPaygradeId = newVal;
        tbpPaygradeIdIsModified = true;
        tbpPaygradeIdIsInitialized = true;
    }

    /**
     * Determines if the tbpPaygradeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpPaygradeIdModified()
    {
        return tbpPaygradeIdIsModified;
    }

    /**
     * Determines if the tbpPaygradeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpPaygradeIdInitialized()
    {
        return tbpPaygradeIdIsInitialized;
    }

    /**
     * Getter method for tbpId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_paygrade.tbp_id</li>
     * <li> imported key: tb_employee_salary.tbp_id</li>
     * <li> imported key: tb_job_title.tbp_id</li>
     * <li> imported key: tb_paygrade_currency.tbp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpId
     */
    public Integer getTbpId()
    {
        return tbpId;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(Integer newVal)
    {
        if ((newVal != null && tbpId != null && (newVal.compareTo(tbpId) == 0)) ||
            (newVal == null && tbpId == null && tbpIdIsInitialized)) {
            return;
        }
        tbpId = newVal;
        tbpIdIsModified = true;
        tbpIdIsInitialized = true;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(int newVal)
    {
        setTbpId(new Integer(newVal));
    }

    /**
     * Determines if the tbpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpIdModified()
    {
        return tbpIdIsModified;
    }

    /**
     * Determines if the tbpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpIdInitialized()
    {
        return tbpIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbpNameIsModified 		|| tbpPaygradeIdIsModified  		|| tbpIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbpNameIsModified = false;
        tbpPaygradeIdIsModified = false;
        tbpIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbPaygradeBean bean)
    {
        setTbpName(bean.getTbpName());
        setTbpPaygradeId(bean.getTbpPaygradeId());
        setTbpId(bean.getTbpId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbp_name", getTbpName() == null ? "" : getTbpName().toString());
        dictionnary.put("tbp_paygrade_id", getTbpPaygradeId() == null ? "" : getTbpPaygradeId().toString());
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbp_name".equalsIgnoreCase(column) || "tbpName".equalsIgnoreCase(column)) {
            return getTbpName() == null ? "" : getTbpName().toString();
        } else if ("tbp_paygrade_id".equalsIgnoreCase(column) || "tbpPaygradeId".equalsIgnoreCase(column)) {
            return getTbpPaygradeId() == null ? "" : getTbpPaygradeId().toString();
        } else if ("tbp_id".equalsIgnoreCase(column) || "tbpId".equalsIgnoreCase(column)) {
            return getTbpId() == null ? "" : getTbpId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbPaygradeBean)) {
            return false;
        }

		TbPaygradeBean obj = (TbPaygradeBean) object;
		return new EqualsBuilder()
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpPaygradeId(), obj.getTbpPaygradeId())
            .append(getTbpId(), obj.getTbpId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbpName())
            .append(getTbpPaygradeId())
            .append(getTbpId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbp_name", getTbpName())
            .append("tbp_paygrade_id", getTbpPaygradeId())
            .append("tbp_id", getTbpId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbPaygradeBean obj = (TbPaygradeBean) object;
        return new CompareToBuilder()
            .append(getTbpName(), obj.getTbpName())
            .append(getTbpPaygradeId(), obj.getTbpPaygradeId())
            .append(getTbpId(), obj.getTbpId())
            .toComparison();
   }
}
