// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbVacancyBean is a mapping of tb_vacancy Table.
 * @author sql2java
*/
public class TbVacancyBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -4706594956444383291L;
	
    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private Integer tbjtId;

    private boolean tbjtIdIsModified = false;
    private boolean tbjtIdIsInitialized = false;

    private Integer tbvPublishWeb;

    private boolean tbvPublishWebIsModified = false;
    private boolean tbvPublishWebIsInitialized = false;

    private Integer tbvPublishRss;

    private boolean tbvPublishRssIsModified = false;
    private boolean tbvPublishRssIsInitialized = false;

    private Integer tbvActive;

    private boolean tbvActiveIsModified = false;
    private boolean tbvActiveIsInitialized = false;

    private String tbvDescription;

    private boolean tbvDescriptionIsModified = false;
    private boolean tbvDescriptionIsInitialized = false;

    private Integer tbvNoPositions;

    private boolean tbvNoPositionsIsModified = false;
    private boolean tbvNoPositionsIsInitialized = false;

    private String tbvName;

    private boolean tbvNameIsModified = false;
    private boolean tbvNameIsInitialized = false;

    private String tbvVacancyId;

    private boolean tbvVacancyIdIsModified = false;
    private boolean tbvVacancyIdIsInitialized = false;

    private Integer tbvId;

    private boolean tbvIdIsModified = false;
    private boolean tbvIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbVacancyBean is via the createTbVacancyBean method in TbVacancyManager or
     * via the factory class TbVacancyFactory create method
     */
    protected TbVacancyBean()
    {
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_vacancy.tbe_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Getter method for tbjtId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_vacancy.tbjt_id</li>
     * <li> foreign key: tb_job_title.tbjt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtId
     */
    public Integer getTbjtId()
    {
        return tbjtId;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(Integer newVal)
    {
        if ((newVal != null && tbjtId != null && (newVal.compareTo(tbjtId) == 0)) ||
            (newVal == null && tbjtId == null && tbjtIdIsInitialized)) {
            return;
        }
        tbjtId = newVal;
        tbjtIdIsModified = true;
        tbjtIdIsInitialized = true;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(int newVal)
    {
        setTbjtId(new Integer(newVal));
    }

    /**
     * Determines if the tbjtId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtIdModified()
    {
        return tbjtIdIsModified;
    }

    /**
     * Determines if the tbjtId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtIdInitialized()
    {
        return tbjtIdIsInitialized;
    }

    /**
     * Getter method for tbvPublishWeb.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_vacancy.tbv_publish_web</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbvPublishWeb
     */
    public Integer getTbvPublishWeb()
    {
        return tbvPublishWeb;
    }

    /**
     * Setter method for tbvPublishWeb.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvPublishWeb
     */
    public void setTbvPublishWeb(Integer newVal)
    {
        if ((newVal != null && tbvPublishWeb != null && (newVal.compareTo(tbvPublishWeb) == 0)) ||
            (newVal == null && tbvPublishWeb == null && tbvPublishWebIsInitialized)) {
            return;
        }
        tbvPublishWeb = newVal;
        tbvPublishWebIsModified = true;
        tbvPublishWebIsInitialized = true;
    }

    /**
     * Setter method for tbvPublishWeb.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbvPublishWeb
     */
    public void setTbvPublishWeb(int newVal)
    {
        setTbvPublishWeb(new Integer(newVal));
    }

    /**
     * Determines if the tbvPublishWeb has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvPublishWebModified()
    {
        return tbvPublishWebIsModified;
    }

    /**
     * Determines if the tbvPublishWeb has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvPublishWebInitialized()
    {
        return tbvPublishWebIsInitialized;
    }

    /**
     * Getter method for tbvPublishRss.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_vacancy.tbv_publish_rss</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbvPublishRss
     */
    public Integer getTbvPublishRss()
    {
        return tbvPublishRss;
    }

    /**
     * Setter method for tbvPublishRss.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvPublishRss
     */
    public void setTbvPublishRss(Integer newVal)
    {
        if ((newVal != null && tbvPublishRss != null && (newVal.compareTo(tbvPublishRss) == 0)) ||
            (newVal == null && tbvPublishRss == null && tbvPublishRssIsInitialized)) {
            return;
        }
        tbvPublishRss = newVal;
        tbvPublishRssIsModified = true;
        tbvPublishRssIsInitialized = true;
    }

    /**
     * Setter method for tbvPublishRss.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbvPublishRss
     */
    public void setTbvPublishRss(int newVal)
    {
        setTbvPublishRss(new Integer(newVal));
    }

    /**
     * Determines if the tbvPublishRss has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvPublishRssModified()
    {
        return tbvPublishRssIsModified;
    }

    /**
     * Determines if the tbvPublishRss has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvPublishRssInitialized()
    {
        return tbvPublishRssIsInitialized;
    }

    /**
     * Getter method for tbvActive.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_vacancy.tbv_active</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbvActive
     */
    public Integer getTbvActive()
    {
        return tbvActive;
    }

    /**
     * Setter method for tbvActive.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvActive
     */
    public void setTbvActive(Integer newVal)
    {
        if ((newVal != null && tbvActive != null && (newVal.compareTo(tbvActive) == 0)) ||
            (newVal == null && tbvActive == null && tbvActiveIsInitialized)) {
            return;
        }
        tbvActive = newVal;
        tbvActiveIsModified = true;
        tbvActiveIsInitialized = true;
    }

    /**
     * Setter method for tbvActive.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbvActive
     */
    public void setTbvActive(int newVal)
    {
        setTbvActive(new Integer(newVal));
    }

    /**
     * Determines if the tbvActive has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvActiveModified()
    {
        return tbvActiveIsModified;
    }

    /**
     * Determines if the tbvActive has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvActiveInitialized()
    {
        return tbvActiveIsInitialized;
    }

    /**
     * Getter method for tbvDescription.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_vacancy.tbv_description</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbvDescription
     */
    public String getTbvDescription()
    {
        return tbvDescription;
    }

    /**
     * Setter method for tbvDescription.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvDescription
     */
    public void setTbvDescription(String newVal)
    {
        if ((newVal != null && tbvDescription != null && (newVal.compareTo(tbvDescription) == 0)) ||
            (newVal == null && tbvDescription == null && tbvDescriptionIsInitialized)) {
            return;
        }
        tbvDescription = newVal;
        tbvDescriptionIsModified = true;
        tbvDescriptionIsInitialized = true;
    }

    /**
     * Determines if the tbvDescription has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvDescriptionModified()
    {
        return tbvDescriptionIsModified;
    }

    /**
     * Determines if the tbvDescription has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvDescriptionInitialized()
    {
        return tbvDescriptionIsInitialized;
    }

    /**
     * Getter method for tbvNoPositions.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_vacancy.tbv_no_positions</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbvNoPositions
     */
    public Integer getTbvNoPositions()
    {
        return tbvNoPositions;
    }

    /**
     * Setter method for tbvNoPositions.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvNoPositions
     */
    public void setTbvNoPositions(Integer newVal)
    {
        if ((newVal != null && tbvNoPositions != null && (newVal.compareTo(tbvNoPositions) == 0)) ||
            (newVal == null && tbvNoPositions == null && tbvNoPositionsIsInitialized)) {
            return;
        }
        tbvNoPositions = newVal;
        tbvNoPositionsIsModified = true;
        tbvNoPositionsIsInitialized = true;
    }

    /**
     * Setter method for tbvNoPositions.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbvNoPositions
     */
    public void setTbvNoPositions(int newVal)
    {
        setTbvNoPositions(new Integer(newVal));
    }

    /**
     * Determines if the tbvNoPositions has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvNoPositionsModified()
    {
        return tbvNoPositionsIsModified;
    }

    /**
     * Determines if the tbvNoPositions has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvNoPositionsInitialized()
    {
        return tbvNoPositionsIsInitialized;
    }

    /**
     * Getter method for tbvName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_vacancy.tbv_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbvName
     */
    public String getTbvName()
    {
        return tbvName;
    }

    /**
     * Setter method for tbvName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvName
     */
    public void setTbvName(String newVal)
    {
        if ((newVal != null && tbvName != null && (newVal.compareTo(tbvName) == 0)) ||
            (newVal == null && tbvName == null && tbvNameIsInitialized)) {
            return;
        }
        tbvName = newVal;
        tbvNameIsModified = true;
        tbvNameIsInitialized = true;
    }

    /**
     * Determines if the tbvName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvNameModified()
    {
        return tbvNameIsModified;
    }

    /**
     * Determines if the tbvName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvNameInitialized()
    {
        return tbvNameIsInitialized;
    }

    /**
     * Getter method for tbvVacancyId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_vacancy.tbv_vacancy_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbvVacancyId
     */
    public String getTbvVacancyId()
    {
        return tbvVacancyId;
    }

    /**
     * Setter method for tbvVacancyId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvVacancyId
     */
    public void setTbvVacancyId(String newVal)
    {
        if ((newVal != null && tbvVacancyId != null && (newVal.compareTo(tbvVacancyId) == 0)) ||
            (newVal == null && tbvVacancyId == null && tbvVacancyIdIsInitialized)) {
            return;
        }
        tbvVacancyId = newVal;
        tbvVacancyIdIsModified = true;
        tbvVacancyIdIsInitialized = true;
    }

    /**
     * Determines if the tbvVacancyId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvVacancyIdModified()
    {
        return tbvVacancyIdIsModified;
    }

    /**
     * Determines if the tbvVacancyId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvVacancyIdInitialized()
    {
        return tbvVacancyIdIsInitialized;
    }

    /**
     * Getter method for tbvId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_vacancy.tbv_id</li>
     * <li> imported key: tb_applicants.tbv_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbvId
     */
    public Integer getTbvId()
    {
        return tbvId;
    }

    /**
     * Setter method for tbvId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbvId
     */
    public void setTbvId(Integer newVal)
    {
        if ((newVal != null && tbvId != null && (newVal.compareTo(tbvId) == 0)) ||
            (newVal == null && tbvId == null && tbvIdIsInitialized)) {
            return;
        }
        tbvId = newVal;
        tbvIdIsModified = true;
        tbvIdIsInitialized = true;
    }

    /**
     * Setter method for tbvId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbvId
     */
    public void setTbvId(int newVal)
    {
        setTbvId(new Integer(newVal));
    }

    /**
     * Determines if the tbvId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbvIdModified()
    {
        return tbvIdIsModified;
    }

    /**
     * Determines if the tbvId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbvIdInitialized()
    {
        return tbvIdIsInitialized;
    }

    /** The TbJobTitle referenced by this bean. */
    private TbJobTitleBean referencedTbJobTitle;
    /** Getter method for TbJobTitleBean. */
    public TbJobTitleBean getTbJobTitleBean() {
        return this.referencedTbJobTitle;
    }
    /** Setter method for TbJobTitleBean. */
    public void setTbJobTitleBean(TbJobTitleBean reference) {
        this.referencedTbJobTitle = reference;
    }
    
    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbeIdIsModified 		|| tbjtIdIsModified  		|| tbvPublishWebIsModified  		|| tbvPublishRssIsModified  		|| tbvActiveIsModified  		|| tbvDescriptionIsModified  		|| tbvNoPositionsIsModified  		|| tbvNameIsModified  		|| tbvVacancyIdIsModified  		|| tbvIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbeIdIsModified = false;
        tbjtIdIsModified = false;
        tbvPublishWebIsModified = false;
        tbvPublishRssIsModified = false;
        tbvActiveIsModified = false;
        tbvDescriptionIsModified = false;
        tbvNoPositionsIsModified = false;
        tbvNameIsModified = false;
        tbvVacancyIdIsModified = false;
        tbvIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbVacancyBean bean)
    {
        setTbeId(bean.getTbeId());
        setTbjtId(bean.getTbjtId());
        setTbvPublishWeb(bean.getTbvPublishWeb());
        setTbvPublishRss(bean.getTbvPublishRss());
        setTbvActive(bean.getTbvActive());
        setTbvDescription(bean.getTbvDescription());
        setTbvNoPositions(bean.getTbvNoPositions());
        setTbvName(bean.getTbvName());
        setTbvVacancyId(bean.getTbvVacancyId());
        setTbvId(bean.getTbvId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        dictionnary.put("tbjt_id", getTbjtId() == null ? "" : getTbjtId().toString());
        dictionnary.put("tbv_publish_web", getTbvPublishWeb() == null ? "" : getTbvPublishWeb().toString());
        dictionnary.put("tbv_publish_rss", getTbvPublishRss() == null ? "" : getTbvPublishRss().toString());
        dictionnary.put("tbv_active", getTbvActive() == null ? "" : getTbvActive().toString());
        dictionnary.put("tbv_description", getTbvDescription() == null ? "" : getTbvDescription().toString());
        dictionnary.put("tbv_no_positions", getTbvNoPositions() == null ? "" : getTbvNoPositions().toString());
        dictionnary.put("tbv_name", getTbvName() == null ? "" : getTbvName().toString());
        dictionnary.put("tbv_vacancy_id", getTbvVacancyId() == null ? "" : getTbvVacancyId().toString());
        dictionnary.put("tbv_id", getTbvId() == null ? "" : getTbvId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbv_id", getTbvId() == null ? "" : getTbvId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        } else if ("tbjt_id".equalsIgnoreCase(column) || "tbjtId".equalsIgnoreCase(column)) {
            return getTbjtId() == null ? "" : getTbjtId().toString();
        } else if ("tbv_publish_web".equalsIgnoreCase(column) || "tbvPublishWeb".equalsIgnoreCase(column)) {
            return getTbvPublishWeb() == null ? "" : getTbvPublishWeb().toString();
        } else if ("tbv_publish_rss".equalsIgnoreCase(column) || "tbvPublishRss".equalsIgnoreCase(column)) {
            return getTbvPublishRss() == null ? "" : getTbvPublishRss().toString();
        } else if ("tbv_active".equalsIgnoreCase(column) || "tbvActive".equalsIgnoreCase(column)) {
            return getTbvActive() == null ? "" : getTbvActive().toString();
        } else if ("tbv_description".equalsIgnoreCase(column) || "tbvDescription".equalsIgnoreCase(column)) {
            return getTbvDescription() == null ? "" : getTbvDescription().toString();
        } else if ("tbv_no_positions".equalsIgnoreCase(column) || "tbvNoPositions".equalsIgnoreCase(column)) {
            return getTbvNoPositions() == null ? "" : getTbvNoPositions().toString();
        } else if ("tbv_name".equalsIgnoreCase(column) || "tbvName".equalsIgnoreCase(column)) {
            return getTbvName() == null ? "" : getTbvName().toString();
        } else if ("tbv_vacancy_id".equalsIgnoreCase(column) || "tbvVacancyId".equalsIgnoreCase(column)) {
            return getTbvVacancyId() == null ? "" : getTbvVacancyId().toString();
        } else if ("tbv_id".equalsIgnoreCase(column) || "tbvId".equalsIgnoreCase(column)) {
            return getTbvId() == null ? "" : getTbvId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbVacancyBean)) {
            return false;
        }

		TbVacancyBean obj = (TbVacancyBean) object;
		return new EqualsBuilder()
            .append(getTbeId(), obj.getTbeId())
            .append(getTbjtId(), obj.getTbjtId())
            .append(getTbvPublishWeb(), obj.getTbvPublishWeb())
            .append(getTbvPublishRss(), obj.getTbvPublishRss())
            .append(getTbvActive(), obj.getTbvActive())
            .append(getTbvDescription(), obj.getTbvDescription())
            .append(getTbvNoPositions(), obj.getTbvNoPositions())
            .append(getTbvName(), obj.getTbvName())
            .append(getTbvVacancyId(), obj.getTbvVacancyId())
            .append(getTbvId(), obj.getTbvId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbeId())
            .append(getTbjtId())
            .append(getTbvPublishWeb())
            .append(getTbvPublishRss())
            .append(getTbvActive())
            .append(getTbvDescription())
            .append(getTbvNoPositions())
            .append(getTbvName())
            .append(getTbvVacancyId())
            .append(getTbvId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbe_id", getTbeId())
            .append("tbjt_id", getTbjtId())
            .append("tbv_publish_web", getTbvPublishWeb())
            .append("tbv_publish_rss", getTbvPublishRss())
            .append("tbv_active", getTbvActive())
            .append("tbv_description", getTbvDescription())
            .append("tbv_no_positions", getTbvNoPositions())
            .append("tbv_name", getTbvName())
            .append("tbv_vacancy_id", getTbvVacancyId())
            .append("tbv_id", getTbvId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbVacancyBean obj = (TbVacancyBean) object;
        return new CompareToBuilder()
            .append(getTbeId(), obj.getTbeId())
            .append(getTbjtId(), obj.getTbjtId())
            .append(getTbvPublishWeb(), obj.getTbvPublishWeb())
            .append(getTbvPublishRss(), obj.getTbvPublishRss())
            .append(getTbvActive(), obj.getTbvActive())
            .append(getTbvDescription(), obj.getTbvDescription())
            .append(getTbvNoPositions(), obj.getTbvNoPositions())
            .append(getTbvName(), obj.getTbvName())
            .append(getTbvVacancyId(), obj.getTbvVacancyId())
            .append(getTbvId(), obj.getTbvId())
            .toComparison();
   }
}
