// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbAssignedSkillsBean is a mapping of tb_assigned_skills Table.
 * @author sql2java
*/
public class TbAssignedSkillsBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = -6560103239556721976L;
	
    private String tbasComments;

    private boolean tbasCommentsIsModified = false;
    private boolean tbasCommentsIsInitialized = false;

    private Integer tbasYear;

    private boolean tbasYearIsModified = false;
    private boolean tbasYearIsInitialized = false;

    private Integer tbsId;

    private boolean tbsIdIsModified = false;
    private boolean tbsIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private Integer tbasId;

    private boolean tbasIdIsModified = false;
    private boolean tbasIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbAssignedSkillsBean is via the createTbAssignedSkillsBean method in TbAssignedSkillsManager or
     * via the factory class TbAssignedSkillsFactory create method
     */
    protected TbAssignedSkillsBean()
    {
    }

    /**
     * Getter method for tbasComments.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_skills.tbas_comments</li>
     * <li>column size: 500</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbasComments
     */
    public String getTbasComments()
    {
        return tbasComments;
    }

    /**
     * Setter method for tbasComments.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbasComments
     */
    public void setTbasComments(String newVal)
    {
        if ((newVal != null && tbasComments != null && (newVal.compareTo(tbasComments) == 0)) ||
            (newVal == null && tbasComments == null && tbasCommentsIsInitialized)) {
            return;
        }
        tbasComments = newVal;
        tbasCommentsIsModified = true;
        tbasCommentsIsInitialized = true;
    }

    /**
     * Determines if the tbasComments has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbasCommentsModified()
    {
        return tbasCommentsIsModified;
    }

    /**
     * Determines if the tbasComments has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbasCommentsInitialized()
    {
        return tbasCommentsIsInitialized;
    }

    /**
     * Getter method for tbasYear.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_skills.tbas_year</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbasYear
     */
    public Integer getTbasYear()
    {
        return tbasYear;
    }

    /**
     * Setter method for tbasYear.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbasYear
     */
    public void setTbasYear(Integer newVal)
    {
        if ((newVal != null && tbasYear != null && (newVal.compareTo(tbasYear) == 0)) ||
            (newVal == null && tbasYear == null && tbasYearIsInitialized)) {
            return;
        }
        tbasYear = newVal;
        tbasYearIsModified = true;
        tbasYearIsInitialized = true;
    }

    /**
     * Setter method for tbasYear.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbasYear
     */
    public void setTbasYear(int newVal)
    {
        setTbasYear(new Integer(newVal));
    }

    /**
     * Determines if the tbasYear has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbasYearModified()
    {
        return tbasYearIsModified;
    }

    /**
     * Determines if the tbasYear has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbasYearInitialized()
    {
        return tbasYearIsInitialized;
    }

    /**
     * Getter method for tbsId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_skills.tbs_id</li>
     * <li> foreign key: tb_skills.tbs_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbsId
     */
    public Integer getTbsId()
    {
        return tbsId;
    }

    /**
     * Setter method for tbsId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbsId
     */
    public void setTbsId(Integer newVal)
    {
        if ((newVal != null && tbsId != null && (newVal.compareTo(tbsId) == 0)) ||
            (newVal == null && tbsId == null && tbsIdIsInitialized)) {
            return;
        }
        tbsId = newVal;
        tbsIdIsModified = true;
        tbsIdIsInitialized = true;
    }

    /**
     * Setter method for tbsId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbsId
     */
    public void setTbsId(int newVal)
    {
        setTbsId(new Integer(newVal));
    }

    /**
     * Determines if the tbsId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbsIdModified()
    {
        return tbsIdIsModified;
    }

    /**
     * Determines if the tbsId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbsIdInitialized()
    {
        return tbsIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_skills.tbe_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Getter method for tbasId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_assigned_skills.tbas_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbasId
     */
    public Integer getTbasId()
    {
        return tbasId;
    }

    /**
     * Setter method for tbasId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbasId
     */
    public void setTbasId(Integer newVal)
    {
        if ((newVal != null && tbasId != null && (newVal.compareTo(tbasId) == 0)) ||
            (newVal == null && tbasId == null && tbasIdIsInitialized)) {
            return;
        }
        tbasId = newVal;
        tbasIdIsModified = true;
        tbasIdIsInitialized = true;
    }

    /**
     * Setter method for tbasId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbasId
     */
    public void setTbasId(int newVal)
    {
        setTbasId(new Integer(newVal));
    }

    /**
     * Determines if the tbasId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbasIdModified()
    {
        return tbasIdIsModified;
    }

    /**
     * Determines if the tbasId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbasIdInitialized()
    {
        return tbasIdIsInitialized;
    }

    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /** The TbSkills referenced by this bean. */
    private TbSkillsBean referencedTbSkills;
    /** Getter method for TbSkillsBean. */
    public TbSkillsBean getTbSkillsBean() {
        return this.referencedTbSkills;
    }
    /** Setter method for TbSkillsBean. */
    public void setTbSkillsBean(TbSkillsBean reference) {
        this.referencedTbSkills = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbasCommentsIsModified 		|| tbasYearIsModified  		|| tbsIdIsModified  		|| tbeIdIsModified  		|| tbasIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbasCommentsIsModified = false;
        tbasYearIsModified = false;
        tbsIdIsModified = false;
        tbeIdIsModified = false;
        tbasIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbAssignedSkillsBean bean)
    {
        setTbasComments(bean.getTbasComments());
        setTbasYear(bean.getTbasYear());
        setTbsId(bean.getTbsId());
        setTbeId(bean.getTbeId());
        setTbasId(bean.getTbasId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbas_comments", getTbasComments() == null ? "" : getTbasComments().toString());
        dictionnary.put("tbas_year", getTbasYear() == null ? "" : getTbasYear().toString());
        dictionnary.put("tbs_id", getTbsId() == null ? "" : getTbsId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        dictionnary.put("tbas_id", getTbasId() == null ? "" : getTbasId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbas_id", getTbasId() == null ? "" : getTbasId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbas_comments".equalsIgnoreCase(column) || "tbasComments".equalsIgnoreCase(column)) {
            return getTbasComments() == null ? "" : getTbasComments().toString();
        } else if ("tbas_year".equalsIgnoreCase(column) || "tbasYear".equalsIgnoreCase(column)) {
            return getTbasYear() == null ? "" : getTbasYear().toString();
        } else if ("tbs_id".equalsIgnoreCase(column) || "tbsId".equalsIgnoreCase(column)) {
            return getTbsId() == null ? "" : getTbsId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        } else if ("tbas_id".equalsIgnoreCase(column) || "tbasId".equalsIgnoreCase(column)) {
            return getTbasId() == null ? "" : getTbasId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbAssignedSkillsBean)) {
            return false;
        }

		TbAssignedSkillsBean obj = (TbAssignedSkillsBean) object;
		return new EqualsBuilder()
            .append(getTbasComments(), obj.getTbasComments())
            .append(getTbasYear(), obj.getTbasYear())
            .append(getTbsId(), obj.getTbsId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbasId(), obj.getTbasId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbasComments())
            .append(getTbasYear())
            .append(getTbsId())
            .append(getTbeId())
            .append(getTbasId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbas_comments", getTbasComments())
            .append("tbas_year", getTbasYear())
            .append("tbs_id", getTbsId())
            .append("tbe_id", getTbeId())
            .append("tbas_id", getTbasId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbAssignedSkillsBean obj = (TbAssignedSkillsBean) object;
        return new CompareToBuilder()
            .append(getTbasComments(), obj.getTbasComments())
            .append(getTbasYear(), obj.getTbasYear())
            .append(getTbsId(), obj.getTbsId())
            .append(getTbeId(), obj.getTbeId())
            .append(getTbasId(), obj.getTbasId())
            .toComparison();
   }
}
