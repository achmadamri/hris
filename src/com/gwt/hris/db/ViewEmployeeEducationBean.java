// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewEmployeeEducationBean is a mapping of view_employee_education Table.
 * @author sql2java
*/
public class ViewEmployeeEducationBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 4676031308382233152L;
	
    private Double tbaeGpa;

    private boolean tbaeGpaIsModified = false;
    private boolean tbaeGpaIsInitialized = false;

    private java.sql.Timestamp tbaeEndDate;

    private boolean tbaeEndDateIsModified = false;
    private boolean tbaeEndDateIsInitialized = false;

    private java.sql.Timestamp tbaeStartDate;

    private boolean tbaeStartDateIsModified = false;
    private boolean tbaeStartDateIsInitialized = false;

    private String tbaeMajor;

    private boolean tbaeMajorIsModified = false;
    private boolean tbaeMajorIsInitialized = false;

    private Integer tbeduId;

    private boolean tbeduIdIsModified = false;
    private boolean tbeduIdIsInitialized = false;

    private Integer tbaeId;

    private boolean tbaeIdIsModified = false;
    private boolean tbaeIdIsInitialized = false;

    private String tbeInstitute;

    private boolean tbeInstituteIsModified = false;
    private boolean tbeInstituteIsInitialized = false;

    private String tbeEducationId;

    private boolean tbeEducationIdIsModified = false;
    private boolean tbeEducationIdIsInitialized = false;

    private String tbeName;

    private boolean tbeNameIsModified = false;
    private boolean tbeNameIsInitialized = false;

    private String tbeNickName;

    private boolean tbeNickNameIsModified = false;
    private boolean tbeNickNameIsInitialized = false;

    private String tbeLastName;

    private boolean tbeLastNameIsModified = false;
    private boolean tbeLastNameIsInitialized = false;

    private String tbeMiddleName;

    private boolean tbeMiddleNameIsModified = false;
    private boolean tbeMiddleNameIsInitialized = false;

    private String tbeFirstName;

    private boolean tbeFirstNameIsModified = false;
    private boolean tbeFirstNameIsInitialized = false;

    private String tbeEmployeeId;

    private boolean tbeEmployeeIdIsModified = false;
    private boolean tbeEmployeeIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewEmployeeEducationBean is via the createViewEmployeeEducationBean method in ViewEmployeeEducationManager or
     * via the factory class ViewEmployeeEducationFactory create method
     */
    protected ViewEmployeeEducationBean()
    {
    }

    /**
     * Getter method for tbaeGpa.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbae_gpa</li>
     * <li>column size: 22</li>
     * <li>jdbc type returned by the driver: Types.DOUBLE</li>
     * </ul>
     *
     * @return the value of tbaeGpa
     */
    public Double getTbaeGpa()
    {
        return tbaeGpa;
    }

    /**
     * Setter method for tbaeGpa.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaeGpa
     */
    public void setTbaeGpa(Double newVal)
    {
        if ((newVal != null && tbaeGpa != null && (newVal.compareTo(tbaeGpa) == 0)) ||
            (newVal == null && tbaeGpa == null && tbaeGpaIsInitialized)) {
            return;
        }
        tbaeGpa = newVal;
        tbaeGpaIsModified = true;
        tbaeGpaIsInitialized = true;
    }

    /**
     * Setter method for tbaeGpa.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaeGpa
     */
    public void setTbaeGpa(double newVal)
    {
        setTbaeGpa(new Double(newVal));
    }

    /**
     * Determines if the tbaeGpa has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaeGpaModified()
    {
        return tbaeGpaIsModified;
    }

    /**
     * Determines if the tbaeGpa has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaeGpaInitialized()
    {
        return tbaeGpaIsInitialized;
    }

    /**
     * Getter method for tbaeEndDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbae_end_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaeEndDate
     */
    public java.sql.Timestamp getTbaeEndDate()
    {
        return tbaeEndDate;
    }

    /**
     * Setter method for tbaeEndDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaeEndDate
     */
    public void setTbaeEndDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaeEndDate != null && (newVal.compareTo(tbaeEndDate) == 0)) ||
            (newVal == null && tbaeEndDate == null && tbaeEndDateIsInitialized)) {
            return;
        }
        tbaeEndDate = newVal;
        tbaeEndDateIsModified = true;
        tbaeEndDateIsInitialized = true;
    }

    /**
     * Setter method for tbaeEndDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaeEndDate
     */
    public void setTbaeEndDate(long newVal)
    {
        setTbaeEndDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaeEndDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaeEndDateModified()
    {
        return tbaeEndDateIsModified;
    }

    /**
     * Determines if the tbaeEndDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaeEndDateInitialized()
    {
        return tbaeEndDateIsInitialized;
    }

    /**
     * Getter method for tbaeStartDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbae_start_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbaeStartDate
     */
    public java.sql.Timestamp getTbaeStartDate()
    {
        return tbaeStartDate;
    }

    /**
     * Setter method for tbaeStartDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaeStartDate
     */
    public void setTbaeStartDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbaeStartDate != null && (newVal.compareTo(tbaeStartDate) == 0)) ||
            (newVal == null && tbaeStartDate == null && tbaeStartDateIsInitialized)) {
            return;
        }
        tbaeStartDate = newVal;
        tbaeStartDateIsModified = true;
        tbaeStartDateIsInitialized = true;
    }

    /**
     * Setter method for tbaeStartDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaeStartDate
     */
    public void setTbaeStartDate(long newVal)
    {
        setTbaeStartDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbaeStartDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaeStartDateModified()
    {
        return tbaeStartDateIsModified;
    }

    /**
     * Determines if the tbaeStartDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaeStartDateInitialized()
    {
        return tbaeStartDateIsInitialized;
    }

    /**
     * Getter method for tbaeMajor.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbae_major</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbaeMajor
     */
    public String getTbaeMajor()
    {
        return tbaeMajor;
    }

    /**
     * Setter method for tbaeMajor.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaeMajor
     */
    public void setTbaeMajor(String newVal)
    {
        if ((newVal != null && tbaeMajor != null && (newVal.compareTo(tbaeMajor) == 0)) ||
            (newVal == null && tbaeMajor == null && tbaeMajorIsInitialized)) {
            return;
        }
        tbaeMajor = newVal;
        tbaeMajorIsModified = true;
        tbaeMajorIsInitialized = true;
    }

    /**
     * Determines if the tbaeMajor has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaeMajorModified()
    {
        return tbaeMajorIsModified;
    }

    /**
     * Determines if the tbaeMajor has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaeMajorInitialized()
    {
        return tbaeMajorIsInitialized;
    }

    /**
     * Getter method for tbeduId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbedu_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeduId
     */
    public Integer getTbeduId()
    {
        return tbeduId;
    }

    /**
     * Setter method for tbeduId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeduId
     */
    public void setTbeduId(Integer newVal)
    {
        if ((newVal != null && tbeduId != null && (newVal.compareTo(tbeduId) == 0)) ||
            (newVal == null && tbeduId == null && tbeduIdIsInitialized)) {
            return;
        }
        tbeduId = newVal;
        tbeduIdIsModified = true;
        tbeduIdIsInitialized = true;
    }

    /**
     * Setter method for tbeduId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeduId
     */
    public void setTbeduId(int newVal)
    {
        setTbeduId(new Integer(newVal));
    }

    /**
     * Determines if the tbeduId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeduIdModified()
    {
        return tbeduIdIsModified;
    }

    /**
     * Determines if the tbeduId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeduIdInitialized()
    {
        return tbeduIdIsInitialized;
    }

    /**
     * Getter method for tbaeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbae_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbaeId
     */
    public Integer getTbaeId()
    {
        return tbaeId;
    }

    /**
     * Setter method for tbaeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbaeId
     */
    public void setTbaeId(Integer newVal)
    {
        if ((newVal != null && tbaeId != null && (newVal.compareTo(tbaeId) == 0)) ||
            (newVal == null && tbaeId == null && tbaeIdIsInitialized)) {
            return;
        }
        tbaeId = newVal;
        tbaeIdIsModified = true;
        tbaeIdIsInitialized = true;
    }

    /**
     * Setter method for tbaeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbaeId
     */
    public void setTbaeId(int newVal)
    {
        setTbaeId(new Integer(newVal));
    }

    /**
     * Determines if the tbaeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbaeIdModified()
    {
        return tbaeIdIsModified;
    }

    /**
     * Determines if the tbaeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbaeIdInitialized()
    {
        return tbaeIdIsInitialized;
    }

    /**
     * Getter method for tbeInstitute.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbe_institute</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeInstitute
     */
    public String getTbeInstitute()
    {
        return tbeInstitute;
    }

    /**
     * Setter method for tbeInstitute.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeInstitute
     */
    public void setTbeInstitute(String newVal)
    {
        if ((newVal != null && tbeInstitute != null && (newVal.compareTo(tbeInstitute) == 0)) ||
            (newVal == null && tbeInstitute == null && tbeInstituteIsInitialized)) {
            return;
        }
        tbeInstitute = newVal;
        tbeInstituteIsModified = true;
        tbeInstituteIsInitialized = true;
    }

    /**
     * Determines if the tbeInstitute has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeInstituteModified()
    {
        return tbeInstituteIsModified;
    }

    /**
     * Determines if the tbeInstitute has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeInstituteInitialized()
    {
        return tbeInstituteIsInitialized;
    }

    /**
     * Getter method for tbeEducationId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbe_education_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEducationId
     */
    public String getTbeEducationId()
    {
        return tbeEducationId;
    }

    /**
     * Setter method for tbeEducationId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEducationId
     */
    public void setTbeEducationId(String newVal)
    {
        if ((newVal != null && tbeEducationId != null && (newVal.compareTo(tbeEducationId) == 0)) ||
            (newVal == null && tbeEducationId == null && tbeEducationIdIsInitialized)) {
            return;
        }
        tbeEducationId = newVal;
        tbeEducationIdIsModified = true;
        tbeEducationIdIsInitialized = true;
    }

    /**
     * Determines if the tbeEducationId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEducationIdModified()
    {
        return tbeEducationIdIsModified;
    }

    /**
     * Determines if the tbeEducationId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEducationIdInitialized()
    {
        return tbeEducationIdIsInitialized;
    }

    /**
     * Getter method for tbeName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbe_name</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeName
     */
    public String getTbeName()
    {
        return tbeName;
    }

    /**
     * Setter method for tbeName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeName
     */
    public void setTbeName(String newVal)
    {
        if ((newVal != null && tbeName != null && (newVal.compareTo(tbeName) == 0)) ||
            (newVal == null && tbeName == null && tbeNameIsInitialized)) {
            return;
        }
        tbeName = newVal;
        tbeNameIsModified = true;
        tbeNameIsInitialized = true;
    }

    /**
     * Determines if the tbeName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameModified()
    {
        return tbeNameIsModified;
    }

    /**
     * Determines if the tbeName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameInitialized()
    {
        return tbeNameIsInitialized;
    }

    /**
     * Getter method for tbeNickName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbe_nick_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeNickName
     */
    public String getTbeNickName()
    {
        return tbeNickName;
    }

    /**
     * Setter method for tbeNickName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeNickName
     */
    public void setTbeNickName(String newVal)
    {
        if ((newVal != null && tbeNickName != null && (newVal.compareTo(tbeNickName) == 0)) ||
            (newVal == null && tbeNickName == null && tbeNickNameIsInitialized)) {
            return;
        }
        tbeNickName = newVal;
        tbeNickNameIsModified = true;
        tbeNickNameIsInitialized = true;
    }

    /**
     * Determines if the tbeNickName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNickNameModified()
    {
        return tbeNickNameIsModified;
    }

    /**
     * Determines if the tbeNickName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNickNameInitialized()
    {
        return tbeNickNameIsInitialized;
    }

    /**
     * Getter method for tbeLastName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbe_last_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeLastName
     */
    public String getTbeLastName()
    {
        return tbeLastName;
    }

    /**
     * Setter method for tbeLastName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeLastName
     */
    public void setTbeLastName(String newVal)
    {
        if ((newVal != null && tbeLastName != null && (newVal.compareTo(tbeLastName) == 0)) ||
            (newVal == null && tbeLastName == null && tbeLastNameIsInitialized)) {
            return;
        }
        tbeLastName = newVal;
        tbeLastNameIsModified = true;
        tbeLastNameIsInitialized = true;
    }

    /**
     * Determines if the tbeLastName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeLastNameModified()
    {
        return tbeLastNameIsModified;
    }

    /**
     * Determines if the tbeLastName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeLastNameInitialized()
    {
        return tbeLastNameIsInitialized;
    }

    /**
     * Getter method for tbeMiddleName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbe_middle_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeMiddleName
     */
    public String getTbeMiddleName()
    {
        return tbeMiddleName;
    }

    /**
     * Setter method for tbeMiddleName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeMiddleName
     */
    public void setTbeMiddleName(String newVal)
    {
        if ((newVal != null && tbeMiddleName != null && (newVal.compareTo(tbeMiddleName) == 0)) ||
            (newVal == null && tbeMiddleName == null && tbeMiddleNameIsInitialized)) {
            return;
        }
        tbeMiddleName = newVal;
        tbeMiddleNameIsModified = true;
        tbeMiddleNameIsInitialized = true;
    }

    /**
     * Determines if the tbeMiddleName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeMiddleNameModified()
    {
        return tbeMiddleNameIsModified;
    }

    /**
     * Determines if the tbeMiddleName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeMiddleNameInitialized()
    {
        return tbeMiddleNameIsInitialized;
    }

    /**
     * Getter method for tbeFirstName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbe_first_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeFirstName
     */
    public String getTbeFirstName()
    {
        return tbeFirstName;
    }

    /**
     * Setter method for tbeFirstName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeFirstName
     */
    public void setTbeFirstName(String newVal)
    {
        if ((newVal != null && tbeFirstName != null && (newVal.compareTo(tbeFirstName) == 0)) ||
            (newVal == null && tbeFirstName == null && tbeFirstNameIsInitialized)) {
            return;
        }
        tbeFirstName = newVal;
        tbeFirstNameIsModified = true;
        tbeFirstNameIsInitialized = true;
    }

    /**
     * Determines if the tbeFirstName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeFirstNameModified()
    {
        return tbeFirstNameIsModified;
    }

    /**
     * Determines if the tbeFirstName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeFirstNameInitialized()
    {
        return tbeFirstNameIsInitialized;
    }

    /**
     * Getter method for tbeEmployeeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbe_employee_id</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEmployeeId
     */
    public String getTbeEmployeeId()
    {
        return tbeEmployeeId;
    }

    /**
     * Setter method for tbeEmployeeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEmployeeId
     */
    public void setTbeEmployeeId(String newVal)
    {
        if ((newVal != null && tbeEmployeeId != null && (newVal.compareTo(tbeEmployeeId) == 0)) ||
            (newVal == null && tbeEmployeeId == null && tbeEmployeeIdIsInitialized)) {
            return;
        }
        tbeEmployeeId = newVal;
        tbeEmployeeIdIsModified = true;
        tbeEmployeeIdIsInitialized = true;
    }

    /**
     * Determines if the tbeEmployeeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEmployeeIdModified()
    {
        return tbeEmployeeIdIsModified;
    }

    /**
     * Determines if the tbeEmployeeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEmployeeIdInitialized()
    {
        return tbeEmployeeIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_employee_education.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbaeGpaIsModified 		|| tbaeEndDateIsModified  		|| tbaeStartDateIsModified  		|| tbaeMajorIsModified  		|| tbeduIdIsModified  		|| tbaeIdIsModified  		|| tbeInstituteIsModified  		|| tbeEducationIdIsModified  		|| tbeNameIsModified  		|| tbeNickNameIsModified  		|| tbeLastNameIsModified  		|| tbeMiddleNameIsModified  		|| tbeFirstNameIsModified  		|| tbeEmployeeIdIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbaeGpaIsModified = false;
        tbaeEndDateIsModified = false;
        tbaeStartDateIsModified = false;
        tbaeMajorIsModified = false;
        tbeduIdIsModified = false;
        tbaeIdIsModified = false;
        tbeInstituteIsModified = false;
        tbeEducationIdIsModified = false;
        tbeNameIsModified = false;
        tbeNickNameIsModified = false;
        tbeLastNameIsModified = false;
        tbeMiddleNameIsModified = false;
        tbeFirstNameIsModified = false;
        tbeEmployeeIdIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewEmployeeEducationBean bean)
    {
        setTbaeGpa(bean.getTbaeGpa());
        setTbaeEndDate(bean.getTbaeEndDate());
        setTbaeStartDate(bean.getTbaeStartDate());
        setTbaeMajor(bean.getTbaeMajor());
        setTbeduId(bean.getTbeduId());
        setTbaeId(bean.getTbaeId());
        setTbeInstitute(bean.getTbeInstitute());
        setTbeEducationId(bean.getTbeEducationId());
        setTbeName(bean.getTbeName());
        setTbeNickName(bean.getTbeNickName());
        setTbeLastName(bean.getTbeLastName());
        setTbeMiddleName(bean.getTbeMiddleName());
        setTbeFirstName(bean.getTbeFirstName());
        setTbeEmployeeId(bean.getTbeEmployeeId());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbae_gpa", getTbaeGpa() == null ? "" : getTbaeGpa().toString());
        dictionnary.put("tbae_end_date", getTbaeEndDate() == null ? "" : getTbaeEndDate().toString());
        dictionnary.put("tbae_start_date", getTbaeStartDate() == null ? "" : getTbaeStartDate().toString());
        dictionnary.put("tbae_major", getTbaeMajor() == null ? "" : getTbaeMajor().toString());
        dictionnary.put("tbedu_id", getTbeduId() == null ? "" : getTbeduId().toString());
        dictionnary.put("tbae_id", getTbaeId() == null ? "" : getTbaeId().toString());
        dictionnary.put("tbe_institute", getTbeInstitute() == null ? "" : getTbeInstitute().toString());
        dictionnary.put("tbe_education_id", getTbeEducationId() == null ? "" : getTbeEducationId().toString());
        dictionnary.put("tbe_name", getTbeName() == null ? "" : getTbeName().toString());
        dictionnary.put("tbe_nick_name", getTbeNickName() == null ? "" : getTbeNickName().toString());
        dictionnary.put("tbe_last_name", getTbeLastName() == null ? "" : getTbeLastName().toString());
        dictionnary.put("tbe_middle_name", getTbeMiddleName() == null ? "" : getTbeMiddleName().toString());
        dictionnary.put("tbe_first_name", getTbeFirstName() == null ? "" : getTbeFirstName().toString());
        dictionnary.put("tbe_employee_id", getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbae_gpa".equalsIgnoreCase(column) || "tbaeGpa".equalsIgnoreCase(column)) {
            return getTbaeGpa() == null ? "" : getTbaeGpa().toString();
        } else if ("tbae_end_date".equalsIgnoreCase(column) || "tbaeEndDate".equalsIgnoreCase(column)) {
            return getTbaeEndDate() == null ? "" : getTbaeEndDate().toString();
        } else if ("tbae_start_date".equalsIgnoreCase(column) || "tbaeStartDate".equalsIgnoreCase(column)) {
            return getTbaeStartDate() == null ? "" : getTbaeStartDate().toString();
        } else if ("tbae_major".equalsIgnoreCase(column) || "tbaeMajor".equalsIgnoreCase(column)) {
            return getTbaeMajor() == null ? "" : getTbaeMajor().toString();
        } else if ("tbedu_id".equalsIgnoreCase(column) || "tbeduId".equalsIgnoreCase(column)) {
            return getTbeduId() == null ? "" : getTbeduId().toString();
        } else if ("tbae_id".equalsIgnoreCase(column) || "tbaeId".equalsIgnoreCase(column)) {
            return getTbaeId() == null ? "" : getTbaeId().toString();
        } else if ("tbe_institute".equalsIgnoreCase(column) || "tbeInstitute".equalsIgnoreCase(column)) {
            return getTbeInstitute() == null ? "" : getTbeInstitute().toString();
        } else if ("tbe_education_id".equalsIgnoreCase(column) || "tbeEducationId".equalsIgnoreCase(column)) {
            return getTbeEducationId() == null ? "" : getTbeEducationId().toString();
        } else if ("tbe_name".equalsIgnoreCase(column) || "tbeName".equalsIgnoreCase(column)) {
            return getTbeName() == null ? "" : getTbeName().toString();
        } else if ("tbe_nick_name".equalsIgnoreCase(column) || "tbeNickName".equalsIgnoreCase(column)) {
            return getTbeNickName() == null ? "" : getTbeNickName().toString();
        } else if ("tbe_last_name".equalsIgnoreCase(column) || "tbeLastName".equalsIgnoreCase(column)) {
            return getTbeLastName() == null ? "" : getTbeLastName().toString();
        } else if ("tbe_middle_name".equalsIgnoreCase(column) || "tbeMiddleName".equalsIgnoreCase(column)) {
            return getTbeMiddleName() == null ? "" : getTbeMiddleName().toString();
        } else if ("tbe_first_name".equalsIgnoreCase(column) || "tbeFirstName".equalsIgnoreCase(column)) {
            return getTbeFirstName() == null ? "" : getTbeFirstName().toString();
        } else if ("tbe_employee_id".equalsIgnoreCase(column) || "tbeEmployeeId".equalsIgnoreCase(column)) {
            return getTbeEmployeeId() == null ? "" : getTbeEmployeeId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewEmployeeEducationBean)) {
            return false;
        }

		ViewEmployeeEducationBean obj = (ViewEmployeeEducationBean) object;
		return new EqualsBuilder()
            .append(getTbaeGpa(), obj.getTbaeGpa())
            .append(getTbaeEndDate(), obj.getTbaeEndDate())
            .append(getTbaeStartDate(), obj.getTbaeStartDate())
            .append(getTbaeMajor(), obj.getTbaeMajor())
            .append(getTbeduId(), obj.getTbeduId())
            .append(getTbaeId(), obj.getTbaeId())
            .append(getTbeInstitute(), obj.getTbeInstitute())
            .append(getTbeEducationId(), obj.getTbeEducationId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeNickName(), obj.getTbeNickName())
            .append(getTbeLastName(), obj.getTbeLastName())
            .append(getTbeMiddleName(), obj.getTbeMiddleName())
            .append(getTbeFirstName(), obj.getTbeFirstName())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbaeGpa())
            .append(getTbaeEndDate())
            .append(getTbaeStartDate())
            .append(getTbaeMajor())
            .append(getTbeduId())
            .append(getTbaeId())
            .append(getTbeInstitute())
            .append(getTbeEducationId())
            .append(getTbeName())
            .append(getTbeNickName())
            .append(getTbeLastName())
            .append(getTbeMiddleName())
            .append(getTbeFirstName())
            .append(getTbeEmployeeId())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbae_gpa", getTbaeGpa())
            .append("tbae_end_date", getTbaeEndDate())
            .append("tbae_start_date", getTbaeStartDate())
            .append("tbae_major", getTbaeMajor())
            .append("tbedu_id", getTbeduId())
            .append("tbae_id", getTbaeId())
            .append("tbe_institute", getTbeInstitute())
            .append("tbe_education_id", getTbeEducationId())
            .append("tbe_name", getTbeName())
            .append("tbe_nick_name", getTbeNickName())
            .append("tbe_last_name", getTbeLastName())
            .append("tbe_middle_name", getTbeMiddleName())
            .append("tbe_first_name", getTbeFirstName())
            .append("tbe_employee_id", getTbeEmployeeId())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewEmployeeEducationBean obj = (ViewEmployeeEducationBean) object;
        return new CompareToBuilder()
            .append(getTbaeGpa(), obj.getTbaeGpa())
            .append(getTbaeEndDate(), obj.getTbaeEndDate())
            .append(getTbaeStartDate(), obj.getTbaeStartDate())
            .append(getTbaeMajor(), obj.getTbaeMajor())
            .append(getTbeduId(), obj.getTbeduId())
            .append(getTbaeId(), obj.getTbaeId())
            .append(getTbeInstitute(), obj.getTbeInstitute())
            .append(getTbeEducationId(), obj.getTbeEducationId())
            .append(getTbeName(), obj.getTbeName())
            .append(getTbeNickName(), obj.getTbeNickName())
            .append(getTbeLastName(), obj.getTbeLastName())
            .append(getTbeMiddleName(), obj.getTbeMiddleName())
            .append(getTbeFirstName(), obj.getTbeFirstName())
            .append(getTbeEmployeeId(), obj.getTbeEmployeeId())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
