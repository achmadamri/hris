// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.TbEmployeeBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the tb_employee table.
 * @author sql2java
 */
public class TbEmployeeManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbptkp_id field.
     */
    public static final int ID_TBPTKP_ID = 0;

    /**
     * Identify the tber_id field.
     */
    public static final int ID_TBER_ID = 1;

    /**
     * Identify the tbn_id field.
     */
    public static final int ID_TBN_ID = 2;

    /**
     * Identify the tbe_joined_date field.
     */
    public static final int ID_TBE_JOINED_DATE = 3;

    /**
     * Identify the tbe_status field.
     */
    public static final int ID_TBE_STATUS = 4;

    /**
     * Identify the tbe_driver_license_expiry field.
     */
    public static final int ID_TBE_DRIVER_LICENSE_EXPIRY = 5;

    /**
     * Identify the tbe_phone field.
     */
    public static final int ID_TBE_PHONE = 6;

    /**
     * Identify the tbe_mobile field.
     */
    public static final int ID_TBE_MOBILE = 7;

    /**
     * Identify the tbe_driver_license_no field.
     */
    public static final int ID_TBE_DRIVER_LICENSE_NO = 8;

    /**
     * Identify the tbe_gender field.
     */
    public static final int ID_TBE_GENDER = 9;

    /**
     * Identify the tbe_smoker field.
     */
    public static final int ID_TBE_SMOKER = 10;

    /**
     * Identify the tbe_marital_status field.
     */
    public static final int ID_TBE_MARITAL_STATUS = 11;

    /**
     * Identify the tbe_dob field.
     */
    public static final int ID_TBE_DOB = 12;

    /**
     * Identify the tbe_tax_no_date field.
     */
    public static final int ID_TBE_TAX_NO_DATE = 13;

    /**
     * Identify the tbe_tax_no field.
     */
    public static final int ID_TBE_TAX_NO = 14;

    /**
     * Identify the tbe_id_no field.
     */
    public static final int ID_TBE_ID_NO = 15;

    /**
     * Identify the tbe_photo_file_name field.
     */
    public static final int ID_TBE_PHOTO_FILE_NAME = 16;

    /**
     * Identify the tbe_name field.
     */
    public static final int ID_TBE_NAME = 17;

    /**
     * Identify the tbe_nick_name field.
     */
    public static final int ID_TBE_NICK_NAME = 18;

    /**
     * Identify the tbe_last_name field.
     */
    public static final int ID_TBE_LAST_NAME = 19;

    /**
     * Identify the tbe_middle_name field.
     */
    public static final int ID_TBE_MIDDLE_NAME = 20;

    /**
     * Identify the tbe_first_name field.
     */
    public static final int ID_TBE_FIRST_NAME = 21;

    /**
     * Identify the tbe_email field.
     */
    public static final int ID_TBE_EMAIL = 22;

    /**
     * Identify the tbe_employee_id field.
     */
    public static final int ID_TBE_EMPLOYEE_ID = 23;

    /**
     * Identify the tbe_id field.
     */
    public static final int ID_TBE_ID = 24;

    /**
     * Contains all the full fields of the tb_employee table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "tb_employee.tbptkp_id"
        ,"tb_employee.tber_id"
        ,"tb_employee.tbn_id"
        ,"tb_employee.tbe_joined_date"
        ,"tb_employee.tbe_status"
        ,"tb_employee.tbe_driver_license_expiry"
        ,"tb_employee.tbe_phone"
        ,"tb_employee.tbe_mobile"
        ,"tb_employee.tbe_driver_license_no"
        ,"tb_employee.tbe_gender"
        ,"tb_employee.tbe_smoker"
        ,"tb_employee.tbe_marital_status"
        ,"tb_employee.tbe_dob"
        ,"tb_employee.tbe_tax_no_date"
        ,"tb_employee.tbe_tax_no"
        ,"tb_employee.tbe_id_no"
        ,"tb_employee.tbe_photo_file_name"
        ,"tb_employee.tbe_name"
        ,"tb_employee.tbe_nick_name"
        ,"tb_employee.tbe_last_name"
        ,"tb_employee.tbe_middle_name"
        ,"tb_employee.tbe_first_name"
        ,"tb_employee.tbe_email"
        ,"tb_employee.tbe_employee_id"
        ,"tb_employee.tbe_id"
    };

    /**
     * Contains all the fields of the tb_employee table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbptkp_id"
        ,"tber_id"
        ,"tbn_id"
        ,"tbe_joined_date"
        ,"tbe_status"
        ,"tbe_driver_license_expiry"
        ,"tbe_phone"
        ,"tbe_mobile"
        ,"tbe_driver_license_no"
        ,"tbe_gender"
        ,"tbe_smoker"
        ,"tbe_marital_status"
        ,"tbe_dob"
        ,"tbe_tax_no_date"
        ,"tbe_tax_no"
        ,"tbe_id_no"
        ,"tbe_photo_file_name"
        ,"tbe_name"
        ,"tbe_nick_name"
        ,"tbe_last_name"
        ,"tbe_middle_name"
        ,"tbe_first_name"
        ,"tbe_email"
        ,"tbe_employee_id"
        ,"tbe_id"
    };

    /**
     * Field that contains the comma separated fields of the tb_employee table.
     */
    public static final String ALL_FULL_FIELDS = "tb_employee.tbptkp_id"
                            + ",tb_employee.tber_id"
                            + ",tb_employee.tbn_id"
                            + ",tb_employee.tbe_joined_date"
                            + ",tb_employee.tbe_status"
                            + ",tb_employee.tbe_driver_license_expiry"
                            + ",tb_employee.tbe_phone"
                            + ",tb_employee.tbe_mobile"
                            + ",tb_employee.tbe_driver_license_no"
                            + ",tb_employee.tbe_gender"
                            + ",tb_employee.tbe_smoker"
                            + ",tb_employee.tbe_marital_status"
                            + ",tb_employee.tbe_dob"
                            + ",tb_employee.tbe_tax_no_date"
                            + ",tb_employee.tbe_tax_no"
                            + ",tb_employee.tbe_id_no"
                            + ",tb_employee.tbe_photo_file_name"
                            + ",tb_employee.tbe_name"
                            + ",tb_employee.tbe_nick_name"
                            + ",tb_employee.tbe_last_name"
                            + ",tb_employee.tbe_middle_name"
                            + ",tb_employee.tbe_first_name"
                            + ",tb_employee.tbe_email"
                            + ",tb_employee.tbe_employee_id"
                            + ",tb_employee.tbe_id";

    /**
     * Field that contains the comma separated fields of the tb_employee table.
     */
    public static final String ALL_FIELDS = "tbptkp_id"
                            + ",tber_id"
                            + ",tbn_id"
                            + ",tbe_joined_date"
                            + ",tbe_status"
                            + ",tbe_driver_license_expiry"
                            + ",tbe_phone"
                            + ",tbe_mobile"
                            + ",tbe_driver_license_no"
                            + ",tbe_gender"
                            + ",tbe_smoker"
                            + ",tbe_marital_status"
                            + ",tbe_dob"
                            + ",tbe_tax_no_date"
                            + ",tbe_tax_no"
                            + ",tbe_id_no"
                            + ",tbe_photo_file_name"
                            + ",tbe_name"
                            + ",tbe_nick_name"
                            + ",tbe_last_name"
                            + ",tbe_middle_name"
                            + ",tbe_first_name"
                            + ",tbe_email"
                            + ",tbe_employee_id"
                            + ",tbe_id";

    private static TbEmployeeManager singleton = new TbEmployeeManager();

    /**
     * Get the TbEmployeeManager singleton.
     *
     * @return TbEmployeeManager
     */
    public static TbEmployeeManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new TbEmployeeBean instance.
     *
     * @return the new TbEmployeeBean
     */
    public TbEmployeeBean createTbEmployeeBean()
    {
        return new TbEmployeeBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////
	
    /**
     * Loads a TbEmployeeBean from the tb_employee using its key fields.
     *
     * @param tbeId Integer - PK# 1
     * @return a unique TbEmployeeBean
     * @throws DAOException
     */
    //1
    public TbEmployeeBean loadByPrimaryKey(Integer tbeId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("SELECT " + ALL_FIELDS + " FROM tb_employee WHERE tbe_id=?");
            log.debug("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbeId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbeId); }
            TbEmployeeBean pReturn[] = this.loadByPreparedStatement(ps);
            if (pReturn.length < 1) {
                // throw new ObjectRetrievalException();
				return null;
            } else {
                return pReturn[0];
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
		
	//1WS
    //public TbEmployeeBean loadByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return fromBeanWsToBean(Util.getInstance().getDAOServiceV1().tbXLoadByPrimaryKey(id));
    //}
    
    //2WS
    //public int deleteByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return Util.getInstance().getDAOServiceV1().tbXDeleteByPrimaryKey(id);
    //}

    /**
     * Deletes rows according to its keys.
     *
     * @param tbeId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer tbeId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_employee WHERE tbe_id=?");
            log.debug("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbeId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbeId); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the RptTbAttendanceBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated RptTbAttendanceBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public RptTbAttendanceBean[] getRptTbAttendanceBeans(TbEmployeeBean bean) throws DAOException
    {
        RptTbAttendanceBean other = RptTbAttendanceManager.getInstance().createRptTbAttendanceBean();
        other.setTbeId(bean.getTbeId());
        return RptTbAttendanceManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the RptTbAttendanceBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the RptTbAttendanceBean object to associate to the TbEmployeeBean
     * @return the associated RptTbAttendanceBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setRptTbAttendanceBean(TbEmployeeBean bean,RptTbAttendanceBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbAssignedEducationBean object from the tb_employee.tbemp_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbAssignedEducationBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbAssignedEducationBean[] getTbAssignedEducationBeans(TbEmployeeBean bean) throws DAOException
    {
        TbAssignedEducationBean other = TbAssignedEducationManager.getInstance().createTbAssignedEducationBean();
        other.setTbempId(bean.getTbeId());
        return TbAssignedEducationManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbAssignedEducationBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbAssignedEducationBean object to associate to the TbEmployeeBean
     * @return the associated TbAssignedEducationBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbAssignedEducationBean(TbEmployeeBean bean,TbAssignedEducationBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbempId());
        return bean;
    }

    /**
     * Retrieves the TbAssignedLanguagesBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbAssignedLanguagesBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbAssignedLanguagesBean[] getTbAssignedLanguagesBeans(TbEmployeeBean bean) throws DAOException
    {
        TbAssignedLanguagesBean other = TbAssignedLanguagesManager.getInstance().createTbAssignedLanguagesBean();
        other.setTbeId(bean.getTbeId());
        return TbAssignedLanguagesManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbAssignedLanguagesBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbAssignedLanguagesBean object to associate to the TbEmployeeBean
     * @return the associated TbAssignedLanguagesBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbAssignedLanguagesBean(TbEmployeeBean bean,TbAssignedLanguagesBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbAssignedLeavesBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbAssignedLeavesBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbAssignedLeavesBean[] getTbAssignedLeavesBeans(TbEmployeeBean bean) throws DAOException
    {
        TbAssignedLeavesBean other = TbAssignedLeavesManager.getInstance().createTbAssignedLeavesBean();
        other.setTbeId(bean.getTbeId());
        return TbAssignedLeavesManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbAssignedLeavesBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbAssignedLeavesBean object to associate to the TbEmployeeBean
     * @return the associated TbAssignedLeavesBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbAssignedLeavesBean(TbEmployeeBean bean,TbAssignedLeavesBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbAssignedLicensesBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbAssignedLicensesBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbAssignedLicensesBean[] getTbAssignedLicensesBeans(TbEmployeeBean bean) throws DAOException
    {
        TbAssignedLicensesBean other = TbAssignedLicensesManager.getInstance().createTbAssignedLicensesBean();
        other.setTbeId(bean.getTbeId());
        return TbAssignedLicensesManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbAssignedLicensesBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbAssignedLicensesBean object to associate to the TbEmployeeBean
     * @return the associated TbAssignedLicensesBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbAssignedLicensesBean(TbEmployeeBean bean,TbAssignedLicensesBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbAssignedLoanBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbAssignedLoanBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbAssignedLoanBean[] getTbAssignedLoanBeans(TbEmployeeBean bean) throws DAOException
    {
        TbAssignedLoanBean other = TbAssignedLoanManager.getInstance().createTbAssignedLoanBean();
        other.setTbeId(bean.getTbeId());
        return TbAssignedLoanManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbAssignedLoanBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbAssignedLoanBean object to associate to the TbEmployeeBean
     * @return the associated TbAssignedLoanBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbAssignedLoanBean(TbEmployeeBean bean,TbAssignedLoanBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbAssignedSkillsBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbAssignedSkillsBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbAssignedSkillsBean[] getTbAssignedSkillsBeans(TbEmployeeBean bean) throws DAOException
    {
        TbAssignedSkillsBean other = TbAssignedSkillsManager.getInstance().createTbAssignedSkillsBean();
        other.setTbeId(bean.getTbeId());
        return TbAssignedSkillsManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbAssignedSkillsBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbAssignedSkillsBean object to associate to the TbEmployeeBean
     * @return the associated TbAssignedSkillsBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbAssignedSkillsBean(TbEmployeeBean bean,TbAssignedSkillsBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbAttendanceBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbAttendanceBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbAttendanceBean[] getTbAttendanceBeans(TbEmployeeBean bean) throws DAOException
    {
        TbAttendanceBean other = TbAttendanceManager.getInstance().createTbAttendanceBean();
        other.setTbeId(bean.getTbeId());
        return TbAttendanceManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbAttendanceBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbAttendanceBean object to associate to the TbEmployeeBean
     * @return the associated TbAttendanceBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbAttendanceBean(TbEmployeeBean bean,TbAttendanceBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbCompanyPropertyBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbCompanyPropertyBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbCompanyPropertyBean[] getTbCompanyPropertyBeans(TbEmployeeBean bean) throws DAOException
    {
        TbCompanyPropertyBean other = TbCompanyPropertyManager.getInstance().createTbCompanyPropertyBean();
        other.setTbeId(bean.getTbeId());
        return TbCompanyPropertyManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbCompanyPropertyBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbCompanyPropertyBean object to associate to the TbEmployeeBean
     * @return the associated TbCompanyPropertyBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbCompanyPropertyBean(TbEmployeeBean bean,TbCompanyPropertyBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbContactDetailsBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbContactDetailsBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbContactDetailsBean[] getTbContactDetailsBeans(TbEmployeeBean bean) throws DAOException
    {
        TbContactDetailsBean other = TbContactDetailsManager.getInstance().createTbContactDetailsBean();
        other.setTbeId(bean.getTbeId());
        return TbContactDetailsManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbContactDetailsBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbContactDetailsBean object to associate to the TbEmployeeBean
     * @return the associated TbContactDetailsBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbContactDetailsBean(TbEmployeeBean bean,TbContactDetailsBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbDependentsBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbDependentsBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbDependentsBean[] getTbDependentsBeans(TbEmployeeBean bean) throws DAOException
    {
        TbDependentsBean other = TbDependentsManager.getInstance().createTbDependentsBean();
        other.setTbeId(bean.getTbeId());
        return TbDependentsManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbDependentsBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbDependentsBean object to associate to the TbEmployeeBean
     * @return the associated TbDependentsBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbDependentsBean(TbEmployeeBean bean,TbDependentsBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbEmergencyContactBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbEmergencyContactBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbEmergencyContactBean[] getTbEmergencyContactBeans(TbEmployeeBean bean) throws DAOException
    {
        TbEmergencyContactBean other = TbEmergencyContactManager.getInstance().createTbEmergencyContactBean();
        other.setTbeId(bean.getTbeId());
        return TbEmergencyContactManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbEmergencyContactBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbEmergencyContactBean object to associate to the TbEmployeeBean
     * @return the associated TbEmergencyContactBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbEmergencyContactBean(TbEmployeeBean bean,TbEmergencyContactBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbEmployeePttBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbEmployeePttBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbEmployeePttBean[] getTbEmployeePttBeans(TbEmployeeBean bean) throws DAOException
    {
        TbEmployeePttBean other = TbEmployeePttManager.getInstance().createTbEmployeePttBean();
        other.setTbeId(bean.getTbeId());
        return TbEmployeePttManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbEmployeePttBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbEmployeePttBean object to associate to the TbEmployeeBean
     * @return the associated TbEmployeePttBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbEmployeePttBean(TbEmployeeBean bean,TbEmployeePttBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbEmployeeSalaryBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbEmployeeSalaryBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbEmployeeSalaryBean[] getTbEmployeeSalaryBeans(TbEmployeeBean bean) throws DAOException
    {
        TbEmployeeSalaryBean other = TbEmployeeSalaryManager.getInstance().createTbEmployeeSalaryBean();
        other.setTbeId(bean.getTbeId());
        return TbEmployeeSalaryManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbEmployeeSalaryBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbEmployeeSalaryBean object to associate to the TbEmployeeBean
     * @return the associated TbEmployeeSalaryBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbEmployeeSalaryBean(TbEmployeeBean bean,TbEmployeeSalaryBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbEmployeeShiftBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbEmployeeShiftBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbEmployeeShiftBean[] getTbEmployeeShiftBeans(TbEmployeeBean bean) throws DAOException
    {
        TbEmployeeShiftBean other = TbEmployeeShiftManager.getInstance().createTbEmployeeShiftBean();
        other.setTbeId(bean.getTbeId());
        return TbEmployeeShiftManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbEmployeeShiftBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbEmployeeShiftBean object to associate to the TbEmployeeBean
     * @return the associated TbEmployeeShiftBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbEmployeeShiftBean(TbEmployeeBean bean,TbEmployeeShiftBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbImmigrationBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbImmigrationBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbImmigrationBean[] getTbImmigrationBeans(TbEmployeeBean bean) throws DAOException
    {
        TbImmigrationBean other = TbImmigrationManager.getInstance().createTbImmigrationBean();
        other.setTbeId(bean.getTbeId());
        return TbImmigrationManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbImmigrationBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbImmigrationBean object to associate to the TbEmployeeBean
     * @return the associated TbImmigrationBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbImmigrationBean(TbEmployeeBean bean,TbImmigrationBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbJobBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbJobBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbJobBean[] getTbJobBeans(TbEmployeeBean bean) throws DAOException
    {
        TbJobBean other = TbJobManager.getInstance().createTbJobBean();
        other.setTbeId(bean.getTbeId());
        return TbJobManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbJobBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbJobBean object to associate to the TbEmployeeBean
     * @return the associated TbJobBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbJobBean(TbEmployeeBean bean,TbJobBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbKpiBean object from the tb_employee.tbe_Id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbKpiBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbKpiBean[] getTbKpiBeans(TbEmployeeBean bean) throws DAOException
    {
        TbKpiBean other = TbKpiManager.getInstance().createTbKpiBean();
        other.setTbeId(bean.getTbeId());
        return TbKpiManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbKpiBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbKpiBean object to associate to the TbEmployeeBean
     * @return the associated TbKpiBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbKpiBean(TbEmployeeBean bean,TbKpiBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbKpiAssignBean object from the tb_employee.tbka_spv_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbKpiAssignBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbKpiAssignBean[] getTbKpiAssignBeans(TbEmployeeBean bean) throws DAOException
    {
        TbKpiAssignBean other = TbKpiAssignManager.getInstance().createTbKpiAssignBean();
        other.setTbkaSpvId(bean.getTbeId());
        return TbKpiAssignManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbKpiAssignBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbKpiAssignBean object to associate to the TbEmployeeBean
     * @return the associated TbKpiAssignBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbKpiAssignBean(TbEmployeeBean bean,TbKpiAssignBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbkaSpvId());
        return bean;
    }

    /**
     * Retrieves the TbLoginBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbLoginBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbLoginBean[] getTbLoginBeans(TbEmployeeBean bean) throws DAOException
    {
        TbLoginBean other = TbLoginManager.getInstance().createTbLoginBean();
        other.setTbeId(bean.getTbeId());
        return TbLoginManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbLoginBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbLoginBean object to associate to the TbEmployeeBean
     * @return the associated TbLoginBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbLoginBean(TbEmployeeBean bean,TbLoginBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbPphBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbPphBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbPphBean[] getTbPphBeans(TbEmployeeBean bean) throws DAOException
    {
        TbPphBean other = TbPphManager.getInstance().createTbPphBean();
        other.setTbeId(bean.getTbeId());
        return TbPphManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbPphBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbPphBean object to associate to the TbEmployeeBean
     * @return the associated TbPphBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbPphBean(TbEmployeeBean bean,TbPphBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbProjectEmployeeBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbProjectEmployeeBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbProjectEmployeeBean[] getTbProjectEmployeeBeans(TbEmployeeBean bean) throws DAOException
    {
        TbProjectEmployeeBean other = TbProjectEmployeeManager.getInstance().createTbProjectEmployeeBean();
        other.setTbeId(bean.getTbeId());
        return TbProjectEmployeeManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbProjectEmployeeBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbProjectEmployeeBean object to associate to the TbEmployeeBean
     * @return the associated TbProjectEmployeeBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbProjectEmployeeBean(TbEmployeeBean bean,TbProjectEmployeeBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbReportToBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbReportToBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbReportToBean[] getTbReportToBeans(TbEmployeeBean bean) throws DAOException
    {
        TbReportToBean other = TbReportToManager.getInstance().createTbReportToBean();
        other.setTbeId(bean.getTbeId());
        return TbReportToManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbReportToBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbReportToBean object to associate to the TbEmployeeBean
     * @return the associated TbReportToBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbReportToBean(TbEmployeeBean bean,TbReportToBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbTimesheetBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbTimesheetBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbTimesheetBean[] getTbTimesheetBeans(TbEmployeeBean bean) throws DAOException
    {
        TbTimesheetBean other = TbTimesheetManager.getInstance().createTbTimesheetBean();
        other.setTbeId(bean.getTbeId());
        return TbTimesheetManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbTimesheetBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbTimesheetBean object to associate to the TbEmployeeBean
     * @return the associated TbTimesheetBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbTimesheetBean(TbEmployeeBean bean,TbTimesheetBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbVacancyBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbVacancyBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbVacancyBean[] getTbVacancyBeans(TbEmployeeBean bean) throws DAOException
    {
        TbVacancyBean other = TbVacancyManager.getInstance().createTbVacancyBean();
        other.setTbeId(bean.getTbeId());
        return TbVacancyManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbVacancyBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbVacancyBean object to associate to the TbEmployeeBean
     * @return the associated TbVacancyBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbVacancyBean(TbEmployeeBean bean,TbVacancyBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }

    /**
     * Retrieves the TbWorkExperienceBean object from the tb_employee.tbe_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbWorkExperienceBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbWorkExperienceBean[] getTbWorkExperienceBeans(TbEmployeeBean bean) throws DAOException
    {
        TbWorkExperienceBean other = TbWorkExperienceManager.getInstance().createTbWorkExperienceBean();
        other.setTbeId(bean.getTbeId());
        return TbWorkExperienceManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbEmployeeBean object to the TbWorkExperienceBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbWorkExperienceBean object to associate to the TbEmployeeBean
     * @return the associated TbWorkExperienceBean bean
     */
    //4.1 SET IMPORTED
    public TbEmployeeBean setTbWorkExperienceBean(TbEmployeeBean bean,TbWorkExperienceBean beanToSet)
    {
        bean.setTbeId(beanToSet.getTbeId());
        return bean;
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the TbNationalityBean object from the tb_employee.tbn_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbNationalityBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbNationalityBean getTbNationalityBean(TbEmployeeBean bean) throws DAOException
    {
        TbNationalityBean other = TbNationalityManager.getInstance().createTbNationalityBean();
        other.setTbnId(bean.getTbnId()); 
        bean.setTbNationalityBean(TbNationalityManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbNationalityBean();
    }

    /**
     * Associates the TbEmployeeBean object to the TbNationalityBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbNationalityBean object to associate to the TbEmployeeBean
     * @return the associated TbNationalityBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbNationalityBean addTbNationalityBean(TbNationalityBean beanToSet, TbEmployeeBean bean) throws Exception
    {
        beanToSet.setTbnId(bean.getTbnId());
        return TbNationalityManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbEmployeeBean object to the TbNationalityBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbNationalityBean object to associate to the TbEmployeeBean
     * @return the associated TbNationalityBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbNationalityBean setTbNationalityBean(TbEmployeeBean bean, TbNationalityBean beanToSet) throws Exception
    {
        bean.setTbnId(beanToSet.getTbnId());
        return TbNationalityManager.getInstance().save(beanToSet);
    }

    /**
     * Retrieves the TbEthnicRacesBean object from the tb_employee.tber_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbEthnicRacesBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbEthnicRacesBean getTbEthnicRacesBean(TbEmployeeBean bean) throws DAOException
    {
        TbEthnicRacesBean other = TbEthnicRacesManager.getInstance().createTbEthnicRacesBean();
        other.setTberId(bean.getTberId()); 
        bean.setTbEthnicRacesBean(TbEthnicRacesManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbEthnicRacesBean();
    }

    /**
     * Associates the TbEmployeeBean object to the TbEthnicRacesBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbEthnicRacesBean object to associate to the TbEmployeeBean
     * @return the associated TbEthnicRacesBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbEthnicRacesBean addTbEthnicRacesBean(TbEthnicRacesBean beanToSet, TbEmployeeBean bean) throws Exception
    {
        beanToSet.setTberId(bean.getTberId());
        return TbEthnicRacesManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbEmployeeBean object to the TbEthnicRacesBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbEthnicRacesBean object to associate to the TbEmployeeBean
     * @return the associated TbEthnicRacesBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbEthnicRacesBean setTbEthnicRacesBean(TbEmployeeBean bean, TbEthnicRacesBean beanToSet) throws Exception
    {
        bean.setTberId(beanToSet.getTberId());
        return TbEthnicRacesManager.getInstance().save(beanToSet);
    }

    /**
     * Retrieves the TbPtkpBean object from the tb_employee.tbptkp_id field.
     *
     * @param bean the TbEmployeeBean
     * @return the associated TbPtkpBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbPtkpBean getTbPtkpBean(TbEmployeeBean bean) throws DAOException
    {
        TbPtkpBean other = TbPtkpManager.getInstance().createTbPtkpBean();
        other.setTbptkpId(bean.getTbptkpId()); 
        bean.setTbPtkpBean(TbPtkpManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbPtkpBean();
    }

    /**
     * Associates the TbEmployeeBean object to the TbPtkpBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbPtkpBean object to associate to the TbEmployeeBean
     * @return the associated TbPtkpBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbPtkpBean addTbPtkpBean(TbPtkpBean beanToSet, TbEmployeeBean bean) throws Exception
    {
        beanToSet.setTbptkpId(bean.getTbptkpId());
        return TbPtkpManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbEmployeeBean object to the TbPtkpBean object.
     *
     * @param bean the TbEmployeeBean object to use
     * @param beanToSet the TbPtkpBean object to associate to the TbEmployeeBean
     * @return the associated TbPtkpBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbPtkpBean setTbPtkpBean(TbEmployeeBean bean, TbPtkpBean beanToSet) throws Exception
    {
        bean.setTbptkpId(beanToSet.getTbptkpId());
        return TbPtkpManager.getInstance().save(beanToSet);
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from tb_employee.
     *
     * @return an array of TbEmployeeManager bean
     * @throws DAOException
     */
    //5
    public TbEmployeeBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from tb_employee, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of TbEmployeeManager bean
     * @throws DAOException
     */
    //6
    public TbEmployeeBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TbEmployeeBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TbEmployeeBean table
     * @throws DAOException
     */
    //7
    public TbEmployeeBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TbEmployeeBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting TbEmployeeBean table
     * @throws DAOException
     */
    //8
    public TbEmployeeBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of TbEmployeeBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting TbEmployeeBean table
     * @throws DAOException
     */
    //9
    public TbEmployeeBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_employee ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM tb_employee ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the tb_employee table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_employee " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the TbEmployeeBean bean into the database.
     *
     * @param bean the TbEmployeeBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public TbEmployeeBean save(TbEmployeeBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the TbEmployeeBean bean into the database.
     *
     * @param bean the TbEmployeeBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public TbEmployeeBean insert(TbEmployeeBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into tb_employee (");

            if (bean.isTbptkpIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbptkp_id");
                _dirtyCount++;
            }

            if (bean.isTberIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tber_id");
                _dirtyCount++;
            }

            if (bean.isTbnIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbn_id");
                _dirtyCount++;
            }

            if (bean.isTbeJoinedDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_joined_date");
                _dirtyCount++;
            }

            if (bean.isTbeStatusModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_status");
                _dirtyCount++;
            }

            if (bean.isTbeDriverLicenseExpiryModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_driver_license_expiry");
                _dirtyCount++;
            }

            if (bean.isTbePhoneModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_phone");
                _dirtyCount++;
            }

            if (bean.isTbeMobileModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_mobile");
                _dirtyCount++;
            }

            if (bean.isTbeDriverLicenseNoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_driver_license_no");
                _dirtyCount++;
            }

            if (bean.isTbeGenderModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_gender");
                _dirtyCount++;
            }

            if (bean.isTbeSmokerModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_smoker");
                _dirtyCount++;
            }

            if (bean.isTbeMaritalStatusModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_marital_status");
                _dirtyCount++;
            }

            if (bean.isTbeDobModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_dob");
                _dirtyCount++;
            }

            if (bean.isTbeTaxNoDateModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_tax_no_date");
                _dirtyCount++;
            }

            if (bean.isTbeTaxNoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_tax_no");
                _dirtyCount++;
            }

            if (bean.isTbeIdNoModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id_no");
                _dirtyCount++;
            }

            if (bean.isTbePhotoFileNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_photo_file_name");
                _dirtyCount++;
            }

            if (bean.isTbeNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_name");
                _dirtyCount++;
            }

            if (bean.isTbeNickNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_nick_name");
                _dirtyCount++;
            }

            if (bean.isTbeLastNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_last_name");
                _dirtyCount++;
            }

            if (bean.isTbeMiddleNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_middle_name");
                _dirtyCount++;
            }

            if (bean.isTbeFirstNameModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_first_name");
                _dirtyCount++;
            }

            if (bean.isTbeEmailModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_email");
                _dirtyCount++;
            }

            if (bean.isTbeEmployeeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_employee_id");
                _dirtyCount++;
            }

            if (bean.isTbeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();
            if (!bean.isTbeIdModified())
            {
                ResultSet rs = ps.getGeneratedKeys();
                try {
                    if(rs.next()) {
                        bean.setTbeId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve auto generated key!");
                    }
                } finally {
                    this.getManager().close(rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the TbEmployeeBean bean record in the database according to the changes.
     *
     * @param bean the TbEmployeeBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public TbEmployeeBean update(TbEmployeeBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE tb_employee SET ");
            boolean useComma=false;

            if (bean.isTbptkpIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbptkp_id=?");
            }

            if (bean.isTberIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tber_id=?");
            }

            if (bean.isTbnIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbn_id=?");
            }

            if (bean.isTbeJoinedDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_joined_date=?");
            }

            if (bean.isTbeStatusModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_status=?");
            }

            if (bean.isTbeDriverLicenseExpiryModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_driver_license_expiry=?");
            }

            if (bean.isTbePhoneModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_phone=?");
            }

            if (bean.isTbeMobileModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_mobile=?");
            }

            if (bean.isTbeDriverLicenseNoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_driver_license_no=?");
            }

            if (bean.isTbeGenderModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_gender=?");
            }

            if (bean.isTbeSmokerModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_smoker=?");
            }

            if (bean.isTbeMaritalStatusModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_marital_status=?");
            }

            if (bean.isTbeDobModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_dob=?");
            }

            if (bean.isTbeTaxNoDateModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_tax_no_date=?");
            }

            if (bean.isTbeTaxNoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_tax_no=?");
            }

            if (bean.isTbeIdNoModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id_no=?");
            }

            if (bean.isTbePhotoFileNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_photo_file_name=?");
            }

            if (bean.isTbeNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_name=?");
            }

            if (bean.isTbeNickNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_nick_name=?");
            }

            if (bean.isTbeLastNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_last_name=?");
            }

            if (bean.isTbeMiddleNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_middle_name=?");
            }

            if (bean.isTbeFirstNameModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_first_name=?");
            }

            if (bean.isTbeEmailModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_email=?");
            }

            if (bean.isTbeEmployeeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_employee_id=?");
            }

            if (bean.isTbeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_id=?");
            }
            sql.append(" WHERE ");
            sql.append("tbe_id=?");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of TbEmployeeBean beans into the database.
     *
     * @param beans the TbEmployeeBean bean table to be saved
     * @return the saved TbEmployeeBean array.
     * @throws DAOException
     */
    //15
    public TbEmployeeBean[] save(TbEmployeeBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of TbEmployeeBean beans into the database.
     *
     * @param beans the TbEmployeeBean bean table to be inserted
     * @return the saved TbEmployeeBean array.
     * @throws DAOException
     */
    //16
    public TbEmployeeBean[] insert(TbEmployeeBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of TbEmployeeBean beans into the database.
     *
     * @param beans the TbEmployeeBean bean table to be inserted
     * @return the saved TbEmployeeBean array.
     * @throws DAOException
     */
    //17
    public TbEmployeeBean[] update(TbEmployeeBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique TbEmployeeBean bean from a template one giving a c
     *
     * @param bean the TbEmployeeBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public TbEmployeeBean loadUniqueUsingTemplate(TbEmployeeBean bean) throws DAOException
    {
         TbEmployeeBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of TbEmployeeBean from a template one.
     *
     * @param bean the TbEmployeeBean template to look for
     * @return all the TbEmployeeBean matching the template
     * @throws DAOException
     */
    //19
    public TbEmployeeBean[] loadUsingTemplate(TbEmployeeBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of TbEmployeeBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbEmployeeBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the TbEmployeeBean matching the template
     * @throws DAOException
     */
    //20
    public TbEmployeeBean[] loadUsingTemplate(TbEmployeeBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of TbEmployeeBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbEmployeeBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the TbEmployeeBean matching the template
     * @throws DAOException
     */
    //20
    public TbEmployeeBean[] loadUsingTemplate(TbEmployeeBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_employee ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a TbEmployeeBean template.
     *
     * @param bean the TbEmployeeBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(TbEmployeeBean bean) throws DAOException
    {
        if (bean.isTbeIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getTbeId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM tb_employee ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

    /**
     * Retrieves an array of TbEmployeeBean using the tbe_fk_1 index.
     *
     * @param tbnId the tbn_id column's value filter.
     * @return an array of TbEmployeeBean
     * @throws DAOException
     */
    public TbEmployeeBean[] loadBytbe_fk_1(Integer tbnId) throws DAOException
    {
        TbEmployeeBean bean = this.createTbEmployeeBean();
        bean.setTbnId(tbnId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbe_fk_1 index.
     *
     * @param tbnId the tbn_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbe_fk_1(Integer tbnId) throws DAOException
    {
        TbEmployeeBean bean = this.createTbEmployeeBean();
        bean.setTbnId(tbnId);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an array of TbEmployeeBean using the tbe_fk_2 index.
     *
     * @param tberId the tber_id column's value filter.
     * @return an array of TbEmployeeBean
     * @throws DAOException
     */
    public TbEmployeeBean[] loadBytbe_fk_2(Integer tberId) throws DAOException
    {
        TbEmployeeBean bean = this.createTbEmployeeBean();
        bean.setTberId(tberId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbe_fk_2 index.
     *
     * @param tberId the tber_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbe_fk_2(Integer tberId) throws DAOException
    {
        TbEmployeeBean bean = this.createTbEmployeeBean();
        bean.setTberId(tberId);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an array of TbEmployeeBean using the tbe_fk_3 index.
     *
     * @param tbptkpId the tbptkp_id column's value filter.
     * @return an array of TbEmployeeBean
     * @throws DAOException
     */
    public TbEmployeeBean[] loadBytbe_fk_3(Integer tbptkpId) throws DAOException
    {
        TbEmployeeBean bean = this.createTbEmployeeBean();
        bean.setTbptkpId(tbptkpId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbe_fk_3 index.
     *
     * @param tbptkpId the tbptkp_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbe_fk_3(Integer tbptkpId) throws DAOException
    {
        TbEmployeeBean bean = this.createTbEmployeeBean();
        bean.setTbptkpId(tbptkpId);
        return deleteUsingTemplate(bean);
    }
    


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table tb_employee.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table tb_employee with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM tb_employee " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table tb_employee with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific TbEmployeeBean bean
     *
     * @param bean the TbEmployeeBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(TbEmployeeBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific TbEmployeeBean bean , given the start row and number of rows.
     *
     * @param bean the TbEmployeeBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbEmployeeBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific TbEmployeeBean bean given the start row and number of rows and the search type
     *
     * @param bean the TbEmployeeBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbEmployeeBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM tb_employee");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, TbEmployeeBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbptkpIdModified()) {
                _dirtyCount ++;
                if (bean.getTbptkpId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbptkp_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbptkp_id = ?");
                }
            }
            if (bean.isTberIdModified()) {
                _dirtyCount ++;
                if (bean.getTberId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tber_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tber_id = ?");
                }
            }
            if (bean.isTbnIdModified()) {
                _dirtyCount ++;
                if (bean.getTbnId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbn_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbn_id = ?");
                }
            }
            if (bean.isTbeJoinedDateModified()) {
                _dirtyCount ++;
                if (bean.getTbeJoinedDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_joined_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_joined_date = ?");
                }
            }
            if (bean.isTbeStatusModified()) {
                _dirtyCount ++;
                if (bean.getTbeStatus() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_status IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_status = ?");
                }
            }
            if (bean.isTbeDriverLicenseExpiryModified()) {
                _dirtyCount ++;
                if (bean.getTbeDriverLicenseExpiry() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_expiry IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_expiry = ?");
                }
            }
            if (bean.isTbePhoneModified()) {
                _dirtyCount ++;
                if (bean.getTbePhone() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_phone IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_phone ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeMobileModified()) {
                _dirtyCount ++;
                if (bean.getTbeMobile() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_mobile IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_mobile ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeDriverLicenseNoModified()) {
                _dirtyCount ++;
                if (bean.getTbeDriverLicenseNo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_no IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_driver_license_no ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeGenderModified()) {
                _dirtyCount ++;
                if (bean.getTbeGender() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_gender IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_gender = ?");
                }
            }
            if (bean.isTbeSmokerModified()) {
                _dirtyCount ++;
                if (bean.getTbeSmoker() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_smoker IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_smoker = ?");
                }
            }
            if (bean.isTbeMaritalStatusModified()) {
                _dirtyCount ++;
                if (bean.getTbeMaritalStatus() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_marital_status IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_marital_status = ?");
                }
            }
            if (bean.isTbeDobModified()) {
                _dirtyCount ++;
                if (bean.getTbeDob() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_dob IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_dob = ?");
                }
            }
            if (bean.isTbeTaxNoDateModified()) {
                _dirtyCount ++;
                if (bean.getTbeTaxNoDate() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_tax_no_date IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_tax_no_date = ?");
                }
            }
            if (bean.isTbeTaxNoModified()) {
                _dirtyCount ++;
                if (bean.getTbeTaxNo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_tax_no IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_tax_no ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeIdNoModified()) {
                _dirtyCount ++;
                if (bean.getTbeIdNo() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id_no IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id_no ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbePhotoFileNameModified()) {
                _dirtyCount ++;
                if (bean.getTbePhotoFileName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_photo_file_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_photo_file_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeNickNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeNickName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_nick_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_nick_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeLastNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeLastName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_last_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_last_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeMiddleNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeMiddleName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_middle_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_middle_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeFirstNameModified()) {
                _dirtyCount ++;
                if (bean.getTbeFirstName() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_first_name IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_first_name ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeEmailModified()) {
                _dirtyCount ++;
                if (bean.getTbeEmail() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_email IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_email ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeEmployeeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeEmployeeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_employee_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_employee_id ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, TbEmployeeBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbptkpIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbptkpId() + "]");
                if (bean.getTbptkpId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbptkpId()); }
            }
            if (bean.isTberIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTberId() + "]");
                if (bean.getTberId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTberId()); }
            }
            if (bean.isTbnIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbnId() + "]");
                if (bean.getTbnId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbnId()); }
            }
            if (bean.isTbeJoinedDateModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeJoinedDate() + "]");
                if (bean.getTbeJoinedDate() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbeJoinedDate()); }
            }
            if (bean.isTbeStatusModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeStatus() + "]");
                if (bean.getTbeStatus() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeStatus()); }
            }
            if (bean.isTbeDriverLicenseExpiryModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDriverLicenseExpiry() + "]");
                if (bean.getTbeDriverLicenseExpiry() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbeDriverLicenseExpiry()); }
            }
            if (bean.isTbePhoneModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbePhone() + "]");
                        if (bean.getTbePhone() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbePhone()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbePhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbePhone() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbePhone() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbePhone());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbePhone() + "]");
                        if (bean.getTbePhone() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbePhone() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeMobileModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeMobile() + "]");
                        if (bean.getTbeMobile() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeMobile()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeMobile() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeMobile() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeMobile() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeMobile());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeMobile() + "]");
                        if (bean.getTbeMobile() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeMobile() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeDriverLicenseNoModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDriverLicenseNo() + "]");
                        if (bean.getTbeDriverLicenseNo() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeDriverLicenseNo()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeDriverLicenseNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeDriverLicenseNo() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDriverLicenseNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeDriverLicenseNo());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeDriverLicenseNo() + "]");
                        if (bean.getTbeDriverLicenseNo() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeDriverLicenseNo() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeGenderModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeGender() + "]");
                if (bean.getTbeGender() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeGender()); }
            }
            if (bean.isTbeSmokerModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeSmoker() + "]");
                if (bean.getTbeSmoker() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeSmoker()); }
            }
            if (bean.isTbeMaritalStatusModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeMaritalStatus() + "]");
                if (bean.getTbeMaritalStatus() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeMaritalStatus()); }
            }
            if (bean.isTbeDobModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeDob() + "]");
                if (bean.getTbeDob() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbeDob()); }
            }
            if (bean.isTbeTaxNoDateModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeTaxNoDate() + "]");
                if (bean.getTbeTaxNoDate() == null) { ps.setNull(++_dirtyCount, Types.TIMESTAMP); } else { ps.setTimestamp(++_dirtyCount, bean.getTbeTaxNoDate()); }
            }
            if (bean.isTbeTaxNoModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeTaxNo() + "]");
                        if (bean.getTbeTaxNo() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeTaxNo()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeTaxNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeTaxNo() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeTaxNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeTaxNo());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeTaxNo() + "]");
                        if (bean.getTbeTaxNo() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeTaxNo() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeIdNoModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeIdNo() + "]");
                        if (bean.getTbeIdNo() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeIdNo()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeIdNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeIdNo() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeIdNo() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeIdNo());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeIdNo() + "]");
                        if (bean.getTbeIdNo() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeIdNo() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbePhotoFileNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbePhotoFileName() + "]");
                        if (bean.getTbePhotoFileName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbePhotoFileName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbePhotoFileName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbePhotoFileName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbePhotoFileName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbePhotoFileName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbePhotoFileName() + "]");
                        if (bean.getTbePhotoFileName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbePhotoFileName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "]");
                        if (bean.getTbeName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeName() + "]");
                        if (bean.getTbeName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeNickNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeNickName() + "]");
                        if (bean.getTbeNickName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeNickName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeNickName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeNickName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeNickName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeNickName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeNickName() + "]");
                        if (bean.getTbeNickName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeNickName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeLastNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeLastName() + "]");
                        if (bean.getTbeLastName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeLastName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeLastName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeLastName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeLastName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeLastName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeLastName() + "]");
                        if (bean.getTbeLastName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeLastName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeMiddleNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeMiddleName() + "]");
                        if (bean.getTbeMiddleName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeMiddleName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeMiddleName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeMiddleName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeMiddleName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeMiddleName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeMiddleName() + "]");
                        if (bean.getTbeMiddleName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeMiddleName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeFirstNameModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeFirstName() + "]");
                        if (bean.getTbeFirstName() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeFirstName()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeFirstName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeFirstName() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeFirstName() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeFirstName());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeFirstName() + "]");
                        if (bean.getTbeFirstName() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeFirstName() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeEmailModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmail() + "]");
                        if (bean.getTbeEmail() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmail()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmail() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmail() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmail() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmail());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmail() + "]");
                        if (bean.getTbeEmail() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmail() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeEmployeeIdModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmployeeId() + "]");
                        if (bean.getTbeEmployeeId() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmployeeId()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmployeeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmployeeId() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeEmployeeId() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbeEmployeeId());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbeEmployeeId() + "]");
                        if (bean.getTbeEmployeeId() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbeEmployeeId() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeId() + "]");
                if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of TbEmployeeBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting TbEmployeeBean table
     * @throws DAOException
     */
    //28
    public TbEmployeeBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (TbEmployeeBean[])v.toArray(new TbEmployeeBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the tb_employee on a TbEmployeeBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbEmployeeBean bean
     * @throws DAOException
     */
    //29
    public TbEmployeeBean decodeRow(ResultSet rs) throws DAOException
    {
        TbEmployeeBean bean = this.createTbEmployeeBean();
        try
        {
            bean.setTbptkpId(Manager.getInteger(rs, 1));
            bean.setTberId(Manager.getInteger(rs, 2));
            bean.setTbnId(Manager.getInteger(rs, 3));
            bean.setTbeJoinedDate(rs.getTimestamp(4));
            bean.setTbeStatus(Manager.getInteger(rs, 5));
            bean.setTbeDriverLicenseExpiry(rs.getTimestamp(6));
            bean.setTbePhone(rs.getString(7));
            bean.setTbeMobile(rs.getString(8));
            bean.setTbeDriverLicenseNo(rs.getString(9));
            bean.setTbeGender(Manager.getInteger(rs, 10));
            bean.setTbeSmoker(Manager.getInteger(rs, 11));
            bean.setTbeMaritalStatus(Manager.getInteger(rs, 12));
            bean.setTbeDob(rs.getTimestamp(13));
            bean.setTbeTaxNoDate(rs.getTimestamp(14));
            bean.setTbeTaxNo(rs.getString(15));
            bean.setTbeIdNo(rs.getString(16));
            bean.setTbePhotoFileName(rs.getString(17));
            bean.setTbeName(rs.getString(18));
            bean.setTbeNickName(rs.getString(19));
            bean.setTbeLastName(rs.getString(20));
            bean.setTbeMiddleName(rs.getString(21));
            bean.setTbeFirstName(rs.getString(22));
            bean.setTbeEmail(rs.getString(23));
            bean.setTbeEmployeeId(rs.getString(24));
            bean.setTbeId(Manager.getInteger(rs, 25));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public TbEmployeeBean toBean(TbEmployeeBeanModel beanModel, TbEmployeeBean bean)
    {
		if (beanModel.getTbptkpId() != null)
			bean.setTbptkpId(beanModel.getTbptkpId());

		if (bean.getTbptkpId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbptkpId().getClass().getName()))
			bean.setTbptkpId(beanModel.getTbptkpId());
		
		if (beanModel.getTberId() != null)
			bean.setTberId(beanModel.getTberId());

		if (bean.getTberId() != null)
		if ("java.sql.Timestamp".equals(bean.getTberId().getClass().getName()))
			bean.setTberId(beanModel.getTberId());
		
		if (beanModel.getTbnId() != null)
			bean.setTbnId(beanModel.getTbnId());

		if (bean.getTbnId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbnId().getClass().getName()))
			bean.setTbnId(beanModel.getTbnId());
		
		if (beanModel.getTbeJoinedDate() != null)
			bean.setTbeJoinedDate(beanModel.getTbeJoinedDate());

		if (bean.getTbeJoinedDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeJoinedDate().getClass().getName()))
			bean.setTbeJoinedDate(beanModel.getTbeJoinedDate());
		
		if (beanModel.getTbeStatus() != null)
			bean.setTbeStatus(beanModel.getTbeStatus());

		if (bean.getTbeStatus() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeStatus().getClass().getName()))
			bean.setTbeStatus(beanModel.getTbeStatus());
		
		if (beanModel.getTbeDriverLicenseExpiry() != null)
			bean.setTbeDriverLicenseExpiry(beanModel.getTbeDriverLicenseExpiry());

		if (bean.getTbeDriverLicenseExpiry() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeDriverLicenseExpiry().getClass().getName()))
			bean.setTbeDriverLicenseExpiry(beanModel.getTbeDriverLicenseExpiry());
		
		if (beanModel.getTbePhone() != null)
			bean.setTbePhone(beanModel.getTbePhone());

		if (bean.getTbePhone() != null)
		if ("java.sql.Timestamp".equals(bean.getTbePhone().getClass().getName()))
			bean.setTbePhone(beanModel.getTbePhone());
		
		if (beanModel.getTbeMobile() != null)
			bean.setTbeMobile(beanModel.getTbeMobile());

		if (bean.getTbeMobile() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeMobile().getClass().getName()))
			bean.setTbeMobile(beanModel.getTbeMobile());
		
		if (beanModel.getTbeDriverLicenseNo() != null)
			bean.setTbeDriverLicenseNo(beanModel.getTbeDriverLicenseNo());

		if (bean.getTbeDriverLicenseNo() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeDriverLicenseNo().getClass().getName()))
			bean.setTbeDriverLicenseNo(beanModel.getTbeDriverLicenseNo());
		
		if (beanModel.getTbeGender() != null)
			bean.setTbeGender(beanModel.getTbeGender());

		if (bean.getTbeGender() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeGender().getClass().getName()))
			bean.setTbeGender(beanModel.getTbeGender());
		
		if (beanModel.getTbeSmoker() != null)
			bean.setTbeSmoker(beanModel.getTbeSmoker());

		if (bean.getTbeSmoker() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeSmoker().getClass().getName()))
			bean.setTbeSmoker(beanModel.getTbeSmoker());
		
		if (beanModel.getTbeMaritalStatus() != null)
			bean.setTbeMaritalStatus(beanModel.getTbeMaritalStatus());

		if (bean.getTbeMaritalStatus() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeMaritalStatus().getClass().getName()))
			bean.setTbeMaritalStatus(beanModel.getTbeMaritalStatus());
		
		if (beanModel.getTbeDob() != null)
			bean.setTbeDob(beanModel.getTbeDob());

		if (bean.getTbeDob() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeDob().getClass().getName()))
			bean.setTbeDob(beanModel.getTbeDob());
		
		if (beanModel.getTbeTaxNoDate() != null)
			bean.setTbeTaxNoDate(beanModel.getTbeTaxNoDate());

		if (bean.getTbeTaxNoDate() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeTaxNoDate().getClass().getName()))
			bean.setTbeTaxNoDate(beanModel.getTbeTaxNoDate());
		
		if (beanModel.getTbeTaxNo() != null)
			bean.setTbeTaxNo(beanModel.getTbeTaxNo());

		if (bean.getTbeTaxNo() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeTaxNo().getClass().getName()))
			bean.setTbeTaxNo(beanModel.getTbeTaxNo());
		
		if (beanModel.getTbeIdNo() != null)
			bean.setTbeIdNo(beanModel.getTbeIdNo());

		if (bean.getTbeIdNo() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeIdNo().getClass().getName()))
			bean.setTbeIdNo(beanModel.getTbeIdNo());
		
		if (beanModel.getTbePhotoFileName() != null)
			bean.setTbePhotoFileName(beanModel.getTbePhotoFileName());

		if (bean.getTbePhotoFileName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbePhotoFileName().getClass().getName()))
			bean.setTbePhotoFileName(beanModel.getTbePhotoFileName());
		
		if (beanModel.getTbeName() != null)
			bean.setTbeName(beanModel.getTbeName());

		if (bean.getTbeName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeName().getClass().getName()))
			bean.setTbeName(beanModel.getTbeName());
		
		if (beanModel.getTbeNickName() != null)
			bean.setTbeNickName(beanModel.getTbeNickName());

		if (bean.getTbeNickName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeNickName().getClass().getName()))
			bean.setTbeNickName(beanModel.getTbeNickName());
		
		if (beanModel.getTbeLastName() != null)
			bean.setTbeLastName(beanModel.getTbeLastName());

		if (bean.getTbeLastName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeLastName().getClass().getName()))
			bean.setTbeLastName(beanModel.getTbeLastName());
		
		if (beanModel.getTbeMiddleName() != null)
			bean.setTbeMiddleName(beanModel.getTbeMiddleName());

		if (bean.getTbeMiddleName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeMiddleName().getClass().getName()))
			bean.setTbeMiddleName(beanModel.getTbeMiddleName());
		
		if (beanModel.getTbeFirstName() != null)
			bean.setTbeFirstName(beanModel.getTbeFirstName());

		if (bean.getTbeFirstName() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeFirstName().getClass().getName()))
			bean.setTbeFirstName(beanModel.getTbeFirstName());
		
		if (beanModel.getTbeEmail() != null)
			bean.setTbeEmail(beanModel.getTbeEmail());

		if (bean.getTbeEmail() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeEmail().getClass().getName()))
			bean.setTbeEmail(beanModel.getTbeEmail());
		
		if (beanModel.getTbeEmployeeId() != null)
			bean.setTbeEmployeeId(beanModel.getTbeEmployeeId());

		if (bean.getTbeEmployeeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeEmployeeId().getClass().getName()))
			bean.setTbeEmployeeId(beanModel.getTbeEmployeeId());
		
		if (beanModel.getTbeId() != null)
			bean.setTbeId(beanModel.getTbeId());

		if (bean.getTbeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeId().getClass().getName()))
			bean.setTbeId(beanModel.getTbeId());
		
        return bean;
    }
	
    //29AA
    public TbEmployeeBean[] toBeans(TbEmployeeBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	TbEmployeeBean beans[] = new TbEmployeeBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public TbEmployeeBeanModel toBeanModel(TbEmployeeBean bean)
    {
    	TbEmployeeBeanModel beanModel = new TbEmployeeBeanModel();
		beanModel.setTbptkpId(bean.getTbptkpId());
		beanModel.setTberId(bean.getTberId());
		beanModel.setTbnId(bean.getTbnId());
		beanModel.setTbeJoinedDate(bean.getTbeJoinedDate());
		beanModel.setTbeStatus(bean.getTbeStatus());
		beanModel.setTbeDriverLicenseExpiry(bean.getTbeDriverLicenseExpiry());
		beanModel.setTbePhone(bean.getTbePhone());
		beanModel.setTbeMobile(bean.getTbeMobile());
		beanModel.setTbeDriverLicenseNo(bean.getTbeDriverLicenseNo());
		beanModel.setTbeGender(bean.getTbeGender());
		beanModel.setTbeSmoker(bean.getTbeSmoker());
		beanModel.setTbeMaritalStatus(bean.getTbeMaritalStatus());
		beanModel.setTbeDob(bean.getTbeDob());
		beanModel.setTbeTaxNoDate(bean.getTbeTaxNoDate());
		beanModel.setTbeTaxNo(bean.getTbeTaxNo());
		beanModel.setTbeIdNo(bean.getTbeIdNo());
		beanModel.setTbePhotoFileName(bean.getTbePhotoFileName());
		beanModel.setTbeName(bean.getTbeName());
		beanModel.setTbeNickName(bean.getTbeNickName());
		beanModel.setTbeLastName(bean.getTbeLastName());
		beanModel.setTbeMiddleName(bean.getTbeMiddleName());
		beanModel.setTbeFirstName(bean.getTbeFirstName());
		beanModel.setTbeEmail(bean.getTbeEmail());
		beanModel.setTbeEmployeeId(bean.getTbeEmployeeId());
		beanModel.setTbeId(bean.getTbeId());
		return beanModel;
    }
    
    //29CC
    public TbEmployeeBeanModel[] toBeanModels(TbEmployeeBean beans[])
    {
    	int beansCount = beans.length;
    	TbEmployeeBeanModel beanModels[] = new TbEmployeeBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the tb_employee table on a TbEmployeeBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting TbEmployeeBean bean
     * @throws DAOException
     */
    //30
    public TbEmployeeBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        TbEmployeeBean bean = this.createTbEmployeeBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBPTKP_ID:
                        ++pos;
                        bean.setTbptkpId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBER_ID:
                        ++pos;
                        bean.setTberId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBN_ID:
                        ++pos;
                        bean.setTbnId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_JOINED_DATE:
                        ++pos;
                        bean.setTbeJoinedDate(rs.getTimestamp(pos));
                        break;
                    case ID_TBE_STATUS:
                        ++pos;
                        bean.setTbeStatus(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_DRIVER_LICENSE_EXPIRY:
                        ++pos;
                        bean.setTbeDriverLicenseExpiry(rs.getTimestamp(pos));
                        break;
                    case ID_TBE_PHONE:
                        ++pos;
                        bean.setTbePhone(rs.getString(pos));
                        break;
                    case ID_TBE_MOBILE:
                        ++pos;
                        bean.setTbeMobile(rs.getString(pos));
                        break;
                    case ID_TBE_DRIVER_LICENSE_NO:
                        ++pos;
                        bean.setTbeDriverLicenseNo(rs.getString(pos));
                        break;
                    case ID_TBE_GENDER:
                        ++pos;
                        bean.setTbeGender(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_SMOKER:
                        ++pos;
                        bean.setTbeSmoker(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_MARITAL_STATUS:
                        ++pos;
                        bean.setTbeMaritalStatus(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBE_DOB:
                        ++pos;
                        bean.setTbeDob(rs.getTimestamp(pos));
                        break;
                    case ID_TBE_TAX_NO_DATE:
                        ++pos;
                        bean.setTbeTaxNoDate(rs.getTimestamp(pos));
                        break;
                    case ID_TBE_TAX_NO:
                        ++pos;
                        bean.setTbeTaxNo(rs.getString(pos));
                        break;
                    case ID_TBE_ID_NO:
                        ++pos;
                        bean.setTbeIdNo(rs.getString(pos));
                        break;
                    case ID_TBE_PHOTO_FILE_NAME:
                        ++pos;
                        bean.setTbePhotoFileName(rs.getString(pos));
                        break;
                    case ID_TBE_NAME:
                        ++pos;
                        bean.setTbeName(rs.getString(pos));
                        break;
                    case ID_TBE_NICK_NAME:
                        ++pos;
                        bean.setTbeNickName(rs.getString(pos));
                        break;
                    case ID_TBE_LAST_NAME:
                        ++pos;
                        bean.setTbeLastName(rs.getString(pos));
                        break;
                    case ID_TBE_MIDDLE_NAME:
                        ++pos;
                        bean.setTbeMiddleName(rs.getString(pos));
                        break;
                    case ID_TBE_FIRST_NAME:
                        ++pos;
                        bean.setTbeFirstName(rs.getString(pos));
                        break;
                    case ID_TBE_EMAIL:
                        ++pos;
                        bean.setTbeEmail(rs.getString(pos));
                        break;
                    case ID_TBE_EMPLOYEE_ID:
                        ++pos;
                        bean.setTbeEmployeeId(rs.getString(pos));
                        break;
                    case ID_TBE_ID:
                        ++pos;
                        bean.setTbeId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the tb_employee on a TbEmployeeBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbEmployeeBean bean
     * @throws DAOException
     */
    //31
    public TbEmployeeBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        TbEmployeeBean bean = this.createTbEmployeeBean();
        try
        {
            bean.setTbptkpId(Manager.getInteger(rs, "tbptkp_id"));
            bean.setTberId(Manager.getInteger(rs, "tber_id"));
            bean.setTbnId(Manager.getInteger(rs, "tbn_id"));
            bean.setTbeJoinedDate(rs.getTimestamp("tbe_joined_date"));
            bean.setTbeStatus(Manager.getInteger(rs, "tbe_status"));
            bean.setTbeDriverLicenseExpiry(rs.getTimestamp("tbe_driver_license_expiry"));
            bean.setTbePhone(rs.getString("tbe_phone"));
            bean.setTbeMobile(rs.getString("tbe_mobile"));
            bean.setTbeDriverLicenseNo(rs.getString("tbe_driver_license_no"));
            bean.setTbeGender(Manager.getInteger(rs, "tbe_gender"));
            bean.setTbeSmoker(Manager.getInteger(rs, "tbe_smoker"));
            bean.setTbeMaritalStatus(Manager.getInteger(rs, "tbe_marital_status"));
            bean.setTbeDob(rs.getTimestamp("tbe_dob"));
            bean.setTbeTaxNoDate(rs.getTimestamp("tbe_tax_no_date"));
            bean.setTbeTaxNo(rs.getString("tbe_tax_no"));
            bean.setTbeIdNo(rs.getString("tbe_id_no"));
            bean.setTbePhotoFileName(rs.getString("tbe_photo_file_name"));
            bean.setTbeName(rs.getString("tbe_name"));
            bean.setTbeNickName(rs.getString("tbe_nick_name"));
            bean.setTbeLastName(rs.getString("tbe_last_name"));
            bean.setTbeMiddleName(rs.getString("tbe_middle_name"));
            bean.setTbeFirstName(rs.getString("tbe_first_name"));
            bean.setTbeEmail(rs.getString("tbe_email"));
            bean.setTbeEmployeeId(rs.getString("tbe_employee_id"));
            bean.setTbeId(Manager.getInteger(rs, "tbe_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TbEmployeeBean
     * @throws DAOException
     */
    //32
    public TbEmployeeBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TbEmployeeBean
     * @throws DAOException
     */
    //33
    public TbEmployeeBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (TbEmployeeBean[])v.toArray(new TbEmployeeBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of TbEmployeeBean
     * @throws DAOException
     */
    //34
    public TbEmployeeBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private TbEmployeeListener listener = null;

    /**
     * Registers a unique TbEmployeeListener listener.
     */
    //35
    public void registerListener(TbEmployeeListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the TbEmployeeBean bean.
     *
     * @param bean the TbEmployeeBean bean to be saved
     */
    //36
    private void beforeInsert(TbEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the TbEmployeeBean bean.
     *
     * @param bean the TbEmployeeBean bean to be saved
     */
    //37
    private void afterInsert(TbEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the TbEmployeeBean bean.
     *
     * @param bean the TbEmployeeBean bean to be updated
     */
    //38
    private void beforeUpdate(TbEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the TbEmployeeBean bean.
     *
     * @param bean the TbEmployeeBean bean to be updated
     */
    //39
    private void afterUpdate(TbEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the TbEmployeeBean bean.
     *
     * @param bean the TbEmployeeBean bean to be deleted
     */
    private void beforeDelete(TbEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the TbEmployeeBean bean.
     *
     * @param bean the TbEmployeeBean bean to be deleted
     */
    private void afterDelete(TbEmployeeBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
