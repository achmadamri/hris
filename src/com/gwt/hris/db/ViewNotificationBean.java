// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * ViewNotificationBean is a mapping of view_notification Table.
 * @author sql2java
*/
public class ViewNotificationBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 514636043589563697L;
	
    private java.sql.Timestamp tbnCreateDate;

    private boolean tbnCreateDateIsModified = false;
    private boolean tbnCreateDateIsInitialized = false;

    private java.sql.Timestamp tbnReadDate;

    private boolean tbnReadDateIsModified = false;
    private boolean tbnReadDateIsInitialized = false;

    private java.sql.Timestamp tbnSentDate;

    private boolean tbnSentDateIsModified = false;
    private boolean tbnSentDateIsInitialized = false;

    private String tbnData;

    private boolean tbnDataIsModified = false;
    private boolean tbnDataIsInitialized = false;

    private String tbcdOtherEmailTo;

    private boolean tbcdOtherEmailToIsModified = false;
    private boolean tbcdOtherEmailToIsInitialized = false;

    private String tbeEmailTo;

    private boolean tbeEmailToIsModified = false;
    private boolean tbeEmailToIsInitialized = false;

    private String tbeNameTo;

    private boolean tbeNameToIsModified = false;
    private boolean tbeNameToIsInitialized = false;

    private Integer tbeIdTo;

    private boolean tbeIdToIsModified = false;
    private boolean tbeIdToIsInitialized = false;

    private String tbcdOtherEmailFrom;

    private boolean tbcdOtherEmailFromIsModified = false;
    private boolean tbcdOtherEmailFromIsInitialized = false;

    private String tbeEmailFrom;

    private boolean tbeEmailFromIsModified = false;
    private boolean tbeEmailFromIsInitialized = false;

    private String tbeNameFrom;

    private boolean tbeNameFromIsModified = false;
    private boolean tbeNameFromIsInitialized = false;

    private Integer tbeIdFrom;

    private boolean tbeIdFromIsModified = false;
    private boolean tbeIdFromIsInitialized = false;

    private String tbnuName;

    private boolean tbnuNameIsModified = false;
    private boolean tbnuNameIsInitialized = false;

    private Integer tbnuId;

    private boolean tbnuIdIsModified = false;
    private boolean tbnuIdIsInitialized = false;

    private String tbntSubject;

    private boolean tbntSubjectIsModified = false;
    private boolean tbntSubjectIsInitialized = false;

    private Integer tbntId;

    private boolean tbntIdIsModified = false;
    private boolean tbntIdIsInitialized = false;

    private String tbncName;

    private boolean tbncNameIsModified = false;
    private boolean tbncNameIsInitialized = false;

    private Integer tbncId;

    private boolean tbncIdIsModified = false;
    private boolean tbncIdIsInitialized = false;

    private Integer tbnId;

    private boolean tbnIdIsModified = false;
    private boolean tbnIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a ViewNotificationBean is via the createViewNotificationBean method in ViewNotificationManager or
     * via the factory class ViewNotificationFactory create method
     */
    protected ViewNotificationBean()
    {
    }

    /**
     * Getter method for tbnCreateDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbn_create_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbnCreateDate
     */
    public java.sql.Timestamp getTbnCreateDate()
    {
        return tbnCreateDate;
    }

    /**
     * Setter method for tbnCreateDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnCreateDate
     */
    public void setTbnCreateDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbnCreateDate != null && (newVal.compareTo(tbnCreateDate) == 0)) ||
            (newVal == null && tbnCreateDate == null && tbnCreateDateIsInitialized)) {
            return;
        }
        tbnCreateDate = newVal;
        tbnCreateDateIsModified = true;
        tbnCreateDateIsInitialized = true;
    }

    /**
     * Setter method for tbnCreateDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnCreateDate
     */
    public void setTbnCreateDate(long newVal)
    {
        setTbnCreateDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbnCreateDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnCreateDateModified()
    {
        return tbnCreateDateIsModified;
    }

    /**
     * Determines if the tbnCreateDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnCreateDateInitialized()
    {
        return tbnCreateDateIsInitialized;
    }

    /**
     * Getter method for tbnReadDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbn_read_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbnReadDate
     */
    public java.sql.Timestamp getTbnReadDate()
    {
        return tbnReadDate;
    }

    /**
     * Setter method for tbnReadDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnReadDate
     */
    public void setTbnReadDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbnReadDate != null && (newVal.compareTo(tbnReadDate) == 0)) ||
            (newVal == null && tbnReadDate == null && tbnReadDateIsInitialized)) {
            return;
        }
        tbnReadDate = newVal;
        tbnReadDateIsModified = true;
        tbnReadDateIsInitialized = true;
    }

    /**
     * Setter method for tbnReadDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnReadDate
     */
    public void setTbnReadDate(long newVal)
    {
        setTbnReadDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbnReadDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnReadDateModified()
    {
        return tbnReadDateIsModified;
    }

    /**
     * Determines if the tbnReadDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnReadDateInitialized()
    {
        return tbnReadDateIsInitialized;
    }

    /**
     * Getter method for tbnSentDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbn_sent_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbnSentDate
     */
    public java.sql.Timestamp getTbnSentDate()
    {
        return tbnSentDate;
    }

    /**
     * Setter method for tbnSentDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnSentDate
     */
    public void setTbnSentDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbnSentDate != null && (newVal.compareTo(tbnSentDate) == 0)) ||
            (newVal == null && tbnSentDate == null && tbnSentDateIsInitialized)) {
            return;
        }
        tbnSentDate = newVal;
        tbnSentDateIsModified = true;
        tbnSentDateIsInitialized = true;
    }

    /**
     * Setter method for tbnSentDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnSentDate
     */
    public void setTbnSentDate(long newVal)
    {
        setTbnSentDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbnSentDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnSentDateModified()
    {
        return tbnSentDateIsModified;
    }

    /**
     * Determines if the tbnSentDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnSentDateInitialized()
    {
        return tbnSentDateIsInitialized;
    }

    /**
     * Getter method for tbnData.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbn_data</li>
     * <li>column size: 5000</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbnData
     */
    public String getTbnData()
    {
        return tbnData;
    }

    /**
     * Setter method for tbnData.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnData
     */
    public void setTbnData(String newVal)
    {
        if ((newVal != null && tbnData != null && (newVal.compareTo(tbnData) == 0)) ||
            (newVal == null && tbnData == null && tbnDataIsInitialized)) {
            return;
        }
        tbnData = newVal;
        tbnDataIsModified = true;
        tbnDataIsInitialized = true;
    }

    /**
     * Determines if the tbnData has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnDataModified()
    {
        return tbnDataIsModified;
    }

    /**
     * Determines if the tbnData has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnDataInitialized()
    {
        return tbnDataIsInitialized;
    }

    /**
     * Getter method for tbcdOtherEmailTo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbcd_other_email_to</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdOtherEmailTo
     */
    public String getTbcdOtherEmailTo()
    {
        return tbcdOtherEmailTo;
    }

    /**
     * Setter method for tbcdOtherEmailTo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdOtherEmailTo
     */
    public void setTbcdOtherEmailTo(String newVal)
    {
        if ((newVal != null && tbcdOtherEmailTo != null && (newVal.compareTo(tbcdOtherEmailTo) == 0)) ||
            (newVal == null && tbcdOtherEmailTo == null && tbcdOtherEmailToIsInitialized)) {
            return;
        }
        tbcdOtherEmailTo = newVal;
        tbcdOtherEmailToIsModified = true;
        tbcdOtherEmailToIsInitialized = true;
    }

    /**
     * Determines if the tbcdOtherEmailTo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdOtherEmailToModified()
    {
        return tbcdOtherEmailToIsModified;
    }

    /**
     * Determines if the tbcdOtherEmailTo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdOtherEmailToInitialized()
    {
        return tbcdOtherEmailToIsInitialized;
    }

    /**
     * Getter method for tbeEmailTo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbe_email_to</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEmailTo
     */
    public String getTbeEmailTo()
    {
        return tbeEmailTo;
    }

    /**
     * Setter method for tbeEmailTo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEmailTo
     */
    public void setTbeEmailTo(String newVal)
    {
        if ((newVal != null && tbeEmailTo != null && (newVal.compareTo(tbeEmailTo) == 0)) ||
            (newVal == null && tbeEmailTo == null && tbeEmailToIsInitialized)) {
            return;
        }
        tbeEmailTo = newVal;
        tbeEmailToIsModified = true;
        tbeEmailToIsInitialized = true;
    }

    /**
     * Determines if the tbeEmailTo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEmailToModified()
    {
        return tbeEmailToIsModified;
    }

    /**
     * Determines if the tbeEmailTo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEmailToInitialized()
    {
        return tbeEmailToIsInitialized;
    }

    /**
     * Getter method for tbeNameTo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbe_name_to</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeNameTo
     */
    public String getTbeNameTo()
    {
        return tbeNameTo;
    }

    /**
     * Setter method for tbeNameTo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeNameTo
     */
    public void setTbeNameTo(String newVal)
    {
        if ((newVal != null && tbeNameTo != null && (newVal.compareTo(tbeNameTo) == 0)) ||
            (newVal == null && tbeNameTo == null && tbeNameToIsInitialized)) {
            return;
        }
        tbeNameTo = newVal;
        tbeNameToIsModified = true;
        tbeNameToIsInitialized = true;
    }

    /**
     * Determines if the tbeNameTo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameToModified()
    {
        return tbeNameToIsModified;
    }

    /**
     * Determines if the tbeNameTo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameToInitialized()
    {
        return tbeNameToIsInitialized;
    }

    /**
     * Getter method for tbeIdTo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbe_id_to</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeIdTo
     */
    public Integer getTbeIdTo()
    {
        return tbeIdTo;
    }

    /**
     * Setter method for tbeIdTo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeIdTo
     */
    public void setTbeIdTo(Integer newVal)
    {
        if ((newVal != null && tbeIdTo != null && (newVal.compareTo(tbeIdTo) == 0)) ||
            (newVal == null && tbeIdTo == null && tbeIdToIsInitialized)) {
            return;
        }
        tbeIdTo = newVal;
        tbeIdToIsModified = true;
        tbeIdToIsInitialized = true;
    }

    /**
     * Setter method for tbeIdTo.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeIdTo
     */
    public void setTbeIdTo(int newVal)
    {
        setTbeIdTo(new Integer(newVal));
    }

    /**
     * Determines if the tbeIdTo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdToModified()
    {
        return tbeIdToIsModified;
    }

    /**
     * Determines if the tbeIdTo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdToInitialized()
    {
        return tbeIdToIsInitialized;
    }

    /**
     * Getter method for tbcdOtherEmailFrom.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbcd_other_email_from</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbcdOtherEmailFrom
     */
    public String getTbcdOtherEmailFrom()
    {
        return tbcdOtherEmailFrom;
    }

    /**
     * Setter method for tbcdOtherEmailFrom.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbcdOtherEmailFrom
     */
    public void setTbcdOtherEmailFrom(String newVal)
    {
        if ((newVal != null && tbcdOtherEmailFrom != null && (newVal.compareTo(tbcdOtherEmailFrom) == 0)) ||
            (newVal == null && tbcdOtherEmailFrom == null && tbcdOtherEmailFromIsInitialized)) {
            return;
        }
        tbcdOtherEmailFrom = newVal;
        tbcdOtherEmailFromIsModified = true;
        tbcdOtherEmailFromIsInitialized = true;
    }

    /**
     * Determines if the tbcdOtherEmailFrom has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbcdOtherEmailFromModified()
    {
        return tbcdOtherEmailFromIsModified;
    }

    /**
     * Determines if the tbcdOtherEmailFrom has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbcdOtherEmailFromInitialized()
    {
        return tbcdOtherEmailFromIsInitialized;
    }

    /**
     * Getter method for tbeEmailFrom.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbe_email_from</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeEmailFrom
     */
    public String getTbeEmailFrom()
    {
        return tbeEmailFrom;
    }

    /**
     * Setter method for tbeEmailFrom.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeEmailFrom
     */
    public void setTbeEmailFrom(String newVal)
    {
        if ((newVal != null && tbeEmailFrom != null && (newVal.compareTo(tbeEmailFrom) == 0)) ||
            (newVal == null && tbeEmailFrom == null && tbeEmailFromIsInitialized)) {
            return;
        }
        tbeEmailFrom = newVal;
        tbeEmailFromIsModified = true;
        tbeEmailFromIsInitialized = true;
    }

    /**
     * Determines if the tbeEmailFrom has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeEmailFromModified()
    {
        return tbeEmailFromIsModified;
    }

    /**
     * Determines if the tbeEmailFrom has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeEmailFromInitialized()
    {
        return tbeEmailFromIsInitialized;
    }

    /**
     * Getter method for tbeNameFrom.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbe_name_from</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbeNameFrom
     */
    public String getTbeNameFrom()
    {
        return tbeNameFrom;
    }

    /**
     * Setter method for tbeNameFrom.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeNameFrom
     */
    public void setTbeNameFrom(String newVal)
    {
        if ((newVal != null && tbeNameFrom != null && (newVal.compareTo(tbeNameFrom) == 0)) ||
            (newVal == null && tbeNameFrom == null && tbeNameFromIsInitialized)) {
            return;
        }
        tbeNameFrom = newVal;
        tbeNameFromIsModified = true;
        tbeNameFromIsInitialized = true;
    }

    /**
     * Determines if the tbeNameFrom has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeNameFromModified()
    {
        return tbeNameFromIsModified;
    }

    /**
     * Determines if the tbeNameFrom has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeNameFromInitialized()
    {
        return tbeNameFromIsInitialized;
    }

    /**
     * Getter method for tbeIdFrom.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbe_id_from</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeIdFrom
     */
    public Integer getTbeIdFrom()
    {
        return tbeIdFrom;
    }

    /**
     * Setter method for tbeIdFrom.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeIdFrom
     */
    public void setTbeIdFrom(Integer newVal)
    {
        if ((newVal != null && tbeIdFrom != null && (newVal.compareTo(tbeIdFrom) == 0)) ||
            (newVal == null && tbeIdFrom == null && tbeIdFromIsInitialized)) {
            return;
        }
        tbeIdFrom = newVal;
        tbeIdFromIsModified = true;
        tbeIdFromIsInitialized = true;
    }

    /**
     * Setter method for tbeIdFrom.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeIdFrom
     */
    public void setTbeIdFrom(int newVal)
    {
        setTbeIdFrom(new Integer(newVal));
    }

    /**
     * Determines if the tbeIdFrom has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdFromModified()
    {
        return tbeIdFromIsModified;
    }

    /**
     * Determines if the tbeIdFrom has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdFromInitialized()
    {
        return tbeIdFromIsInitialized;
    }

    /**
     * Getter method for tbnuName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbnu_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbnuName
     */
    public String getTbnuName()
    {
        return tbnuName;
    }

    /**
     * Setter method for tbnuName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnuName
     */
    public void setTbnuName(String newVal)
    {
        if ((newVal != null && tbnuName != null && (newVal.compareTo(tbnuName) == 0)) ||
            (newVal == null && tbnuName == null && tbnuNameIsInitialized)) {
            return;
        }
        tbnuName = newVal;
        tbnuNameIsModified = true;
        tbnuNameIsInitialized = true;
    }

    /**
     * Determines if the tbnuName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnuNameModified()
    {
        return tbnuNameIsModified;
    }

    /**
     * Determines if the tbnuName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnuNameInitialized()
    {
        return tbnuNameIsInitialized;
    }

    /**
     * Getter method for tbnuId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbnu_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbnuId
     */
    public Integer getTbnuId()
    {
        return tbnuId;
    }

    /**
     * Setter method for tbnuId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnuId
     */
    public void setTbnuId(Integer newVal)
    {
        if ((newVal != null && tbnuId != null && (newVal.compareTo(tbnuId) == 0)) ||
            (newVal == null && tbnuId == null && tbnuIdIsInitialized)) {
            return;
        }
        tbnuId = newVal;
        tbnuIdIsModified = true;
        tbnuIdIsInitialized = true;
    }

    /**
     * Setter method for tbnuId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnuId
     */
    public void setTbnuId(int newVal)
    {
        setTbnuId(new Integer(newVal));
    }

    /**
     * Determines if the tbnuId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnuIdModified()
    {
        return tbnuIdIsModified;
    }

    /**
     * Determines if the tbnuId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnuIdInitialized()
    {
        return tbnuIdIsInitialized;
    }

    /**
     * Getter method for tbntSubject.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbnt_subject</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbntSubject
     */
    public String getTbntSubject()
    {
        return tbntSubject;
    }

    /**
     * Setter method for tbntSubject.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbntSubject
     */
    public void setTbntSubject(String newVal)
    {
        if ((newVal != null && tbntSubject != null && (newVal.compareTo(tbntSubject) == 0)) ||
            (newVal == null && tbntSubject == null && tbntSubjectIsInitialized)) {
            return;
        }
        tbntSubject = newVal;
        tbntSubjectIsModified = true;
        tbntSubjectIsInitialized = true;
    }

    /**
     * Determines if the tbntSubject has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbntSubjectModified()
    {
        return tbntSubjectIsModified;
    }

    /**
     * Determines if the tbntSubject has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbntSubjectInitialized()
    {
        return tbntSubjectIsInitialized;
    }

    /**
     * Getter method for tbntId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbnt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbntId
     */
    public Integer getTbntId()
    {
        return tbntId;
    }

    /**
     * Setter method for tbntId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbntId
     */
    public void setTbntId(Integer newVal)
    {
        if ((newVal != null && tbntId != null && (newVal.compareTo(tbntId) == 0)) ||
            (newVal == null && tbntId == null && tbntIdIsInitialized)) {
            return;
        }
        tbntId = newVal;
        tbntIdIsModified = true;
        tbntIdIsInitialized = true;
    }

    /**
     * Setter method for tbntId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbntId
     */
    public void setTbntId(int newVal)
    {
        setTbntId(new Integer(newVal));
    }

    /**
     * Determines if the tbntId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbntIdModified()
    {
        return tbntIdIsModified;
    }

    /**
     * Determines if the tbntId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbntIdInitialized()
    {
        return tbntIdIsInitialized;
    }

    /**
     * Getter method for tbncName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbnc_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbncName
     */
    public String getTbncName()
    {
        return tbncName;
    }

    /**
     * Setter method for tbncName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbncName
     */
    public void setTbncName(String newVal)
    {
        if ((newVal != null && tbncName != null && (newVal.compareTo(tbncName) == 0)) ||
            (newVal == null && tbncName == null && tbncNameIsInitialized)) {
            return;
        }
        tbncName = newVal;
        tbncNameIsModified = true;
        tbncNameIsInitialized = true;
    }

    /**
     * Determines if the tbncName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbncNameModified()
    {
        return tbncNameIsModified;
    }

    /**
     * Determines if the tbncName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbncNameInitialized()
    {
        return tbncNameIsInitialized;
    }

    /**
     * Getter method for tbncId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbnc_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbncId
     */
    public Integer getTbncId()
    {
        return tbncId;
    }

    /**
     * Setter method for tbncId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbncId
     */
    public void setTbncId(Integer newVal)
    {
        if ((newVal != null && tbncId != null && (newVal.compareTo(tbncId) == 0)) ||
            (newVal == null && tbncId == null && tbncIdIsInitialized)) {
            return;
        }
        tbncId = newVal;
        tbncIdIsModified = true;
        tbncIdIsInitialized = true;
    }

    /**
     * Setter method for tbncId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbncId
     */
    public void setTbncId(int newVal)
    {
        setTbncId(new Integer(newVal));
    }

    /**
     * Determines if the tbncId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbncIdModified()
    {
        return tbncIdIsModified;
    }

    /**
     * Determines if the tbncId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbncIdInitialized()
    {
        return tbncIdIsInitialized;
    }

    /**
     * Getter method for tbnId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: view_notification.tbn_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbnId
     */
    public Integer getTbnId()
    {
        return tbnId;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(Integer newVal)
    {
        if ((newVal != null && tbnId != null && (newVal.compareTo(tbnId) == 0)) ||
            (newVal == null && tbnId == null && tbnIdIsInitialized)) {
            return;
        }
        tbnId = newVal;
        tbnIdIsModified = true;
        tbnIdIsInitialized = true;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(int newVal)
    {
        setTbnId(new Integer(newVal));
    }

    /**
     * Determines if the tbnId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnIdModified()
    {
        return tbnIdIsModified;
    }

    /**
     * Determines if the tbnId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnIdInitialized()
    {
        return tbnIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbnCreateDateIsModified 		|| tbnReadDateIsModified  		|| tbnSentDateIsModified  		|| tbnDataIsModified  		|| tbcdOtherEmailToIsModified  		|| tbeEmailToIsModified  		|| tbeNameToIsModified  		|| tbeIdToIsModified  		|| tbcdOtherEmailFromIsModified  		|| tbeEmailFromIsModified  		|| tbeNameFromIsModified  		|| tbeIdFromIsModified  		|| tbnuNameIsModified  		|| tbnuIdIsModified  		|| tbntSubjectIsModified  		|| tbntIdIsModified  		|| tbncNameIsModified  		|| tbncIdIsModified  		|| tbnIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbnCreateDateIsModified = false;
        tbnReadDateIsModified = false;
        tbnSentDateIsModified = false;
        tbnDataIsModified = false;
        tbcdOtherEmailToIsModified = false;
        tbeEmailToIsModified = false;
        tbeNameToIsModified = false;
        tbeIdToIsModified = false;
        tbcdOtherEmailFromIsModified = false;
        tbeEmailFromIsModified = false;
        tbeNameFromIsModified = false;
        tbeIdFromIsModified = false;
        tbnuNameIsModified = false;
        tbnuIdIsModified = false;
        tbntSubjectIsModified = false;
        tbntIdIsModified = false;
        tbncNameIsModified = false;
        tbncIdIsModified = false;
        tbnIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(ViewNotificationBean bean)
    {
        setTbnCreateDate(bean.getTbnCreateDate());
        setTbnReadDate(bean.getTbnReadDate());
        setTbnSentDate(bean.getTbnSentDate());
        setTbnData(bean.getTbnData());
        setTbcdOtherEmailTo(bean.getTbcdOtherEmailTo());
        setTbeEmailTo(bean.getTbeEmailTo());
        setTbeNameTo(bean.getTbeNameTo());
        setTbeIdTo(bean.getTbeIdTo());
        setTbcdOtherEmailFrom(bean.getTbcdOtherEmailFrom());
        setTbeEmailFrom(bean.getTbeEmailFrom());
        setTbeNameFrom(bean.getTbeNameFrom());
        setTbeIdFrom(bean.getTbeIdFrom());
        setTbnuName(bean.getTbnuName());
        setTbnuId(bean.getTbnuId());
        setTbntSubject(bean.getTbntSubject());
        setTbntId(bean.getTbntId());
        setTbncName(bean.getTbncName());
        setTbncId(bean.getTbncId());
        setTbnId(bean.getTbnId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbn_create_date", getTbnCreateDate() == null ? "" : getTbnCreateDate().toString());
        dictionnary.put("tbn_read_date", getTbnReadDate() == null ? "" : getTbnReadDate().toString());
        dictionnary.put("tbn_sent_date", getTbnSentDate() == null ? "" : getTbnSentDate().toString());
        dictionnary.put("tbn_data", getTbnData() == null ? "" : getTbnData().toString());
        dictionnary.put("tbcd_other_email_to", getTbcdOtherEmailTo() == null ? "" : getTbcdOtherEmailTo().toString());
        dictionnary.put("tbe_email_to", getTbeEmailTo() == null ? "" : getTbeEmailTo().toString());
        dictionnary.put("tbe_name_to", getTbeNameTo() == null ? "" : getTbeNameTo().toString());
        dictionnary.put("tbe_id_to", getTbeIdTo() == null ? "" : getTbeIdTo().toString());
        dictionnary.put("tbcd_other_email_from", getTbcdOtherEmailFrom() == null ? "" : getTbcdOtherEmailFrom().toString());
        dictionnary.put("tbe_email_from", getTbeEmailFrom() == null ? "" : getTbeEmailFrom().toString());
        dictionnary.put("tbe_name_from", getTbeNameFrom() == null ? "" : getTbeNameFrom().toString());
        dictionnary.put("tbe_id_from", getTbeIdFrom() == null ? "" : getTbeIdFrom().toString());
        dictionnary.put("tbnu_name", getTbnuName() == null ? "" : getTbnuName().toString());
        dictionnary.put("tbnu_id", getTbnuId() == null ? "" : getTbnuId().toString());
        dictionnary.put("tbnt_subject", getTbntSubject() == null ? "" : getTbntSubject().toString());
        dictionnary.put("tbnt_id", getTbntId() == null ? "" : getTbntId().toString());
        dictionnary.put("tbnc_name", getTbncName() == null ? "" : getTbncName().toString());
        dictionnary.put("tbnc_id", getTbncId() == null ? "" : getTbncId().toString());
        dictionnary.put("tbn_id", getTbnId() == null ? "" : getTbnId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     * no primary key, the regular dictionnary is returned
     */
    public Map getPkDictionnary()
    {
        return getDictionnary();
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbn_create_date".equalsIgnoreCase(column) || "tbnCreateDate".equalsIgnoreCase(column)) {
            return getTbnCreateDate() == null ? "" : getTbnCreateDate().toString();
        } else if ("tbn_read_date".equalsIgnoreCase(column) || "tbnReadDate".equalsIgnoreCase(column)) {
            return getTbnReadDate() == null ? "" : getTbnReadDate().toString();
        } else if ("tbn_sent_date".equalsIgnoreCase(column) || "tbnSentDate".equalsIgnoreCase(column)) {
            return getTbnSentDate() == null ? "" : getTbnSentDate().toString();
        } else if ("tbn_data".equalsIgnoreCase(column) || "tbnData".equalsIgnoreCase(column)) {
            return getTbnData() == null ? "" : getTbnData().toString();
        } else if ("tbcd_other_email_to".equalsIgnoreCase(column) || "tbcdOtherEmailTo".equalsIgnoreCase(column)) {
            return getTbcdOtherEmailTo() == null ? "" : getTbcdOtherEmailTo().toString();
        } else if ("tbe_email_to".equalsIgnoreCase(column) || "tbeEmailTo".equalsIgnoreCase(column)) {
            return getTbeEmailTo() == null ? "" : getTbeEmailTo().toString();
        } else if ("tbe_name_to".equalsIgnoreCase(column) || "tbeNameTo".equalsIgnoreCase(column)) {
            return getTbeNameTo() == null ? "" : getTbeNameTo().toString();
        } else if ("tbe_id_to".equalsIgnoreCase(column) || "tbeIdTo".equalsIgnoreCase(column)) {
            return getTbeIdTo() == null ? "" : getTbeIdTo().toString();
        } else if ("tbcd_other_email_from".equalsIgnoreCase(column) || "tbcdOtherEmailFrom".equalsIgnoreCase(column)) {
            return getTbcdOtherEmailFrom() == null ? "" : getTbcdOtherEmailFrom().toString();
        } else if ("tbe_email_from".equalsIgnoreCase(column) || "tbeEmailFrom".equalsIgnoreCase(column)) {
            return getTbeEmailFrom() == null ? "" : getTbeEmailFrom().toString();
        } else if ("tbe_name_from".equalsIgnoreCase(column) || "tbeNameFrom".equalsIgnoreCase(column)) {
            return getTbeNameFrom() == null ? "" : getTbeNameFrom().toString();
        } else if ("tbe_id_from".equalsIgnoreCase(column) || "tbeIdFrom".equalsIgnoreCase(column)) {
            return getTbeIdFrom() == null ? "" : getTbeIdFrom().toString();
        } else if ("tbnu_name".equalsIgnoreCase(column) || "tbnuName".equalsIgnoreCase(column)) {
            return getTbnuName() == null ? "" : getTbnuName().toString();
        } else if ("tbnu_id".equalsIgnoreCase(column) || "tbnuId".equalsIgnoreCase(column)) {
            return getTbnuId() == null ? "" : getTbnuId().toString();
        } else if ("tbnt_subject".equalsIgnoreCase(column) || "tbntSubject".equalsIgnoreCase(column)) {
            return getTbntSubject() == null ? "" : getTbntSubject().toString();
        } else if ("tbnt_id".equalsIgnoreCase(column) || "tbntId".equalsIgnoreCase(column)) {
            return getTbntId() == null ? "" : getTbntId().toString();
        } else if ("tbnc_name".equalsIgnoreCase(column) || "tbncName".equalsIgnoreCase(column)) {
            return getTbncName() == null ? "" : getTbncName().toString();
        } else if ("tbnc_id".equalsIgnoreCase(column) || "tbncId".equalsIgnoreCase(column)) {
            return getTbncId() == null ? "" : getTbncId().toString();
        } else if ("tbn_id".equalsIgnoreCase(column) || "tbnId".equalsIgnoreCase(column)) {
            return getTbnId() == null ? "" : getTbnId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof ViewNotificationBean)) {
            return false;
        }

		ViewNotificationBean obj = (ViewNotificationBean) object;
		return new EqualsBuilder()
            .append(getTbnCreateDate(), obj.getTbnCreateDate())
            .append(getTbnReadDate(), obj.getTbnReadDate())
            .append(getTbnSentDate(), obj.getTbnSentDate())
            .append(getTbnData(), obj.getTbnData())
            .append(getTbcdOtherEmailTo(), obj.getTbcdOtherEmailTo())
            .append(getTbeEmailTo(), obj.getTbeEmailTo())
            .append(getTbeNameTo(), obj.getTbeNameTo())
            .append(getTbeIdTo(), obj.getTbeIdTo())
            .append(getTbcdOtherEmailFrom(), obj.getTbcdOtherEmailFrom())
            .append(getTbeEmailFrom(), obj.getTbeEmailFrom())
            .append(getTbeNameFrom(), obj.getTbeNameFrom())
            .append(getTbeIdFrom(), obj.getTbeIdFrom())
            .append(getTbnuName(), obj.getTbnuName())
            .append(getTbnuId(), obj.getTbnuId())
            .append(getTbntSubject(), obj.getTbntSubject())
            .append(getTbntId(), obj.getTbntId())
            .append(getTbncName(), obj.getTbncName())
            .append(getTbncId(), obj.getTbncId())
            .append(getTbnId(), obj.getTbnId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbnCreateDate())
            .append(getTbnReadDate())
            .append(getTbnSentDate())
            .append(getTbnData())
            .append(getTbcdOtherEmailTo())
            .append(getTbeEmailTo())
            .append(getTbeNameTo())
            .append(getTbeIdTo())
            .append(getTbcdOtherEmailFrom())
            .append(getTbeEmailFrom())
            .append(getTbeNameFrom())
            .append(getTbeIdFrom())
            .append(getTbnuName())
            .append(getTbnuId())
            .append(getTbntSubject())
            .append(getTbntId())
            .append(getTbncName())
            .append(getTbncId())
            .append(getTbnId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbn_create_date", getTbnCreateDate())
            .append("tbn_read_date", getTbnReadDate())
            .append("tbn_sent_date", getTbnSentDate())
            .append("tbn_data", getTbnData())
            .append("tbcd_other_email_to", getTbcdOtherEmailTo())
            .append("tbe_email_to", getTbeEmailTo())
            .append("tbe_name_to", getTbeNameTo())
            .append("tbe_id_to", getTbeIdTo())
            .append("tbcd_other_email_from", getTbcdOtherEmailFrom())
            .append("tbe_email_from", getTbeEmailFrom())
            .append("tbe_name_from", getTbeNameFrom())
            .append("tbe_id_from", getTbeIdFrom())
            .append("tbnu_name", getTbnuName())
            .append("tbnu_id", getTbnuId())
            .append("tbnt_subject", getTbntSubject())
            .append("tbnt_id", getTbntId())
            .append("tbnc_name", getTbncName())
            .append("tbnc_id", getTbncId())
            .append("tbn_id", getTbnId())
            .toString();
	}


    public int compareTo(Object object)
    {
        ViewNotificationBean obj = (ViewNotificationBean) object;
        return new CompareToBuilder()
            .append(getTbnCreateDate(), obj.getTbnCreateDate())
            .append(getTbnReadDate(), obj.getTbnReadDate())
            .append(getTbnSentDate(), obj.getTbnSentDate())
            .append(getTbnData(), obj.getTbnData())
            .append(getTbcdOtherEmailTo(), obj.getTbcdOtherEmailTo())
            .append(getTbeEmailTo(), obj.getTbeEmailTo())
            .append(getTbeNameTo(), obj.getTbeNameTo())
            .append(getTbeIdTo(), obj.getTbeIdTo())
            .append(getTbcdOtherEmailFrom(), obj.getTbcdOtherEmailFrom())
            .append(getTbeEmailFrom(), obj.getTbeEmailFrom())
            .append(getTbeNameFrom(), obj.getTbeNameFrom())
            .append(getTbeIdFrom(), obj.getTbeIdFrom())
            .append(getTbnuName(), obj.getTbnuName())
            .append(getTbnuId(), obj.getTbnuId())
            .append(getTbntSubject(), obj.getTbntSubject())
            .append(getTbntId(), obj.getTbntId())
            .append(getTbncName(), obj.getTbncName())
            .append(getTbncId(), obj.getTbncId())
            .append(getTbnId(), obj.getTbnId())
            .toComparison();
   }
}
