// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbJobTitleBean objects.
 * @author sql2java
 */
public class TbJobTitleComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbJobTitleComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbJobTitleComparator(TbJobTitleManager.ID_TBJT_LEAVE_ENTITLED, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbJobTitleManager.ID_TBJT_LEAVE_ENTITLED
     *   <li>TbJobTitleManager.ID_TBP_ID
     *   <li>TbJobTitleManager.ID_TBJS_ID
     *   <li>TbJobTitleManager.ID_TBJT_COMMENTS
     *   <li>TbJobTitleManager.ID_TBJT_DESCRIPTION
     *   <li>TbJobTitleManager.ID_TBJT_NAME
     *   <li>TbJobTitleManager.ID_TBJT_JOB_TITLE_ID
     *   <li>TbJobTitleManager.ID_TBJT_ID
     * </ul>
     */
    public TbJobTitleComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbJobTitleComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbJobTitleComparator(TbJobTitleManager.ID_TBJT_LEAVE_ENTITLED, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbJobTitleManager.ID_TBJT_LEAVE_ENTITLED
     *   <li>TbJobTitleManager.ID_TBP_ID
     *   <li>TbJobTitleManager.ID_TBJS_ID
     *   <li>TbJobTitleManager.ID_TBJT_COMMENTS
     *   <li>TbJobTitleManager.ID_TBJT_DESCRIPTION
     *   <li>TbJobTitleManager.ID_TBJT_NAME
     *   <li>TbJobTitleManager.ID_TBJT_JOB_TITLE_ID
     *   <li>TbJobTitleManager.ID_TBJT_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbJobTitleComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbJobTitleBean b1 = (TbJobTitleBean)pObj1;
        TbJobTitleBean b2 = (TbJobTitleBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbJobTitleManager.ID_TBJT_LEAVE_ENTITLED:
                if (b1.getTbjtLeaveEntitled() == null && b2.getTbjtLeaveEntitled() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtLeaveEntitled() == null && b2.getTbjtLeaveEntitled() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtLeaveEntitled() != null && b2.getTbjtLeaveEntitled() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtLeaveEntitled().compareTo(b2.getTbjtLeaveEntitled());
                }
                break;
            case TbJobTitleManager.ID_TBP_ID:
                if (b1.getTbpId() == null && b2.getTbpId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpId() == null && b2.getTbpId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpId() != null && b2.getTbpId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpId().compareTo(b2.getTbpId());
                }
                break;
            case TbJobTitleManager.ID_TBJS_ID:
                if (b1.getTbjsId() == null && b2.getTbjsId() != null) {
                    iReturn = -1;
                } else if (b1.getTbjsId() == null && b2.getTbjsId() == null) {
                    iReturn = 0;
                } else if (b1.getTbjsId() != null && b2.getTbjsId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjsId().compareTo(b2.getTbjsId());
                }
                break;
            case TbJobTitleManager.ID_TBJT_COMMENTS:
                if (b1.getTbjtComments() == null && b2.getTbjtComments() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtComments() == null && b2.getTbjtComments() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtComments() != null && b2.getTbjtComments() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtComments().compareTo(b2.getTbjtComments());
                }
                break;
            case TbJobTitleManager.ID_TBJT_DESCRIPTION:
                if (b1.getTbjtDescription() == null && b2.getTbjtDescription() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtDescription() == null && b2.getTbjtDescription() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtDescription() != null && b2.getTbjtDescription() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtDescription().compareTo(b2.getTbjtDescription());
                }
                break;
            case TbJobTitleManager.ID_TBJT_NAME:
                if (b1.getTbjtName() == null && b2.getTbjtName() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtName() == null && b2.getTbjtName() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtName() != null && b2.getTbjtName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtName().compareTo(b2.getTbjtName());
                }
                break;
            case TbJobTitleManager.ID_TBJT_JOB_TITLE_ID:
                if (b1.getTbjtJobTitleId() == null && b2.getTbjtJobTitleId() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtJobTitleId() == null && b2.getTbjtJobTitleId() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtJobTitleId() != null && b2.getTbjtJobTitleId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtJobTitleId().compareTo(b2.getTbjtJobTitleId());
                }
                break;
            case TbJobTitleManager.ID_TBJT_ID:
                if (b1.getTbjtId() == null && b2.getTbjtId() != null) {
                    iReturn = -1;
                } else if (b1.getTbjtId() == null && b2.getTbjtId() == null) {
                    iReturn = 0;
                } else if (b1.getTbjtId() != null && b2.getTbjtId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbjtId().compareTo(b2.getTbjtId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
