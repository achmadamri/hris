// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbAssignedLoanBean objects.
 * @author sql2java
 */
public class TbAssignedLoanComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbAssignedLoanComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbAssignedLoanComparator(TbAssignedLoanManager.ID_TBALO_NOMINAL_TOTAL_LEFT, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbAssignedLoanManager.ID_TBALO_NOMINAL_TOTAL_LEFT
     *   <li>TbAssignedLoanManager.ID_TBALO_STATUS
     *   <li>TbAssignedLoanManager.ID_TBALO_COMMENTS
     *   <li>TbAssignedLoanManager.ID_TBALO_MONTHLY_PAYMENT
     *   <li>TbAssignedLoanManager.ID_TBALO_NOMINAL_TOTAL
     *   <li>TbAssignedLoanManager.ID_TBALO_TENOR
     *   <li>TbAssignedLoanManager.ID_TBALO_INTEREST
     *   <li>TbAssignedLoanManager.ID_TBALO_NOMINAL
     *   <li>TbAssignedLoanManager.ID_TBALO_END_DATE
     *   <li>TbAssignedLoanManager.ID_TBALO_START_DATE
     *   <li>TbAssignedLoanManager.ID_TBALO_UPDATED_TIME
     *   <li>TbAssignedLoanManager.ID_TBALO_CREATED_TIME
     *   <li>TbAssignedLoanManager.ID_TBALO_NAME
     *   <li>TbAssignedLoanManager.ID_TBC_ID
     *   <li>TbAssignedLoanManager.ID_TBE_ID
     *   <li>TbAssignedLoanManager.ID_TBALO_ID
     * </ul>
     */
    public TbAssignedLoanComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbAssignedLoanComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbAssignedLoanComparator(TbAssignedLoanManager.ID_TBALO_NOMINAL_TOTAL_LEFT, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbAssignedLoanManager.ID_TBALO_NOMINAL_TOTAL_LEFT
     *   <li>TbAssignedLoanManager.ID_TBALO_STATUS
     *   <li>TbAssignedLoanManager.ID_TBALO_COMMENTS
     *   <li>TbAssignedLoanManager.ID_TBALO_MONTHLY_PAYMENT
     *   <li>TbAssignedLoanManager.ID_TBALO_NOMINAL_TOTAL
     *   <li>TbAssignedLoanManager.ID_TBALO_TENOR
     *   <li>TbAssignedLoanManager.ID_TBALO_INTEREST
     *   <li>TbAssignedLoanManager.ID_TBALO_NOMINAL
     *   <li>TbAssignedLoanManager.ID_TBALO_END_DATE
     *   <li>TbAssignedLoanManager.ID_TBALO_START_DATE
     *   <li>TbAssignedLoanManager.ID_TBALO_UPDATED_TIME
     *   <li>TbAssignedLoanManager.ID_TBALO_CREATED_TIME
     *   <li>TbAssignedLoanManager.ID_TBALO_NAME
     *   <li>TbAssignedLoanManager.ID_TBC_ID
     *   <li>TbAssignedLoanManager.ID_TBE_ID
     *   <li>TbAssignedLoanManager.ID_TBALO_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbAssignedLoanComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbAssignedLoanBean b1 = (TbAssignedLoanBean)pObj1;
        TbAssignedLoanBean b2 = (TbAssignedLoanBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbAssignedLoanManager.ID_TBALO_NOMINAL_TOTAL_LEFT:
                if (b1.getTbaloNominalTotalLeft() == null && b2.getTbaloNominalTotalLeft() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloNominalTotalLeft() == null && b2.getTbaloNominalTotalLeft() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloNominalTotalLeft() != null && b2.getTbaloNominalTotalLeft() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloNominalTotalLeft().compareTo(b2.getTbaloNominalTotalLeft());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_STATUS:
                if (b1.getTbaloStatus() == null && b2.getTbaloStatus() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloStatus() == null && b2.getTbaloStatus() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloStatus() != null && b2.getTbaloStatus() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloStatus().compareTo(b2.getTbaloStatus());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_COMMENTS:
                if (b1.getTbaloComments() == null && b2.getTbaloComments() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloComments() == null && b2.getTbaloComments() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloComments() != null && b2.getTbaloComments() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloComments().compareTo(b2.getTbaloComments());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_MONTHLY_PAYMENT:
                if (b1.getTbaloMonthlyPayment() == null && b2.getTbaloMonthlyPayment() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloMonthlyPayment() == null && b2.getTbaloMonthlyPayment() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloMonthlyPayment() != null && b2.getTbaloMonthlyPayment() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloMonthlyPayment().compareTo(b2.getTbaloMonthlyPayment());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_NOMINAL_TOTAL:
                if (b1.getTbaloNominalTotal() == null && b2.getTbaloNominalTotal() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloNominalTotal() == null && b2.getTbaloNominalTotal() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloNominalTotal() != null && b2.getTbaloNominalTotal() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloNominalTotal().compareTo(b2.getTbaloNominalTotal());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_TENOR:
                if (b1.getTbaloTenor() == null && b2.getTbaloTenor() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloTenor() == null && b2.getTbaloTenor() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloTenor() != null && b2.getTbaloTenor() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloTenor().compareTo(b2.getTbaloTenor());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_INTEREST:
                if (b1.getTbaloInterest() == null && b2.getTbaloInterest() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloInterest() == null && b2.getTbaloInterest() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloInterest() != null && b2.getTbaloInterest() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloInterest().compareTo(b2.getTbaloInterest());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_NOMINAL:
                if (b1.getTbaloNominal() == null && b2.getTbaloNominal() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloNominal() == null && b2.getTbaloNominal() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloNominal() != null && b2.getTbaloNominal() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloNominal().compareTo(b2.getTbaloNominal());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_END_DATE:
                if (b1.getTbaloEndDate() == null && b2.getTbaloEndDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloEndDate() == null && b2.getTbaloEndDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloEndDate() != null && b2.getTbaloEndDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloEndDate().compareTo(b2.getTbaloEndDate());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_START_DATE:
                if (b1.getTbaloStartDate() == null && b2.getTbaloStartDate() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloStartDate() == null && b2.getTbaloStartDate() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloStartDate() != null && b2.getTbaloStartDate() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloStartDate().compareTo(b2.getTbaloStartDate());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_UPDATED_TIME:
                if (b1.getTbaloUpdatedTime() == null && b2.getTbaloUpdatedTime() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloUpdatedTime() == null && b2.getTbaloUpdatedTime() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloUpdatedTime() != null && b2.getTbaloUpdatedTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloUpdatedTime().compareTo(b2.getTbaloUpdatedTime());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_CREATED_TIME:
                if (b1.getTbaloCreatedTime() == null && b2.getTbaloCreatedTime() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloCreatedTime() == null && b2.getTbaloCreatedTime() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloCreatedTime() != null && b2.getTbaloCreatedTime() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloCreatedTime().compareTo(b2.getTbaloCreatedTime());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_NAME:
                if (b1.getTbaloName() == null && b2.getTbaloName() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloName() == null && b2.getTbaloName() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloName() != null && b2.getTbaloName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloName().compareTo(b2.getTbaloName());
                }
                break;
            case TbAssignedLoanManager.ID_TBC_ID:
                if (b1.getTbcId() == null && b2.getTbcId() != null) {
                    iReturn = -1;
                } else if (b1.getTbcId() == null && b2.getTbcId() == null) {
                    iReturn = 0;
                } else if (b1.getTbcId() != null && b2.getTbcId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbcId().compareTo(b2.getTbcId());
                }
                break;
            case TbAssignedLoanManager.ID_TBE_ID:
                if (b1.getTbeId() == null && b2.getTbeId() != null) {
                    iReturn = -1;
                } else if (b1.getTbeId() == null && b2.getTbeId() == null) {
                    iReturn = 0;
                } else if (b1.getTbeId() != null && b2.getTbeId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbeId().compareTo(b2.getTbeId());
                }
                break;
            case TbAssignedLoanManager.ID_TBALO_ID:
                if (b1.getTbaloId() == null && b2.getTbaloId() != null) {
                    iReturn = -1;
                } else if (b1.getTbaloId() == null && b2.getTbaloId() == null) {
                    iReturn = 0;
                } else if (b1.getTbaloId() != null && b2.getTbaloId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbaloId().compareTo(b2.getTbaloId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
