// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbJobBean is a mapping of tb_job Table.
 * @author sql2java
*/
public class TbJobBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 7485064946440713757L;
	
    private java.sql.Timestamp tbjJoinedDate;

    private boolean tbjJoinedDateIsModified = false;
    private boolean tbjJoinedDateIsInitialized = false;

    private Integer tblId;

    private boolean tblIdIsModified = false;
    private boolean tblIdIsInitialized = false;

    private Integer tboId;

    private boolean tboIdIsModified = false;
    private boolean tboIdIsInitialized = false;

    private Integer tbpId;

    private boolean tbpIdIsModified = false;
    private boolean tbpIdIsInitialized = false;

    private Integer tbejcId;

    private boolean tbejcIdIsModified = false;
    private boolean tbejcIdIsInitialized = false;

    private Integer tbesId;

    private boolean tbesIdIsModified = false;
    private boolean tbesIdIsInitialized = false;

    private Integer tbjtId;

    private boolean tbjtIdIsModified = false;
    private boolean tbjtIdIsInitialized = false;

    private Integer tbeId;

    private boolean tbeIdIsModified = false;
    private boolean tbeIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbJobBean is via the createTbJobBean method in TbJobManager or
     * via the factory class TbJobFactory create method
     */
    protected TbJobBean()
    {
    }

    /**
     * Getter method for tbjJoinedDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job.tbj_joined_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbjJoinedDate
     */
    public java.sql.Timestamp getTbjJoinedDate()
    {
        return tbjJoinedDate;
    }

    /**
     * Setter method for tbjJoinedDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjJoinedDate
     */
    public void setTbjJoinedDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbjJoinedDate != null && (newVal.compareTo(tbjJoinedDate) == 0)) ||
            (newVal == null && tbjJoinedDate == null && tbjJoinedDateIsInitialized)) {
            return;
        }
        tbjJoinedDate = newVal;
        tbjJoinedDateIsModified = true;
        tbjJoinedDateIsInitialized = true;
    }

    /**
     * Setter method for tbjJoinedDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjJoinedDate
     */
    public void setTbjJoinedDate(long newVal)
    {
        setTbjJoinedDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbjJoinedDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjJoinedDateModified()
    {
        return tbjJoinedDateIsModified;
    }

    /**
     * Determines if the tbjJoinedDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjJoinedDateInitialized()
    {
        return tbjJoinedDateIsInitialized;
    }

    /**
     * Getter method for tblId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job.tbl_id</li>
     * <li> foreign key: tb_location.tbl_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tblId
     */
    public Integer getTblId()
    {
        return tblId;
    }

    /**
     * Setter method for tblId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tblId
     */
    public void setTblId(Integer newVal)
    {
        if ((newVal != null && tblId != null && (newVal.compareTo(tblId) == 0)) ||
            (newVal == null && tblId == null && tblIdIsInitialized)) {
            return;
        }
        tblId = newVal;
        tblIdIsModified = true;
        tblIdIsInitialized = true;
    }

    /**
     * Setter method for tblId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tblId
     */
    public void setTblId(int newVal)
    {
        setTblId(new Integer(newVal));
    }

    /**
     * Determines if the tblId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTblIdModified()
    {
        return tblIdIsModified;
    }

    /**
     * Determines if the tblId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTblIdInitialized()
    {
        return tblIdIsInitialized;
    }

    /**
     * Getter method for tboId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job.tbo_id</li>
     * <li> foreign key: tb_organization.tbo_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tboId
     */
    public Integer getTboId()
    {
        return tboId;
    }

    /**
     * Setter method for tboId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tboId
     */
    public void setTboId(Integer newVal)
    {
        if ((newVal != null && tboId != null && (newVal.compareTo(tboId) == 0)) ||
            (newVal == null && tboId == null && tboIdIsInitialized)) {
            return;
        }
        tboId = newVal;
        tboIdIsModified = true;
        tboIdIsInitialized = true;
    }

    /**
     * Setter method for tboId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tboId
     */
    public void setTboId(int newVal)
    {
        setTboId(new Integer(newVal));
    }

    /**
     * Determines if the tboId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTboIdModified()
    {
        return tboIdIsModified;
    }

    /**
     * Determines if the tboId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTboIdInitialized()
    {
        return tboIdIsInitialized;
    }

    /**
     * Getter method for tbpId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job.tbp_id</li>
     * <li> foreign key: tb_perusahaan.tbp_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbpId
     */
    public Integer getTbpId()
    {
        return tbpId;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(Integer newVal)
    {
        if ((newVal != null && tbpId != null && (newVal.compareTo(tbpId) == 0)) ||
            (newVal == null && tbpId == null && tbpIdIsInitialized)) {
            return;
        }
        tbpId = newVal;
        tbpIdIsModified = true;
        tbpIdIsInitialized = true;
    }

    /**
     * Setter method for tbpId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbpId
     */
    public void setTbpId(int newVal)
    {
        setTbpId(new Integer(newVal));
    }

    /**
     * Determines if the tbpId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbpIdModified()
    {
        return tbpIdIsModified;
    }

    /**
     * Determines if the tbpId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbpIdInitialized()
    {
        return tbpIdIsInitialized;
    }

    /**
     * Getter method for tbejcId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job.tbejc_id</li>
     * <li> foreign key: tb_eeo_job_category.tbejc_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbejcId
     */
    public Integer getTbejcId()
    {
        return tbejcId;
    }

    /**
     * Setter method for tbejcId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbejcId
     */
    public void setTbejcId(Integer newVal)
    {
        if ((newVal != null && tbejcId != null && (newVal.compareTo(tbejcId) == 0)) ||
            (newVal == null && tbejcId == null && tbejcIdIsInitialized)) {
            return;
        }
        tbejcId = newVal;
        tbejcIdIsModified = true;
        tbejcIdIsInitialized = true;
    }

    /**
     * Setter method for tbejcId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbejcId
     */
    public void setTbejcId(int newVal)
    {
        setTbejcId(new Integer(newVal));
    }

    /**
     * Determines if the tbejcId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbejcIdModified()
    {
        return tbejcIdIsModified;
    }

    /**
     * Determines if the tbejcId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbejcIdInitialized()
    {
        return tbejcIdIsInitialized;
    }

    /**
     * Getter method for tbesId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job.tbes_id</li>
     * <li> foreign key: tb_employment_status.tbes_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbesId
     */
    public Integer getTbesId()
    {
        return tbesId;
    }

    /**
     * Setter method for tbesId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbesId
     */
    public void setTbesId(Integer newVal)
    {
        if ((newVal != null && tbesId != null && (newVal.compareTo(tbesId) == 0)) ||
            (newVal == null && tbesId == null && tbesIdIsInitialized)) {
            return;
        }
        tbesId = newVal;
        tbesIdIsModified = true;
        tbesIdIsInitialized = true;
    }

    /**
     * Setter method for tbesId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbesId
     */
    public void setTbesId(int newVal)
    {
        setTbesId(new Integer(newVal));
    }

    /**
     * Determines if the tbesId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbesIdModified()
    {
        return tbesIdIsModified;
    }

    /**
     * Determines if the tbesId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbesIdInitialized()
    {
        return tbesIdIsInitialized;
    }

    /**
     * Getter method for tbjtId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job.tbjt_id</li>
     * <li> foreign key: tb_job_title.tbjt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbjtId
     */
    public Integer getTbjtId()
    {
        return tbjtId;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(Integer newVal)
    {
        if ((newVal != null && tbjtId != null && (newVal.compareTo(tbjtId) == 0)) ||
            (newVal == null && tbjtId == null && tbjtIdIsInitialized)) {
            return;
        }
        tbjtId = newVal;
        tbjtIdIsModified = true;
        tbjtIdIsInitialized = true;
    }

    /**
     * Setter method for tbjtId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbjtId
     */
    public void setTbjtId(int newVal)
    {
        setTbjtId(new Integer(newVal));
    }

    /**
     * Determines if the tbjtId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbjtIdModified()
    {
        return tbjtIdIsModified;
    }

    /**
     * Determines if the tbjtId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbjtIdInitialized()
    {
        return tbjtIdIsInitialized;
    }

    /**
     * Getter method for tbeId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_job.tbe_id</li>
     * <li> foreign key: tb_employee.tbe_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeId
     */
    public Integer getTbeId()
    {
        return tbeId;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(Integer newVal)
    {
        if ((newVal != null && tbeId != null && (newVal.compareTo(tbeId) == 0)) ||
            (newVal == null && tbeId == null && tbeIdIsInitialized)) {
            return;
        }
        tbeId = newVal;
        tbeIdIsModified = true;
        tbeIdIsInitialized = true;
    }

    /**
     * Setter method for tbeId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeId
     */
    public void setTbeId(int newVal)
    {
        setTbeId(new Integer(newVal));
    }

    /**
     * Determines if the tbeId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdModified()
    {
        return tbeIdIsModified;
    }

    /**
     * Determines if the tbeId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdInitialized()
    {
        return tbeIdIsInitialized;
    }

    /** The TbJobTitle referenced by this bean. */
    private TbJobTitleBean referencedTbJobTitle;
    /** Getter method for TbJobTitleBean. */
    public TbJobTitleBean getTbJobTitleBean() {
        return this.referencedTbJobTitle;
    }
    /** Setter method for TbJobTitleBean. */
    public void setTbJobTitleBean(TbJobTitleBean reference) {
        this.referencedTbJobTitle = reference;
    }
    
    /** The TbEmploymentStatus referenced by this bean. */
    private TbEmploymentStatusBean referencedTbEmploymentStatus;
    /** Getter method for TbEmploymentStatusBean. */
    public TbEmploymentStatusBean getTbEmploymentStatusBean() {
        return this.referencedTbEmploymentStatus;
    }
    /** Setter method for TbEmploymentStatusBean. */
    public void setTbEmploymentStatusBean(TbEmploymentStatusBean reference) {
        this.referencedTbEmploymentStatus = reference;
    }
    
    /** The TbEeoJobCategory referenced by this bean. */
    private TbEeoJobCategoryBean referencedTbEeoJobCategory;
    /** Getter method for TbEeoJobCategoryBean. */
    public TbEeoJobCategoryBean getTbEeoJobCategoryBean() {
        return this.referencedTbEeoJobCategory;
    }
    /** Setter method for TbEeoJobCategoryBean. */
    public void setTbEeoJobCategoryBean(TbEeoJobCategoryBean reference) {
        this.referencedTbEeoJobCategory = reference;
    }
    
    /** The TbOrganization referenced by this bean. */
    private TbOrganizationBean referencedTbOrganization;
    /** Getter method for TbOrganizationBean. */
    public TbOrganizationBean getTbOrganizationBean() {
        return this.referencedTbOrganization;
    }
    /** Setter method for TbOrganizationBean. */
    public void setTbOrganizationBean(TbOrganizationBean reference) {
        this.referencedTbOrganization = reference;
    }
    
    /** The TbEmployee referenced by this bean. */
    private TbEmployeeBean referencedTbEmployee;
    /** Getter method for TbEmployeeBean. */
    public TbEmployeeBean getTbEmployeeBean() {
        return this.referencedTbEmployee;
    }
    /** Setter method for TbEmployeeBean. */
    public void setTbEmployeeBean(TbEmployeeBean reference) {
        this.referencedTbEmployee = reference;
    }
    
    /** The TbLocation referenced by this bean. */
    private TbLocationBean referencedTbLocation;
    /** Getter method for TbLocationBean. */
    public TbLocationBean getTbLocationBean() {
        return this.referencedTbLocation;
    }
    /** Setter method for TbLocationBean. */
    public void setTbLocationBean(TbLocationBean reference) {
        this.referencedTbLocation = reference;
    }
    
    /** The TbPerusahaan referenced by this bean. */
    private TbPerusahaanBean referencedTbPerusahaan;
    /** Getter method for TbPerusahaanBean. */
    public TbPerusahaanBean getTbPerusahaanBean() {
        return this.referencedTbPerusahaan;
    }
    /** Setter method for TbPerusahaanBean. */
    public void setTbPerusahaanBean(TbPerusahaanBean reference) {
        this.referencedTbPerusahaan = reference;
    }
    
    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbjJoinedDateIsModified 		|| tblIdIsModified  		|| tboIdIsModified  		|| tbpIdIsModified  		|| tbejcIdIsModified  		|| tbesIdIsModified  		|| tbjtIdIsModified  		|| tbeIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbjJoinedDateIsModified = false;
        tblIdIsModified = false;
        tboIdIsModified = false;
        tbpIdIsModified = false;
        tbejcIdIsModified = false;
        tbesIdIsModified = false;
        tbjtIdIsModified = false;
        tbeIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbJobBean bean)
    {
        setTbjJoinedDate(bean.getTbjJoinedDate());
        setTblId(bean.getTblId());
        setTboId(bean.getTboId());
        setTbpId(bean.getTbpId());
        setTbejcId(bean.getTbejcId());
        setTbesId(bean.getTbesId());
        setTbjtId(bean.getTbjtId());
        setTbeId(bean.getTbeId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbj_joined_date", getTbjJoinedDate() == null ? "" : getTbjJoinedDate().toString());
        dictionnary.put("tbl_id", getTblId() == null ? "" : getTblId().toString());
        dictionnary.put("tbo_id", getTboId() == null ? "" : getTboId().toString());
        dictionnary.put("tbp_id", getTbpId() == null ? "" : getTbpId().toString());
        dictionnary.put("tbejc_id", getTbejcId() == null ? "" : getTbejcId().toString());
        dictionnary.put("tbes_id", getTbesId() == null ? "" : getTbesId().toString());
        dictionnary.put("tbjt_id", getTbjtId() == null ? "" : getTbjtId().toString());
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbe_id", getTbeId() == null ? "" : getTbeId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbj_joined_date".equalsIgnoreCase(column) || "tbjJoinedDate".equalsIgnoreCase(column)) {
            return getTbjJoinedDate() == null ? "" : getTbjJoinedDate().toString();
        } else if ("tbl_id".equalsIgnoreCase(column) || "tblId".equalsIgnoreCase(column)) {
            return getTblId() == null ? "" : getTblId().toString();
        } else if ("tbo_id".equalsIgnoreCase(column) || "tboId".equalsIgnoreCase(column)) {
            return getTboId() == null ? "" : getTboId().toString();
        } else if ("tbp_id".equalsIgnoreCase(column) || "tbpId".equalsIgnoreCase(column)) {
            return getTbpId() == null ? "" : getTbpId().toString();
        } else if ("tbejc_id".equalsIgnoreCase(column) || "tbejcId".equalsIgnoreCase(column)) {
            return getTbejcId() == null ? "" : getTbejcId().toString();
        } else if ("tbes_id".equalsIgnoreCase(column) || "tbesId".equalsIgnoreCase(column)) {
            return getTbesId() == null ? "" : getTbesId().toString();
        } else if ("tbjt_id".equalsIgnoreCase(column) || "tbjtId".equalsIgnoreCase(column)) {
            return getTbjtId() == null ? "" : getTbjtId().toString();
        } else if ("tbe_id".equalsIgnoreCase(column) || "tbeId".equalsIgnoreCase(column)) {
            return getTbeId() == null ? "" : getTbeId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbJobBean)) {
            return false;
        }

		TbJobBean obj = (TbJobBean) object;
		return new EqualsBuilder()
            .append(getTbjJoinedDate(), obj.getTbjJoinedDate())
            .append(getTblId(), obj.getTblId())
            .append(getTboId(), obj.getTboId())
            .append(getTbpId(), obj.getTbpId())
            .append(getTbejcId(), obj.getTbejcId())
            .append(getTbesId(), obj.getTbesId())
            .append(getTbjtId(), obj.getTbjtId())
            .append(getTbeId(), obj.getTbeId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbjJoinedDate())
            .append(getTblId())
            .append(getTboId())
            .append(getTbpId())
            .append(getTbejcId())
            .append(getTbesId())
            .append(getTbjtId())
            .append(getTbeId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbj_joined_date", getTbjJoinedDate())
            .append("tbl_id", getTblId())
            .append("tbo_id", getTboId())
            .append("tbp_id", getTbpId())
            .append("tbejc_id", getTbejcId())
            .append("tbes_id", getTbesId())
            .append("tbjt_id", getTbjtId())
            .append("tbe_id", getTbeId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbJobBean obj = (TbJobBean) object;
        return new CompareToBuilder()
            .append(getTbjJoinedDate(), obj.getTbjJoinedDate())
            .append(getTblId(), obj.getTblId())
            .append(getTboId(), obj.getTboId())
            .append(getTbpId(), obj.getTbpId())
            .append(getTbejcId(), obj.getTbejcId())
            .append(getTbesId(), obj.getTbesId())
            .append(getTbjtId(), obj.getTbjtId())
            .append(getTbeId(), obj.getTbeId())
            .toComparison();
   }
}
