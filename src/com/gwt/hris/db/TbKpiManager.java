// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.gwt.hris.client.service.bean.TbKpiBeanModel;
import com.gwt.hris.db.exception.DAOException;
import com.gwt.hris.db.exception.DataAccessException;
import com.gwt.hris.db.exception.ObjectRetrievalException;

/**
 * Handles database calls (save, load, count, etc...) for the tb_kpi table.
 * @author sql2java
 */
public class TbKpiManager 
{
	private Logger log = LoggerFactory.getLogger(this.getClass());

    /* set =QUERY for loadUsingTemplate */
    public static final int SEARCH_EXACT = 0;
    /* set %QUERY% for loadLikeTemplate */
    public static final int SEARCH_LIKE = 1;
    /* set %QUERY for loadLikeTemplate */
    public static final int SEARCH_STARTING_LIKE = 2;
    /* set QUERY% for loadLikeTemplate */
    public static final int SEARCH_ENDING_LIKE = 3;

    /**
     * Identify the tbk_bobot field.
     */
    public static final int ID_TBK_BOBOT = 0;

    /**
     * Identify the tbk_target_nilai_5 field.
     */
    public static final int ID_TBK_TARGET_NILAI_5 = 1;

    /**
     * Identify the tbk_target_nilai_4 field.
     */
    public static final int ID_TBK_TARGET_NILAI_4 = 2;

    /**
     * Identify the tbk_target_nilai_3 field.
     */
    public static final int ID_TBK_TARGET_NILAI_3 = 3;

    /**
     * Identify the tbk_target_nilai_2 field.
     */
    public static final int ID_TBK_TARGET_NILAI_2 = 4;

    /**
     * Identify the tbk_target_nilai_1 field.
     */
    public static final int ID_TBK_TARGET_NILAI_1 = 5;

    /**
     * Identify the tbk_description field.
     */
    public static final int ID_TBK_DESCRIPTION = 6;

    /**
     * Identify the tbe_Id field.
     */
    public static final int ID_TBE_ID = 7;

    /**
     * Identify the tbkg_id field.
     */
    public static final int ID_TBKG_ID = 8;

    /**
     * Identify the tbk_id field.
     */
    public static final int ID_TBK_ID = 9;

    /**
     * Contains all the full fields of the tb_kpi table.
     */
    private static final String[] FULL_FIELD_NAMES =
    {
        "tb_kpi.tbk_bobot"
        ,"tb_kpi.tbk_target_nilai_5"
        ,"tb_kpi.tbk_target_nilai_4"
        ,"tb_kpi.tbk_target_nilai_3"
        ,"tb_kpi.tbk_target_nilai_2"
        ,"tb_kpi.tbk_target_nilai_1"
        ,"tb_kpi.tbk_description"
        ,"tb_kpi.tbe_Id"
        ,"tb_kpi.tbkg_id"
        ,"tb_kpi.tbk_id"
    };

    /**
     * Contains all the fields of the tb_kpi table.
     */
    public static final String[] FIELD_NAMES =
    {
        "tbk_bobot"
        ,"tbk_target_nilai_5"
        ,"tbk_target_nilai_4"
        ,"tbk_target_nilai_3"
        ,"tbk_target_nilai_2"
        ,"tbk_target_nilai_1"
        ,"tbk_description"
        ,"tbe_Id"
        ,"tbkg_id"
        ,"tbk_id"
    };

    /**
     * Field that contains the comma separated fields of the tb_kpi table.
     */
    public static final String ALL_FULL_FIELDS = "tb_kpi.tbk_bobot"
                            + ",tb_kpi.tbk_target_nilai_5"
                            + ",tb_kpi.tbk_target_nilai_4"
                            + ",tb_kpi.tbk_target_nilai_3"
                            + ",tb_kpi.tbk_target_nilai_2"
                            + ",tb_kpi.tbk_target_nilai_1"
                            + ",tb_kpi.tbk_description"
                            + ",tb_kpi.tbe_Id"
                            + ",tb_kpi.tbkg_id"
                            + ",tb_kpi.tbk_id";

    /**
     * Field that contains the comma separated fields of the tb_kpi table.
     */
    public static final String ALL_FIELDS = "tbk_bobot"
                            + ",tbk_target_nilai_5"
                            + ",tbk_target_nilai_4"
                            + ",tbk_target_nilai_3"
                            + ",tbk_target_nilai_2"
                            + ",tbk_target_nilai_1"
                            + ",tbk_description"
                            + ",tbe_Id"
                            + ",tbkg_id"
                            + ",tbk_id";

    private static TbKpiManager singleton = new TbKpiManager();

    /**
     * Get the TbKpiManager singleton.
     *
     * @return TbKpiManager
     */
    public static TbKpiManager getInstance()
    {
        return singleton;
    }


    /**
     * Creates a new TbKpiBean instance.
     *
     * @return the new TbKpiBean
     */
    public TbKpiBean createTbKpiBean()
    {
        return new TbKpiBean();
    }

    //////////////////////////////////////
    // PRIMARY KEY METHODS
    //////////////////////////////////////
	
    /**
     * Loads a TbKpiBean from the tb_kpi using its key fields.
     *
     * @param tbkId Integer - PK# 1
     * @return a unique TbKpiBean
     * @throws DAOException
     */
    //1
    public TbKpiBean loadByPrimaryKey(Integer tbkId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("SELECT " + ALL_FIELDS + " FROM tb_kpi WHERE tbk_id=?");
            log.debug("loadByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbkId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbkId); }
            TbKpiBean pReturn[] = this.loadByPreparedStatement(ps);
            if (pReturn.length < 1) {
                // throw new ObjectRetrievalException();
				return null;
            } else {
                return pReturn[0];
            }
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }
		
	//1WS
    //public TbKpiBean loadByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return fromBeanWsToBean(Util.getInstance().getDAOServiceV1().tbXLoadByPrimaryKey(id));
    //}
    
    //2WS
    //public int deleteByPrimaryKeyWs(Integer id) throws MalformedURLException, DAOException_Exception {
    	//return Util.getInstance().getDAOServiceV1().tbXDeleteByPrimaryKey(id);
    //}

    /**
     * Deletes rows according to its keys.
     *
     * @param tbkId Integer - PK# 1
     * @return the number of deleted rows
     * @throws DAOException
     */
    //2
    public int deleteByPrimaryKey(Integer tbkId) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_kpi WHERE tbk_id=?");
            log.debug("deleteByPrimaryKey: " + sql);
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            if (tbkId == null) { ps.setNull(1, Types.INTEGER); } else { Manager.setInteger(ps, 1, tbkId); }
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //////////////////////////////////////
    // GET/SET IMPORTED KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the TbKpiAssignBean object from the tb_kpi.tbk_id field.
     *
     * @param bean the TbKpiBean
     * @return the associated TbKpiAssignBean bean
     * @throws DAOException
     */
    //3.1 GET IMPORTED
    public TbKpiAssignBean[] getTbKpiAssignBeans(TbKpiBean bean) throws DAOException
    {
        TbKpiAssignBean other = TbKpiAssignManager.getInstance().createTbKpiAssignBean();
        other.setTbkId(bean.getTbkId());
        return TbKpiAssignManager.getInstance().loadUsingTemplate(other);
    }

    /**
     * Associates the TbKpiBean object to the TbKpiAssignBean object.
     *
     * @param bean the TbKpiBean object to use
     * @param beanToSet the TbKpiAssignBean object to associate to the TbKpiBean
     * @return the associated TbKpiAssignBean bean
     */
    //4.1 SET IMPORTED
    public TbKpiBean setTbKpiAssignBean(TbKpiBean bean,TbKpiAssignBean beanToSet)
    {
        bean.setTbkId(beanToSet.getTbkId());
        return bean;
    }



    //////////////////////////////////////
    // GET/SET FOREIGN KEY BEAN METHOD
    //////////////////////////////////////
    /**
     * Retrieves the TbKpiGroupBean object from the tb_kpi.tbkg_id field.
     *
     * @param bean the TbKpiBean
     * @return the associated TbKpiGroupBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbKpiGroupBean getTbKpiGroupBean(TbKpiBean bean) throws DAOException
    {
        TbKpiGroupBean other = TbKpiGroupManager.getInstance().createTbKpiGroupBean();
        other.setTbkgId(bean.getTbkgId()); 
        bean.setTbKpiGroupBean(TbKpiGroupManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbKpiGroupBean();
    }

    /**
     * Associates the TbKpiBean object to the TbKpiGroupBean object.
     *
     * @param bean the TbKpiBean object to use
     * @param beanToSet the TbKpiGroupBean object to associate to the TbKpiBean
     * @return the associated TbKpiGroupBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbKpiGroupBean addTbKpiGroupBean(TbKpiGroupBean beanToSet, TbKpiBean bean) throws Exception
    {
        beanToSet.setTbkgId(bean.getTbkgId());
        return TbKpiGroupManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbKpiBean object to the TbKpiGroupBean object.
     *
     * @param bean the TbKpiBean object to use
     * @param beanToSet the TbKpiGroupBean object to associate to the TbKpiBean
     * @return the associated TbKpiGroupBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbKpiGroupBean setTbKpiGroupBean(TbKpiBean bean, TbKpiGroupBean beanToSet) throws Exception
    {
        bean.setTbkgId(beanToSet.getTbkgId());
        return TbKpiGroupManager.getInstance().save(beanToSet);
    }

    /**
     * Retrieves the TbEmployeeBean object from the tb_kpi.tbe_Id field.
     *
     * @param bean the TbKpiBean
     * @return the associated TbEmployeeBean bean
     * @throws DAOException
     */
    //3.2 GET IMPORTED VALUES
    public TbEmployeeBean getTbEmployeeBean(TbKpiBean bean) throws DAOException
    {
        TbEmployeeBean other = TbEmployeeManager.getInstance().createTbEmployeeBean();
        other.setTbeId(bean.getTbeId()); 
        bean.setTbEmployeeBean(TbEmployeeManager.getInstance().loadUniqueUsingTemplate(other)); 
        return bean.getTbEmployeeBean();
    }

    /**
     * Associates the TbKpiBean object to the TbEmployeeBean object.
     *
     * @param bean the TbKpiBean object to use
     * @param beanToSet the TbEmployeeBean object to associate to the TbKpiBean
     * @return the associated TbEmployeeBean bean
     * @throws Exception
     */
    //4.2 ADD IMPORTED VALUE
    public TbEmployeeBean addTbEmployeeBean(TbEmployeeBean beanToSet, TbKpiBean bean) throws Exception
    {
        beanToSet.setTbeId(bean.getTbeId());
        return TbEmployeeManager.getInstance().save(beanToSet);
    }

    /**
     * Associates the TbKpiBean object to the TbEmployeeBean object.
     *
     * @param bean the TbKpiBean object to use
     * @param beanToSet the TbEmployeeBean object to associate to the TbKpiBean
     * @return the associated TbEmployeeBean bean
     * @throws Exception
     */
    //5.2 SET IMPORTED
    public TbEmployeeBean setTbEmployeeBean(TbKpiBean bean, TbEmployeeBean beanToSet) throws Exception
    {
        bean.setTbeId(beanToSet.getTbeId());
        return TbEmployeeManager.getInstance().save(beanToSet);
    }



    //////////////////////////////////////
    // LOAD ALL
    //////////////////////////////////////

    /**
     * Loads all the rows from tb_kpi.
     *
     * @return an array of TbKpiManager bean
     * @throws DAOException
     */
    //5
    public TbKpiBean[] loadAll() throws DAOException
    {
        return this.loadUsingTemplate(null);
    }


    /**
     * Loads the given number of rows from tb_kpi, given the start row.
     *
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return an array of TbKpiManager bean
     * @throws DAOException
     */
    //6
    public TbKpiBean[] loadAll(int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(null, startRow, numRows);
    }

    //////////////////////////////////////
    // SQL 'WHERE' METHOD
    //////////////////////////////////////
    /**
     * Retrieves an array of TbKpiBean given a sql 'where' clause.
     *
     * @param where the sql 'where' clause
     * @return the resulting TbKpiBean table
     * @throws DAOException
     */
    //7
    public TbKpiBean[] loadByWhere(String where) throws DAOException
    {
        return this.loadByWhere(where, null);
    }

    /**
     * Retrieves an array of TbKpiBean given a sql where clause, and a list of fields.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'WHERE' clause
     * @param fieldList array of field's ID
     * @return the resulting TbKpiBean table
     * @throws DAOException
     */
    //8
    public TbKpiBean[] loadByWhere(String where, int[] fieldList) throws DAOException
    {
        return this.loadByWhere(where, fieldList, 1, -1);
    }

    /**
     * Retrieves an array of TbKpiBean given a sql where clause and a list of fields, and startRow and numRows.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the sql 'where' clause
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return the resulting TbKpiBean table
     * @throws DAOException
     */
    //9
    public TbKpiBean[] loadByWhere(String where, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        StringBuffer sql = new StringBuffer(128);
        if(fieldList == null) {
            sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_kpi ").append(where);
        } else
        {
            sql.append("SELECT ");
            for(int i = 0; i < fieldList.length; i++)
            {
                if(i != 0) {
                    sql.append(",");
                }
                sql.append(FULL_FIELD_NAMES[fieldList[i]]);
            }
            sql.append(" FROM tb_kpi ");
            sql.append(where);
        }
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        log.debug("loadByWhere: " + sql);
        try
        {
            c = this.getConnection();
            st = c.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            rs = st.executeQuery(sql.toString());
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(st, rs);
            this.freeConnection(c);
        }
    }


    /**
     * Deletes rows from the tb_kpi table using a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     * <br>Attention, if 'WHERE' is omitted it will delete all records.
     *
     * @param where the sql 'where' clause
     * @return the number of deleted rows
     * @throws DAOException
     */
    //11
    public int deleteByWhere(String where) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;

        try
        {
            c = this.getConnection();
            StringBuffer sql = new StringBuffer("DELETE FROM tb_kpi " + where);
            log.debug("deleteByWhere: " + sql);
            ps = c.prepareStatement(sql.toString());
            return ps.executeUpdate();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    //_____________________________________________________________________
    //
    // SAVE
    //_____________________________________________________________________
    /**
     * Saves the TbKpiBean bean into the database.
     *
     * @param bean the TbKpiBean bean to be saved
     * @return the inserted or updated bean
     * @throws DAOException
     */
    //12
    public TbKpiBean save(TbKpiBean bean) throws DAOException
    {
        if (bean.isNew()) {
            return this.insert(bean);
        } else {
            return this.update(bean);
        }
    }

    /**
     * Insert the TbKpiBean bean into the database.
     *
     * @param bean the TbKpiBean bean to be saved
     * @return the inserted bean
     * @throws DAOException
     */
    //13
    public TbKpiBean insert(TbKpiBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (!bean.isNew()){
            return this.update(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();
            this.beforeInsert(bean); // listener callback
            int _dirtyCount = 0;
            sql = new StringBuffer("INSERT into tb_kpi (");

            if (bean.isTbkBobotModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbk_bobot");
                _dirtyCount++;
            }

            if (bean.isTbkTargetNilai5Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbk_target_nilai_5");
                _dirtyCount++;
            }

            if (bean.isTbkTargetNilai4Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbk_target_nilai_4");
                _dirtyCount++;
            }

            if (bean.isTbkTargetNilai3Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbk_target_nilai_3");
                _dirtyCount++;
            }

            if (bean.isTbkTargetNilai2Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbk_target_nilai_2");
                _dirtyCount++;
            }

            if (bean.isTbkTargetNilai1Modified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbk_target_nilai_1");
                _dirtyCount++;
            }

            if (bean.isTbkDescriptionModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbk_description");
                _dirtyCount++;
            }

            if (bean.isTbeIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbe_Id");
                _dirtyCount++;
            }

            if (bean.isTbkgIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbkg_id");
                _dirtyCount++;
            }

            if (bean.isTbkIdModified()) {
                if (_dirtyCount>0) {
                    sql.append(",");
                }
                sql.append("tbk_id");
                _dirtyCount++;
            }

            sql.append(") values (");
            if(_dirtyCount > 0) {
                sql.append("?");
                for(int i = 1; i < _dirtyCount; i++) {
                    sql.append(",?");
                }
            }
            sql.append(")");


            log.debug("insert : " + sql.toString());

            ps = c.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);

            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            ps.executeUpdate();
            if (!bean.isTbkIdModified())
            {
                ResultSet rs = ps.getGeneratedKeys();
                try {
                    if(rs.next()) {
                        bean.setTbkId(Manager.getInteger(rs, 1));
                    } else {
                        this.getManager().log("ATTENTION: Could not retrieve auto generated key!");
                    }
                } finally {
                    this.getManager().close(rs);
                }
            }

            bean.isNew(false);
            bean.resetIsModified();
            this.afterInsert(bean); // listener callback
            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Update the TbKpiBean bean record in the database according to the changes.
     *
     * @param bean the TbKpiBean bean to be updated
     * @return the updated bean
     * @throws DAOException
     */
    //14
    public TbKpiBean update(TbKpiBean bean) throws DAOException
    {
        // mini checks
        if (!bean.isModified()) {
            return bean; // should not we log something ?
        }
        if (bean.isNew()){
            return this.insert(bean);
        }

        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = null;

        try
        {
            c = this.getConnection();

            this.beforeUpdate(bean); // listener callback
            sql = new StringBuffer("UPDATE tb_kpi SET ");
            boolean useComma=false;

            if (bean.isTbkBobotModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbk_bobot=?");
            }

            if (bean.isTbkTargetNilai5Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbk_target_nilai_5=?");
            }

            if (bean.isTbkTargetNilai4Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbk_target_nilai_4=?");
            }

            if (bean.isTbkTargetNilai3Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbk_target_nilai_3=?");
            }

            if (bean.isTbkTargetNilai2Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbk_target_nilai_2=?");
            }

            if (bean.isTbkTargetNilai1Modified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbk_target_nilai_1=?");
            }

            if (bean.isTbkDescriptionModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbk_description=?");
            }

            if (bean.isTbeIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbe_Id=?");
            }

            if (bean.isTbkgIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbkg_id=?");
            }

            if (bean.isTbkIdModified()) {
                if (useComma) {
                    sql.append(", ");
                } else {
                    useComma=true;
                }
                sql.append("tbk_id=?");
            }
            sql.append(" WHERE ");
            sql.append("tbk_id=?");
            log.debug("update : " + sql.toString());
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);

            int _dirtyCount = this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            if (_dirtyCount == 0) {
                log.debug("The bean to look is not initialized... do not update.");
                return bean;
            }

            if (bean.getTbkId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbkId()); }
            ps.executeUpdate();
            bean.resetIsModified();
            this.afterUpdate(bean); // listener callback

            return bean;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            sql = null;
            this.getManager().close(ps);
            this.freeConnection(c);
        }
    }

    /**
     * Saves an array of TbKpiBean beans into the database.
     *
     * @param beans the TbKpiBean bean table to be saved
     * @return the saved TbKpiBean array.
     * @throws DAOException
     */
    //15
    public TbKpiBean[] save(TbKpiBean[] beans) throws DAOException
    {
        for (int iIndex = 0; iIndex < beans.length; iIndex ++)
        {
            this.save(beans[iIndex]);
        }
        return beans;
    }

    /**
     * Insert an array of TbKpiBean beans into the database.
     *
     * @param beans the TbKpiBean bean table to be inserted
     * @return the saved TbKpiBean array.
     * @throws DAOException
     */
    //16
    public TbKpiBean[] insert(TbKpiBean[] beans) throws DAOException
    {
        return this.save(beans);
    }

    /**
     * Updates an array of TbKpiBean beans into the database.
     *
     * @param beans the TbKpiBean bean table to be inserted
     * @return the saved TbKpiBean array.
     * @throws DAOException
     */
    //17
    public TbKpiBean[] update(TbKpiBean[] beans) throws DAOException
    {
        return this.save(beans);
    }



    //_____________________________________________________________________
    //
    // USING TEMPLATE
    //_____________________________________________________________________
    /**
     * Loads a unique TbKpiBean bean from a template one giving a c
     *
     * @param bean the TbKpiBean bean to look for
     * @return the bean matching the template
     * @throws DAOException
     */
    //18
    public TbKpiBean loadUniqueUsingTemplate(TbKpiBean bean) throws DAOException
    {
         TbKpiBean[] beans = this.loadUsingTemplate(bean);
         if (beans.length == 0) {
             return null;
         }
         if (beans.length > 1) {
             throw new ObjectRetrievalException("More than one element !!");
         }
         return beans[0];
     }

    /**
     * Loads an array of TbKpiBean from a template one.
     *
     * @param bean the TbKpiBean template to look for
     * @return all the TbKpiBean matching the template
     * @throws DAOException
     */
    //19
    public TbKpiBean[] loadUsingTemplate(TbKpiBean bean) throws DAOException
    {
        return this.loadUsingTemplate(bean, 1, -1);
    }

    /**
     * Loads an array of TbKpiBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbKpiBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return all the TbKpiBean matching the template
     * @throws DAOException
     */
    //20
    public TbKpiBean[] loadUsingTemplate(TbKpiBean bean, int startRow, int numRows) throws DAOException
    {
        return this.loadUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * Loads an array of TbKpiBean from a template one, given the start row and number of rows.
     *
     * @param bean the TbKpiBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return all the TbKpiBean matching the template
     * @throws DAOException
     */
    //20
    public TbKpiBean[] loadUsingTemplate(TbKpiBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        log.debug("loadUsingTemplate startRow:" + startRow + ", numRows:" + numRows + ", searchType:" + searchType);
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer(128);
        sql.append("SELECT ").append(ALL_FIELDS).append(" FROM tb_kpi ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, searchType) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... loading all");
            }
            log.debug("loadUsingTemplate: " + sql.toString());

            c = this.getConnection();
            int scrollType = ResultSet.TYPE_SCROLL_INSENSITIVE;
            if (startRow != 1) {
                scrollType = ResultSet.TYPE_SCROLL_SENSITIVE;
            }
            ps = c.prepareStatement(sql.toString(),
                                    scrollType,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            ps.executeQuery();
            return this.loadByPreparedStatement(ps, null, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new ObjectRetrievalException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    /**
     * Deletes rows using a TbKpiBean template.
     *
     * @param bean the TbKpiBean object(s) to be deleted
     * @return the number of deleted objects
     * @throws DAOException
     */
    //21
    public int deleteUsingTemplate(TbKpiBean bean) throws DAOException
    {
        if (bean.isTbkIdInitialized()) {
            return this.deleteByPrimaryKey(bean.getTbkId());
        }
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("DELETE FROM tb_kpi ");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            this.beforeDelete(bean); // listener callback
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
               log.debug("The bean to look is not initialized... deleting all");
            }
            log.debug("deleteUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, SEARCH_EXACT);

            int _rows = ps.executeUpdate();
            this.afterDelete(bean); // listener callback
            return _rows;
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }


    //_____________________________________________________________________
    //
    // USING INDICES
    //_____________________________________________________________________

    /**
     * Retrieves an array of TbKpiBean using the tbk_fk_1 index.
     *
     * @param tbkgId the tbkg_id column's value filter.
     * @return an array of TbKpiBean
     * @throws DAOException
     */
    public TbKpiBean[] loadBytbk_fk_1(Integer tbkgId) throws DAOException
    {
        TbKpiBean bean = this.createTbKpiBean();
        bean.setTbkgId(tbkgId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbk_fk_1 index.
     *
     * @param tbkgId the tbkg_id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbk_fk_1(Integer tbkgId) throws DAOException
    {
        TbKpiBean bean = this.createTbKpiBean();
        bean.setTbkgId(tbkgId);
        return deleteUsingTemplate(bean);
    }
    
    /**
     * Retrieves an array of TbKpiBean using the tbk_fk_2 index.
     *
     * @param tbeId the tbe_Id column's value filter.
     * @return an array of TbKpiBean
     * @throws DAOException
     */
    public TbKpiBean[] loadBytbk_fk_2(Integer tbeId) throws DAOException
    {
        TbKpiBean bean = this.createTbKpiBean();
        bean.setTbeId(tbeId);
        return loadUsingTemplate(bean);
    }
    
    /**
     * Deletes rows using the tbk_fk_2 index.
     *
     * @param tbeId the tbe_Id column's value filter.
     * @return the number of deleted objects
     * @throws DAOException
     */
    public int deleteBytbk_fk_2(Integer tbeId) throws DAOException
    {
        TbKpiBean bean = this.createTbKpiBean();
        bean.setTbeId(tbeId);
        return deleteUsingTemplate(bean);
    }
    


    //_____________________________________________________________________
    //
    // COUNT
    //_____________________________________________________________________

    /**
     * Retrieves the number of rows of the table tb_kpi.
     *
     * @return the number of rows returned
     * @throws DAOException
     */
    //24
    public int countAll() throws DAOException
    {
        return this.countWhere("");
    }

    /**
     * Retrieves the number of rows of the table tb_kpi with a 'where' clause.
     * It is up to you to pass the 'WHERE' in your where clausis.
     *
     * @param where the restriction clause
     * @return the number of rows returned
     * @throws DAOException
     */
    //25
    public int countWhere(String where) throws DAOException
    {
        String sql = "SELECT COUNT(*) AS MCOUNT FROM tb_kpi " + where;
        log.debug("countWhere: " + sql);
        Connection c = null;
        Statement st = null;
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            c = this.getConnection();
            st = c.createStatement();
            rs =  st.executeQuery(sql);
            if (rs.next())
            {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(st, rs);
            this.freeConnection(c);
            sql = null;
        }
        throw new DataAccessException("Error in countWhere where=[" + where + "]");
    }

    /**
     * Retrieves the number of rows of the table tb_kpi with a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return the number of rows returned
     * @throws DAOException
     */
    //26
    private int countByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            int iReturn = -1;
            rs = ps.executeQuery();
            if (rs.next()) {
                iReturn = rs.getInt("MCOUNT");
            }
            if (iReturn != -1) {
                return iReturn;
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
       throw new DataAccessException("Error in countByPreparedStatement");
    }

    /**
     * count the number of elements of a specific TbKpiBean bean
     *
     * @param bean the TbKpiBean bean to look for ant count
     * @return the number of rows returned
     * @throws DAOException
     */
    //27
    public int countUsingTemplate(TbKpiBean bean) throws DAOException
    {
        return this.countUsingTemplate(bean, -1, -1);
    }

    /**
     * count the number of elements of a specific TbKpiBean bean , given the start row and number of rows.
     *
     * @param bean the TbKpiBean template to look for and count
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbKpiBean bean, int startRow, int numRows) throws DAOException
    {
        return this.countUsingTemplate(bean, startRow, numRows, SEARCH_EXACT);
    }

    /**
     * count the number of elements of a specific TbKpiBean bean given the start row and number of rows and the search type
     *
     * @param bean the TbKpiBean template to look for
     * @param startRow the start row to be used (first row = 1, last row=-1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param searchType exact ?  like ? starting like ?
     * @return the number of rows returned
     * @throws DAOException
     */
    //20
    public int countUsingTemplate(TbKpiBean bean, int startRow, int numRows, int searchType) throws DAOException
    {
        Connection c = null;
        PreparedStatement ps = null;
        StringBuffer sql = new StringBuffer("SELECT COUNT(*) AS MCOUNT FROM tb_kpi");
        StringBuffer sqlWhere = new StringBuffer("");

        try
        {
            if (this.fillWhere(sqlWhere, bean, SEARCH_EXACT) > 0) {
                sql.append(" WHERE ").append(sqlWhere);
            } else {
                log.debug("The bean to look is not initialized... counting all...");
            }
            log.debug("countUsingTemplate: " + sql.toString());

            c = this.getConnection();
            ps = c.prepareStatement(sql.toString(),
                                    ResultSet.TYPE_SCROLL_INSENSITIVE,
                                    ResultSet.CONCUR_READ_ONLY);
            this.fillPreparedStatement(ps, bean, searchType);

            return this.countByPreparedStatement(ps);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(ps);
            this.freeConnection(c);
            sql = null;
            sqlWhere = null;
        }
    }

    //


    /**
     * fills the given stringbuffer with the sql where clausis constructed using the bean and the search type
     * @param sqlWhere the stringbuffer that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     */
    protected int fillWhere(StringBuffer sqlWhere, TbKpiBean bean, int searchType)
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        String sqlEqualsOperation = "=";
        if (searchType != SEARCH_EXACT) {
            sqlEqualsOperation = " like ";
        }
        try
        {
            if (bean.isTbkBobotModified()) {
                _dirtyCount ++;
                if (bean.getTbkBobot() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_bobot IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_bobot = ?");
                }
            }
            if (bean.isTbkTargetNilai5Modified()) {
                _dirtyCount ++;
                if (bean.getTbkTargetNilai5() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_target_nilai_5 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_target_nilai_5 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbkTargetNilai4Modified()) {
                _dirtyCount ++;
                if (bean.getTbkTargetNilai4() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_target_nilai_4 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_target_nilai_4 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbkTargetNilai3Modified()) {
                _dirtyCount ++;
                if (bean.getTbkTargetNilai3() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_target_nilai_3 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_target_nilai_3 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbkTargetNilai2Modified()) {
                _dirtyCount ++;
                if (bean.getTbkTargetNilai2() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_target_nilai_2 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_target_nilai_2 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbkTargetNilai1Modified()) {
                _dirtyCount ++;
                if (bean.getTbkTargetNilai1() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_target_nilai_1 IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_target_nilai_1 ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbkDescriptionModified()) {
                _dirtyCount ++;
                if (bean.getTbkDescription() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_description IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_description ").append(sqlEqualsOperation).append("?");
                }
            }
            if (bean.isTbeIdModified()) {
                _dirtyCount ++;
                if (bean.getTbeId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_Id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbe_Id = ?");
                }
            }
            if (bean.isTbkgIdModified()) {
                _dirtyCount ++;
                if (bean.getTbkgId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbkg_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbkg_id = ?");
                }
            }
            if (bean.isTbkIdModified()) {
                _dirtyCount ++;
                if (bean.getTbkId() == null) {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_id IS NULL");
                } else {
                    sqlWhere.append((sqlWhere.length() == 0) ? " " : " AND ").append("tbk_id = ?");
                }
            }
        }
        finally
        {
            sqlEqualsOperation = null;
        }
        return _dirtyCount;
    }

    /**
     * fill the given prepared statement with the bean values and a search type
     * @param ps the preparedStatement that will be filled
     * @param bean the bean to use for creating the where clausis
     * @param searchType exact ?  like ? starting like ?
     * @return the number of clausis returned
     * @throws DAOException
     */
    protected int fillPreparedStatement(PreparedStatement ps, TbKpiBean bean, int searchType) throws DAOException
    {
        if (bean == null) {
            return 0;
        }
        int _dirtyCount = 0;
        try
        {
            if (bean.isTbkBobotModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkBobot() + "]");
                if (bean.getTbkBobot() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbkBobot()); }
            }
            if (bean.isTbkTargetNilai5Modified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkTargetNilai5() + "]");
                        if (bean.getTbkTargetNilai5() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkTargetNilai5()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkTargetNilai5() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkTargetNilai5() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkTargetNilai5() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkTargetNilai5());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkTargetNilai5() + "]");
                        if (bean.getTbkTargetNilai5() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkTargetNilai5() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbkTargetNilai4Modified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkTargetNilai4() + "]");
                        if (bean.getTbkTargetNilai4() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkTargetNilai4()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkTargetNilai4() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkTargetNilai4() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkTargetNilai4() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkTargetNilai4());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkTargetNilai4() + "]");
                        if (bean.getTbkTargetNilai4() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkTargetNilai4() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbkTargetNilai3Modified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkTargetNilai3() + "]");
                        if (bean.getTbkTargetNilai3() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkTargetNilai3()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkTargetNilai3() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkTargetNilai3() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkTargetNilai3() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkTargetNilai3());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkTargetNilai3() + "]");
                        if (bean.getTbkTargetNilai3() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkTargetNilai3() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbkTargetNilai2Modified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkTargetNilai2() + "]");
                        if (bean.getTbkTargetNilai2() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkTargetNilai2()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkTargetNilai2() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkTargetNilai2() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkTargetNilai2() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkTargetNilai2());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkTargetNilai2() + "]");
                        if (bean.getTbkTargetNilai2() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkTargetNilai2() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbkTargetNilai1Modified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkTargetNilai1() + "]");
                        if (bean.getTbkTargetNilai1() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkTargetNilai1()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkTargetNilai1() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkTargetNilai1() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkTargetNilai1() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkTargetNilai1());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkTargetNilai1() + "]");
                        if (bean.getTbkTargetNilai1() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkTargetNilai1() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbkDescriptionModified()) {
                switch (searchType){
                    case SEARCH_EXACT:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkDescription() + "]");
                        if (bean.getTbkDescription() == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkDescription()); }
                        break;
                    case SEARCH_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkDescription() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkDescription() + "%");
                        break;
                    case SEARCH_STARTING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkDescription() + "%]");
                        ps.setString(++_dirtyCount, "%" + bean.getTbkDescription());
                        break;
                    case SEARCH_ENDING_LIKE:
                        log.debug("Setting for " + _dirtyCount + " [%" + bean.getTbkDescription() + "]");
                        if (bean.getTbkDescription() + "%" == null) { ps.setNull(++_dirtyCount, Types.VARCHAR); } else { ps.setString(++_dirtyCount, bean.getTbkDescription() + "%"); }
                        break;
                    default:
                        throw new DAOException("Unknown search type " + searchType);
                }
            }
            if (bean.isTbeIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbeId() + "]");
                if (bean.getTbeId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbeId()); }
            }
            if (bean.isTbkgIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkgId() + "]");
                if (bean.getTbkgId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbkgId()); }
            }
            if (bean.isTbkIdModified()) {
                log.debug("Setting for " + _dirtyCount + " [" + bean.getTbkId() + "]");
                if (bean.getTbkId() == null) { ps.setNull(++_dirtyCount, Types.INTEGER); } else { Manager.setInteger(ps, ++_dirtyCount, bean.getTbkId()); }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        return _dirtyCount;
    }


    //_____________________________________________________________________
    //
    // DECODE RESULT SET
    //_____________________________________________________________________

    /**
     * decode a resultset in an array of TbKpiBean objects
     *
     * @param rs the resultset to decode
     * @param fieldList table of the field's associated constants
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @return the resulting TbKpiBean table
     * @throws DAOException
     */
    //28
    public TbKpiBean[] decodeResultSet(ResultSet rs, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        List v = new ArrayList();
        try
        {
            if (rs.absolute(startRow) && numRows!=0)
            {
                int count = 0;
                if(fieldList == null) {
                    do
                    {
                        v.add(decodeRow(rs));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
                else {
                    do
                    {
                        v.add(decodeRow(rs, fieldList));
                        count++;
                    } while ( (count<numRows||numRows<0) && rs.next() );
                }
            }
            return (TbKpiBean[])v.toArray(new TbKpiBean[v.size()]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
        }
    }

    /**
     * Transforms a ResultSet iterating on the tb_kpi on a TbKpiBean bean.
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbKpiBean bean
     * @throws DAOException
     */
    //29
    public TbKpiBean decodeRow(ResultSet rs) throws DAOException
    {
        TbKpiBean bean = this.createTbKpiBean();
        try
        {
            bean.setTbkBobot(Manager.getInteger(rs, 1));
            bean.setTbkTargetNilai5(rs.getString(2));
            bean.setTbkTargetNilai4(rs.getString(3));
            bean.setTbkTargetNilai3(rs.getString(4));
            bean.setTbkTargetNilai2(rs.getString(5));
            bean.setTbkTargetNilai1(rs.getString(6));
            bean.setTbkDescription(rs.getString(7));
            bean.setTbeId(Manager.getInteger(rs, 8));
            bean.setTbkgId(Manager.getInteger(rs, 9));
            bean.setTbkId(Manager.getInteger(rs, 10));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }
	
    //29A
    public TbKpiBean toBean(TbKpiBeanModel beanModel, TbKpiBean bean)
    {
		if (beanModel.getTbkBobot() != null)
			bean.setTbkBobot(beanModel.getTbkBobot());

		if (bean.getTbkBobot() != null)
		if ("java.sql.Timestamp".equals(bean.getTbkBobot().getClass().getName()))
			bean.setTbkBobot(beanModel.getTbkBobot());
		
		if (beanModel.getTbkTargetNilai5() != null)
			bean.setTbkTargetNilai5(beanModel.getTbkTargetNilai5());

		if (bean.getTbkTargetNilai5() != null)
		if ("java.sql.Timestamp".equals(bean.getTbkTargetNilai5().getClass().getName()))
			bean.setTbkTargetNilai5(beanModel.getTbkTargetNilai5());
		
		if (beanModel.getTbkTargetNilai4() != null)
			bean.setTbkTargetNilai4(beanModel.getTbkTargetNilai4());

		if (bean.getTbkTargetNilai4() != null)
		if ("java.sql.Timestamp".equals(bean.getTbkTargetNilai4().getClass().getName()))
			bean.setTbkTargetNilai4(beanModel.getTbkTargetNilai4());
		
		if (beanModel.getTbkTargetNilai3() != null)
			bean.setTbkTargetNilai3(beanModel.getTbkTargetNilai3());

		if (bean.getTbkTargetNilai3() != null)
		if ("java.sql.Timestamp".equals(bean.getTbkTargetNilai3().getClass().getName()))
			bean.setTbkTargetNilai3(beanModel.getTbkTargetNilai3());
		
		if (beanModel.getTbkTargetNilai2() != null)
			bean.setTbkTargetNilai2(beanModel.getTbkTargetNilai2());

		if (bean.getTbkTargetNilai2() != null)
		if ("java.sql.Timestamp".equals(bean.getTbkTargetNilai2().getClass().getName()))
			bean.setTbkTargetNilai2(beanModel.getTbkTargetNilai2());
		
		if (beanModel.getTbkTargetNilai1() != null)
			bean.setTbkTargetNilai1(beanModel.getTbkTargetNilai1());

		if (bean.getTbkTargetNilai1() != null)
		if ("java.sql.Timestamp".equals(bean.getTbkTargetNilai1().getClass().getName()))
			bean.setTbkTargetNilai1(beanModel.getTbkTargetNilai1());
		
		if (beanModel.getTbkDescription() != null)
			bean.setTbkDescription(beanModel.getTbkDescription());

		if (bean.getTbkDescription() != null)
		if ("java.sql.Timestamp".equals(bean.getTbkDescription().getClass().getName()))
			bean.setTbkDescription(beanModel.getTbkDescription());
		
		if (beanModel.getTbeId() != null)
			bean.setTbeId(beanModel.getTbeId());

		if (bean.getTbeId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbeId().getClass().getName()))
			bean.setTbeId(beanModel.getTbeId());
		
		if (beanModel.getTbkgId() != null)
			bean.setTbkgId(beanModel.getTbkgId());

		if (bean.getTbkgId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbkgId().getClass().getName()))
			bean.setTbkgId(beanModel.getTbkgId());
		
		if (beanModel.getTbkId() != null)
			bean.setTbkId(beanModel.getTbkId());

		if (bean.getTbkId() != null)
		if ("java.sql.Timestamp".equals(bean.getTbkId().getClass().getName()))
			bean.setTbkId(beanModel.getTbkId());
		
        return bean;
    }
	
    //29AA
    public TbKpiBean[] toBeans(TbKpiBeanModel beanModels[])
    {
    	int beanModelsCount = beanModels.length;
    	TbKpiBean beans[] = new TbKpiBean[beanModelsCount];
    	
		for (int i = 0; i < beanModelsCount; i++) {
			beans[i] = toBean(beanModels[i], beans[i]);
		}
    	
    	return beans;
    }

    //29C
    public TbKpiBeanModel toBeanModel(TbKpiBean bean)
    {
    	TbKpiBeanModel beanModel = new TbKpiBeanModel();
		beanModel.setTbkBobot(bean.getTbkBobot());
		beanModel.setTbkTargetNilai5(bean.getTbkTargetNilai5());
		beanModel.setTbkTargetNilai4(bean.getTbkTargetNilai4());
		beanModel.setTbkTargetNilai3(bean.getTbkTargetNilai3());
		beanModel.setTbkTargetNilai2(bean.getTbkTargetNilai2());
		beanModel.setTbkTargetNilai1(bean.getTbkTargetNilai1());
		beanModel.setTbkDescription(bean.getTbkDescription());
		beanModel.setTbeId(bean.getTbeId());
		beanModel.setTbkgId(bean.getTbkgId());
		beanModel.setTbkId(bean.getTbkId());
		return beanModel;
    }
    
    //29CC
    public TbKpiBeanModel[] toBeanModels(TbKpiBean beans[])
    {
    	int beansCount = beans.length;
    	TbKpiBeanModel beanModels[] = new TbKpiBeanModel[beansCount];
    	
		for (int i = 0; i < beansCount; i++) {
			beanModels[i] = toBeanModel(beans[i]);
		}
    	
    	return beanModels;
    }
	
    /**
     * Transforms a ResultSet iterating on the tb_kpi table on a TbKpiBean bean according to a list of fields.
     *
     * @param rs the ResultSet to be transformed
     * @param fieldList table of the field's associated constants
     * @return bean resulting TbKpiBean bean
     * @throws DAOException
     */
    //30
    public TbKpiBean decodeRow(ResultSet rs, int[] fieldList) throws DAOException
    {
        TbKpiBean bean = this.createTbKpiBean();
        int pos = 0;
        try
        {
            for(int i = 0; i < fieldList.length; i++)
            {
                switch(fieldList[i])
                {
                    case ID_TBK_BOBOT:
                        ++pos;
                        bean.setTbkBobot(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBK_TARGET_NILAI_5:
                        ++pos;
                        bean.setTbkTargetNilai5(rs.getString(pos));
                        break;
                    case ID_TBK_TARGET_NILAI_4:
                        ++pos;
                        bean.setTbkTargetNilai4(rs.getString(pos));
                        break;
                    case ID_TBK_TARGET_NILAI_3:
                        ++pos;
                        bean.setTbkTargetNilai3(rs.getString(pos));
                        break;
                    case ID_TBK_TARGET_NILAI_2:
                        ++pos;
                        bean.setTbkTargetNilai2(rs.getString(pos));
                        break;
                    case ID_TBK_TARGET_NILAI_1:
                        ++pos;
                        bean.setTbkTargetNilai1(rs.getString(pos));
                        break;
                    case ID_TBK_DESCRIPTION:
                        ++pos;
                        bean.setTbkDescription(rs.getString(pos));
                        break;
                    case ID_TBE_ID:
                        ++pos;
                        bean.setTbeId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBKG_ID:
                        ++pos;
                        bean.setTbkgId(Manager.getInteger(rs, pos));
                        break;
                    case ID_TBK_ID:
                        ++pos;
                        bean.setTbkId(Manager.getInteger(rs, pos));
                        break;
                    default:
                        throw new DAOException("Unknown field id " + fieldList[i]);
                }
            }
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    /**
     * Transforms a ResultSet iterating on the tb_kpi on a TbKpiBean bean using the names of the columns
     *
     * @param rs the ResultSet to be transformed
     * @return bean resulting TbKpiBean bean
     * @throws DAOException
     */
    //31
    public TbKpiBean metaDataDecodeRow(ResultSet rs) throws DAOException
    {
        TbKpiBean bean = this.createTbKpiBean();
        try
        {
            bean.setTbkBobot(Manager.getInteger(rs, "tbk_bobot"));
            bean.setTbkTargetNilai5(rs.getString("tbk_target_nilai_5"));
            bean.setTbkTargetNilai4(rs.getString("tbk_target_nilai_4"));
            bean.setTbkTargetNilai3(rs.getString("tbk_target_nilai_3"));
            bean.setTbkTargetNilai2(rs.getString("tbk_target_nilai_2"));
            bean.setTbkTargetNilai1(rs.getString("tbk_target_nilai_1"));
            bean.setTbkDescription(rs.getString("tbk_description"));
            bean.setTbeId(Manager.getInteger(rs, "tbe_Id"));
            bean.setTbkgId(Manager.getInteger(rs, "tbkg_id"));
            bean.setTbkId(Manager.getInteger(rs, "tbk_id"));
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }

        bean.isNew(false);
        bean.resetIsModified();

        return bean;
    }

    //////////////////////////////////////
    // PREPARED STATEMENT LOADER
    //////////////////////////////////////

    /**
     * Loads all the elements using a prepared statement.
     *
     * @param ps the PreparedStatement to be used
     * @return an array of TbKpiBean
     * @throws DAOException
     */
    //32
    public TbKpiBean[] loadByPreparedStatement(PreparedStatement ps) throws DAOException
    {
        return this.loadByPreparedStatement(ps, null);
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved.
     *
     * @param ps the PreparedStatement to be used
     * @param fieldList table of the field's associated constants
     * @return an array of TbKpiBean
     * @throws DAOException
     */
    //33
    public TbKpiBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList) throws DAOException
    {
        ResultSet rs =  null;
		List v =  null;
		try
		{
		    rs =  ps.executeQuery();
		    v = new ArrayList();
			if(fieldList == null) {
				while(rs.next()) {
					v.add(decodeRow(rs));
				}
			}
			else {
				while(rs.next()) {
					v.add(decodeRow(rs, fieldList));
				}
			}

			return (TbKpiBean[])v.toArray(new TbKpiBean[0]);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            if (v != null) { v.clear(); v = null;}
            getManager().close(rs);
        }
    }

    /**
     * Loads all the elements using a prepared statement specifying a list of fields to be retrieved,
     * and specifying the start row and the number of rows.
     *
     * @param ps the PreparedStatement to be used
     * @param startRow the start row to be used (first row = 1, last row = -1)
     * @param numRows the number of rows to be retrieved (all rows = a negative number)
     * @param fieldList table of the field's associated constants
     * @return an array of TbKpiBean
     * @throws DAOException
     */
    //34
    public TbKpiBean[] loadByPreparedStatement(PreparedStatement ps, int[] fieldList, int startRow, int numRows) throws DAOException
    {
        ResultSet rs =  null;
        try
        {
            rs = ps.executeQuery();
            return this.decodeResultSet(rs, fieldList, startRow, numRows);
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
        finally
        {
            this.getManager().close(rs);
        }
    }

    //_____________________________________________________________________
    //
    // LISTENER
    //_____________________________________________________________________
    private TbKpiListener listener = null;

    /**
     * Registers a unique TbKpiListener listener.
     */
    //35
    public void registerListener(TbKpiListener listener)
    {
        this.listener = listener;
    }

    /**
     * Before the save of the TbKpiBean bean.
     *
     * @param bean the TbKpiBean bean to be saved
     */
    //36
    private void beforeInsert(TbKpiBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeInsert(bean);
        }
    }

    /**
     * After the save of the TbKpiBean bean.
     *
     * @param bean the TbKpiBean bean to be saved
     */
    //37
    private void afterInsert(TbKpiBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterInsert(bean);
        }
    }

    /**
     * Before the update of the TbKpiBean bean.
     *
     * @param bean the TbKpiBean bean to be updated
     */
    //38
    private void beforeUpdate(TbKpiBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeUpdate(bean);
        }
    }

    /**
     * After the update of the TbKpiBean bean.
     *
     * @param bean the TbKpiBean bean to be updated
     */
    //39
    private void afterUpdate(TbKpiBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterUpdate(bean);
        }
    }

    /**
     * Before the delete of the TbKpiBean bean.
     *
     * @param bean the TbKpiBean bean to be deleted
     */
    private void beforeDelete(TbKpiBean bean) throws DAOException
    {
        if (listener != null) {
            listener.beforeDelete(bean);
        }
    }

    /**
     * After the delete of the TbKpiBean bean.
     *
     * @param bean the TbKpiBean bean to be deleted
     */
    private void afterDelete(TbKpiBean bean) throws DAOException
    {
        if (listener != null) {
            listener.afterDelete(bean);
        }
    }

    //_____________________________________________________________________
    //
    // UTILS
    //_____________________________________________________________________

    /**
     * Retrieves the manager object used to get connections.
     *
     * @return the manager used
     */
    //40
    public Manager getManager()
    {
        return Manager.getInstance();
    }

    /**
     * Frees the connection.
     *
     * @param c the connection to release
     */
    //41
    public void freeConnection(Connection c)
    {
        this.getManager().releaseConnection(c); // back to pool
    }

    /**
     * Gets the connection.
     */
    //42
    public Connection getConnection() throws DAOException
    {
        try
        {
            return this.getManager().getConnection();
        }
        catch(SQLException e)
        {
            throw new DataAccessException(e);
        }
    }
}
