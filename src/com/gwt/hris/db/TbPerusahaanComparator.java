// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.util.Comparator;


/**
 * Comparator class is used to sort the TbPerusahaanBean objects.
 * @author sql2java
 */
public class TbPerusahaanComparator implements Comparator
{
    /**
     * Holds the field on which the comparison is performed.
     */
    private int iType;
    /**
     * Value that will contain the information about the order of the sort: normal or reversal.
     */
    private boolean bReverse;

    /**
     * Constructor class for TbPerusahaanComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbPerusahaanComparator(TbPerusahaanManager.ID_TBP_LOCAL_CURRENCY_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbPerusahaanManager.ID_TBP_LOCAL_CURRENCY_ID
     *   <li>TbPerusahaanManager.ID_TBP_JKM
     *   <li>TbPerusahaanManager.ID_TBP_JKK
     *   <li>TbPerusahaanManager.ID_TBP_COMMENTS
     *   <li>TbPerusahaanManager.ID_TBP_ZIP_CODE
     *   <li>TbPerusahaanManager.ID_TBP_PROVINCE
     *   <li>TbPerusahaanManager.ID_TBP_CITY
     *   <li>TbPerusahaanManager.ID_TBP_ADDRESS1
     *   <li>TbPerusahaanManager.ID_FK_TBN_ID
     *   <li>TbPerusahaanManager.ID_TBP_FAX
     *   <li>TbPerusahaanManager.ID_TBP_PHONE
     *   <li>TbPerusahaanManager.ID_TBP_TAX_ID
     *   <li>TbPerusahaanManager.ID_TBP_NAME
     *   <li>TbPerusahaanManager.ID_TBP_PERUSAHAAN_ID
     *   <li>TbPerusahaanManager.ID_TBP_ID
     * </ul>
     */
    public TbPerusahaanComparator(int iType)
    {
        this(iType, false);
    }

    /**
     * Constructor class for TbPerusahaanComparator.
     * <br>
     * Example:
     * <br>
     * <code>Arrays.sort(pArray, new TbPerusahaanComparator(TbPerusahaanManager.ID_TBP_LOCAL_CURRENCY_ID, bReverse));<code>
     *
     * @param iType the field from which you want to sort.
     * <br>
     * Possible values are:
     * <ul>
     *   <li>TbPerusahaanManager.ID_TBP_LOCAL_CURRENCY_ID
     *   <li>TbPerusahaanManager.ID_TBP_JKM
     *   <li>TbPerusahaanManager.ID_TBP_JKK
     *   <li>TbPerusahaanManager.ID_TBP_COMMENTS
     *   <li>TbPerusahaanManager.ID_TBP_ZIP_CODE
     *   <li>TbPerusahaanManager.ID_TBP_PROVINCE
     *   <li>TbPerusahaanManager.ID_TBP_CITY
     *   <li>TbPerusahaanManager.ID_TBP_ADDRESS1
     *   <li>TbPerusahaanManager.ID_FK_TBN_ID
     *   <li>TbPerusahaanManager.ID_TBP_FAX
     *   <li>TbPerusahaanManager.ID_TBP_PHONE
     *   <li>TbPerusahaanManager.ID_TBP_TAX_ID
     *   <li>TbPerusahaanManager.ID_TBP_NAME
     *   <li>TbPerusahaanManager.ID_TBP_PERUSAHAAN_ID
     *   <li>TbPerusahaanManager.ID_TBP_ID
     * </ul>
     *
     * @param bReverse set this value to true, if you want to reverse the sorting results
     */
    public TbPerusahaanComparator(int iType, boolean bReverse)
    {
        this.iType = iType;
        this.bReverse = bReverse;
    }

    /**
     * Implementation of the compare method.
     */
    public int compare(Object pObj1, Object pObj2)
    {
        TbPerusahaanBean b1 = (TbPerusahaanBean)pObj1;
        TbPerusahaanBean b2 = (TbPerusahaanBean)pObj2;
        int iReturn = 0;
        switch(iType)
        {
            case TbPerusahaanManager.ID_TBP_LOCAL_CURRENCY_ID:
                if (b1.getTbpLocalCurrencyId() == null && b2.getTbpLocalCurrencyId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpLocalCurrencyId() == null && b2.getTbpLocalCurrencyId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpLocalCurrencyId() != null && b2.getTbpLocalCurrencyId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpLocalCurrencyId().compareTo(b2.getTbpLocalCurrencyId());
                }
                break;
            case TbPerusahaanManager.ID_TBP_JKM:
                if (b1.getTbpJkm() == null && b2.getTbpJkm() != null) {
                    iReturn = -1;
                } else if (b1.getTbpJkm() == null && b2.getTbpJkm() == null) {
                    iReturn = 0;
                } else if (b1.getTbpJkm() != null && b2.getTbpJkm() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpJkm().compareTo(b2.getTbpJkm());
                }
                break;
            case TbPerusahaanManager.ID_TBP_JKK:
                if (b1.getTbpJkk() == null && b2.getTbpJkk() != null) {
                    iReturn = -1;
                } else if (b1.getTbpJkk() == null && b2.getTbpJkk() == null) {
                    iReturn = 0;
                } else if (b1.getTbpJkk() != null && b2.getTbpJkk() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpJkk().compareTo(b2.getTbpJkk());
                }
                break;
            case TbPerusahaanManager.ID_TBP_COMMENTS:
                if (b1.getTbpComments() == null && b2.getTbpComments() != null) {
                    iReturn = -1;
                } else if (b1.getTbpComments() == null && b2.getTbpComments() == null) {
                    iReturn = 0;
                } else if (b1.getTbpComments() != null && b2.getTbpComments() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpComments().compareTo(b2.getTbpComments());
                }
                break;
            case TbPerusahaanManager.ID_TBP_ZIP_CODE:
                if (b1.getTbpZipCode() == null && b2.getTbpZipCode() != null) {
                    iReturn = -1;
                } else if (b1.getTbpZipCode() == null && b2.getTbpZipCode() == null) {
                    iReturn = 0;
                } else if (b1.getTbpZipCode() != null && b2.getTbpZipCode() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpZipCode().compareTo(b2.getTbpZipCode());
                }
                break;
            case TbPerusahaanManager.ID_TBP_PROVINCE:
                if (b1.getTbpProvince() == null && b2.getTbpProvince() != null) {
                    iReturn = -1;
                } else if (b1.getTbpProvince() == null && b2.getTbpProvince() == null) {
                    iReturn = 0;
                } else if (b1.getTbpProvince() != null && b2.getTbpProvince() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpProvince().compareTo(b2.getTbpProvince());
                }
                break;
            case TbPerusahaanManager.ID_TBP_CITY:
                if (b1.getTbpCity() == null && b2.getTbpCity() != null) {
                    iReturn = -1;
                } else if (b1.getTbpCity() == null && b2.getTbpCity() == null) {
                    iReturn = 0;
                } else if (b1.getTbpCity() != null && b2.getTbpCity() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpCity().compareTo(b2.getTbpCity());
                }
                break;
            case TbPerusahaanManager.ID_TBP_ADDRESS1:
                if (b1.getTbpAddress1() == null && b2.getTbpAddress1() != null) {
                    iReturn = -1;
                } else if (b1.getTbpAddress1() == null && b2.getTbpAddress1() == null) {
                    iReturn = 0;
                } else if (b1.getTbpAddress1() != null && b2.getTbpAddress1() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpAddress1().compareTo(b2.getTbpAddress1());
                }
                break;
            case TbPerusahaanManager.ID_FK_TBN_ID:
                if (b1.getFkTbnId() == null && b2.getFkTbnId() != null) {
                    iReturn = -1;
                } else if (b1.getFkTbnId() == null && b2.getFkTbnId() == null) {
                    iReturn = 0;
                } else if (b1.getFkTbnId() != null && b2.getFkTbnId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getFkTbnId().compareTo(b2.getFkTbnId());
                }
                break;
            case TbPerusahaanManager.ID_TBP_FAX:
                if (b1.getTbpFax() == null && b2.getTbpFax() != null) {
                    iReturn = -1;
                } else if (b1.getTbpFax() == null && b2.getTbpFax() == null) {
                    iReturn = 0;
                } else if (b1.getTbpFax() != null && b2.getTbpFax() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpFax().compareTo(b2.getTbpFax());
                }
                break;
            case TbPerusahaanManager.ID_TBP_PHONE:
                if (b1.getTbpPhone() == null && b2.getTbpPhone() != null) {
                    iReturn = -1;
                } else if (b1.getTbpPhone() == null && b2.getTbpPhone() == null) {
                    iReturn = 0;
                } else if (b1.getTbpPhone() != null && b2.getTbpPhone() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpPhone().compareTo(b2.getTbpPhone());
                }
                break;
            case TbPerusahaanManager.ID_TBP_TAX_ID:
                if (b1.getTbpTaxId() == null && b2.getTbpTaxId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpTaxId() == null && b2.getTbpTaxId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpTaxId() != null && b2.getTbpTaxId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpTaxId().compareTo(b2.getTbpTaxId());
                }
                break;
            case TbPerusahaanManager.ID_TBP_NAME:
                if (b1.getTbpName() == null && b2.getTbpName() != null) {
                    iReturn = -1;
                } else if (b1.getTbpName() == null && b2.getTbpName() == null) {
                    iReturn = 0;
                } else if (b1.getTbpName() != null && b2.getTbpName() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpName().compareTo(b2.getTbpName());
                }
                break;
            case TbPerusahaanManager.ID_TBP_PERUSAHAAN_ID:
                if (b1.getTbpPerusahaanId() == null && b2.getTbpPerusahaanId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpPerusahaanId() == null && b2.getTbpPerusahaanId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpPerusahaanId() != null && b2.getTbpPerusahaanId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpPerusahaanId().compareTo(b2.getTbpPerusahaanId());
                }
                break;
            case TbPerusahaanManager.ID_TBP_ID:
                if (b1.getTbpId() == null && b2.getTbpId() != null) {
                    iReturn = -1;
                } else if (b1.getTbpId() == null && b2.getTbpId() == null) {
                    iReturn = 0;
                } else if (b1.getTbpId() != null && b2.getTbpId() == null) {
                    iReturn = 1;
                } else {
                    iReturn = b1.getTbpId().compareTo(b2.getTbpId());
                }
                break;
            default:
                throw new IllegalArgumentException("Type passed for the field is not supported");
        }

        return bReverse ? (-1 * iReturn) : iReturn;
    }}
