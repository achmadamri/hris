// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbNotificationTemplateBean is a mapping of tb_notification_template Table.
 * @author sql2java
*/
public class TbNotificationTemplateBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 5878081665867890644L;
	
    private String tbntSubject;

    private boolean tbntSubjectIsModified = false;
    private boolean tbntSubjectIsInitialized = false;

    private String tbntData;

    private boolean tbntDataIsModified = false;
    private boolean tbntDataIsInitialized = false;

    private Integer tbntId;

    private boolean tbntIdIsModified = false;
    private boolean tbntIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbNotificationTemplateBean is via the createTbNotificationTemplateBean method in TbNotificationTemplateManager or
     * via the factory class TbNotificationTemplateFactory create method
     */
    protected TbNotificationTemplateBean()
    {
    }

    /**
     * Getter method for tbntSubject.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification_template.tbnt_subject</li>
     * <li>column size: 100</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbntSubject
     */
    public String getTbntSubject()
    {
        return tbntSubject;
    }

    /**
     * Setter method for tbntSubject.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbntSubject
     */
    public void setTbntSubject(String newVal)
    {
        if ((newVal != null && tbntSubject != null && (newVal.compareTo(tbntSubject) == 0)) ||
            (newVal == null && tbntSubject == null && tbntSubjectIsInitialized)) {
            return;
        }
        tbntSubject = newVal;
        tbntSubjectIsModified = true;
        tbntSubjectIsInitialized = true;
    }

    /**
     * Determines if the tbntSubject has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbntSubjectModified()
    {
        return tbntSubjectIsModified;
    }

    /**
     * Determines if the tbntSubject has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbntSubjectInitialized()
    {
        return tbntSubjectIsInitialized;
    }

    /**
     * Getter method for tbntData.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification_template.tbnt_data</li>
     * <li>column size: 5000</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbntData
     */
    public String getTbntData()
    {
        return tbntData;
    }

    /**
     * Setter method for tbntData.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbntData
     */
    public void setTbntData(String newVal)
    {
        if ((newVal != null && tbntData != null && (newVal.compareTo(tbntData) == 0)) ||
            (newVal == null && tbntData == null && tbntDataIsInitialized)) {
            return;
        }
        tbntData = newVal;
        tbntDataIsModified = true;
        tbntDataIsInitialized = true;
    }

    /**
     * Determines if the tbntData has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbntDataModified()
    {
        return tbntDataIsModified;
    }

    /**
     * Determines if the tbntData has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbntDataInitialized()
    {
        return tbntDataIsInitialized;
    }

    /**
     * Getter method for tbntId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification_template.tbnt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbntId
     */
    public Integer getTbntId()
    {
        return tbntId;
    }

    /**
     * Setter method for tbntId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbntId
     */
    public void setTbntId(Integer newVal)
    {
        if ((newVal != null && tbntId != null && (newVal.compareTo(tbntId) == 0)) ||
            (newVal == null && tbntId == null && tbntIdIsInitialized)) {
            return;
        }
        tbntId = newVal;
        tbntIdIsModified = true;
        tbntIdIsInitialized = true;
    }

    /**
     * Setter method for tbntId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbntId
     */
    public void setTbntId(int newVal)
    {
        setTbntId(new Integer(newVal));
    }

    /**
     * Determines if the tbntId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbntIdModified()
    {
        return tbntIdIsModified;
    }

    /**
     * Determines if the tbntId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbntIdInitialized()
    {
        return tbntIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbntSubjectIsModified 		|| tbntDataIsModified  		|| tbntIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbntSubjectIsModified = false;
        tbntDataIsModified = false;
        tbntIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbNotificationTemplateBean bean)
    {
        setTbntSubject(bean.getTbntSubject());
        setTbntData(bean.getTbntData());
        setTbntId(bean.getTbntId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbnt_subject", getTbntSubject() == null ? "" : getTbntSubject().toString());
        dictionnary.put("tbnt_data", getTbntData() == null ? "" : getTbntData().toString());
        dictionnary.put("tbnt_id", getTbntId() == null ? "" : getTbntId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbnt_id", getTbntId() == null ? "" : getTbntId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbnt_subject".equalsIgnoreCase(column) || "tbntSubject".equalsIgnoreCase(column)) {
            return getTbntSubject() == null ? "" : getTbntSubject().toString();
        } else if ("tbnt_data".equalsIgnoreCase(column) || "tbntData".equalsIgnoreCase(column)) {
            return getTbntData() == null ? "" : getTbntData().toString();
        } else if ("tbnt_id".equalsIgnoreCase(column) || "tbntId".equalsIgnoreCase(column)) {
            return getTbntId() == null ? "" : getTbntId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbNotificationTemplateBean)) {
            return false;
        }

		TbNotificationTemplateBean obj = (TbNotificationTemplateBean) object;
		return new EqualsBuilder()
            .append(getTbntSubject(), obj.getTbntSubject())
            .append(getTbntData(), obj.getTbntData())
            .append(getTbntId(), obj.getTbntId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbntSubject())
            .append(getTbntData())
            .append(getTbntId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbnt_subject", getTbntSubject())
            .append("tbnt_data", getTbntData())
            .append("tbnt_id", getTbntId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbNotificationTemplateBean obj = (TbNotificationTemplateBean) object;
        return new CompareToBuilder()
            .append(getTbntSubject(), obj.getTbntSubject())
            .append(getTbntData(), obj.getTbntData())
            .append(getTbntId(), obj.getTbntId())
            .toComparison();
   }
}
