// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbNotificationUiBean is a mapping of tb_notification_ui Table.
 * @author sql2java
*/
public class TbNotificationUiBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 1548489222970005868L;
	
    private String tbnuName;

    private boolean tbnuNameIsModified = false;
    private boolean tbnuNameIsInitialized = false;

    private Integer tbnuId;

    private boolean tbnuIdIsModified = false;
    private boolean tbnuIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbNotificationUiBean is via the createTbNotificationUiBean method in TbNotificationUiManager or
     * via the factory class TbNotificationUiFactory create method
     */
    protected TbNotificationUiBean()
    {
    }

    /**
     * Getter method for tbnuName.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification_ui.tbnu_name</li>
     * <li>column size: 45</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbnuName
     */
    public String getTbnuName()
    {
        return tbnuName;
    }

    /**
     * Setter method for tbnuName.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnuName
     */
    public void setTbnuName(String newVal)
    {
        if ((newVal != null && tbnuName != null && (newVal.compareTo(tbnuName) == 0)) ||
            (newVal == null && tbnuName == null && tbnuNameIsInitialized)) {
            return;
        }
        tbnuName = newVal;
        tbnuNameIsModified = true;
        tbnuNameIsInitialized = true;
    }

    /**
     * Determines if the tbnuName has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnuNameModified()
    {
        return tbnuNameIsModified;
    }

    /**
     * Determines if the tbnuName has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnuNameInitialized()
    {
        return tbnuNameIsInitialized;
    }

    /**
     * Getter method for tbnuId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification_ui.tbnu_id</li>
     * <li> imported key: tb_notification.tbnu_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbnuId
     */
    public Integer getTbnuId()
    {
        return tbnuId;
    }

    /**
     * Setter method for tbnuId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnuId
     */
    public void setTbnuId(Integer newVal)
    {
        if ((newVal != null && tbnuId != null && (newVal.compareTo(tbnuId) == 0)) ||
            (newVal == null && tbnuId == null && tbnuIdIsInitialized)) {
            return;
        }
        tbnuId = newVal;
        tbnuIdIsModified = true;
        tbnuIdIsInitialized = true;
    }

    /**
     * Setter method for tbnuId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnuId
     */
    public void setTbnuId(int newVal)
    {
        setTbnuId(new Integer(newVal));
    }

    /**
     * Determines if the tbnuId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnuIdModified()
    {
        return tbnuIdIsModified;
    }

    /**
     * Determines if the tbnuId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnuIdInitialized()
    {
        return tbnuIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbnuNameIsModified 		|| tbnuIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbnuNameIsModified = false;
        tbnuIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbNotificationUiBean bean)
    {
        setTbnuName(bean.getTbnuName());
        setTbnuId(bean.getTbnuId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbnu_name", getTbnuName() == null ? "" : getTbnuName().toString());
        dictionnary.put("tbnu_id", getTbnuId() == null ? "" : getTbnuId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbnu_id", getTbnuId() == null ? "" : getTbnuId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbnu_name".equalsIgnoreCase(column) || "tbnuName".equalsIgnoreCase(column)) {
            return getTbnuName() == null ? "" : getTbnuName().toString();
        } else if ("tbnu_id".equalsIgnoreCase(column) || "tbnuId".equalsIgnoreCase(column)) {
            return getTbnuId() == null ? "" : getTbnuId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbNotificationUiBean)) {
            return false;
        }

		TbNotificationUiBean obj = (TbNotificationUiBean) object;
		return new EqualsBuilder()
            .append(getTbnuName(), obj.getTbnuName())
            .append(getTbnuId(), obj.getTbnuId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbnuName())
            .append(getTbnuId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbnu_name", getTbnuName())
            .append("tbnu_id", getTbnuId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbNotificationUiBean obj = (TbNotificationUiBean) object;
        return new CompareToBuilder()
            .append(getTbnuName(), obj.getTbnuName())
            .append(getTbnuId(), obj.getTbnuId())
            .toComparison();
   }
}
