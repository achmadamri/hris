// ______________________________________________________
// Generated by sql2java - http://sql2java.sourceforge.net/
// jdbc driver used at code generation time: com.mysql.jdbc.Driver
//
// Please help us improve this tool by reporting:
// - problems and suggestions to
//   http://sourceforge.net/tracker/?group_id=54687
// - feedbacks and ideas on
//   http://sourceforge.net/forum/forum.php?forum_id=182208
// ______________________________________________________

package com.gwt.hris.db;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.commons.lang.builder.ToStringStyle;

/**
 * TbNotificationBean is a mapping of tb_notification Table.
 * @author sql2java
*/
public class TbNotificationBean
    implements Serializable, GeneratedBean
{
	private static final long serialVersionUID = 6451211771355238882L;
	
    private java.sql.Timestamp tbnReadDate;

    private boolean tbnReadDateIsModified = false;
    private boolean tbnReadDateIsInitialized = false;

    private java.sql.Timestamp tbnSentDate;

    private boolean tbnSentDateIsModified = false;
    private boolean tbnSentDateIsInitialized = false;

    private java.sql.Timestamp tbnCreateDate;

    private boolean tbnCreateDateIsModified = false;
    private boolean tbnCreateDateIsInitialized = false;

    private String tbnData;

    private boolean tbnDataIsModified = false;
    private boolean tbnDataIsInitialized = false;

    private Integer tbeIdTo;

    private boolean tbeIdToIsModified = false;
    private boolean tbeIdToIsInitialized = false;

    private Integer tbeIdFrom;

    private boolean tbeIdFromIsModified = false;
    private boolean tbeIdFromIsInitialized = false;

    private Integer tbnuId;

    private boolean tbnuIdIsModified = false;
    private boolean tbnuIdIsInitialized = false;

    private Integer tbntId;

    private boolean tbntIdIsModified = false;
    private boolean tbntIdIsInitialized = false;

    private Integer tbncId;

    private boolean tbncIdIsModified = false;
    private boolean tbncIdIsInitialized = false;

    private Integer tbnId;

    private boolean tbnIdIsModified = false;
    private boolean tbnIdIsInitialized = false;

    private boolean _isNew = true;

    /**
     * Prefered methods to create a TbNotificationBean is via the createTbNotificationBean method in TbNotificationManager or
     * via the factory class TbNotificationFactory create method
     */
    protected TbNotificationBean()
    {
    }

    /**
     * Getter method for tbnReadDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification.tbn_read_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbnReadDate
     */
    public java.sql.Timestamp getTbnReadDate()
    {
        return tbnReadDate;
    }

    /**
     * Setter method for tbnReadDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnReadDate
     */
    public void setTbnReadDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbnReadDate != null && (newVal.compareTo(tbnReadDate) == 0)) ||
            (newVal == null && tbnReadDate == null && tbnReadDateIsInitialized)) {
            return;
        }
        tbnReadDate = newVal;
        tbnReadDateIsModified = true;
        tbnReadDateIsInitialized = true;
    }

    /**
     * Setter method for tbnReadDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnReadDate
     */
    public void setTbnReadDate(long newVal)
    {
        setTbnReadDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbnReadDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnReadDateModified()
    {
        return tbnReadDateIsModified;
    }

    /**
     * Determines if the tbnReadDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnReadDateInitialized()
    {
        return tbnReadDateIsInitialized;
    }

    /**
     * Getter method for tbnSentDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification.tbn_sent_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbnSentDate
     */
    public java.sql.Timestamp getTbnSentDate()
    {
        return tbnSentDate;
    }

    /**
     * Setter method for tbnSentDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnSentDate
     */
    public void setTbnSentDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbnSentDate != null && (newVal.compareTo(tbnSentDate) == 0)) ||
            (newVal == null && tbnSentDate == null && tbnSentDateIsInitialized)) {
            return;
        }
        tbnSentDate = newVal;
        tbnSentDateIsModified = true;
        tbnSentDateIsInitialized = true;
    }

    /**
     * Setter method for tbnSentDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnSentDate
     */
    public void setTbnSentDate(long newVal)
    {
        setTbnSentDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbnSentDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnSentDateModified()
    {
        return tbnSentDateIsModified;
    }

    /**
     * Determines if the tbnSentDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnSentDateInitialized()
    {
        return tbnSentDateIsInitialized;
    }

    /**
     * Getter method for tbnCreateDate.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification.tbn_create_date</li>
     * <li>column size: 19</li>
     * <li>jdbc type returned by the driver: Types.TIMESTAMP</li>
     * </ul>
     *
     * @return the value of tbnCreateDate
     */
    public java.sql.Timestamp getTbnCreateDate()
    {
        return tbnCreateDate;
    }

    /**
     * Setter method for tbnCreateDate.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnCreateDate
     */
    public void setTbnCreateDate(java.sql.Timestamp newVal)
    {
        if ((newVal != null && tbnCreateDate != null && (newVal.compareTo(tbnCreateDate) == 0)) ||
            (newVal == null && tbnCreateDate == null && tbnCreateDateIsInitialized)) {
            return;
        }
        tbnCreateDate = newVal;
        tbnCreateDateIsModified = true;
        tbnCreateDateIsInitialized = true;
    }

    /**
     * Setter method for tbnCreateDate.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnCreateDate
     */
    public void setTbnCreateDate(long newVal)
    {
        setTbnCreateDate(new java.sql.Timestamp(newVal));
    }

    /**
     * Determines if the tbnCreateDate has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnCreateDateModified()
    {
        return tbnCreateDateIsModified;
    }

    /**
     * Determines if the tbnCreateDate has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnCreateDateInitialized()
    {
        return tbnCreateDateIsInitialized;
    }

    /**
     * Getter method for tbnData.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification.tbn_data</li>
     * <li>column size: 5000</li>
     * <li>jdbc type returned by the driver: Types.VARCHAR</li>
     * </ul>
     *
     * @return the value of tbnData
     */
    public String getTbnData()
    {
        return tbnData;
    }

    /**
     * Setter method for tbnData.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnData
     */
    public void setTbnData(String newVal)
    {
        if ((newVal != null && tbnData != null && (newVal.compareTo(tbnData) == 0)) ||
            (newVal == null && tbnData == null && tbnDataIsInitialized)) {
            return;
        }
        tbnData = newVal;
        tbnDataIsModified = true;
        tbnDataIsInitialized = true;
    }

    /**
     * Determines if the tbnData has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnDataModified()
    {
        return tbnDataIsModified;
    }

    /**
     * Determines if the tbnData has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnDataInitialized()
    {
        return tbnDataIsInitialized;
    }

    /**
     * Getter method for tbeIdTo.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification.tbe_id_to</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeIdTo
     */
    public Integer getTbeIdTo()
    {
        return tbeIdTo;
    }

    /**
     * Setter method for tbeIdTo.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeIdTo
     */
    public void setTbeIdTo(Integer newVal)
    {
        if ((newVal != null && tbeIdTo != null && (newVal.compareTo(tbeIdTo) == 0)) ||
            (newVal == null && tbeIdTo == null && tbeIdToIsInitialized)) {
            return;
        }
        tbeIdTo = newVal;
        tbeIdToIsModified = true;
        tbeIdToIsInitialized = true;
    }

    /**
     * Setter method for tbeIdTo.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeIdTo
     */
    public void setTbeIdTo(int newVal)
    {
        setTbeIdTo(new Integer(newVal));
    }

    /**
     * Determines if the tbeIdTo has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdToModified()
    {
        return tbeIdToIsModified;
    }

    /**
     * Determines if the tbeIdTo has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdToInitialized()
    {
        return tbeIdToIsInitialized;
    }

    /**
     * Getter method for tbeIdFrom.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification.tbe_id_from</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbeIdFrom
     */
    public Integer getTbeIdFrom()
    {
        return tbeIdFrom;
    }

    /**
     * Setter method for tbeIdFrom.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbeIdFrom
     */
    public void setTbeIdFrom(Integer newVal)
    {
        if ((newVal != null && tbeIdFrom != null && (newVal.compareTo(tbeIdFrom) == 0)) ||
            (newVal == null && tbeIdFrom == null && tbeIdFromIsInitialized)) {
            return;
        }
        tbeIdFrom = newVal;
        tbeIdFromIsModified = true;
        tbeIdFromIsInitialized = true;
    }

    /**
     * Setter method for tbeIdFrom.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbeIdFrom
     */
    public void setTbeIdFrom(int newVal)
    {
        setTbeIdFrom(new Integer(newVal));
    }

    /**
     * Determines if the tbeIdFrom has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbeIdFromModified()
    {
        return tbeIdFromIsModified;
    }

    /**
     * Determines if the tbeIdFrom has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbeIdFromInitialized()
    {
        return tbeIdFromIsInitialized;
    }

    /**
     * Getter method for tbnuId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification.tbnu_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbnuId
     */
    public Integer getTbnuId()
    {
        return tbnuId;
    }

    /**
     * Setter method for tbnuId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnuId
     */
    public void setTbnuId(Integer newVal)
    {
        if ((newVal != null && tbnuId != null && (newVal.compareTo(tbnuId) == 0)) ||
            (newVal == null && tbnuId == null && tbnuIdIsInitialized)) {
            return;
        }
        tbnuId = newVal;
        tbnuIdIsModified = true;
        tbnuIdIsInitialized = true;
    }

    /**
     * Setter method for tbnuId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnuId
     */
    public void setTbnuId(int newVal)
    {
        setTbnuId(new Integer(newVal));
    }

    /**
     * Determines if the tbnuId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnuIdModified()
    {
        return tbnuIdIsModified;
    }

    /**
     * Determines if the tbnuId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnuIdInitialized()
    {
        return tbnuIdIsInitialized;
    }

    /**
     * Getter method for tbntId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification.tbnt_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbntId
     */
    public Integer getTbntId()
    {
        return tbntId;
    }

    /**
     * Setter method for tbntId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbntId
     */
    public void setTbntId(Integer newVal)
    {
        if ((newVal != null && tbntId != null && (newVal.compareTo(tbntId) == 0)) ||
            (newVal == null && tbntId == null && tbntIdIsInitialized)) {
            return;
        }
        tbntId = newVal;
        tbntIdIsModified = true;
        tbntIdIsInitialized = true;
    }

    /**
     * Setter method for tbntId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbntId
     */
    public void setTbntId(int newVal)
    {
        setTbntId(new Integer(newVal));
    }

    /**
     * Determines if the tbntId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbntIdModified()
    {
        return tbntIdIsModified;
    }

    /**
     * Determines if the tbntId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbntIdInitialized()
    {
        return tbntIdIsInitialized;
    }

    /**
     * Getter method for tbncId.
     * <br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification.tbnc_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbncId
     */
    public Integer getTbncId()
    {
        return tbncId;
    }

    /**
     * Setter method for tbncId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbncId
     */
    public void setTbncId(Integer newVal)
    {
        if ((newVal != null && tbncId != null && (newVal.compareTo(tbncId) == 0)) ||
            (newVal == null && tbncId == null && tbncIdIsInitialized)) {
            return;
        }
        tbncId = newVal;
        tbncIdIsModified = true;
        tbncIdIsInitialized = true;
    }

    /**
     * Setter method for tbncId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbncId
     */
    public void setTbncId(int newVal)
    {
        setTbncId(new Integer(newVal));
    }

    /**
     * Determines if the tbncId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbncIdModified()
    {
        return tbncIdIsModified;
    }

    /**
     * Determines if the tbncId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbncIdInitialized()
    {
        return tbncIdIsInitialized;
    }

    /**
     * Getter method for tbnId.
     * <br>
     * PRIMARY KEY.<br>
     * Meta Data Information (in progress):
     * <ul>
     * <li>full name: tb_notification.tbn_id</li>
     * <li>column size: 10</li>
     * <li>jdbc type returned by the driver: Types.INTEGER</li>
     * </ul>
     *
     * @return the value of tbnId
     */
    public Integer getTbnId()
    {
        return tbnId;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * The new value is set only if compareTo() says it is different,
     * or if one of either the new value or the current value is null.
     * In case the new value is different, it is set and the field is marked as 'modified'.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(Integer newVal)
    {
        if ((newVal != null && tbnId != null && (newVal.compareTo(tbnId) == 0)) ||
            (newVal == null && tbnId == null && tbnIdIsInitialized)) {
            return;
        }
        tbnId = newVal;
        tbnIdIsModified = true;
        tbnIdIsInitialized = true;
    }

    /**
     * Setter method for tbnId.
     * <br>
     * Convenient for those who do not want to deal with Objects for primary types.
     *
     * @param newVal the new value to be assigned to tbnId
     */
    public void setTbnId(int newVal)
    {
        setTbnId(new Integer(newVal));
    }

    /**
     * Determines if the tbnId has been modified.
     *
     * @return true if the field has been modified, false if the field has not been modified
     */
    public boolean isTbnIdModified()
    {
        return tbnIdIsModified;
    }

    /**
     * Determines if the tbnId has been initialized.
     * <br>
     * It is useful to determine if a field is null on purpose or just because it has not been initialized.
     *
     * @return true if the field has been initialized, false otherwise
     */
    public boolean isTbnIdInitialized()
    {
        return tbnIdIsInitialized;
    }

    /**
     * Determines if the current object is new.
     *
     * @return true if the current object is new, false if the object is not new
     */
    public boolean isNew()
    {
        return _isNew;
    }

    /**
     * Specifies to the object if it has been set as new.
     *
     * @param isNew the boolean value to be assigned to the isNew field
     */
    public void isNew(boolean isNew)
    {
        this._isNew = isNew;
    }

    /**
     * Determines if the object has been modified since the last time this method was called.
     * <br>
     * We can also determine if this object has ever been modified since its creation.
     *
     * @return true if the object has been modified, false if the object has not been modified
     */
    public boolean isModified()
    {
        return tbnReadDateIsModified 		|| tbnSentDateIsModified  		|| tbnCreateDateIsModified  		|| tbnDataIsModified  		|| tbeIdToIsModified  		|| tbeIdFromIsModified  		|| tbnuIdIsModified  		|| tbntIdIsModified  		|| tbncIdIsModified  		|| tbnIdIsModified  ;
    }

    /**
     * Resets the object modification status to 'not modified'.
     */
    public void resetIsModified()
    {
        tbnReadDateIsModified = false;
        tbnSentDateIsModified = false;
        tbnCreateDateIsModified = false;
        tbnDataIsModified = false;
        tbeIdToIsModified = false;
        tbeIdFromIsModified = false;
        tbnuIdIsModified = false;
        tbntIdIsModified = false;
        tbncIdIsModified = false;
        tbnIdIsModified = false;
    }

    /**
     * Copies the passed bean into the current bean.
     *
     * @param bean the bean to copy into the current bean
     */
    public void copy(TbNotificationBean bean)
    {
        setTbnReadDate(bean.getTbnReadDate());
        setTbnSentDate(bean.getTbnSentDate());
        setTbnCreateDate(bean.getTbnCreateDate());
        setTbnData(bean.getTbnData());
        setTbeIdTo(bean.getTbeIdTo());
        setTbeIdFrom(bean.getTbeIdFrom());
        setTbnuId(bean.getTbnuId());
        setTbntId(bean.getTbntId());
        setTbncId(bean.getTbncId());
        setTbnId(bean.getTbnId());
    }

    /**
     * return a dictionnary of the object
     */
    public Map getDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbn_read_date", getTbnReadDate() == null ? "" : getTbnReadDate().toString());
        dictionnary.put("tbn_sent_date", getTbnSentDate() == null ? "" : getTbnSentDate().toString());
        dictionnary.put("tbn_create_date", getTbnCreateDate() == null ? "" : getTbnCreateDate().toString());
        dictionnary.put("tbn_data", getTbnData() == null ? "" : getTbnData().toString());
        dictionnary.put("tbe_id_to", getTbeIdTo() == null ? "" : getTbeIdTo().toString());
        dictionnary.put("tbe_id_from", getTbeIdFrom() == null ? "" : getTbeIdFrom().toString());
        dictionnary.put("tbnu_id", getTbnuId() == null ? "" : getTbnuId().toString());
        dictionnary.put("tbnt_id", getTbntId() == null ? "" : getTbntId().toString());
        dictionnary.put("tbnc_id", getTbncId() == null ? "" : getTbncId().toString());
        dictionnary.put("tbn_id", getTbnId() == null ? "" : getTbnId().toString());
        return dictionnary;
    }

    /**
     * return a dictionnary of the pk columns
     */
    public Map getPkDictionnary()
    {
        Map dictionnary = new HashMap();
        dictionnary.put("tbn_id", getTbnId() == null ? "" : getTbnId().toString());
        return dictionnary;
    }

    /**
     * return a the value string representation of the given field
     */
    public String getValue(String column)
    {
        if (null == column || "".equals(column)) {
            return "";
        } else if ("tbn_read_date".equalsIgnoreCase(column) || "tbnReadDate".equalsIgnoreCase(column)) {
            return getTbnReadDate() == null ? "" : getTbnReadDate().toString();
        } else if ("tbn_sent_date".equalsIgnoreCase(column) || "tbnSentDate".equalsIgnoreCase(column)) {
            return getTbnSentDate() == null ? "" : getTbnSentDate().toString();
        } else if ("tbn_create_date".equalsIgnoreCase(column) || "tbnCreateDate".equalsIgnoreCase(column)) {
            return getTbnCreateDate() == null ? "" : getTbnCreateDate().toString();
        } else if ("tbn_data".equalsIgnoreCase(column) || "tbnData".equalsIgnoreCase(column)) {
            return getTbnData() == null ? "" : getTbnData().toString();
        } else if ("tbe_id_to".equalsIgnoreCase(column) || "tbeIdTo".equalsIgnoreCase(column)) {
            return getTbeIdTo() == null ? "" : getTbeIdTo().toString();
        } else if ("tbe_id_from".equalsIgnoreCase(column) || "tbeIdFrom".equalsIgnoreCase(column)) {
            return getTbeIdFrom() == null ? "" : getTbeIdFrom().toString();
        } else if ("tbnu_id".equalsIgnoreCase(column) || "tbnuId".equalsIgnoreCase(column)) {
            return getTbnuId() == null ? "" : getTbnuId().toString();
        } else if ("tbnt_id".equalsIgnoreCase(column) || "tbntId".equalsIgnoreCase(column)) {
            return getTbntId() == null ? "" : getTbntId().toString();
        } else if ("tbnc_id".equalsIgnoreCase(column) || "tbncId".equalsIgnoreCase(column)) {
            return getTbncId() == null ? "" : getTbncId().toString();
        } else if ("tbn_id".equalsIgnoreCase(column) || "tbnId".equalsIgnoreCase(column)) {
            return getTbnId() == null ? "" : getTbnId().toString();
        }
        return "";
    }

    /**
     * @see java.lang.Object#equals(Object)
     */
    public boolean equals(Object object)
    {
        if (!(object instanceof TbNotificationBean)) {
            return false;
        }

		TbNotificationBean obj = (TbNotificationBean) object;
		return new EqualsBuilder()
            .append(getTbnReadDate(), obj.getTbnReadDate())
            .append(getTbnSentDate(), obj.getTbnSentDate())
            .append(getTbnCreateDate(), obj.getTbnCreateDate())
            .append(getTbnData(), obj.getTbnData())
            .append(getTbeIdTo(), obj.getTbeIdTo())
            .append(getTbeIdFrom(), obj.getTbeIdFrom())
            .append(getTbnuId(), obj.getTbnuId())
            .append(getTbntId(), obj.getTbntId())
            .append(getTbncId(), obj.getTbncId())
            .append(getTbnId(), obj.getTbnId())
            .isEquals();
	}

	/**
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode()
	{
		return new HashCodeBuilder(-82280557, -700257973)
            .append(getTbnReadDate())
            .append(getTbnSentDate())
            .append(getTbnCreateDate())
            .append(getTbnData())
            .append(getTbeIdTo())
            .append(getTbeIdFrom())
            .append(getTbnuId())
            .append(getTbntId())
            .append(getTbncId())
            .append(getTbnId())
            .toHashCode();
	}

	/**
	 * @see java.lang.Object#toString()
	 */
	public String toString()
	{
	    return toString(ToStringStyle.MULTI_LINE_STYLE);
	}

	/**
	 * you can use the following styles:
	 * <li>ToStringStyle.DEFAULT_STYLE</li>
	 * <li>ToStringStyle.MULTI_LINE_STYLE</li>
     * <li>ToStringStyle.NO_FIELD_NAMES_STYLE</li>
     * <li>ToStringStyle.SHORT_PREFIX_STYLE</li>
     * <li>ToStringStyle.SIMPLE_STYLE</li>
	 */
	public String toString(ToStringStyle style) {
		return new ToStringBuilder(this, style)
            .append("tbn_read_date", getTbnReadDate())
            .append("tbn_sent_date", getTbnSentDate())
            .append("tbn_create_date", getTbnCreateDate())
            .append("tbn_data", getTbnData())
            .append("tbe_id_to", getTbeIdTo())
            .append("tbe_id_from", getTbeIdFrom())
            .append("tbnu_id", getTbnuId())
            .append("tbnt_id", getTbntId())
            .append("tbnc_id", getTbncId())
            .append("tbn_id", getTbnId())
            .toString();
	}


    public int compareTo(Object object)
    {
        TbNotificationBean obj = (TbNotificationBean) object;
        return new CompareToBuilder()
            .append(getTbnReadDate(), obj.getTbnReadDate())
            .append(getTbnSentDate(), obj.getTbnSentDate())
            .append(getTbnCreateDate(), obj.getTbnCreateDate())
            .append(getTbnData(), obj.getTbnData())
            .append(getTbeIdTo(), obj.getTbeIdTo())
            .append(getTbeIdFrom(), obj.getTbeIdFrom())
            .append(getTbnuId(), obj.getTbnuId())
            .append(getTbntId(), obj.getTbntId())
            .append(getTbncId(), obj.getTbncId())
            .append(getTbnId(), obj.getTbnId())
            .toComparison();
   }
}
